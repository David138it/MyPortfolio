Mail for feedback: David138it@gmail.com

Sql
  Task:
  В таблицах "Командировки", "Нарушения правил дорожного движения" рассмотреть основные понятия реляционной модели, а также различные виды SQL запросов к одной таблице базы данных. В базе данных "Книжный интернет-магазин" рассмотреть связи между таблицами реляционной базы данных, а также различные виды запросов, построенных на связанных таблица. В базе данных "Тестирование", "Абитуриент", "Аналитика образовательных курсов" рассмотреть несколько предметных областей, для каждой строится логическая модель базы данных. К каждой предметной области формулируются задания, которые можно выполнить запросами SQL.
  Task:
  Создать таблицу командировки, в которой представлена информация о командировках сотрудников какой-либо организации (фамилия сотрудника, город, куда он ездил, размер суточных, даты первого и последнего дня командировки)
  Decision:
  mysql> CREATE TABLE trip (
  trip_id INT PRIMARY KEY AUTO_INCREMENT,
  name VARCHAR(30),
  city VARCHAR(25),
  per_diem DECIMAL(8, 2),
  date_first DATE,
  date_last DATE
  );
      Query OK, 0 rows affected (0.26 sec)
  mysql> INSERT INTO trip VALUES
  ("1", "Баранов П.Е.", "Москва", "700", "2020-01-12", "2020-01-17"),
  ("2", "Абрамова К.А.", "Владивосток", "450", "2020-01-14", "2020-01-27"),
  ("3", "Семенов И.В.", "Москва", "700", "2020-01-23", "2020-01-31"),
  ("4", "Ильиных Г.Р.", "Владивосток", "450", "2020-01-12", "2020-02-02"),
  ("5", "Колесов С.П.", "Москва", "700", "2020-02-01", "2020-02-06"),
  ("6", "Баранов П.Е.", "Москва", "700", "2020-02-14", "2020-02-22"),
  ("7", "Абрамова К.А.", "Москва", "700", "2020-02-23", "2020-03-01"),
  ("8", "Лебедев Т.К.", "Москва", "700", "2020-03-03", "2020-03-06"),
  ("9", "Колесов С.П.", "Новосибирск", "450", "2020-02-27", "2020-03-12"),
  ("10", "Семенов И.В.", "Санкт-Петербург", "700", "2020-03-29", "2020-04-05"),
  ("11", "Абрамова К.А.", "Москва", "700", "2020-04-06", "2020-04-14"),
  ("12", "Баранов П.Е.", "Новосибирск", "450", "2020-04-18", "2020-05-04"),
  ("13", "Лебедев Т.К.", "Томск", "450", "2020-05-20", "2020-05-31"),
  ("14", "Семенов И.В.", "Санкт-Петербург", "700", "2020-06-01", "2020-06-03"),
  ("15", "Абрамова К.А.", "Санкт-Петербург", "700", "2020-05-28", "2020-06-04"),
  ("16", "Федорова А.Ю.", "Новосибирск", "450", "2020-05-25", "2020-06-04"),
  ("17", "Колесов С.П.", "Новосибирск", "450", "2020-06-03", "2020-06-12"),
  ("18", "Федорова А.Ю.", "Томск", "450", "2020-06-20", "2020-06-26"),
  ("19", "Абрамова К.А.", "Владивосток", "450", "2020-07-02", "2020-07-13"),
  ("20", "Баранов П.Е.", "Воронеж", "450", "2020-07-19", "2020-07-25");
  mysql> SELECT * FROM trip;
      +---------+-------------------------+-------------------------------+----------+------------+------------+
      | trip_id | name                    | city                          | per_diem | date_first | date_last  |
      +---------+-------------------------+-------------------------------+----------+------------+------------+
      |       1 | Баранов П.Е.            | Москва                        |   700.00 | 2020-01-12 | 2020-01-17 |
      |       2 | Абрамова К.А.           | Владивосток                   |   450.00 | 2020-01-14 | 2020-01-27 |
      |       3 | Семенов И.В.            | Москва                        |   700.00 | 2020-01-23 | 2020-01-31 |
      |       4 | Ильиных Г.Р.            | Владивосток                   |   450.00 | 2020-01-12 | 2020-02-02 |
      |       5 | Колесов С.П.            | Москва                        |   700.00 | 2020-02-01 | 2020-02-06 |
      |       6 | Баранов П.Е.            | Москва                        |   700.00 | 2020-02-14 | 2020-02-22 |
      |       7 | Абрамова К.А.           | Москва                        |   700.00 | 2020-02-23 | 2020-03-01 |
      |       8 | Лебедев Т.К.            | Москва                        |   700.00 | 2020-03-03 | 2020-03-06 |
      |       9 | Колесов С.П.            | Новосибирск                   |   450.00 | 2020-02-27 | 2020-03-12 |
      |      10 | Семенов И.В.            | Санкт-Петербург               |   700.00 | 2020-03-29 | 2020-04-05 |
      |      11 | Абрамова К.А.           | Москва                        |   700.00 | 2020-04-06 | 2020-04-14 |
      |      12 | Баранов П.Е.            | Новосибирск                   |   450.00 | 2020-04-18 | 2020-05-04 |
      |      13 | Лебедев Т.К.            | Томск                         |   450.00 | 2020-05-20 | 2020-05-31 |
      |      14 | Семенов И.В.            | Санкт-Петербург               |   700.00 | 2020-06-01 | 2020-06-03 |
      |      15 | Абрамова К.А.           | Санкт-Петербург               |   700.00 | 2020-05-28 | 2020-06-04 |
      |      16 | Федорова А.Ю.           | Новосибирск                   |   450.00 | 2020-05-25 | 2020-06-04 |
      |      17 | Колесов С.П.            | Новосибирск                   |   450.00 | 2020-06-03 | 2020-06-12 |
      |      18 | Федорова А.Ю.           | Томск                         |   450.00 | 2020-06-20 | 2020-06-26 |
      |      19 | Абрамова К.А.           | Владивосток                   |   450.00 | 2020-07-02 | 2020-07-13 |
      |      20 | Баранов П.Е.            | Воронеж                       |   450.00 | 2020-07-19 | 2020-07-25 |
      +---------+-------------------------+-------------------------------+----------+------------+------------+
      20 rows in set (0.00 sec)
  Task:
  Вывести из таблицы trip информацию о командировках тех сотрудников, фамилия которых заканчивается на букву «а», в отсортированном по убыванию даты последнего дня командировки виде. В результат включить столбцы name, city, per_diem, date_first, date_last.
  Decision:
  mysql> SELECT name, city, per_diem, date_first, date_last
  FROM trip
  WHERE name LtuserE '%а %'
  ORDER BY date_last DESC;
      +-------------------------+-------------------------------+----------+------------+------------+
      | name                    | city                          | per_diem | date_first | date_last  |
      +-------------------------+-------------------------------+----------+------------+------------+
      | Абрамова К.А.           | Владивосток                   |   450.00 | 2020-07-02 | 2020-07-13 |
      | Федорова А.Ю.           | Томск                         |   450.00 | 2020-06-20 | 2020-06-26 |
      | Абрамова К.А.           | Санкт-Петербург               |   700.00 | 2020-05-28 | 2020-06-04 |
      | Федорова А.Ю.           | Новосибирск                   |   450.00 | 2020-05-25 | 2020-06-04 |
      | Абрамова К.А.           | Москва                        |   700.00 | 2020-04-06 | 2020-04-14 |
      | Абрамова К.А.           | Москва                        |   700.00 | 2020-02-23 | 2020-03-01 |
      | Абрамова К.А.           | Владивосток                   |   450.00 | 2020-01-14 | 2020-01-27 |
      +-------------------------+-------------------------------+----------+------------+------------+
      7 rows in set (0.01 sec)
  Task:
  Вывести в алфавитном порядке фамилии и инициалы тех сотрудников, которые были в командировке в Москве.
  Decision:
  mysql> SELECT DISTINCT name
  FROM trip
  WHERE city = 'Москва'
  ORDER BY name ASC;
      +-------------------------+
      | name                    |
      +-------------------------+
      | Абрамова К.А.           |
      | Баранов П.Е.            |
      | Колесов С.П.            |
      | Лебедев Т.К.            |
      | Семенов И.В.            |
      +-------------------------+
      5 rows in set (0.00 sec)
  Task:
  Для каждого города посчитать, сколько раз сотрудники в нем были.  Информацию вывести в отсортированном в алфавитном порядке по названию городов. Вычисляемый столбец назвать Количество.
  Decision:
  mysql> SELECT city, COUNT(name) AS Количество
  FROM trip
  GROUP BY city
  ORDER BY city ASC;
      +-------------------------------+----------------------+
      | city                          | Количество           |
      +-------------------------------+----------------------+
      | Владивосток                   |                    3 |
      | Воронеж                       |                    1 |
      | Москва                        |                    7 |
      | Новосибирск                   |                    4 |
      | Санкт-Петербург               |                    3 |
      | Томск                         |                    2 |
      +-------------------------------+----------------------+
      6 rows in set (0.01 sec)
  Task:
  Вывести два города, в которых чаще всего были в командировках сотрудники. Вычисляемый столбец назвать Количество.
  Decision:
  mysql> SELECT city, COUNT(name) AS Количество
  FROM trip
  GROUP BY city
  ORDER BY Количество DESC
  LIMIT 2;
      +------------------------+----------------------+
      | city                   | Количество           |
      +------------------------+----------------------+
      | Москва                 |                    7 |
      | Новосибирск            |                    4 |
      +------------------------+----------------------+
      2 rows in set (0.01 sec)
  Task:
  Вывести информацию о командировках во все города кроме Москвы и Санкт-Петербурга (фамилии и инициалы сотрудников, город ,  длительность командировки в днях, при этом первый и последний день относится к периоду командировки). Последний столбец назвать Длительность. Информацию вывести в упорядоченном по убыванию длительности поездки, а потом по убыванию названий городов (в обратном алфавитном порядке).
  Decision:
  mysql> SELECT name, city, (DATEDIFF(date_last, date_first)+1) AS Длительность
  FROM trip
  WHERE city <> 'Москва' AND city <> 'Санкт-Петербург'
  ORDER BY Длительность DESC;
      +-------------------------+------------------------+--------------------------+
      | name                    | city                   | Длительность             |
      +-------------------------+------------------------+--------------------------+
      | Ильиных Г.Р.            | Владивосток            |                       22 |
      | Баранов П.Е.            | Новосибирск            |                       17 |
      | Колесов С.П.            | Новосибирск            |                       15 |
      | Абрамова К.А.           | Владивосток            |                       14 |
      | Абрамова К.А.           | Владивосток            |                       12 |
      | Лебедев Т.К.            | Томск                  |                       12 |
      | Федорова А.Ю.           | Новосибирск            |                       11 |
      | Колесов С.П.            | Новосибирск            |                       10 |
      | Баранов П.Е.            | Воронеж                |                        7 |
      | Федорова А.Ю.           | Томск                  |                        7 |
      +-------------------------+------------------------+--------------------------+
      10 rows in set (0.00 sec)
  Task:
  Вывести информацию о командировках сотрудника(ов), которые были самыми короткими по времени. В результат включить столбцы name, city, date_first, date_last.
  Decision:
  mysql> SELECT name, city, date_first, date_last
  FROM trip
  WHERE DATEDIFF(date_last,date_first)=(
  SELECT MIN(DATEDIFF(date_last,date_first))
  FROM trip);
      +-----------------------+-------------------------------+------------+------------+
      | name                  | city                          | date_first | date_last  |
      +-----------------------+-------------------------------+------------+------------+
      | Семенов И.В.          | Санкт-Петербург               | 2020-06-01 | 2020-06-03 |
      +-----------------------+-------------------------------+------------+------------+
      1 row in set (0.03 sec)
  Task:
  Вывести информацию о командировках, начало и конец которых относятся к одному месяцу (год может быть любой). В результат включить столбцы name, city, date_first, date_last. Строки отсортировать сначала  в алфавитном порядке по названию города, а затем по фамилии сотрудника .
  Decision:
  mysql> SELECT name, city, date_first, date_last
  FROM trip  
  WHERE MONTH(date_first)=MONTH(date_last)
  ORDER BY city, name ASC;
      +-------------------------+-------------------------------+------------+------------+
      | name                    | city                          | date_first | date_last  |
      +-------------------------+-------------------------------+------------+------------+
      | Абрамова К.А.           | Владивосток                   | 2020-01-14 | 2020-01-27 |
      | Абрамова К.А.           | Владивосток                   | 2020-07-02 | 2020-07-13 |
      | Баранов П.Е.            | Воронеж                       | 2020-07-19 | 2020-07-25 |
      | Абрамова К.А.           | Москва                        | 2020-04-06 | 2020-04-14 |
      | Баранов П.Е.            | Москва                        | 2020-01-12 | 2020-01-17 |
      | Баранов П.Е.            | Москва                        | 2020-02-14 | 2020-02-22 |
      | Колесов С.П.            | Москва                        | 2020-02-01 | 2020-02-06 |
      | Лебедев Т.К.            | Москва                        | 2020-03-03 | 2020-03-06 |
      | Семенов И.В.            | Москва                        | 2020-01-23 | 2020-01-31 |
      | Колесов С.П.            | Новосибирск                   | 2020-06-03 | 2020-06-12 |
      | Семенов И.В.            | Санкт-Петербург               | 2020-06-01 | 2020-06-03 |
      | Лебедев Т.К.            | Томск                         | 2020-05-20 | 2020-05-31 |
      | Федорова А.Ю.           | Томск                         | 2020-06-20 | 2020-06-26 |
      +-------------------------+-------------------------------+------------+------------+
      13 rows in set (0.00 sec)
  Task:
  Вывести название месяца и количество командировок для каждого месяца. Считаем, что командировка относится к некоторому месяцу, если она началась в этом месяце. Информацию вывести сначала в отсортированном по убыванию количества, а потом в алфавитном порядке по названию месяца виде. Название столбцов – Месяц и Количество.
  Decision:
  mysql> SELECT MONTHNAME(date_first) AS Месяц, COUNT(name) AS Количество
  FROM trip
  GROUP BY Месяц
  ORDER BY Количество DESC, Месяц ASC;
      +------------+----------------------+
      | Месяц      | Количество           |
      +------------+----------------------+
      | February   |                    4 |
      | January    |                    4 |
      | June       |                    3 |
      | May        |                    3 |
      | April      |                    2 |
      | July       |                    2 |
      | March      |                    2 |
      +------------+----------------------+
      7 rows in set (0.01 sec)
  Task:
  Вывести сумму суточных (произведение количества дней командировки и размера суточных) для командировок, первый день которых пришелся на февраль или март 2020 года. Значение суточных для каждой командировки занесено в столбец per_diem. Вывести фамилию и инициалы сотрудника, город, первый день командировки и сумму суточных. Последний столбец назвать Сумма. Информацию отсортировать сначала  в алфавитном порядке по фамилиям сотрудников, а затем по убыванию суммы суточных.
  Decision:
  mysql> SELECT name, city, date_first, (DATEDIFF(date_last, date_first)+1)*per_diem AS Сумма
  FROM trip
  WHERE YEAR(date_first)=2020 AND MONTH(date_first)=3 OR MONTH(date_first)=2
  ORDER BY name,Сумма DESC;
      +-------------------------+-------------------------------+------------+------------+
      | name                    | city                          | date_first | Сумма      |
      +-------------------------+-------------------------------+------------+------------+
      | Абрамова К.А.           | Москва                        | 2020-02-23 |    5600.00 |
      | Баранов П.Е.            | Москва                        | 2020-02-14 |    6300.00 |
      | Колесов С.П.            | Новосибирск                   | 2020-02-27 |    6750.00 |
      | Колесов С.П.            | Москва                        | 2020-02-01 |    4200.00 |
      | Лебедев Т.К.            | Москва                        | 2020-03-03 |    2800.00 |
      | Семенов И.В.            | Санкт-Петербург               | 2020-03-29 |    5600.00 |
      +-------------------------+-------------------------------+------------+------------+
      6 rows in set (0.01 sec)
  Task:
  Вывести фамилию с инициалами и общую сумму суточных, полученных за все командировки для тех сотрудников, которые были в командировках больше чем 3 раза, в отсортированном по убыванию сумм суточных виде. Последний столбец назвать Сумма.
  Decision:
  mysql> SELECT name, SUM((DATEDIFF(date_last, date_first)+1)*per_diem) AS Сумма
  FROM trip
  GROUP BY name
  HAVING COUNT(name)>3
  ORDER BY Сумма DESC;
      +-------------------------+------------+
      | name                    | Сумма      |
      +-------------------------+------------+
      | Абрамова К.А.           |   29200.00 |
      | Баранов П.Е.            |   21300.00 |
      +-------------------------+------------+
      2 rows in set (0.00 sec)
  Task:
  Создать таблицу штрафов содержит информацию о штрафах, начисленных водителям за нарушения правил дорожного движения (имя водителя, номер автомобиля, описание нарушения, сумма штрафа, дата нарушения и дата оплаты штрафа).
  Создать таблицу fine следующей структуры:
  fine_id - ключевой столбец целого типа с автоматическим увеличением значения ключа на 1
  name - строка длиной 30
  number_plate - строка длиной 6
  violation - строка длиной 50
  sum_fine - вещественное число, максимальная длина 8, количество знаков после запятой 2
  date_violation - дата
  date_payment - дата
  Decision:
  mysql> CREATE TABLE fine(fine_id INT PRIMARY KEY AUTO_INCREMENT, name VARCHAR(30), number_plate VARCHAR(6), violation VARCHAR(50), sum_fine DECIMAL(8,2), date_violation DATE, date_payment DATE);
      Query OK, 0 rows affected (0.33 sec)
  Task:
  В таблицу fine первые 5 строк уже занесены. Добавить в таблицу записи с ключевыми значениями 6, 7, 8.
  fine_id     name    number_plate    violation   sum_fine    date_violation  date_payment
  1   Баранов П.Е.    Р523ВТ  Превышение скорости (от 40 до 60)   500.00  2020-01-12  2020-01-17
  2   Абрамова К.А.   О111АВ  Проезд на запрещающий сигнал  1000.00     2020-01-14  2020-02-27
  3   Яковлев Г.Р.    Т330ТТ  Превышение скорости (от 20 до 40)   500.00  2020-01-23  2020-02-23
  4   Яковлев Г.Р.    М701АА  Превышение скорости (от 20 до 40)       2020-01-12   
  5   Колесов С.П.    К892АХ  Превышение скорости (от 20 до 40)       2020-02-01   
  6   Баранов П.Е.    Р523ВТ  Превышение скорости (от 40 до 60)       2020-02-14   
  7   Абрамова К.А.   О111АВ  Проезд на запрещающий сигнал      2020-02-23   
  8   Яковлев Г.Р.    Т330ТТ  Проезд на запрещающий сигнал      2020-03-03   
  Decision:
  mysql> INSERT INTO fine (name, number_plate, violation, sum_fine, date_violation, date_payment) VALUES
  ('Баранов П.Е.', 'Р523ВТ', 'Превышение скорости(от 40 до 60)', 500.00, '2020-01-12', '2020-01-17'),
  ('Абрамова К.А.', 'О111АВ', 'Проезд на запрещающий сигнал', 1000.00, '2020-01-14', '2020-02-27'),
  ('Яковлев Г.Р.', 'Т330ТТ', 'Превышение скорости(от 20 до 40)', 500.00, '2020-01-23', '2020-02-23'),
  ('Яковлев Г.Р.', 'М701АА', 'Превышение скорости(от 20 до 40)', Null, '2020-01-12', Null),
  ('Колесов С.П.', 'К892АХ', 'Превышение скорости(от 20 до 40)', Null, '2020-02-01', Null);
      Query OK, 5 rows affected (0.19 sec)
      Records: 5  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM fine;
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      | fine_id | name                    | number_plate | violation                                              | sum_fine | date_violation | date_payment |
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      |       1 | Баранов П.Е.            | Р523ВТ       | Превышение скорости(от 40 до 60)                       |   500.00 | 2020-01-12     | 2020-01-17   |
      |       2 | Абрамова К.А.           | О111АВ       | Проезд на запрещающий сигнал                           |  1000.00 | 2020-01-14     | 2020-02-27   |
      |       3 | Яковлев Г.Р.            | Т330ТТ       | Превышение скорости(от 20 до 40)                       |   500.00 | 2020-01-23     | 2020-02-23   |
      |       4 | Яковлев Г.Р.            | М701АА       | Превышение скорости(от 20 до 40)                       |     NULL | 2020-01-12     | NULL         |
      |       5 | Колесов С.П.            | К892АХ       | Превышение скорости(от 20 до 40)                       |     NULL | 2020-02-01     | NULL         |
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      5 rows in set (0.00 sec)
  mysql> INSERT INTO fine (name, number_plate, violation, sum_fine, date_violation, date_payment) VALUES
  ('Баранов П.Е.', 'Р523ВТ', 'Превышение скорости(от 40 до 60)', Null, '2020-02-14', Null),
  ('Абрамова К.А.', 'О111АВ', 'Проезд на запрещающий сигнал', Null, '2020-02-23', Null),
  ('Яковлев Г.Р.', 'Т330ТТ', 'Проезд на запрещающий сигнал', Null, '2020-03-03', Null);
      Query OK, 3 rows affected (0.03 sec)
      Records: 3  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM fine;
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      | fine_id | name                    | number_plate | violation                                              | sum_fine | date_violation | date_payment |
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      |       1 | Баранов П.Е.            | Р523ВТ       | Превышение скорости(от 40 до 60)                       |   500.00 | 2020-01-12     | 2020-01-17   |
      |       2 | Абрамова К.А.           | О111АВ       | Проезд на запрещающий сигнал                           |  1000.00 | 2020-01-14     | 2020-02-27   |
      |       3 | Яковлев Г.Р.            | Т330ТТ       | Превышение скорости(от 20 до 40)                       |   500.00 | 2020-01-23     | 2020-02-23   |
      |       4 | Яковлев Г.Р.            | М701АА       | Превышение скорости(от 20 до 40)                       |     NULL | 2020-01-12     | NULL         |
      |       5 | Колесов С.П.            | К892АХ       | Превышение скорости(от 20 до 40)                       |     NULL | 2020-02-01     | NULL         |
      |       6 | Баранов П.Е.            | Р523ВТ       | Превышение скорости(от 40 до 60)                       |     NULL | 2020-02-14     | NULL         |
      |       7 | Абрамова К.А.           | О111АВ       | Проезд на запрещающий сигнал                           |     NULL | 2020-02-23     | NULL         |
      |       8 | Яковлев Г.Р.            | Т330ТТ       | Проезд на запрещающий сигнал                           |     NULL | 2020-03-03     | NULL         |
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      8 rows in set (0.00 sec)
  Task:
  Занести в таблицу fine суммы штрафов, которые должен оплатить водитель, в соответствии с данными из таблицы traffic_violation. При этом суммы заносить только в пустые поля столбца  sum_fine.
      Таблица traffic_violationсоздана и заполнена.
  Важно! Сравнение значения столбца с пустым значением осуществляется с помощью оператора IS NULL.
  Decision:
  mysql> CREATE TABLE traffic_violation(violation_id INT PRIMARY KEY AUTO_INCREMENT, violation VARCHAR(50), sum_fine DECIMAL(8,2));
      Query OK, 0 rows affected (0.20 sec)
  mysql> INSERT INTO traffic_violation (violation, sum_fine) VALUES ('Превышение скорости(от 20 до 40)', 500.00 ), ('Превышение скорости(от 40 до 60)', 1000.00), ('Проезд на запрещающий сигнал', 1000.00);
      Query OK, 3 rows affected (0.12 sec)
      Records: 3  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM traffic_violation;
      +--------------+--------------------------------------------------------+----------+
      | violation_id | violation                                              | sum_fine |
      +--------------+--------------------------------------------------------+----------+
      |            1 | Превышение скорости(от 20 до 40)                       |   500.00 |
      |            2 | Превышение скорости(от 40 до 60)                       |  1000.00 |
      |            3 | Проезд на запрещающий сигнал                           |  1000.00 |
      +--------------+--------------------------------------------------------+----------+
      3 rows in set (0.00 sec)
  mysql> SELECT * FROM fine;
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      | fine_id | name                    | number_plate | violation                                              | sum_fine | date_violation | date_payment |
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      |       1 | Баранов П.Е.            | Р523ВТ       | Превышение скорости(от 40 до 60)                       |   500.00 | 2020-01-12     | 2020-01-17   |
      |       2 | Абрамова К.А.           | О111АВ       | Проезд на запрещающий сигнал                           |  1000.00 | 2020-01-14     | 2020-02-27   |
      |       3 | Яковлев Г.Р.            | Т330ТТ       | Превышение скорости(от 20 до 40)                       |   500.00 | 2020-01-23     | 2020-02-23   |
      |       4 | Яковлев Г.Р.            | М701АА       | Превышение скорости(от 20 до 40)                       |     NULL | 2020-01-12     | NULL         |
      |       5 | Колесов С.П.            | К892АХ       | Превышение скорости(от 20 до 40)                       |     NULL | 2020-02-01     | NULL         |
      |       6 | Баранов П.Е.            | Р523ВТ       | Превышение скорости(от 40 до 60)                       |     NULL | 2020-02-14     | NULL         |
      |       7 | Абрамова К.А.           | О111АВ       | Проезд на запрещающий сигнал                           |     NULL | 2020-02-23     | NULL         |
      |       8 | Яковлев Г.Р.            | Т330ТТ       | Проезд на запрещающий сигнал                           |     NULL | 2020-03-03     | NULL         |
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      8 rows in set (0.00 sec)
  mysql> UPDATE fine, traffic_violation
  SET fine.sum_fine=traffic_violation.sum_fine
  WHERE (fine.sum_fine IS NULL) AND (fine.violation=traffic_violation.violation);
      Query OK, 5 rows affected (0.02 sec)
      Rows matched: 5  Changed: 5  Warnings: 0
  mysql> SELECT * FROM fine;
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      | fine_id | name                    | number_plate | violation                                              | sum_fine | date_violation | date_payment |
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      |       1 | Баранов П.Е.            | Р523ВТ       | Превышение скорости(от 40 до 60)                       |   500.00 | 2020-01-12     | 2020-01-17   |
      |       2 | Абрамова К.А.           | О111АВ       | Проезд на запрещающий сигнал                           |  1000.00 | 2020-01-14     | 2020-02-27   |
      |       3 | Яковлев Г.Р.            | Т330ТТ       | Превышение скорости(от 20 до 40)                       |   500.00 | 2020-01-23     | 2020-02-23   |
      |       4 | Яковлев Г.Р.            | М701АА       | Превышение скорости(от 20 до 40)                       |   500.00 | 2020-01-12     | NULL         |
      |       5 | Колесов С.П.            | К892АХ       | Превышение скорости(от 20 до 40)                       |   500.00 | 2020-02-01     | NULL         |
      |       6 | Баранов П.Е.            | Р523ВТ       | Превышение скорости(от 40 до 60)                       |  1000.00 | 2020-02-14     | NULL         |
      |       7 | Абрамова К.А.           | О111АВ       | Проезд на запрещающий сигнал                           |  1000.00 | 2020-02-23     | NULL         |
      |       8 | Яковлев Г.Р.            | Т330ТТ       | Проезд на запрещающий сигнал                           |  1000.00 | 2020-03-03     | NULL         |
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      8 rows in set (0.01 sec)
  Task:
  Вывести фамилию, номер машины и нарушение только для тех водителей, которые на одной машине нарушили одно и то же правило   два и более раз. При этом учитывать все нарушения, независимо от того оплачены они или нет. Информацию отсортировать в алфавитном порядке, сначала по фамилии водителя, потом по номеру машины и, наконец, по нарушению.
  Decision:
  mysql> SELECT * FROM fine;
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      | fine_id | name                    | number_plate | violation                                              | sum_fine | date_violation | date_payment |
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      |       1 | Баранов П.Е.            | Р523ВТ       | Превышение скорости(от 40 до 60)                       |   500.00 | 2020-01-12     | 2020-01-17   |
      |       2 | Абрамова К.А.           | О111АВ       | Проезд на запрещающий сигнал                           |  1000.00 | 2020-01-14     | 2020-02-27   |
      |       3 | Яковлев Г.Р.            | Т330ТТ       | Превышение скорости(от 20 до 40)                       |   500.00 | 2020-01-23     | 2020-02-23   |
      |       4 | Яковлев Г.Р.            | М701АА       | Превышение скорости(от 20 до 40)                       |   500.00 | 2020-01-12     | NULL         |
      |       5 | Колесов С.П.            | К892АХ       | Превышение скорости(от 20 до 40)                       |   500.00 | 2020-02-01     | NULL         |
      |       6 | Баранов П.Е.            | Р523ВТ       | Превышение скорости(от 40 до 60)                       |  1000.00 | 2020-02-14     | NULL         |
      |       7 | Абрамова К.А.           | О111АВ       | Проезд на запрещающий сигнал                           |  1000.00 | 2020-02-23     | NULL         |
      |       8 | Яковлев Г.Р.            | Т330ТТ       | Проезд на запрещающий сигнал                           |  1000.00 | 2020-03-03     | NULL         |
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      8 rows in set (0.01 sec)
  mysql> SELECT name, number_plate, violation, count(*)
  FROM fine
  GROUP BY name, number_plate, violation;
      +-------------------------+--------------+--------------------------------------------------------+----------+
      | name                    | number_plate | violation                                              | count(*) |
      +-------------------------+--------------+--------------------------------------------------------+----------+
      | Баранов П.Е.            | Р523ВТ       | Превышение скорости(от 40 до 60)                       |        2 |
      | Абрамова К.А.           | О111АВ       | Проезд на запрещающий сигнал                           |        2 |
      | Яковлев Г.Р.            | Т330ТТ       | Превышение скорости(от 20 до 40)                       |        1 |
      | Яковлев Г.Р.            | М701АА       | Превышение скорости(от 20 до 40)                       |        1 |
      | Колесов С.П.            | К892АХ       | Превышение скорости(от 20 до 40)                       |        1 |
      | Яковлев Г.Р.            | Т330ТТ       | Проезд на запрещающий сигнал                           |        1 |
      +-------------------------+--------------+--------------------------------------------------------+----------+
      6 rows in set (0.00 sec)
  mysql> SELECT name, number_plate, violation, count(*)
  FROM fine
  GROUP BY name, number_plate, violation
  HAVING count(*) >= 2;
      +-------------------------+--------------+--------------------------------------------------------+----------+
      | name                    | number_plate | violation                                              | count(*) |
      +-------------------------+--------------+--------------------------------------------------------+----------+
      | Баранов П.Е.            | Р523ВТ       | Превышение скорости(от 40 до 60)                       |        2 |
      | Абрамова К.А.           | О111АВ       | Проезд на запрещающий сигнал                           |        2 |
      +-------------------------+--------------+--------------------------------------------------------+----------+
      2 rows in set (0.00 sec)
  mysql> SELECT name, number_plate, violation
  FROM fine
  GROUP BY name, number_plate, violation
  HAVING count(violation)>1
  ORDER BY name,violation,number_plate desc;
      +-------------------------+--------------+--------------------------------------------------------+----------+
      | name                    | number_plate | violation                                              | count(*) |
      +-------------------------+--------------+--------------------------------------------------------+----------+
      | Абрамова К.А.           | О111АВ       | Проезд на запрещающий сигнал                           |        2 |
      | Баранов П.Е.            | Р523ВТ       | Превышение скорости(от 40 до 60)                       |        2 |
      +-------------------------+--------------+--------------------------------------------------------+----------+
      2 rows in set (0.00 sec)
  Task:
  В таблице fine увеличить в два раза сумму неоплаченных штрафов для отобранных на предыдущем шаге записей.
  Для всех нарушений, по которым штраф еще не оплачен, (тех, у которых date_payment имеет пустое значение Null), необходимо проверить, является ли данное нарушение для водителя и машины повторным, если да –  увеличить штраф в два раза.
  Если водитель совершил нарушение на другой машине, ему увеличивать штраф не нужно.
  Если несколько повторных нарушений не оплачены, то штраф увеличить для всех.
  Decision:
  mysql> SELECT * FROM fine;
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      | fine_id | name                    | number_plate | violation                                              | sum_fine | date_violation | date_payment |
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      |       1 | Баранов П.Е.            | Р523ВТ       | Превышение скорости(от 40 до 60)                       |   500.00 | 2020-01-12     | 2020-01-17   |
      |       2 | Абрамова К.А.           | О111АВ       | Проезд на запрещающий сигнал                           |  1000.00 | 2020-01-14     | 2020-02-27   |
      |       3 | Яковлев Г.Р.            | Т330ТТ       | Превышение скорости(от 20 до 40)                       |   500.00 | 2020-01-23     | 2020-02-23   |
      |       4 | Яковлев Г.Р.            | М701АА       | Превышение скорости(от 20 до 40)                       |   500.00 | 2020-01-12     | NULL         |
      |       5 | Колесов С.П.            | К892АХ       | Превышение скорости(от 20 до 40)                       |   500.00 | 2020-02-01     | NULL         |
      |       6 | Баранов П.Е.            | Р523ВТ       | Превышение скорости(от 40 до 60)                       |  1000.00 | 2020-02-14     | NULL         |
      |       7 | Абрамова К.А.           | О111АВ       | Проезд на запрещающий сигнал                           |  1000.00 | 2020-02-23     | NULL         |
      |       8 | Яковлев Г.Р.            | Т330ТТ       | Проезд на запрещающий сигнал                           |  1000.00 | 2020-03-03     | NULL         |
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      8 rows in set (0.01 sec)
  mysql> UPDATE fine, (
      SELECT name, number_plate, violation
      FROM fine
      GROUP BY name, number_plate, violation
      HAVING count(violation)>1
      ORDER BY name,violation,number_plate desc) AS query_in
  SET sum_fine = IF(date_payment IS NULL,sum_fine*2,sum_fine)
  WHERE fine.name = query_in.name;
      Query OK, 2 rows affected (0.02 sec)
      Rows matched: 4  Changed: 2  Warnings: 0
  mysql> SElECT * FROM fine;
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      | fine_id | name                    | number_plate | violation                                              | sum_fine | date_violation | date_payment |
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      |       1 | Баранов П.Е.            | Р523ВТ       | Превышение скорости(от 40 до 60)                       |   500.00 | 2020-01-12     | 2020-01-17   |
      |       2 | Абрамова К.А.           | О111АВ       | Проезд на запрещающий сигнал                           |  1000.00 | 2020-01-14     | 2020-02-27   |
      |       3 | Яковлев Г.Р.            | Т330ТТ       | Превышение скорости(от 20 до 40)                       |   500.00 | 2020-01-23     | 2020-02-23   |
      |       4 | Яковлев Г.Р.            | М701АА       | Превышение скорости(от 20 до 40)                       |   500.00 | 2020-01-12     | NULL         |
      |       5 | Колесов С.П.            | К892АХ       | Превышение скорости(от 20 до 40)                       |   500.00 | 2020-02-01     | NULL         |
      |       6 | Баранов П.Е.            | Р523ВТ       | Превышение скорости(от 40 до 60)                       |  2000.00 | 2020-02-14     | NULL         |
      |       7 | Абрамова К.А.           | О111АВ       | Проезд на запрещающий сигнал                           |  2000.00 | 2020-02-23     | NULL         |
      |       8 | Яковлев Г.Р.            | Т330ТТ       | Проезд на запрещающий сигнал                           |  1000.00 | 2020-03-03     | NULL         |
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      8 rows in set (0.01 sec)
  Task:
  Водители оплачивают свои штрафы. В таблице payment занесены даты их оплаты:
  payment_id  name    number_plate    violation   date_violation  date_payment
  1   Яковлев Г.Р.    М701АА  Превышение скорости(от 20 до 40)   2020-01-12  2020-01-22
  2   Баранов П.Е.    Р523ВТ  Превышение скорости(от 40 до 60)   2020-02-14  2020-03-06
  3   Яковлев Г.Р.    Т330ТТ  Проезд на запрещающий сигнал  2020-03-03  2020-03-23
  Необходимо:
      в таблицу fine занести дату оплаты соответствующего штрафа из таблицы payment;
      уменьшить начисленный штраф в таблице fine в два раза  (только для тех штрафов, информация о которых занесена в таблицу payment) , если оплата произведена не позднее 20 дней со дня нарушения.
  Decision:
  mysql> CREATE TABLE payment(payment_id INT PRIMARY KEY AUTO_INCREMENT, name VARCHAR(30), number_plate VARCHAR(6), violation VARCHAR(50), date_violation DATE, date_payment DATE);
      Query OK, 0 rows affected (0.24 sec)
  mysql> INSERT INTO fine (name, number_plate, violation, date_violation, date_payment) VALUES
  ('Яковлев Г.Р.', 'М701АА', 'Превышение скорости(от 20 до 40)', '2020-01-12', '2020-01-22'),
  ('Баранов П.Е.', 'Р523ВТ', 'Превышение скорости(от 40 до 60)', '2020-02-14', '2020-03-06'),
  ('Яковлев Г.Р.', 'Т330ТТ', 'Проезд на запрещающий сигнал', '2020-03-03', '2020-03-23');
      Query OK, 3 rows affected (0.03 sec)
      Records: 3  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM payment;
      Empty set (0.00 sec)
  mysql> INSERT INTO payment (name, number_plate, violation, date_violation, date_payment) VALUES ('Яковлев Г.Р.', 'М701АА', 'Превышение скорости(от 20 до 40)', '2020-01-
  12', '2020-01-22'), ('Баранов П.Е.', 'Р523ВТ', 'Превышение скорости(от 40 до 60)', '2020-02-14', '2020-03-06'), ('Яковлев Г.Р.', 'Т330ТТ', 'Проезд на запрещающий сигнал
  ', '2020-03-03', '2020-03-23');
      Query OK, 3 rows affected (0.11 sec)
      Records: 3  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM payment;
      +------------+-----------------------+--------------+--------------------------------------------------------+----------------+--------------+
      | payment_id | name                  | number_plate | violation                                              | date_violation | date_payment |
      +------------+-----------------------+--------------+--------------------------------------------------------+----------------+--------------+
      |          1 | Яковлев Г.Р.          | М701АА       | Превышение скорости(от 20 до 40)                       | 2020-01-12     | 2020-01-22   |
      |          2 | Баранов П.Е.          | Р523ВТ       | Превышение скорости(от 40 до 60)                       | 2020-02-14     | 2020-03-06   |
      |          3 | Яковлев Г.Р.          | Т330ТТ       | Проезд на запрещающий сигнал                           | 2020-03-03     | 2020-03-23   |
      +------------+-----------------------+--------------+--------------------------------------------------------+----------------+--------------+
      3 rows in set (0.00 sec)
  mysql> SELECT * FROM fine;
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      | fine_id | name                    | number_plate | violation                                              | sum_fine | date_violation | date_payment |
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      |       1 | Баранов П.Е.            | Р523ВТ       | Превышение скорости(от 40 до 60)                       |   500.00 | 2020-01-12     | 2020-01-17   |
      |       2 | Абрамова К.А.           | О111АВ       | Проезд на запрещающий сигнал                           |  1000.00 | 2020-01-14     | 2020-02-27   |
      |       3 | Яковлев Г.Р.            | Т330ТТ       | Превышение скорости(от 20 до 40)                       |   500.00 | 2020-01-23     | 2020-02-23   |
      |       4 | Яковлев Г.Р.            | М701АА       | Превышение скорости(от 20 до 40)                       |   500.00 | 2020-01-12     | NULL         |
      |       5 | Колесов С.П.            | К892АХ       | Превышение скорости(от 20 до 40)                       |   500.00 | 2020-02-01     | NULL         |
      |       6 | Баранов П.Е.            | Р523ВТ       | Превышение скорости(от 40 до 60)                       |  2000.00 | 2020-02-14     | NULL         |
      |       7 | Абрамова К.А.           | О111АВ       | Проезд на запрещающий сигнал                           |  2000.00 | 2020-02-23     | NULL         |
      |       8 | Яковлев Г.Р.            | Т330ТТ       | Проезд на запрещающий сигнал                           |  1000.00 | 2020-03-03     | NULL         |
      |       9 | Яковлев Г.Р.            | М701АА       | Превышение скорости(от 20 до 40)                       |     NULL | 2020-01-12     | 2020-01-22   |
      |      10 | Баранов П.Е.            | Р523ВТ       | Превышение скорости(от 40 до 60)                       |     NULL | 2020-02-14     | 2020-03-06   |
      |      11 | Яковлев Г.Р.            | Т330ТТ       | Проезд на запрещающий сигнал                           |     NULL | 2020-03-03     | 2020-03-23   |
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      11 rows in set (0.00 sec)
  mysql> DELETE FROM fine WHERE sum_fine IS Null;
      Query OK, 3 rows affected (0.03 sec)
  mysql> SELECT * FROM fine;
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      | fine_id | name                    | number_plate | violation                                              | sum_fine | date_violation | date_payment |
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      |       1 | Баранов П.Е.            | Р523ВТ       | Превышение скорости(от 40 до 60)                       |   500.00 | 2020-01-12     | 2020-01-17   |
      |       2 | Абрамова К.А.           | О111АВ       | Проезд на запрещающий сигнал                           |  1000.00 | 2020-01-14     | 2020-02-27   |
      |       3 | Яковлев Г.Р.            | Т330ТТ       | Превышение скорости(от 20 до 40)                       |   500.00 | 2020-01-23     | 2020-02-23   |
      |       4 | Яковлев Г.Р.            | М701АА       | Превышение скорости(от 20 до 40)                       |   500.00 | 2020-01-12     | NULL         |
      |       5 | Колесов С.П.            | К892АХ       | Превышение скорости(от 20 до 40)                       |   500.00 | 2020-02-01     | NULL         |
      |       6 | Баранов П.Е.            | Р523ВТ       | Превышение скорости(от 40 до 60)                       |  2000.00 | 2020-02-14     | NULL         |
      |       7 | Абрамова К.А.           | О111АВ       | Проезд на запрещающий сигнал                           |  2000.00 | 2020-02-23     | NULL         |
      |       8 | Яковлев Г.Р.            | Т330ТТ       | Проезд на запрещающий сигнал                           |  1000.00 | 2020-03-03     | NULL         |
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      8 rows in set (0.01 sec)
      Query OK, 3 rows affected (0.07 sec)
      Rows matched: 3  Changed: 3  Warnings: 0
  mysql> SELECT * FROM fine;
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      | fine_id | name                    | number_plate | violation                                              | sum_fine | date_violation | date_payment |
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      |       1 | Баранов П.Е.            | Р523ВТ       | Превышение скорости(от 40 до 60)                       |   500.00 | 2020-01-12     | 2020-01-17   |
      |       2 | Абрамова К.А.           | О111АВ       | Проезд на запрещающий сигнал                           |  1000.00 | 2020-01-14     | 2020-02-27   |
      |       3 | Яковлев Г.Р.            | Т330ТТ       | Превышение скорости(от 20 до 40)                       |   500.00 | 2020-01-23     | 2020-02-23   |
      |       4 | Яковлев Г.Р.            | М701АА       | Превышение скорости(от 20 до 40)                       |   250.00 | 2020-01-12     | 2020-01-22   |
      |       5 | Колесов С.П.            | К892АХ       | Превышение скорости(от 20 до 40)                       |   500.00 | 2020-02-01     | NULL         |
      |       6 | Баранов П.Е.            | Р523ВТ       | Превышение скорости(от 40 до 60)                       |  2000.00 | 2020-02-14     | 2020-03-06   |
      |       7 | Абрамова К.А.           | О111АВ       | Проезд на запрещающий сигнал                           |  2000.00 | 2020-02-23     | NULL         |
      |       8 | Яковлев Г.Р.            | Т330ТТ       | Проезд на запрещающий сигнал                           |   500.00 | 2020-03-03     | 2020-03-23   |
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      8 rows in set (0.00 sec)
  Task:
  Создать новую таблицу back_payment, куда внести информацию о неоплаченных штрафах (Фамилию и инициалы водителя, номер машины, нарушение, сумму штрафа  и  дату нарушения) из таблицы fine.
  Decision:
  mysql> CREATE TABLE back_payment AS
  SELECT name, number_plate, violation, sum_fine, date_violation
  FROM fine
  WHERE date_payment IS NULL;
      Query OK, 2 rows affected (0.43 sec)
      Records: 2  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM back_payment;
      +-------------------------+--------------+--------------------------------------------------------+----------+----------------+
      | name                    | number_plate | violation                                              | sum_fine | date_violation |
      +-------------------------+--------------+--------------------------------------------------------+----------+----------------+
      | Колесов С.П.            | К892АХ       | Превышение скорости(от 20 до 40)                       |   500.00 | 2020-02-01     |
      | Абрамова К.А.           | О111АВ       | Проезд на запрещающий сигнал                           |  2000.00 | 2020-02-23     |
      +-------------------------+--------------+--------------------------------------------------------+----------+----------------+
      2 rows in set (0.00 sec)
  Task:
  Удалить из таблицы fine информацию о нарушениях, совершенных раньше 1 февраля 2020 года.
  Decision:
  mysql> SELECT * FROM fine;
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      | fine_id | name                    | number_plate | violation                                              | sum_fine | date_violation | date_payment |
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      |       1 | Баранов П.Е.            | Р523ВТ       | Превышение скорости(от 40 до 60)                       |   500.00 | 2020-01-12     | 2020-01-17   |
      |       2 | Абрамова К.А.           | О111АВ       | Проезд на запрещающий сигнал                           |  1000.00 | 2020-01-14     | 2020-02-27   |
      |       3 | Яковлев Г.Р.            | Т330ТТ       | Превышение скорости(от 20 до 40)                       |   500.00 | 2020-01-23     | 2020-02-23   |
      |       4 | Яковлев Г.Р.            | М701АА       | Превышение скорости(от 20 до 40)                       |   250.00 | 2020-01-12     | 2020-01-22   |
      |       5 | Колесов С.П.            | К892АХ       | Превышение скорости(от 20 до 40)                       |   500.00 | 2020-02-01     | NULL         |
      |       6 | Баранов П.Е.            | Р523ВТ       | Превышение скорости(от 40 до 60)                       |  2000.00 | 2020-02-14     | 2020-03-06   |
      |       7 | Абрамова К.А.           | О111АВ       | Проезд на запрещающий сигнал                           |  2000.00 | 2020-02-23     | NULL         |
      |       8 | Яковлев Г.Р.            | Т330ТТ       | Проезд на запрещающий сигнал                           |   500.00 | 2020-03-03     | 2020-03-23   |
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      8 rows in set (0.00 sec)
  mysql> DELETE FROM fine
  WHERE date_violation < '2020-02-01';
      Query OK, 4 rows affected (0.13 sec)
  mysql> SELECT * FROM fine;
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      | fine_id | name                    | number_plate | violation                                              | sum_fine | date_violation | date_payment |
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      |       5 | Колесов С.П.            | К892АХ       | Превышение скорости(от 20 до 40)                       |   500.00 | 2020-02-01     | NULL         |
      |       6 | Баранов П.Е.            | Р523ВТ       | Превышение скорости(от 40 до 60)                       |  2000.00 | 2020-02-14     | 2020-03-06   |
      |       7 | Абрамова К.А.           | О111АВ       | Проезд на запрещающий сигнал                           |  2000.00 | 2020-02-23     | NULL         |
      |       8 | Яковлев Г.Р.            | Т330ТТ       | Проезд на запрещающий сигнал                           |   500.00 | 2020-03-03     | 2020-03-23   |
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      4 rows in set (0.00 sec)
  Task:
  В интернет-магазине продаются книги. Каждая книга имеет название, написана одним автором, относится к одному жанру, имеет определенную цену. В магазине доступно по нескольку экземпляров каждой книги.
  Покупатель регистрируется на сайте интернет-магазина, указывает свои имя и фамилию, адрес электронной почты и город проживания. Он может сформировать один или несколько заказов, написать несколько пожеланий к каждому заказу. Каждый заказ включает в себя одну или несколько книг, каждую книгу можно заказать в нескольких экземплярах. Затем заказ проходит ряд последовательных этапов (операций): он оплачивается, упаковывается, передается курьеру или транспортной компании для транспортировки и, наконец, доставляется покупателю. Дата каждой операции фиксирована. Среднее время доставки книг известно для каждого города.
  В то же время магазин ведет учет книг, их количество уменьшается при покупке, увеличивается при поступлении товара, когда количество исчерпано, размещен заказ и т.д. Разработать базу данных Книжный интернет-магазин
  Decision:
  mysql> CREATE DATABASE OnlineBookStore;
      Query OK, 1 row affected (0.32 sec)
  mysql> show databases;
      +--------------------+
      | Database           |
      +--------------------+
      | OnlineBookStore    |
      | information_schema |
      | mysql              |
      | performance_schema |
      | sys                |
      | testbdserver       |
      +--------------------+
      6 rows in set (0.01 sec)
  mysql> USE OnlineBookStore;
      Database changed
  Task:
  Установите связи между информационными объектами Жанр и Книга, Город и Клиент, Заказ и Этапы. Выберите верную концептуальную схему.
  Наполнить таблицы информацией.
  Структура и наполнение таблиц базы данных Интернет-магазин книг»
  Таблица author (создание, заполнение):
      author_id     name_author
      1     Булгаков М.А.
      2     Достоевский Ф.М.
      3     Есенин С.А.
      4     Пастернак Б.Л.
      5     Лермонтов М.Ю.
  Таблица genre (создание, заполнение, рассмотрено в качестве примеров):
      genre_id     name_genre
      1     Роман
      2     Поэзия
      3     Приключения
  Таблица book (создание, заполнение):
      book_id     title     author_id     genre_id     price     amount
      1     Мастер и Маргарита     1     1     670.99     3
      2     Белая гвардия     1     1     540.50     5
      3     Идиот     2     1     460.00     10
      4     Братья Карамазовы     2     1     799.01     2
      5     Игрок     2     1     480.50     10
      6     Стихотворения и поэмы     3     2     650.00     15
      7     Черный человек     3     2     570.20     6
      8     Лирика     4     2     518.99     2
  Таблица city (в последнем столбце указано примерное количество дней, необходимое для доставки товара в каждый город):
      city_id     name_city     days_delivery
      INT PRIMARY KEY
      AUTO_INCREMENT     VARCHAR(30)     INT
      1     Москва     5
      2     Санкт-Петербург     3
      3     Владивосток     12
  Таблица client:
      client_id     name_client     city_id     email
      INT PRIMARY KEY
      AUTO_INCREMENT     VARCHAR(50)     INT     VARCHAR(30)
      1     Баранов Павел     3     baranov@test
      2     Абрамова Катя     1     abramova@test
      3     Семенонов Иван     2     semenov@test
      4     Яковлева Галина     1     yakovleva@test
  Таблица buy (столбец buy_description предназначен для пожеланий покупателя, которые он хочет добавить в свой заказ, если пожеланий нет - поле остается пустым):
      buy_id     buy_description     client_id
      INT PRIMARY KEY
      AUTO_INCREMENT     VARCHAR(100)     INT
      1     Доставка только вечером     1
      2           3
      3     Упаковать каждую книгу по отдельности     2
      4           1
  Таблица buy_book:
      buy_book_id     buy_id     book_id     amount
      INT PRIMARY KEY
      AUTO_INCREMENT     INT     INT     INT
      1     1     1     1
      2     1     7     2
      3     1     3     1
      4     2     8     2
      5     3     3     2
      6     3     2     1
      7     3     1     1
      8     4     5     1
  Таблица step:
      step_id     name_step
      INT PRIMARY KEY
      AUTO_INCREMENT     VARCHAR(30)
      1     Оплата
      2     Упаковка
      3     Транспортировка
      4     Доставка
  Таблица buy_step ( если столбец date_step_end не заполнен (имеет значение Null), это означает что операция еще не выполнена, например для заказа с id 2, книги переданы для доставки 2020-03-02, но еще не доставлены):
      buy_step_id     buy_id     step_id     date_step_beg     date_step_end
      INT PRIMARY KEY
      AUTO_INCREMENT     INT     INT     DATE     DATE
      1      1     1     2020-02-20     2020-02-20
      2     1     2     2020-02-20     2020-02-21
      3     1     3     2020-02-22     2020-03-07
      4     1     4     2020-03-08     2020-03-08
      5     2     1     2020-02-28     2020-02-28
      6     2     2     2020-02-29     2020-03-01
      7     2     3     2020-03-02     
      8     2     4           
      9     3     1     2020-03-05     2020-03-05
      10     3     2     2020-03-05     2020-03-06
      11     3     3     2020-03-06     2020-03-10
      12     3     4     2020-03-11     
      13     4     1     2020-03-20     
      14     4     2           
      15     4     3           
      16     4     4     
  Decision:
  mysql> CREATE TABLE author( author_id INT PRIMARY KEY AUTO_INCREMENT, name_author VARCHAR(30));
      Query OK, 0 rows affected (0.14 sec)
  mysql> INSERT INTO author (name_author) VALUES  ('Булгаков М.А.'), ('Достоевский Ф.М.'), ('Есенин С.А.'), ('Пастернак Б.Л.'), ('Лермонтов М.Ю.');
      Query OK, 5 rows affected (0.04 sec)
      Records: 5  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM author;
      +-----------+-------------------------------+
      | author_id | name_author                   |
      +-----------+-------------------------------+
      |         1 | Булгаков М.А.                 |
      |         2 | Достоевский Ф.М.              |
      |         3 | Есенин С.А.                   |
      |         4 | Пастернак Б.Л.                |
      |         5 | Лермонтов М.Ю.                |
      +-----------+-------------------------------+
      5 rows in set (0.00 sec)
  mysql> CREATE TABLE genre(genre_id INT PRIMARY KEY AUTO_INCREMENT, name_genre VARCHAR(30));
  mysql> INSERT INTO genre(name_genre) VALUES  ('Роман'), ('Поэзия'), ('Приключения');
      Query OK, 3 rows affected (0.14 sec)
      Records: 3  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM genre;
      +----------+------------------------+
      | genre_id | name_genre             |
      +----------+------------------------+
      |        1 | Роман                  |
      |        2 | Поэзия                 |
      |        3 | Приключения            |
      +----------+------------------------+
      3 rows in set (0.00 sec)
  mysql> CREATE TABLE book
  (
  book_id INT PRIMARY KEY AUTO_INCREMENT,
      title VARCHAR(50),
      author_id INT NOT NULL,
      genre_id INT,
      price DECIMAL(8, 2),
      amount INT,
      FOREIGN KEY (author_id)
          REFERENCES author (author_id)
          ON DELETE CASCADE,
      FOREIGN KEY (genre_id)
          REFERENCES genre (genre_id)
          ON DELETE SET NULL
  );
      Query OK, 0 rows affected (0.24 sec)
  mysql> INSERT INTO book (title, author_id, genre_id, price, amount)
  VALUES
  ('Мастер и Маргарита', 1, 1, 670.99, 3),
  ('Белая гвардия ', 1, 1, 540.50, 5),
  ('Идиот', 2, 1, 460.00, 10),
  ('Братья Карамазовы', 2, 1, 799.01, 2),
  ('Игрок', 2, 1, 480.50, 10),
  ('Стихотворения и поэмы', 3, 2, 650.00, 15),
  ('Черный человек', 3, 2, 570.20, 6),
  ('Лирика', 4, 2, 518.99, 2);
      Query OK, 8 rows affected (0.06 sec)
      Records: 8  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM book;
      +---------+------------------------------------------+-----------+----------+--------+--------+
      | book_id | title                                    | author_id | genre_id | price  | amount |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      |       1 | Мастер и Маргарита                       |         1 |        1 | 670.99 |      3 |
      |       2 | Белая гвардия                            |         1 |        1 | 540.50 |      5 |
      |       3 | Идиот                                    |         2 |        1 | 460.00 |     10 |
      |       4 | Братья Карамазовы                        |         2 |        1 | 799.01 |      2 |
      |       5 | Игрок                                    |         2 |        1 | 480.50 |     10 |
      |       6 | Стихотворения и поэмы                    |         3 |        2 | 650.00 |     15 |
      |       7 | Черный человек                           |         3 |        2 | 570.20 |      6 |
      |       8 | Лирика                                   |         4 |        2 | 518.99 |      2 |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      8 rows in set (0.00 sec)
  mysql> CREATE TABLE city(
      city_id INT PRIMARY KEY AUTO_INCREMENT,
      name_city VARCHAR(30),
      days_delivery INT
  );
      Query OK, 0 rows affected (0.25 sec)
  mysql> INSERT INTO city(name_city, days_delivery)
  VALUES
  ('Москва', 5),
  ('Санкт-Петербург', 3),
  ('Владивосток', 12);
      Query OK, 3 rows affected (0.06 sec)
      Records: 3  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM city;
      +---------+-------------------------------+---------------+
      | city_id | name_city                     | days_delivery |
      +---------+-------------------------------+---------------+
      |       1 | Москва                        |             5 |
      |       2 | Санкт-Петербург               |             3 |
      |       3 | Владивосток                   |            12 |
      +---------+-------------------------------+---------------+
      3 rows in set (0.00 sec)
  mysql> CREATE TABLE client (
      client_id INT PRIMARY KEY AUTO_INCREMENT,
      name_client VARCHAR(50),
      city_id INT,
      email VARCHAR(30),
      FOREIGN KEY (city_id) REFERENCES city (city_id)
  );
      Query OK, 0 rows affected (0.24 sec)
  mysql> INSERT INTO client(name_client, city_id, email)
  VALUES
  ('Баранов Павел', 3, 'baranov@test'),
  ('Абрамова Катя', 1, 'abramova@test'),
  ('Семенонов Иван', 2, 'semenov@test'),
  ('Яковлева Галина', 1, 'yakovleva@test');
      Query OK, 4 rows affected (0.12 sec)
      Records: 4  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM client;
      +-----------+-------------------------------+---------+----------------+
      | client_id | name_client                   | city_id | email          |
      +-----------+-------------------------------+---------+----------------+
      |         1 | Баранов Павел                 |       3 | baranov@test   |
      |         2 | Абрамова Катя                 |       1 | abramova@test  |
      |         3 | Семенонов Иван                |       2 | semenov@test   |
      |         4 | Яковлева Галина               |       1 | yakovleva@test |
      +-----------+-------------------------------+---------+----------------+
      4 rows in set (0.01 sec)
  mysql> CREATE TABLE buy(
      buy_id INT PRIMARY KEY AUTO_INCREMENT,
      buy_description VARCHAR(100),
      client_id INT,
      FOREIGN KEY (client_id) REFERENCES client (client_id)
  );
      Query OK, 0 rows affected (0.24 sec)
  mysql> INSERT INTO buy (buy_description, client_id)
  VALUES
  ('Доставка только вечером', 1),
  (NULL, 3),
  ('Упаковать каждую книгу по отдельности', 2),
  (NULL, 1);
      Query OK, 4 rows affected (0.04 sec)
      Records: 4  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM buy;
      +--------+------------------------------------------------------------------------+-----------+
      | buy_id | buy_description                                                        | client_id |
      +--------+------------------------------------------------------------------------+-----------+
      |      1 | Доставка только вечером                                                |         1 |
      |      2 | NULL                                                                   |         3 |
      |      3 | Упаковать каждую книгу по отдельности                                  |         2 |
      |      4 | NULL                                                                   |         1 |
      +--------+------------------------------------------------------------------------+-----------+
      4 rows in set (0.00 sec)
  mysql> CREATE TABLE buy_book (
      buy_book_id INT PRIMARY KEY AUTO_INCREMENT,
      buy_id INT,
      book_id INT,
      amount INT,
      FOREIGN KEY (buy_id) REFERENCES buy (buy_id),
      FOREIGN KEY (book_id) REFERENCES book (book_id)
  );
      Query OK, 0 rows affected (0.24 sec)
  mysql> INSERT INTO buy_book(buy_id, book_id, amount)
  VALUES
  (1, 1, 1),
  (1, 7, 2),
  (1, 3, 1),
  (2, 8, 2),
  (3, 3, 2),
  (3, 2, 1),
  (3, 1, 1),
  (4, 5, 1);
      Query OK, 8 rows affected (0.03 sec)
      Records: 8  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM buy_book;
      +-------------+--------+---------+--------+
      | buy_book_id | buy_id | book_id | amount |
      +-------------+--------+---------+--------+
      |           1 |      1 |       1 |      1 |
      |           2 |      1 |       7 |      2 |
      |           3 |      1 |       3 |      1 |
      |           4 |      2 |       8 |      2 |
      |           5 |      3 |       3 |      2 |
      |           6 |      3 |       2 |      1 |
      |           7 |      3 |       1 |      1 |
      |           8 |      4 |       5 |      1 |
      +-------------+--------+---------+--------+
      8 rows in set (0.00 sec)
  mysql> CREATE TABLE step (
      step_id INT PRIMARY KEY AUTO_INCREMENT,
      name_step VARCHAR(30)
  );
      Query OK, 0 rows affected (0.18 sec)
  mysql> INSERT INTO step(name_step)
  VALUES
  ('Оплата'),
  ('Упаковка'),
  ('Транспортировка'),
  ('Доставка');
      Query OK, 4 rows affected (0.03 sec)
      Records: 4  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM step;
      +---------+--------------------------------+
      | step_id | name_step                      |
      +---------+--------------------------------+
      |       1 | Оплата                         |
      |       2 | Упаковка                       |
      |       3 | Транспортировка                |
      |       4 | Доставка                       |
      +---------+--------------------------------+
      4 rows in set (0.00 sec)
  mysql> CREATE TABLE buy_step (
      buy_step_id INT PRIMARY KEY AUTO_INCREMENT,
      buy_id INT,
      step_id INT,
      date_step_beg DATE,
      date_step_end DATE,
      FOREIGN KEY (buy_id) REFERENCES buy (buy_id),
      FOREIGN KEY (step_id) REFERENCES step (step_id)
  );
      Query OK, 0 rows affected (0.26 sec)
  mysql> INSERT INTO buy_step(buy_id, step_id, date_step_beg, date_step_end)
  VALUES (1, 1, '2020-02-20', '2020-02-20'),
  (1, 2, '2020-02-20', '2020-02-21'),
  (1, 3, '2020-02-22', '2020-03-07'),
  (1, 4, '2020-03-08', '2020-03-08'),
  (2, 1, '2020-02-28', '2020-02-28'),
  (2, 2, '2020-02-29', '2020-03-01'),
  (2, 3, '2020-03-02', NULL),
  (2, 4, NULL, NULL),
  (3, 1, '2020-03-05', '2020-03-05'),
  (3, 2, '2020-03-05', '2020-03-06'),
  (3, 3, '2020-03-06', '2020-03-10'),
  (3, 4, '2020-03-11', NULL),
  (4, 1, '2020-03-20', NULL),
  (4, 2, NULL, NULL),
  (4, 3, NULL, NULL),
  (4, 4, NULL, NULL);
      Query OK, 16 rows affected (0.14 sec)
      Records: 16  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM buy_step;
      +-------------+--------+---------+---------------+---------------+
      | buy_step_id | buy_id | step_id | date_step_beg | date_step_end |
      +-------------+--------+---------+---------------+---------------+
      |           1 |      1 |       1 | 2020-02-20    | 2020-02-20    |
      |           2 |      1 |       2 | 2020-02-20    | 2020-02-21    |
      |           3 |      1 |       3 | 2020-02-22    | 2020-03-07    |
      |           4 |      1 |       4 | 2020-03-08    | 2020-03-08    |
      |           5 |      2 |       1 | 2020-02-28    | 2020-02-28    |
      |           6 |      2 |       2 | 2020-02-29    | 2020-03-01    |
      |           7 |      2 |       3 | 2020-03-02    | NULL          |
      |           8 |      2 |       4 | NULL          | NULL          |
      |           9 |      3 |       1 | 2020-03-05    | 2020-03-05    |
      |          10 |      3 |       2 | 2020-03-05    | 2020-03-06    |
      |          11 |      3 |       3 | 2020-03-06    | 2020-03-10    |
      |          12 |      3 |       4 | 2020-03-11    | NULL          |
      |          13 |      4 |       1 | 2020-03-20    | NULL          |
      |          14 |      4 |       2 | NULL          | NULL          |
      |          15 |      4 |       3 | NULL          | NULL          |
      |          16 |      4 |       4 | NULL          | NULL          |
      +-------------+--------+---------+---------------+---------------+
      16 rows in set (0.00 sec)
  Task:
  Вывести все заказы Баранова Павла (id заказа, какие книги, по какой цене и в каком количестве он заказал) в отсортированном по номеру заказа и названиям книг виде.
  Decision:
  mysql> SELECT client_id, name_client FROM client;
      +-----------+-------------------------------+
      | client_id | name_client                   |
      +-----------+-------------------------------+
      |         1 | Баранов Павел                 |
      |         2 | Абрамова Катя                 |
      |         3 | Семенонов Иван                |
      |         4 | Яковлева Галина               |
      +-----------+-------------------------------+
      4 rows in set (0.01 sec)
  mysql> SELECT buy_id, client_id FROM buy;
      +--------+-----------+
      | buy_id | client_id |
      +--------+-----------+
      |      1 |         1 |
      |      4 |         1 |
      |      3 |         2 |
      |      2 |         3 |
      +--------+-----------+
      4 rows in set (0.00 sec)
  mysql> SELECT buy_book_id, buy_id, book_id, amount FROM buy_book;
      +-------------+--------+---------+--------+
      | buy_book_id | buy_id | book_id | amount |
      +-------------+--------+---------+--------+
      |           1 |      1 |       1 |      1 |
      |           2 |      1 |       7 |      2 |
      |           3 |      1 |       3 |      1 |
      |           4 |      2 |       8 |      2 |
      |           5 |      3 |       3 |      2 |
      |           6 |      3 |       2 |      1 |
      |           7 |      3 |       1 |      1 |
      |           8 |      4 |       5 |      1 |
      +-------------+--------+---------+--------+
      8 rows in set (0.00 sec)
  mysql> SELECT book_id, title, price, amount FROM book;
      +---------+------------------------------------------+--------+--------+
      | book_id | title                                    | price  | amount |
      +---------+------------------------------------------+--------+--------+
      |       1 | Мастер и Маргарита                       | 670.99 |      3 |
      |       2 | Белая гвардия                            | 540.50 |      5 |
      |       3 | Идиот                                    | 460.00 |     10 |
      |       4 | Братья Карамазовы                        | 799.01 |      2 |
      |       5 | Игрок                                    | 480.50 |     10 |
      |       6 | Стихотворения и поэмы                    | 650.00 |     15 |
      |       7 | Черный человек                           | 570.20 |      6 |
      |       8 | Лирика                                   | 518.99 |      2 |
      +---------+------------------------------------------+--------+--------+
      8 rows in set (0.00 sec)
  mysql> SELECT buy_book.buy_id, book.title, book.price, buy_book.amount
  FROM
      client
      INNER JOIN buy ON client.client_id=buy.client_id
      INNER JOIN buy_book ON buy_book.buy_id = buy.buy_id
      INNER JOIN book ON buy_book.book_id=book.book_id
  WHERE name_client = 'Баранов Павел'
  ORDER BY buy.buy_id, title;
      +--------+------------------------------------+--------+--------+
      | buy_id | title                              | price  | amount |
      +--------+------------------------------------+--------+--------+
      |      1 | Идиот                              | 460.00 |      1 |
      |      1 | Мастер и Маргарита                 | 670.99 |      1 |
      |      1 | Черный человек                     | 570.20 |      2 |
      |      4 | Игрок                              | 480.50 |      1 |
      +--------+------------------------------------+--------+--------+
      4 rows in set (0.01 sec)
  Task:
  Посчитать, сколько раз была заказана каждая книга, для книги вывести ее автора (нужно посчитать, в каком количестве заказов фигурирует каждая книга).  Вывести фамилию и инициалы автора, название книги, последний столбец назвать Количество. Результат отсортировать сначала  по фамилиям авторов, а потом по названиям книг
  Decision:
  mysql> SELECT book_id, title, author_id FROM book;
      +---------+------------------------------------------+-----------+
      | book_id | title                                    | author_id |
      +---------+------------------------------------------+-----------+
      |       1 | Мастер и Маргарита                       |         1 |
      |       2 | Белая гвардия                            |         1 |
      |       3 | Идиот                                    |         2 |
      |       4 | Братья Карамазовы                        |         2 |
      |       5 | Игрок                                    |         2 |
      |       6 | Стихотворения и поэмы                    |         3 |
      |       7 | Черный человек                           |         3 |
      |       8 | Лирика                                   |         4 |
      +---------+------------------------------------------+-----------+
      8 rows in set (0.00 sec)
  mysql> SELECT author_id, name_author FROM author;
      +-----------+-------------------------------+
      | author_id | name_author                   |
      +-----------+-------------------------------+
      |         1 | Булгаков М.А.                 |
      |         2 | Достоевский Ф.М.              |
      |         3 | Есенин С.А.                   |
      |         4 | Пастернак Б.Л.                |
      |         5 | Лермонтов М.Ю.                |
      +-----------+-------------------------------+
      5 rows in set (0.00 sec)
  mysql> SELECT book_id, amount FROM buy_book;
      +---------+--------+
      | book_id | amount |
      +---------+--------+
      |       1 |      1 |
      |       7 |      2 |
      |       3 |      1 |
      |       8 |      2 |
      |       3 |      2 |
      |       2 |      1 |
      |       1 |      1 |
      |       5 |      1 |
      +---------+--------+
      8 rows in set (0.00 sec)
  mysql> SELECT author.name_author,book.title,SUM(buy_book.amount) AS Количество
  FROM
      book
      INNER JOIN buy_book ON book.book_id=buy_book.book_id
      INNER JOIN author ON book.author_id=author.author_id
  GROUP BY author.name_author, book.title
  ORDER BY author.name_author, book.title;
      +-------------------------------+------------------------------------+----------------------+
      | name_author                   | title                              | Количество           |
      +-------------------------------+------------------------------------+----------------------+
      | Булгаков М.А.                 | Белая гвардия                      |                    1 |
      | Булгаков М.А.                 | Мастер и Маргарита                 |                    2 |
      | Достоевский Ф.М.              | Игрок                              |                    1 |
      | Достоевский Ф.М.              | Идиот                              |                    3 |
      | Есенин С.А.                   | Черный человек                     |                    2 |
      | Пастернак Б.Л.                | Лирика                             |                    2 |
      +-------------------------------+------------------------------------+----------------------+
      6 rows in set (0.01 sec)
  mysql> SELECT author.name_author,book.title,SUM(buy_book.amount) AS Количество
  FROM
      book
      LEFT JOIN buy_book ON book.book_id=buy_book.book_id
      LEFT JOIN author ON book.author_id=author.author_id
  GROUP BY author.name_author,book.title
  ORDER BY author.name_author,book.title;
      +-------------------------------+------------------------------------------+----------------------+
      | name_author                   | title                                    | Количество           |
      +-------------------------------+------------------------------------------+----------------------+
      | Булгаков М.А.                 | Белая гвардия                            |                    1 |
      | Булгаков М.А.                 | Мастер и Маргарита                       |                    2 |
      | Достоевский Ф.М.              | Братья Карамазовы                        |                 NULL |
      | Достоевский Ф.М.              | Игрок                                    |                    1 |
      | Достоевский Ф.М.              | Идиот                                    |                    3 |
      | Есенин С.А.                   | Стихотворения и поэмы                    |                 NULL |
      | Есенин С.А.                   | Черный человек                           |                    2 |
      | Пастернак Б.Л.                | Лирика                                   |                    2 |
      +-------------------------------+------------------------------------------+----------------------+
      8 rows in set (0.00 sec)
  mysql> SELECT author.name_author,book.title,COUNT(buy_book.amount) AS Количество
  FROM
      book
      LEFT JOIN buy_book USING(book_id)
      LEFT JOIN author USING(author_id)
  GROUP BY author.name_author,book.title
  ORDER BY author.name_author,book.title;
      +-------------------------------+------------------------------------------+----------------------+
      | name_author                   | title                                    | Количество           |
      +-------------------------------+------------------------------------------+----------------------+
      | Булгаков М.А.                 | Белая гвардия                            |                    1 |
      | Булгаков М.А.                 | Мастер и Маргарита                       |                    2 |
      | Достоевский Ф.М.              | Братья Карамазовы                        |                    0 |
      | Достоевский Ф.М.              | Игрок                                    |                    1 |
      | Достоевский Ф.М.              | Идиот                                    |                    2 |
      | Есенин С.А.                   | Стихотворения и поэмы                    |                    0 |
      | Есенин С.А.                   | Черный человек                           |                    1 |
      | Пастернак Б.Л.                | Лирика                                   |                    1 |
      +-------------------------------+------------------------------------------+----------------------+
      8 rows in set (0.00 sec)
  Task:
  Вывести города, в которых живут клиенты, оформлявшие заказы в интернет-магазине. Указать количество заказов в каждый город, этот столбец назвать Количество. Информацию вывести по убыванию количества заказов, а затем в алфавитном порядке по названию городов.
  Decision:
  mysql> SELECT client_id, city_id FROM client;
      +-----------+---------+
      | client_id | city_id |
      +-----------+---------+
      |         2 |       1 |
      |         4 |       1 |
      |         3 |       2 |
      |         1 |       3 |
      +-----------+---------+
      4 rows in set (0.04 sec)
  mysql> SELECT name_city, city_id FROM city;
      +-------------------------------+---------+
      | name_city                     | city_id |
      +-------------------------------+---------+
      | Москва                        |       1 |
      | Санкт-Петербург               |       2 |
      | Владивосток                   |       3 |
      +-------------------------------+---------+
      3 rows in set (0.01 sec)
  mysql> SELECT client_id, buy_id FROM buy;
      +-----------+--------+
      | client_id | buy_id |
      +-----------+--------+
      |         1 |      1 |
      |         1 |      4 |
      |         2 |      3 |
      |         3 |      2 |
      +-----------+--------+
      4 rows in set (0.10 sec)
  mysql> SELECT name_city, COUNT(buy_id) AS 'Количество'
  FROM client
      INNER JOIN city
      ON client.city_id = city.city_id
      INNER JOIN buy
      ON client.client_id = buy.client_id
      GROUP BY name_city
      ORDER BY name_city;
      +-------------------------------+----------------------+
      | name_city                     | Количество           |
      +-------------------------------+----------------------+
      | Владивосток                   |                    2 |
      | Москва                        |                    1 |
      | Санкт-Петербург               |                    1 |
      +-------------------------------+----------------------+
      3 rows in set (0.11 sec)
  Task:
  Вывести номера всех оплаченных заказов и даты, когда они были оплачены.
  Decision:
  mysql> SELECT buy_id, step_id, date_step_beg, date_step_end FROM buy_step;
      +--------+---------+---------------+---------------+
      | buy_id | step_id | date_step_beg | date_step_end |
      +--------+---------+---------------+---------------+
      |      1 |       1 | 2020-02-20    | 2020-02-20    |
      |      1 |       2 | 2020-02-20    | 2020-02-21    |
      |      1 |       3 | 2020-02-22    | 2020-03-07    |
      |      1 |       4 | 2020-03-08    | 2020-03-08    |
      |      2 |       1 | 2020-02-28    | 2020-02-28    |
      |      2 |       2 | 2020-02-29    | 2020-03-01    |
      |      2 |       3 | 2020-03-02    | NULL          |
      |      2 |       4 | NULL          | NULL          |
      |      3 |       1 | 2020-03-05    | 2020-03-05    |
      |      3 |       2 | 2020-03-05    | 2020-03-06    |
      |      3 |       3 | 2020-03-06    | 2020-03-10    |
      |      3 |       4 | 2020-03-11    | NULL          |
      |      4 |       1 | 2020-03-20    | NULL          |
      |      4 |       2 | NULL          | NULL          |
      |      4 |       3 | NULL          | NULL          |
      |      4 |       4 | NULL          | NULL          |
      +--------+---------+---------------+---------------+
      16 rows in set (0.03 sec)
  mysql> SELECT step_id, name_step FROM step;
      +---------+--------------------------------+
      | step_id | name_step                      |
      +---------+--------------------------------+
      |       1 | Оплата                         |
      |       2 | Упаковка                       |
      |       3 | Транспортировка                |
      |       4 | Доставка                       |
      +---------+--------------------------------+
      4 rows in set (0.01 sec)
  mysql> SELECT buy_id, date_step_end
  FROM buy_step
      INNER JOIN step
      ON step.step_id = buy_step.step_id
      WHERE name_step LtuserE 'Оплата' AND date_step_end IS NOT NULL;
      +--------+---------------+
      | buy_id | date_step_end |
      +--------+---------------+
      |      1 | 2020-02-20    |
      |      2 | 2020-02-28    |
      |      3 | 2020-03-05    |
      +--------+---------------+
      3 rows in set (0.00 sec)
  Task:
  Вывести информацию о каждом заказе: его номер, кто его сформировал (фамилия пользователя) и его стоимость (сумма произведений количества заказанных книг и их цены), в отсортированном по номеру заказа виде. Последний столбец назвать Стоимость.
  Decision:
  mysql> SELECT buy_id, client_id FROM buy;
      +--------+-----------+
      | buy_id | client_id |
      +--------+-----------+
      |      1 |         1 |
      |      4 |         1 |
      |      3 |         2 |
      |      2 |         3 |
      +--------+-----------+
      4 rows in set (0.00 sec)
  mysql> SELECT client_id, name_client FROM client;
      +-----------+-------------------------------+
      | client_id | name_client                   |
      +-----------+-------------------------------+
      |         1 | Баранов Павел                 |
      |         2 | Абрамова Катя                 |
      |         3 | Семенонов Иван                |
      |         4 | Яковлева Галина               |
      +-----------+-------------------------------+
      4 rows in set (0.00 sec)
  mysql> SELECT buy_book_id, amount, buy_id, book_id FROM buy_book;
      +-------------+--------+--------+---------+
      | buy_book_id | amount | buy_id | book_id |
      +-------------+--------+--------+---------+
      |           1 |      1 |      1 |       1 |
      |           2 |      2 |      1 |       7 |
      |           3 |      1 |      1 |       3 |
      |           4 |      2 |      2 |       8 |
      |           5 |      2 |      3 |       3 |
      |           6 |      1 |      3 |       2 |
      |           7 |      1 |      3 |       1 |
      |           8 |      1 |      4 |       5 |
      +-------------+--------+--------+---------+
      8 rows in set (0.11 sec)
  mysql> SELECT book_id, price FROM book;
      +---------+--------+
      | book_id | price  |
      +---------+--------+
      |       1 | 670.99 |
      |       2 | 540.50 |
      |       3 | 460.00 |
      |       4 | 799.01 |
      |       5 | 480.50 |
      |       6 | 650.00 |
      |       7 | 570.20 |
      |       8 | 518.99 |
      +---------+--------+
      8 rows in set (0.01 sec)
  mysql> SELECT buy_id, name_client, /*buy_book.amount, price,*/ SUM(buy_book.amount*price) AS 'Стоимость'
  FROM buy
  INNER JOIN client USING(client_id)
  INNER JOIN buy_book USING(buy_id)
  INNER JOIN book USING(book_id)
  GROUP BY buy_id, name_client
  ORDER BY buy_id;
      +--------+-----------------------------+--------------------+
      | buy_id | name_client                 | Стоимость          |
      +--------+-----------------------------+--------------------+
      |      1 | Баранов Павел               |            2271.39 |
      |      2 | Семенонов Иван              |            1037.98 |
      |      3 | Абрамова Катя               |            2131.49 |
      |      4 | Баранов Павел               |             480.50 |
      +--------+-----------------------------+--------------------+
      4 rows in set (0.00 sec)
  Task:
  Вывести номера заказов (buy_id) и названия этапов, на которых они в данный момент находятся. Если заказ доставлен –  информацию о нем не выводить. Информацию отсортировать по возрастанию buy_id.
  Decision:
  mysql> SELECT step_id, name_step FROM step;
      +---------+--------------------------------+
      | step_id | name_step                      |
      +---------+--------------------------------+
      |       1 | Оплата                         |
      |       2 | Упаковка                       |
      |       3 | Транспортировка                |
      |       4 | Доставка                       |
      +---------+--------------------------------+
      4 rows in set (0.00 sec)
  mysql> SELECT step_id, buy_id, date_step_beg, date_step_end FROM buy_step;
      +---------+--------+---------------+---------------+
      | step_id | buy_id | date_step_beg | date_step_end |
      +---------+--------+---------------+---------------+
      |       1 |      1 | 2020-02-20    | 2020-02-20    |
      |       2 |      1 | 2020-02-20    | 2020-02-21    |
      |       3 |      1 | 2020-02-22    | 2020-03-07    |
      |       4 |      1 | 2020-03-08    | 2020-03-08    |
      |       1 |      2 | 2020-02-28    | 2020-02-28    |
      |       2 |      2 | 2020-02-29    | 2020-03-01    |
      |       3 |      2 | 2020-03-02    | NULL          |
      |       4 |      2 | NULL          | NULL          |
      |       1 |      3 | 2020-03-05    | 2020-03-05    |
      |       2 |      3 | 2020-03-05    | 2020-03-06    |
      |       3 |      3 | 2020-03-06    | 2020-03-10    |
      |       4 |      3 | 2020-03-11    | NULL          |
      |       1 |      4 | 2020-03-20    | NULL          |
      |       2 |      4 | NULL          | NULL          |
      |       3 |      4 | NULL          | NULL          |
      |       4 |      4 | NULL          | NULL          |
      +---------+--------+---------------+---------------+
      16 rows in set (0.00 sec)
  mysql> SELECT buy_step.buy_id, name_step
  FROM step
  INNER JOIN buy_step USING(step_id)
  WHERE date_step_beg IS NOT NULL
  AND date_step_end IS NULL;
      +--------+--------------------------------+
      | buy_id | name_step                      |
      +--------+--------------------------------+
      |      2 | Транспортировка                |
      |      3 | Доставка                       |
      |      4 | Оплата                         |
      +--------+--------------------------------+
      3 rows in set (0.00 sec)
  Task:
  В таблице city для каждого города указано количество дней, за которые заказ может быть доставлен в этот город (рассматривается только этап Транспортировка). Для тех заказов, которые прошли этап транспортировки, вывести количество дней за которое заказ реально доставлен в город. А также, если заказ доставлен с опозданием, указать количество дней задержки, в противном случае вывести 0. В результат включить номер заказа (buy_id), а также вычисляемые столбцы Количество_дней и Опоздание. Информацию вывести в отсортированном по номеру заказа виде.
  Decision:
  mysql> SELECT * FROM city;
      +---------+-------------------------------+---------------+
      | city_id | name_city                     | days_delivery |
      +---------+-------------------------------+---------------+
      |       1 | Москва                        |             5 |
      |       2 | Санкт-Петербург               |             3 |
      |       3 | Владивосток                   |            12 |
      +---------+-------------------------------+---------------+
      3 rows in set (0.01 sec)
  mysql> SELECT * FROM client;
      +-----------+-------------------------------+---------+----------------+
      | client_id | name_client                   | city_id | email          |
      +-----------+-------------------------------+---------+----------------+
      |         1 | Баранов Павел                 |       3 | baranov@test   |
      |         2 | Абрамова Катя                 |       1 | abramova@test  |
      |         3 | Семенонов Иван                |       2 | semenov@test   |
      |         4 | Яковлева Галина               |       1 | yakovleva@test |
      +-----------+-------------------------------+---------+----------------+
      4 rows in set (0.00 sec)
  mysql> SELECT * FROM buy;
      +--------+------------------------------------------------------------------------+-----------+
      | buy_id | buy_description                                                        | client_id |
      +--------+------------------------------------------------------------------------+-----------+
      |      1 | Доставка только вечером                                                |         1 |
      |      2 | NULL                                                                   |         3 |
      |      3 | Упаковать каждую книгу по отдельности                                  |         2 |
      |      4 | NULL                                                                   |         1 |
      +--------+------------------------------------------------------------------------+-----------+
      4 rows in set (0.00 sec)
  mysql> SELECT * FROM buy_step;
      +-------------+--------+---------+---------------+---------------+
      | buy_step_id | buy_id | step_id | date_step_beg | date_step_end |
      +-------------+--------+---------+---------------+---------------+
      |           1 |      1 |       1 | 2020-02-20    | 2020-02-20    |
      |           2 |      1 |       2 | 2020-02-20    | 2020-02-21    |
      |           3 |      1 |       3 | 2020-02-22    | 2020-03-07    |
      |           4 |      1 |       4 | 2020-03-08    | 2020-03-08    |
      |           5 |      2 |       1 | 2020-02-28    | 2020-02-28    |
      |           6 |      2 |       2 | 2020-02-29    | 2020-03-01    |
      |           7 |      2 |       3 | 2020-03-02    | NULL          |
      |           8 |      2 |       4 | NULL          | NULL          |
      |           9 |      3 |       1 | 2020-03-05    | 2020-03-05    |
      |          10 |      3 |       2 | 2020-03-05    | 2020-03-06    |
      |          11 |      3 |       3 | 2020-03-06    | 2020-03-10    |
      |          12 |      3 |       4 | 2020-03-11    | NULL          |
      |          13 |      4 |       1 | 2020-03-20    | NULL          |
      |          14 |      4 |       2 | NULL          | NULL          |
      |          15 |      4 |       3 | NULL          | NULL          |
      |          16 |      4 |       4 | NULL          | NULL          |
      +-------------+--------+---------+---------------+---------------+
  16 rows in set (0.00 sec)
  mysql> SELECT * FROM step;
      +---------+--------------------------------+
      | step_id | name_step                      |
      +---------+--------------------------------+
      |       1 | Оплата                         |
      |       2 | Упаковка                       |
      |       3 | Транспортировка                |
      |       4 | Доставка                       |
      +---------+--------------------------------+
      4 rows in set (0.00 sec)
  mysql> SELECT buy_id,
  DATEDIFF(date_step_end, date_step_beg) AS Количество_дней,
  IF(days_delivery<DATEDIFF(date_step_end, date_step_beg), DATEDIFF(date_step_end, date_step_beg)-days_delivery, 0) AS Опоздание
  FROM city
  INNER JOIN client ON city.city_id=client.city_id
  INNER JOIN buy USING(client_id)
  INNER JOIN buy_step USING(buy_id)
  INNER JOIN step USING(step_id)
  WHERE step.name_step='Транспортировка' AND (date_step_beg IS NOT NULL AND date_step_end IS NOT NULL);
      +--------+-------------------------------+--------------------+
      | buy_id | Количество_дней               | Опоздание          |
      +--------+-------------------------------+--------------------+
      |      1 |                            14 |                  2 |
      |      3 |                             4 |                  0 |
      +--------+-------------------------------+--------------------+
      2 rows in set (0.00 sec)
  Task:
  Выбрать всех клиентов, которые заказывали книги Достоевского, информацию вывести в отсортированном по алфавиту виде. В решении используйте фамилию автора, а не его id.
  Decision:
  mysql> SELECT * FROM client;
      +-----------+-------------------------------+---------+----------------+
      | client_id | name_client                   | city_id | email          |
      +-----------+-------------------------------+---------+----------------+
      |         1 | Баранов Павел                 |       3 | baranov@test   |
      |         2 | Абрамова Катя                 |       1 | abramova@test  |
      |         3 | Семенонов Иван                |       2 | semenov@test   |
      |         4 | Яковлева Галина               |       1 | yakovleva@test |
      +-----------+-------------------------------+---------+----------------+
      4 rows in set (0.00 sec)
  mysql> SELECT * FROM buy;
      +--------+------------------------------------------------------------------------+-----------+
      | buy_id | buy_description                                                        | client_id |
      +--------+------------------------------------------------------------------------+-----------+
      |      1 | Доставка только вечером                                                |         1 |
      |      2 | NULL                                                                   |         3 |
      |      3 | Упаковать каждую книгу по отдельности                                  |         2 |
      |      4 | NULL                                                                   |         1 |
      +--------+------------------------------------------------------------------------+-----------+
      4 rows in set (0.00 sec)
  mysql> SELECT * FROM buy_book;
      +-------------+--------+---------+--------+
      | buy_book_id | buy_id | book_id | amount |
      +-------------+--------+---------+--------+
      |           1 |      1 |       1 |      1 |
      |           2 |      1 |       7 |      2 |
      |           3 |      1 |       3 |      1 |
      |           4 |      2 |       8 |      2 |
      |           5 |      3 |       3 |      2 |
      |           6 |      3 |       2 |      1 |
      |           7 |      3 |       1 |      1 |
      |           8 |      4 |       5 |      1 |
      +-------------+--------+---------+--------+
      8 rows in set (0.00 sec)
  mysql> SELECT * FROM book;
      +---------+------------------------------------------+-----------+----------+--------+--------+
      | book_id | title                                    | author_id | genre_id | price  | amount |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      |       1 | Мастер и Маргарита                       |         1 |        1 | 670.99 |      3 |
      |       2 | Белая гвардия                            |         1 |        1 | 540.50 |      5 |
      |       3 | Идиот                                    |         2 |        1 | 460.00 |     10 |
      |       4 | Братья Карамазовы                        |         2 |        1 | 799.01 |      2 |
      |       5 | Игрок                                    |         2 |        1 | 480.50 |     10 |
      |       6 | Стихотворения и поэмы                    |         3 |        2 | 650.00 |     15 |
      |       7 | Черный человек                           |         3 |        2 | 570.20 |      6 |
      |       8 | Лирика                                   |         4 |        2 | 518.99 |      2 |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      8 rows in set (0.00 sec)
  mysql> SELECT * FROM author;
      +-----------+-------------------------------+
      | author_id | name_author                   |
      +-----------+-------------------------------+
      |         1 | Булгаков М.А.                 |
      |         2 | Достоевский Ф.М.              |
      |         3 | Есенин С.А.                   |
      |         4 | Пастернак Б.Л.                |
      |         5 | Лермонтов М.Ю.                |
      +-----------+-------------------------------+
      5 rows in set (0.00 sec)
  mysql> SELECT name_client
  FROM client
  INNER JOIN buy ON client.client_id=buy.client_id
  INNER JOIN buy_book USING(buy_id)
  INNER JOIN book USING(book_id)
  INNER JOIN author USING(author_id)
  WHERE name_author='Достоевский Ф.М.'
  GROUP BY name_client
  ORDER BY name_client;
      +---------------------------+
      | name_client               |
      +---------------------------+
      | Абрамова Катя             |
      | Баранов Павел             |
      +---------------------------+
      2 rows in set (0.00 sec)
  Task:
  Вывести жанр (или жанры), в котором было заказано больше всего экземпляров книг, указать это количество. Последний столбец назвать Количество.
  Decision:
  mysql> SELECT * FROM genre;
      +----------+------------------------+
      | genre_id | name_genre             |
      +----------+------------------------+
      |        1 | Роман                  |
      |        2 | Поэзия                 |
      |        3 | Приключения            |
      +----------+------------------------+
      3 rows in set (0.00 sec)
  mysql> SELECT * FROM book;
      +---------+------------------------------------------+-----------+----------+--------+--------+
      | book_id | title                                    | author_id | genre_id | price  | amount |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      |       1 | Мастер и Маргарита                       |         1 |        1 | 670.99 |      3 |
      |       2 | Белая гвардия                            |         1 |        1 | 540.50 |      5 |
      |       3 | Идиот                                    |         2 |        1 | 460.00 |     10 |
      |       4 | Братья Карамазовы                        |         2 |        1 | 799.01 |      2 |
      |       5 | Игрок                                    |         2 |        1 | 480.50 |     10 |
      |       6 | Стихотворения и поэмы                    |         3 |        2 | 650.00 |     15 |
      |       7 | Черный человек                           |         3 |        2 | 570.20 |      6 |
      |       8 | Лирика                                   |         4 |        2 | 518.99 |      2 |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      8 rows in set (0.00 sec)
  mysql> SELECT * FROM buy_book;
      +-------------+--------+---------+--------+
      | buy_book_id | buy_id | book_id | amount |
      +-------------+--------+---------+--------+
      |           1 |      1 |       1 |      1 |
      |           2 |      1 |       7 |      2 |
      |           3 |      1 |       3 |      1 |
      |           4 |      2 |       8 |      2 |
      |           5 |      3 |       3 |      2 |
      |           6 |      3 |       2 |      1 |
      |           7 |      3 |       1 |      1 |
      |           8 |      4 |       5 |      1 |
      +-------------+--------+---------+--------+
      8 rows in set (0.00 sec)
  mysql> SELECT name_genre, SUM(buy_book.amount) AS Количество
  FROM genre
  INNER JOIN book ON genre.genre_id=book.genre_id
  INNER JOIN buy_book USING(book_id)
  WHERE name_genre='Роман';
      +------------+----------------------+
      | name_genre | Количество           |
      +------------+----------------------+
      | Роман      |                    7 |
      +------------+----------------------+
      1 row in set (0.02 sec)
  Task:
  Сравнить ежемесячную выручку от продажи книг за текущий и предыдущий годы. Для этого вывести год, месяц, сумму выручки в отсортированном сначала по возрастанию месяцев, затем по возрастанию лет виде. Название столбцов: Год, Месяц, Сумма.
  Информация о продажах предыдущего года хранится в архивной таблице buy_archive, которая создается в конце года на основе информации из таблиц базы данных и имеет следующую структуру:
    Название столбца    Описание
      buy_archive_id - ключевой столбец
      buy_id - id заказов, выбирается из таблицы buy
      client_id - id клиентов, выбирается из из таблицы client
      book_id - id книги, выбирается из таблицы book
      date_payment - дата оплаты заказа, выбирается из столбца date_step_end таблицы buy_step этапа Оплата» соответствующего заказа
      price - цена книги в текущем заказе из таблицы book
      (хранится, так как цена может измениться )
      amount - количество купленных книг в текущем заказе, из таблицы buy_book
  Decision:
  mysql> CREATE TABLE buy_archive
  (
      buy_    buy_archive_id INT PRIMARY KEY AUTO_INCREMENT,
      buy_    buy_id         INT,
      client_id      INT,
      book_id        INT,
      date_payment   DATE,
      price          DECIMAL(8, 2),
      amount         INT
  );
      Query OK, 0 rows affected (1.34 sec)
  mysql> INSERT INTO buy_archive (buy_id, client_id, book_id, date_payment, amount, price)
  VALUES (2, 1, 1, '2019-02-21', 2, 670.60),
  (2, 1, 3, '2019-02-21', 1, 450.90),
  (1, 2, 2, '2019-02-10', 2, 520.30),
  (1, 2, 4, '2019-02-10', 3, 780.90),
  (1, 2, 3, '2019-02-10', 1, 450.90),
  (3, 4, 4, '2019-03-05', 4, 780.90),
  (3, 4, 5, '2019-03-05', 2, 480.90),
  (4, 1, 6, '2019-03-12', 1, 650.00),
  (5, 2, 1, '2019-03-18', 2, 670.60),
  (5, 2, 4, '2019-03-18', 1, 780.90);
      Query OK, 10 rows affected (0.15 sec)
      Records: 10  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM buy_archive;
      +----------------+--------+-----------+---------+--------------+--------+--------+
      | buy_archive_id | buy_id | client_id | book_id | date_payment | price  | amount |
      +----------------+--------+-----------+---------+--------------+--------+--------+
      |              1 |      2 |         1 |       1 | 2019-02-21   | 670.60 |      2 |
      |              2 |      2 |         1 |       3 | 2019-02-21   | 450.90 |      1 |
      |              3 |      1 |         2 |       2 | 2019-02-10   | 520.30 |      2 |
      |              4 |      1 |         2 |       4 | 2019-02-10   | 780.90 |      3 |
      |              5 |      1 |         2 |       3 | 2019-02-10   | 450.90 |      1 |
      |              6 |      3 |         4 |       4 | 2019-03-05   | 780.90 |      4 |
      |              7 |      3 |         4 |       5 | 2019-03-05   | 480.90 |      2 |
      |              8 |      4 |         1 |       6 | 2019-03-12   | 650.00 |      1 |
      |              9 |      5 |         2 |       1 | 2019-03-18   | 670.60 |      2 |
      |             10 |      5 |         2 |       4 | 2019-03-18   | 780.90 |      1 |
      +----------------+--------+-----------+---------+--------------+--------+--------+
      10 rows in set (0.00 sec)
  mysql> SELECT * FROM book;
      +---------+------------------------------------------+-----------+----------+--------+--------+
      | book_id | title                                    | author_id | genre_id | price  | amount |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      |       1 | Мастер и Маргарита                       |         1 |        1 | 670.99 |      3 |
      |       2 | Белая гвардия                            |         1 |        1 | 540.50 |      5 |
      |       3 | Идиот                                    |         2 |        1 | 460.00 |     10 |
      |       4 | Братья Карамазовы                        |         2 |        1 | 799.01 |      2 |
      |       5 | Игрок                                    |         2 |        1 | 480.50 |     10 |
      |       6 | Стихотворения и поэмы                    |         3 |        2 | 650.00 |     15 |
      |       7 | Черный человек                           |         3 |        2 | 570.20 |      6 |
      |       8 | Лирика                                   |         4 |        2 | 518.99 |      2 |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      8 rows in set (0.00 sec)
  mysql> SELECT * FROM buy_book;
      +-------------+--------+---------+--------+
      | buy_book_id | buy_id | book_id | amount |
      +-------------+--------+---------+--------+
      |           1 |      1 |       1 |      1 |
      |           2 |      1 |       7 |      2 |
      |           3 |      1 |       3 |      1 |
      |           4 |      2 |       8 |      2 |
      |           5 |      3 |       3 |      2 |
      |           6 |      3 |       2 |      1 |
      |           7 |      3 |       1 |      1 |
      |           8 |      4 |       5 |      1 |
      +-------------+--------+---------+--------+
      8 rows in set (0.01 sec)
  mysql> SELECT * FROM buy;
      +--------+------------------------------------------------------------------------+-----------+
      | buy_id | buy_description                                                        | client_id |
      +--------+------------------------------------------------------------------------+-----------+
      |      1 | Доставка только вечером                                                |         1 |
      |      2 | NULL                                                                   |         3 |
      |      3 | Упаковать каждую книгу по отдельности                                  |         2 |
      |      4 | NULL                                                                   |         1 |
      +--------+------------------------------------------------------------------------+-----------+
      4 rows in set (0.00 sec)
  mysql> SELECT * FROM buy_step;
      +-------------+--------+---------+---------------+---------------+
      | buy_step_id | buy_id | step_id | date_step_beg | date_step_end |
      +-------------+--------+---------+---------------+---------------+
      |           1 |      1 |       1 | 2020-02-20    | 2020-02-20    |
      |           2 |      1 |       2 | 2020-02-20    | 2020-02-21    |
      |           3 |      1 |       3 | 2020-02-22    | 2020-03-07    |
      |           4 |      1 |       4 | 2020-03-08    | 2020-03-08    |
      |           5 |      2 |       1 | 2020-02-28    | 2020-02-28    |
      |           6 |      2 |       2 | 2020-02-29    | 2020-03-01    |
      |           7 |      2 |       3 | 2020-03-02    | NULL          |
      |           8 |      2 |       4 | NULL          | NULL          |
      |           9 |      3 |       1 | 2020-03-05    | 2020-03-05    |
      |          10 |      3 |       2 | 2020-03-05    | 2020-03-06    |
      |          11 |      3 |       3 | 2020-03-06    | 2020-03-10    |
      |          12 |      3 |       4 | 2020-03-11    | NULL          |
      |          13 |      4 |       1 | 2020-03-20    | NULL          |
      |          14 |      4 |       2 | NULL          | NULL          |
      |          15 |      4 |       3 | NULL          | NULL          |
      |          16 |      4 |       4 | NULL          | NULL          |
      +-------------+--------+---------+---------------+---------------+
      16 rows in set (0.00 sec)
  mysql> SELECT * FROM step;
      +---------+--------------------------------+
      | step_id | name_step                      |
      +---------+--------------------------------+
      |       1 | Оплата                         |
      |       2 | Упаковка                       |
      |       3 | Транспортировка                |
      |       4 | Доставка                       |
      +---------+--------------------------------+
      4 rows in set (0.00 sec)
  mysql> SELECT YEAR(date_payment) AS Год,
  MONTHNAME(date_payment) AS Месяц,
  SUM(ROUND(buy_archive.amount * buy_archive.price,2)) AS Сумма
  FROM buy_archive
  GROUP BY 1, 2
  UNION ALL
  SELECT YEAR(buy_step.date_step_end) AS Год,
  MONTHNAME(buy_step.date_step_end) AS Месяц,
  SUM(round(buy_book.amount*book.price,2)) AS Сумма
  FROM book
  INNER JOIN buy_book USING(book_id)
  INNER JOIN buy USING(buy_id)
  INNER JOIN buy_step USING(buy_id)
  INNER JOIN step USING(step_id)
  WHERE date_step_end IS NOT NULL AND name_step = "Оплата"
  GROUP BY 1, 2
  ORDER BY 2, 1;
      +--------+------------+------------+
      | Год    | Месяц      | Сумма      |
      +--------+------------+------------+
      |   2019 | February   |    5626.30 |
      |   2020 | February   |    3309.37 |
      |   2019 | March      |    6857.50 |
      |   2020 | March      |    2131.49 |
      +--------+------------+------------+
      4 rows in set (0.01 sec)
  Task:
  Для каждой отдельной книги необходимо вывести информацию о количестве проданных экземпляров и их стоимости за текущий и предыдущий год . Вычисляемые столбцы назвать Количество и Сумма. Информацию отсортировать по убыванию стоимости.
  Информация о продажах прошлого года хранится в таблице buy_archive
  Decision:
  mysql> SELECT title, SUM(Количество) AS Количество, SUM(Сумма) AS Сумма
  FROM (
      SELECT book.title, SUM(buy_book.amount) AS Количество, SUM(book.price*buy_book.amount) AS Сумма
      FROM buy_book
      INNER JOIN book USING (book_id)
      INNER JOIN buy USING(buy_id)
      INNER JOIN buy_step USING(buy_id)
      INNER JOIN step USING(step_id)
      WHERE name_step ='Оплата' AND date_step_end IS NOT NULL
      GROUP BY book.title
      UNION ALL
      SELECT book.title, SUM(buy_archive.amount) AS Количество, SUM(buy_archive.price*buy_archive.amount) AS Сумма
      FROM buy_archive
      INNER JOIN book USING (book_id)
      GROUP BY book.title
  ) AS qwert
  GROUP BY title
  ORDER BY Сумма DESC;
      +------------------------------------------+----------------------+------------+
      | title                                    | Количество           | Сумма      |
      +------------------------------------------+----------------------+------------+
      | Братья Карамазовы                        |                    8 |    6247.20 |
      | Мастер и Маргарита                       |                    6 |    4024.38 |
      | Идиот                                    |                    5 |    2281.80 |
      | Белая гвардия                            |                    3 |    1581.10 |
      | Черный человек                           |                    2 |    1140.40 |
      | Лирика                                   |                    2 |    1037.98 |
      | Игрок                                    |                    2 |     961.80 |
      | Стихотворения и поэмы                    |                    1 |     650.00 |
      +------------------------------------------+----------------------+------------+
      8 rows in set (0.01 sec)
  Task:
  Включить нового человека в таблицу с клиентами. Его имя Попов Илья, его email popov@test, проживает он в Москве.
  Decision:
  mysql> SELECT * FROM client;
      +-----------+-------------------------------+---------+----------------+
      | client_id | name_client                   | city_id | email          |
      +-----------+-------------------------------+---------+----------------+
      |         1 | Баранов Павел                 |       3 | baranov@test   |
      |         2 | Абрамова Катя                 |       1 | abramova@test  |
      |         3 | Семенонов Иван                |       2 | semenov@test   |
      |         4 | Яковлева Галина               |       1 | yakovleva@test |
      +-----------+-------------------------------+---------+----------------+
      4 rows in set (0.00 sec)
  mysql> SELECT * FROM city;
      +---------+-------------------------------+---------------+
      | city_id | name_city                     | days_delivery |
      +---------+-------------------------------+---------------+
      |       1 | Москва                        |             5 |
      |       2 | Санкт-Петербург               |             3 |
      |       3 | Владивосток                   |            12 |
      +---------+-------------------------------+---------------+
      3 rows in set (0.00 sec)
  mysql> INSERT INTO client (name_client, city_id, email)
  SELECT 'Попов Илья', city_id, 'popov@test'
  FROM city
  WHERE name_city='Москва';
      Query OK, 1 row affected (0.30 sec)
      Records: 1  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM client;
      +-----------+-------------------------------+---------+----------------+
      | client_id | name_client                   | city_id | email          |
      +-----------+-------------------------------+---------+----------------+
      |         1 | Баранов Павел                 |       3 | baranov@test   |
      |         2 | Абрамова Катя                 |       1 | abramova@test  |
      |         3 | Семенонов Иван                |       2 | semenov@test   |
      |         4 | Яковлева Галина               |       1 | yakovleva@test |
      |         5 | Попов Илья                    |       1 | popov@test     |
      +-----------+-------------------------------+---------+----------------+
      5 rows in set (0.00 sec)
  Task:
  Создать новый заказ для Попова Ильи. Его комментарий для заказа: Связаться со мной по вопросу доставки».
  Decision:
  mysql> SELECT * FROM buy;
      +--------+------------------------------------------------------------------------+-----------+
      | buy_id | buy_description                                                        | client_id |
      +--------+------------------------------------------------------------------------+-----------+
      |      1 | Доставка только вечером                                                |         1 |
      |      2 | NULL                                                                   |         3 |
      |      3 | Упаковать каждую книгу по отдельности                                  |         2 |
      |      4 | NULL                                                                   |         1 |
      +--------+------------------------------------------------------------------------+-----------+
      4 rows in set (0.01 sec)
  mysql> SELECT * FROM client;
      +-----------+-------------------------------+---------+----------------+
      | client_id | name_client                   | city_id | email          |
      +-----------+-------------------------------+---------+----------------+
      |         1 | Баранов Павел                 |       3 | baranov@test   |
      |         2 | Абрамова Катя                 |       1 | abramova@test  |
      |         3 | Семенонов Иван                |       2 | semenov@test   |
      |         4 | Яковлева Галина               |       1 | yakovleva@test |
      |         5 | Попов Илья                    |       1 | popov@test     |
      +-----------+-------------------------------+---------+----------------+
      5 rows in set (0.00 sec)
  mysql> INSERT INTO buy (buy_description, client_id)
  SELECT 'Связаться со мной по вопросу доставки', client_id
  FROM client
  WHERE name_client='Попов Илья';
      Query OK, 1 row affected (0.14 sec)
      Records: 1  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM buy;
  +--------+------------------------------------------------------------------------+-----------+
      | buy_id | buy_description                                                        | client_id |
      +--------+------------------------------------------------------------------------+-----------+
      |      1 | Доставка только вечером                                                |         1 |
      |      2 | NULL                                                                   |         3 |
      |      3 | Упаковать каждую книгу по отдельности                                  |         2 |
      |      4 | NULL                                                                   |         1 |
      |      5 | Связаться со мной по вопросу доставки                                  |         5 |
      +--------+------------------------------------------------------------------------+-----------+
      5 rows in set (0.00 sec)
  Task:
  В таблицу buy_book добавить заказ с номером 5. Этот заказ должен содержать книгу Пастернака Лирика» в количестве двух экземпляров и книгу Булгакова Белая гвардия» в одном экземпляре.
  Decision:
  mysql> SELECT * FROM buy_book;
  LECT * FROM book;
  SELECT * FROM author;
      +-------------+--------+---------+--------+
      | buy_book_id | buy_id | book_id | amount |
      +-------------+--------+---------+--------+
      |           1 |      1 |       1 |      1 |
      |           2 |      1 |       7 |      2 |
      |           3 |      1 |       3 |      1 |
      |           4 |      2 |       8 |      2 |
      |           5 |      3 |       3 |      2 |
      |           6 |      3 |       2 |      1 |
      |           7 |      3 |       1 |      1 |
      |           8 |      4 |       5 |      1 |
      +-------------+--------+---------+--------+
      8 rows in set (0.01 sec)
  mysql> SELECT * FROM book;
      +---------+------------------------------------------+-----------+----------+--------+--------+
      | book_id | title                                    | author_id | genre_id | price  | amount |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      |       1 | Мастер и Маргарита                       |         1 |        1 | 670.99 |      3 |
      |       2 | Белая гвардия                            |         1 |        1 | 540.50 |      5 |
      |       3 | Идиот                                    |         2 |        1 | 460.00 |     10 |
      |       4 | Братья Карамазовы                        |         2 |        1 | 799.01 |      2 |
      |       5 | Игрок                                    |         2 |        1 | 480.50 |     10 |
      |       6 | Стихотворения и поэмы                    |         3 |        2 | 650.00 |     15 |
      |       7 | Черный человек                           |         3 |        2 | 570.20 |      6 |
      |       8 | Лирика                                   |         4 |        2 | 518.99 |      2 |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      8 rows in set (0.01 sec)
  mysql> SELECT * FROM author;
      +-----------+-------------------------------+
      | author_id | name_author                   |
      +-----------+-------------------------------+
      |         1 | Булгаков М.А.                 |
      |         2 | Достоевский Ф.М.              |
      |         3 | Есенин С.А.                   |
      |         4 | Пастернак Б.Л.                |
      |         5 | Лермонтов М.Ю.                |
      +-----------+-------------------------------+
      5 rows in set (0.01 sec)
  mysql> SELECT * FROM buy;
      +--------+------------------------------------------------------------------------+-----------+
      | buy_id | buy_description                                                        | client_id |
      +--------+------------------------------------------------------------------------+-----------+
      |      1 | Доставка только вечером                                                |         1 |
      |      2 | NULL                                                                   |         3 |
      |      3 | Упаковать каждую книгу по отдельности                                  |         2 |
      |      4 | NULL                                                                   |         1 |
      |      5 | Связаться со мной по вопросу доставки                                  |         5 |
      +--------+------------------------------------------------------------------------+-----------+
      5 rows in set (0.00 sec)
  mysql> INSERT INTO buy_book(buy_id, book_id, amount)
  SELECT 5, book_id, 2
  FROM book
  WHERE title='Лирика' AND author_id=(
      SELECT author_id
      FROM author
      WHERE name_author='Пастернак Б.Л.')
  UNION
  SELECT 5, book_id, 1
  FROM book
  WHERE title='Белая гвардия' AND author_id=(
      SELECT author_id
      FROM author
      WHERE name_author='Булгаков М.А.');
      Query OK, 1 row affected (0.18 sec)
      Records: 1  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM buy_book;
      +-------------+--------+---------+--------+
      | buy_book_id | buy_id | book_id | amount |
      +-------------+--------+---------+--------+
      |           1 |      1 |       1 |      1 |
      |           2 |      1 |       7 |      2 |
      |           3 |      1 |       3 |      1 |
      |           4 |      2 |       8 |      2 |
      |           5 |      3 |       3 |      2 |
      |           6 |      3 |       2 |      1 |
      |           7 |      3 |       1 |      1 |
      |           8 |      4 |       5 |      1 |
      |           9 |      5 |       8 |      2 |
      +-------------+--------+---------+--------+
      9 rows in set (0.01 sec)
  mysql> INSERT INTO buy_book(buy_id, book_id, amount)
  VALUES (5, 2, 1);
      Query OK, 1 row affected (0.15 sec)
  mysql> SELECT * FROM buy_book;
      +-------------+--------+---------+--------+
      | buy_book_id | buy_id | book_id | amount |
      +-------------+--------+---------+--------+
      |           1 |      1 |       1 |      1 |
      |           2 |      1 |       7 |      2 |
      |           3 |      1 |       3 |      1 |
      |           4 |      2 |       8 |      2 |
      |           5 |      3 |       3 |      2 |
      |           6 |      3 |       2 |      1 |
      |           7 |      3 |       1 |      1 |
      |           8 |      4 |       5 |      1 |
      |           9 |      5 |       8 |      2 |
      |          10 |      5 |       2 |      1 |
      +-------------+--------+---------+--------+
      10 rows in set (0.00 sec)
  Task:
  Количество тех книг на складе, которые были включены в заказ с номером 5, уменьшить на то количество, которое в заказе с номером 5  указано.
  Decision:
  mysql> SELECT * FROM buy_book;
      +-------------+--------+---------+--------+
      | buy_book_id | buy_id | book_id | amount |
      +-------------+--------+---------+--------+
      |           1 |      1 |       1 |      1 |
      |           2 |      1 |       7 |      2 |
      |           3 |      1 |       3 |      1 |
      |           4 |      2 |       8 |      2 |
      |           5 |      3 |       3 |      2 |
      |           6 |      3 |       2 |      1 |
      |           7 |      3 |       1 |      1 |
      |           8 |      4 |       5 |      1 |
      |           9 |      5 |       8 |      2 |
      |          10 |      5 |       2 |      1 |
      +-------------+--------+---------+--------+
      10 rows in set (0.00 sec)
  mysql> SELECT book_id, amount FROM book;
      +---------+--------+
      | book_id | amount |
      +---------+--------+
      |       1 |      3 |
      |       2 |      5 |
      |       3 |     10 |
      |       4 |      2 |
      |       5 |     10 |
      |       6 |     15 |
      |       7 |      6 |
      |       8 |      2 |
      +---------+--------+
      8 rows in set (0.00 sec)
  mysql> UPDATE book,buy_book
  SET book.amount = book.amount - buy_book.amount
  WHERE buy_book.buy_id=5 AND book.book_id = buy_book.book_id;
      Query OK, 2 rows affected (0.19 sec)
      Rows matched: 2  Changed: 2  Warnings: 0
  mysql> SELECT book_id, amount FROM book;
      +---------+--------+
      | book_id | amount |
      +---------+--------+
      |       1 |      3 |
      |       2 |      4 |
      |       3 |     10 |
      |       4 |      2 |
      |       5 |     10 |
      |       6 |     15 |
      |       7 |      6 |
      |       8 |      0 |
      +---------+--------+
      8 rows in set (0.00 sec)
  Task:
  Создать счет (таблицу buy_pay) на оплату заказа с номером 5, в который включить название книг, их автора, цену, количество заказанных книг и  стоимость. Последний столбец назвать Стоимость. Информацию в таблицу занести в отсортированном по названиям книг виде.
  Decision:
  mysql> SELECT book_id, title, author_id, price FROM book;
      +---------+------------------------------------------+-----------+--------+
      | book_id | title                                    | author_id | price  |
      +---------+------------------------------------------+-----------+--------+
      |       1 | Мастер и Маргарита                       |         1 | 670.99 |
      |       2 | Белая гвардия                            |         1 | 540.50 |
      |       3 | Идиот                                    |         2 | 460.00 |
      |       4 | Братья Карамазовы                        |         2 | 799.01 |
      |       5 | Игрок                                    |         2 | 480.50 |
      |       6 | Стихотворения и поэмы                    |         3 | 650.00 |
      |       7 | Черный человек                           |         3 | 570.20 |
      |       8 | Лирика                                   |         4 | 518.99 |
      +---------+------------------------------------------+-----------+--------+
      8 rows in set (0.00 sec)
  mysql> SELECT * FROM author;
      +-----------+-------------------------------+
      | author_id | name_author                   |
      +-----------+-------------------------------+
      |         1 | Булгаков М.А.                 |
      |         2 | Достоевский Ф.М.              |
      |         3 | Есенин С.А.                   |
      |         4 | Пастернак Б.Л.                |
      |         5 | Лермонтов М.Ю.                |
      +-----------+-------------------------------+
      5 rows in set (0.00 sec)
  mysql> SELECT * FROM buy_book;
      +-------------+--------+---------+--------+
      | buy_book_id | buy_id | book_id | amount |
      +-------------+--------+---------+--------+
      |           1 |      1 |       1 |      1 |
      |           2 |      1 |       7 |      2 |
      |           3 |      1 |       3 |      1 |
      |           4 |      2 |       8 |      2 |
      |           5 |      3 |       3 |      2 |
      |           6 |      3 |       2 |      1 |
      |           7 |      3 |       1 |      1 |
      |           8 |      4 |       5 |      1 |
      |           9 |      5 |       8 |      2 |
      |          10 |      5 |       2 |      1 |
      +-------------+--------+---------+--------+
      10 rows in set (0.00 sec)
  mysql> CREATE TABLE buy_pay AS
  SELECT book.title, author.name_author, price, buy_book.amount, ROUND(buy_book.amount*price,2) AS 'Стоимость'
  FROM book
  INNER JOIN author
  ON book.author_id=author.author_id
  INNER JOIN buy_book
  ON book.book_id =buy_book.book_id
  WHERE buy_book.buy_id=5
  ORDER BY book.title;
      Query OK, 2 rows affected (2.35 sec)
      Records: 2  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM buy_pay;
      +----------------------------+---------------------------+--------+--------+--------------------+
      | title                      | name_author               | price  | amount | Стоимость          |
      +----------------------------+---------------------------+--------+--------+--------------------+
      | Белая гвардия              | Булгаков М.А.             | 540.50 |      1 |             540.50 |
      | Лирика                     | Пастернак Б.Л.            | 518.99 |      2 |            1037.98 |
      +----------------------------+---------------------------+--------+--------+--------------------+
      2 rows in set (0.00 sec)
  Task:
  Создать общий счет (таблицу buy_pay) на оплату заказа с номером 5. Куда включить номер заказа, количество книг в заказе (название столбца Количество) и его общую стоимость (название столбца Итого). Для решения используйте ОДИН запрос.
  Decision:
  mysql> SELECT * FROM buy_book;
      +-------------+--------+---------+--------+
      | buy_book_id | buy_id | book_id | amount |
      +-------------+--------+---------+--------+
      |           1 |      1 |       1 |      1 |
      |           2 |      1 |       7 |      2 |
      |           3 |      1 |       3 |      1 |
      |           4 |      2 |       8 |      2 |
      |           5 |      3 |       3 |      2 |
      |           6 |      3 |       2 |      1 |
      |           7 |      3 |       1 |      1 |
      |           8 |      4 |       5 |      1 |
      |           9 |      5 |       8 |      2 |
      |          10 |      5 |       2 |      1 |
      +-------------+--------+---------+--------+
      10 rows in set (0.00 sec)
  mysql> SELECT book_id, price FROM book;
      +---------+--------+
      | book_id | price  |
      +---------+--------+
      |       1 | 670.99 |
      |       2 | 540.50 |
      |       3 | 460.00 |
      |       4 | 799.01 |
      |       5 | 480.50 |
      |       6 | 650.00 |
      |       7 | 570.20 |
      |       8 | 518.99 |
      +---------+--------+
      8 rows in set (0.00 sec)
  mysql> CREATE TABLE buy_pay1 AS SELECT buy_book.buy_id, SUM(buy_book.amount) AS Количество, SUM(book.price*buy_book.amou
  nt) AS Итого FROM buy_book INNER JOIN book  USING(book_id) WHERE buy_id=5;
      Query OK, 1 row affected (1.63 sec)
      Records: 1  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM buy_pay1;
      +--------+----------------------+------------+
      | buy_id | Количество           | Итого      |
      +--------+----------------------+------------+
      |      5 |                    3 |    1578.48 |
      +--------+----------------------+------------+
      1 row in set (0.00 sec)
  Task:
  В таблицу buy_step для заказа с номером 5 включить все этапы из таблицы step, которые должен пройти этот заказ. В столбцы date_step_beg и date_step_end всех записей занести Null.
  Decision:
  mysql> SELECT * FROM buy_step;
      +-------------+--------+---------+---------------+---------------+
      | buy_step_id | buy_id | step_id | date_step_beg | date_step_end |
      +-------------+--------+---------+---------------+---------------+
      |           1 |      1 |       1 | 2020-02-20    | 2020-02-20    |
      |           2 |      1 |       2 | 2020-02-20    | 2020-02-21    |
      |           3 |      1 |       3 | 2020-02-22    | 2020-03-07    |
      |           4 |      1 |       4 | 2020-03-08    | 2020-03-08    |
      |           5 |      2 |       1 | 2020-02-28    | 2020-02-28    |
      |           6 |      2 |       2 | 2020-02-29    | 2020-03-01    |
      |           7 |      2 |       3 | 2020-03-02    | NULL          |
      |           8 |      2 |       4 | NULL          | NULL          |
      |           9 |      3 |       1 | 2020-03-05    | 2020-03-05    |
      |          10 |      3 |       2 | 2020-03-05    | 2020-03-06    |
      |          11 |      3 |       3 | 2020-03-06    | 2020-03-10    |
      |          12 |      3 |       4 | 2020-03-11    | NULL          |
      |          13 |      4 |       1 | 2020-03-20    | NULL          |
      |          14 |      4 |       2 | NULL          | NULL          |
      |          15 |      4 |       3 | NULL          | NULL          |
      |          16 |      4 |       4 | NULL          | NULL          |
      +-------------+--------+---------+---------------+---------------+
      16 rows in set (0.02 sec)
  mysql> SELECT * FROM step;
      +---------+--------------------------------+
      | step_id | name_step                      |
      +---------+--------------------------------+
      |       1 | Оплата                         |
      |       2 | Упаковка                       |
      |       3 | Транспортировка                |
      |       4 | Доставка                       |
      +---------+--------------------------------+
      4 rows in set (0.01 sec)
  mysql> SELECT * FROM buy;
      +--------+------------------------------------------------------------------------+-----------+
      | buy_id | buy_description                                                        | client_id |
      +--------+------------------------------------------------------------------------+-----------+
      |      1 | Доставка только вечером                                                |         1 |
      |      2 | NULL                                                                   |         3 |
      |      3 | Упаковать каждую книгу по отдельности                                  |         2 |
      |      4 | NULL                                                                   |         1 |
      |      5 | Связаться со мной по вопросу доставки                                  |         5 |
      +--------+------------------------------------------------------------------------+-----------+
      5 rows in set (0.00 sec)
  mysql> INSERT INTO buy_step(buy_id, step_id)
  SELECT buy_id, step_id
  FROM buy
  CROSS JOIN step
  WHERE buy_id=5;
      Query OK, 4 rows affected (0.21 sec)
      Records: 4  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM buy_step;
      +-------------+--------+---------+---------------+---------------+
      | buy_step_id | buy_id | step_id | date_step_beg | date_step_end |
      +-------------+--------+---------+---------------+---------------+
      |           1 |      1 |       1 | 2020-02-20    | 2020-02-20    |
      |           2 |      1 |       2 | 2020-02-20    | 2020-02-21    |
      |           3 |      1 |       3 | 2020-02-22    | 2020-03-07    |
      |           4 |      1 |       4 | 2020-03-08    | 2020-03-08    |
      |           5 |      2 |       1 | 2020-02-28    | 2020-02-28    |
      |           6 |      2 |       2 | 2020-02-29    | 2020-03-01    |
      |           7 |      2 |       3 | 2020-03-02    | NULL          |
      |           8 |      2 |       4 | NULL          | NULL          |
      |           9 |      3 |       1 | 2020-03-05    | 2020-03-05    |
      |          10 |      3 |       2 | 2020-03-05    | 2020-03-06    |
      |          11 |      3 |       3 | 2020-03-06    | 2020-03-10    |
      |          12 |      3 |       4 | 2020-03-11    | NULL          |
      |          13 |      4 |       1 | 2020-03-20    | NULL          |
      |          14 |      4 |       2 | NULL          | NULL          |
      |          15 |      4 |       3 | NULL          | NULL          |
      |          16 |      4 |       4 | NULL          | NULL          |
      |          17 |      5 |       1 | NULL          | NULL          |
      |          18 |      5 |       2 | NULL          | NULL          |
      |          19 |      5 |       3 | NULL          | NULL          |
      |          20 |      5 |       4 | NULL          | NULL          |
      +-------------+--------+---------+---------------+---------------+
      20 rows in set (0.00 sec)
  Task:
  В таблицу buy_step занести дату 12.04.2020 выставления счета на оплату заказа с номером 5.
  Правильнее было бы занести не конкретную, а текущую дату. Это можно сделать с помощью функции Now(). Но при этом в разные дни будут вставляться разная дата, и задание нельзя будет проверить, поэтому  вставим дату 12.04.2020.
  Decision:
  mysql> SELECT * FROM buy_step;
      +-------------+--------+---------+---------------+---------------+
      | buy_step_id | buy_id | step_id | date_step_beg | date_step_end |
      +-------------+--------+---------+---------------+---------------+
      |           1 |      1 |       1 | 2020-02-20    | 2020-02-20    |
      |           2 |      1 |       2 | 2020-02-20    | 2020-02-21    |
      |           3 |      1 |       3 | 2020-02-22    | 2020-03-07    |
      |           4 |      1 |       4 | 2020-03-08    | 2020-03-08    |
      |           5 |      2 |       1 | 2020-02-28    | 2020-02-28    |
      |           6 |      2 |       2 | 2020-02-29    | 2020-03-01    |
      |           7 |      2 |       3 | 2020-03-02    | NULL          |
      |           8 |      2 |       4 | NULL          | NULL          |
      |           9 |      3 |       1 | 2020-03-05    | 2020-03-05    |
      |          10 |      3 |       2 | 2020-03-05    | 2020-03-06    |
      |          11 |      3 |       3 | 2020-03-06    | 2020-03-10    |
      |          12 |      3 |       4 | 2020-03-11    | NULL          |
      |          13 |      4 |       1 | 2020-03-20    | NULL          |
      |          14 |      4 |       2 | NULL          | NULL          |
      |          15 |      4 |       3 | NULL          | NULL          |
      |          16 |      4 |       4 | NULL          | NULL          |
      |          17 |      5 |       1 | NULL          | NULL          |
      |          18 |      5 |       2 | NULL          | NULL          |
      |          19 |      5 |       3 | NULL          | NULL          |
      |          20 |      5 |       4 | NULL          | NULL          |
      +-------------+--------+---------+---------------+---------------+
      20 rows in set (0.01 sec)
  mysql> SELECT * FROM step;
      +---------+--------------------------------+
      | step_id | name_step                      |
      +---------+--------------------------------+
      |       1 | Оплата                         |
      |       2 | Упаковка                       |
      |       3 | Транспортировка                |
      |       4 | Доставка                       |
      +---------+--------------------------------+
      4 rows in set (0.00 sec)
  mysql> UPDATE buy_step
  INNER JOIN step
  USING(step_id)
  SET date_step_beg = '2020-04-12'
  WHERE buy_step.buy_id=5 AND step.name_step='Оплата';
      Query OK, 1 row affected (0.30 sec)
      Rows matched: 1  Changed: 1  Warnings: 0
  mysql> SELECT * FROM buy_step;
      +-------------+--------+---------+---------------+---------------+
      | buy_step_id | buy_id | step_id | date_step_beg | date_step_end |
      +-------------+--------+---------+---------------+---------------+
      |           1 |      1 |       1 | 2020-02-20    | 2020-02-20    |
      |           2 |      1 |       2 | 2020-02-20    | 2020-02-21    |
      |           3 |      1 |       3 | 2020-02-22    | 2020-03-07    |
      |           4 |      1 |       4 | 2020-03-08    | 2020-03-08    |
      |           5 |      2 |       1 | 2020-02-28    | 2020-02-28    |
      |           6 |      2 |       2 | 2020-02-29    | 2020-03-01    |
      |           7 |      2 |       3 | 2020-03-02    | NULL          |
      |           8 |      2 |       4 | NULL          | NULL          |
      |           9 |      3 |       1 | 2020-03-05    | 2020-03-05    |
      |          10 |      3 |       2 | 2020-03-05    | 2020-03-06    |
      |          11 |      3 |       3 | 2020-03-06    | 2020-03-10    |
      |          12 |      3 |       4 | 2020-03-11    | NULL          |
      |          13 |      4 |       1 | 2020-03-20    | NULL          |
      |          14 |      4 |       2 | NULL          | NULL          |
      |          15 |      4 |       3 | NULL          | NULL          |
      |          16 |      4 |       4 | NULL          | NULL          |
      |          17 |      5 |       1 | 2020-04-12    | NULL          |
      |          18 |      5 |       2 | NULL          | NULL          |
      |          19 |      5 |       3 | NULL          | NULL          |
      |          20 |      5 |       4 | NULL          | NULL          |
      +-------------+--------+---------+---------------+---------------+
      20 rows in set (0.01 sec)
  Task:
  Завершить этап Оплата» для заказа с номером 5, вставив в столбец date_step_end дату 13.04.2020, и начать следующий этап (Упаковка»), задав в столбце date_step_beg для этого этапа ту же дату.
  Реализовать два запроса для завершения этапа и начала следующего. Они должны быть записаны в общем виде, чтобы его можно было применять для любых этапов, изменив только текущий этап. Для примера пусть это будет этап Оплата».
  Decision:
  mysql> SELECT * FROM buy_step;
      +-------------+--------+---------+---------------+---------------+
      | buy_step_id | buy_id | step_id | date_step_beg | date_step_end |
      +-------------+--------+---------+---------------+---------------+
      |           1 |      1 |       1 | 2020-02-20    | 2020-02-20    |
      |           2 |      1 |       2 | 2020-02-20    | 2020-02-21    |
      |           3 |      1 |       3 | 2020-02-22    | 2020-03-07    |
      |           4 |      1 |       4 | 2020-03-08    | 2020-03-08    |
      |           5 |      2 |       1 | 2020-02-28    | 2020-02-28    |
      |           6 |      2 |       2 | 2020-02-29    | 2020-03-01    |
      |           7 |      2 |       3 | 2020-03-02    | NULL          |
      |           8 |      2 |       4 | NULL          | NULL          |
      |           9 |      3 |       1 | 2020-03-05    | 2020-03-05    |
      |          10 |      3 |       2 | 2020-03-05    | 2020-03-06    |
      |          11 |      3 |       3 | 2020-03-06    | 2020-03-10    |
      |          12 |      3 |       4 | 2020-03-11    | NULL          |
      |          13 |      4 |       1 | 2020-03-20    | NULL          |
      |          14 |      4 |       2 | NULL          | NULL          |
      |          15 |      4 |       3 | NULL          | NULL          |
      |          16 |      4 |       4 | NULL          | NULL          |
      |          17 |      5 |       1 | 2020-04-12    | NULL          |
      |          18 |      5 |       2 | NULL          | NULL          |
      |          19 |      5 |       3 | NULL          | NULL          |
      |          20 |      5 |       4 | NULL          | NULL          |
      +-------------+--------+---------+---------------+---------------+
      20 rows in set (0.00 sec)
  mysql> SELECT * FROM step;
      +---------+--------------------------------+
      | step_id | name_step                      |
      +---------+--------------------------------+
      |       1 | Оплата                         |
      |       2 | Упаковка                       |
      |       3 | Транспортировка                |
      |       4 | Доставка                       |
      +---------+--------------------------------+
      4 rows in set (0.00 sec)
  mysql> UPDATE buy_step
  NNERINNER JOIN step
  G(stepUSING(step_id)
  SET date_step_end='2020-04-13'
  WHERE step.name_step='Оплата' AND buy_step.buy_id=5;
      Query OK, 1 row affected (0.26 sec)
      Rows matched: 1  Changed: 1  Warnings: 0
  mysql> UPDATE buy_step
  INNER JOIN step
  USING(step_id)
  SET date_step_beg='2020-04-13'
  WHERE step.name_step='Упаковка' AND buy_step.buy_id=5;
      Query OK, 1 row affected (0.22 sec)
      Rows matched: 1  Changed: 1  Warnings: 0
  mysql> SELECT * FROM buy_step;
      +-------------+--------+---------+---------------+---------------+
      | buy_step_id | buy_id | step_id | date_step_beg | date_step_end |
      +-------------+--------+---------+---------------+---------------+
      |           1 |      1 |       1 | 2020-02-20    | 2020-02-20    |
      |           2 |      1 |       2 | 2020-02-20    | 2020-02-21    |
      |           3 |      1 |       3 | 2020-02-22    | 2020-03-07    |
      |           4 |      1 |       4 | 2020-03-08    | 2020-03-08    |
      |           5 |      2 |       1 | 2020-02-28    | 2020-02-28    |
      |           6 |      2 |       2 | 2020-02-29    | 2020-03-01    |
      |           7 |      2 |       3 | 2020-03-02    | NULL          |
      |           8 |      2 |       4 | NULL          | NULL          |
      |           9 |      3 |       1 | 2020-03-05    | 2020-03-05    |
      |          10 |      3 |       2 | 2020-03-05    | 2020-03-06    |
      |          11 |      3 |       3 | 2020-03-06    | 2020-03-10    |
      |          12 |      3 |       4 | 2020-03-11    | NULL          |
      |          13 |      4 |       1 | 2020-03-20    | NULL          |
      |          14 |      4 |       2 | NULL          | NULL          |
      |          15 |      4 |       3 | NULL          | NULL          |
      |          16 |      4 |       4 | NULL          | NULL          |
      |          17 |      5 |       1 | 2020-04-12    | 2020-04-13    |
      |          18 |      5 |       2 | 2020-04-13    | NULL          |
      |          19 |      5 |       3 | NULL          | NULL          |
      |          20 |      5 |       4 | NULL          | NULL          |
      +-------------+--------+---------+---------------+---------------+
      20 rows in set (0.00 sec)
  Task:
  Провести аналитику по трем ценовым категориям (до 600 руб, от 600 руб до 700 руб, свыше 700 руб) и вывести среднюю цену  книги, общую стоимость остатков книг  в этой ценовой позиции и количество позиций. Среднюю цену и стоимость округлить до двух знаков после запятой. Информацию отсортировать по возрастанию нижней границы ценовой категории.
  Для реализации этого запроса создадим вспомогательную таблицу stat, в которой будут храниться ценовые категории (первая ценовая категория - цены  больше или равны 0 и меньше 600, вторая - больше или равны 600 и меньше 700 и т.д.):
  beg_range    end_range
  int            int
  0            600
  600            700
  700            10000
  Decision:
  MariaDB [OnlineBookStore]> CREATE TABLE stat (beg_range INT, end_range INT);
      Query OK, 0 rows affected (0.010 sec)
  MariaDB [OnlineBookStore]> INSERT INTO stat (beg_range, end_range)
      -> VALUES (0, 600),(600,700),(700,10000);
  Query OK, 3 rows affected (0.003 sec)
  Records: 3  Duplicates: 0  Warnings: 0
  MariaDB [OnlineBookStore]> SELECT * FROM stat;
      +-----------+-----------+
      | beg_range | end_range |
      +-----------+-----------+
      |         0 |       600 |
      |       600 |       700 |
      |       700 |     10000 |
      +-----------+-----------+
      3 rows in set (0.001 sec)
  MariaDB [OnlineBookStore]> SELECT beg_range,
      ->     end_range,
      ->     ROUND(AVG(price), 2) AS Средняя_цена,
      ->     SUM(price * amount) AS Стоимость,
      ->     COUNT(amount) AS Количество
      -> FROM( SELECT beg_range,
      ->     end_range,
      ->     price,
      ->     amount
      ->     FROM stat
      ->     JOIN book ON beg_range<price AND end_range>price
      ->     ) table1    
      -> GROUP BY beg_range, end_range
      -> ORDER BY beg_range;
  +-----------+-----------+-------------------------+--------------------+----------------------+
  | beg_range | end_range | Средняя_цена            | Стоимость          | Количество           |
  +-----------+-----------+-------------------------+--------------------+----------------------+
  |         0 |       600 |                  514.04 |           14988.20 |                    5 |
  |       600 |       700 |                  660.50 |           11762.97 |                    2 |
  |       700 |     10000 |                  799.01 |            1598.02 |                    1 |
  +-----------+-----------+-------------------------+--------------------+----------------------+
  3 rows in set (0.003 sec)
  Task:
  Вывести всю информацию из таблицы book, упорядоченную по возрастанию длины названия книги.
  Decision:
  MariaDB [OnlineBookStore]> SELECT * FROM book
      -> ORDER BY LENGTH(title);
  +---------+------------------------------------------+-----------+----------+--------+--------+
  | book_id | title                                    | author_id | genre_id | price  | amount |
  +---------+------------------------------------------+-----------+----------+--------+--------+
  |       3 | Идиот                                    |         2 |        1 | 460.00 |     10 |
  |       5 | Игрок                                    |         2 |        1 | 480.50 |     10 |
  |       8 | Лирика                                   |         4 |        2 | 518.99 |      0 |
  |       2 | Белая гвардия                            |         1 |        1 | 540.50 |      4 |
  |       7 | Черный человек                           |         3 |        2 | 570.20 |      6 |
  |       4 | Братья Карамазовы                        |         2 |        1 | 799.01 |      2 |
  |       1 | Мастер и Маргарита                       |         1 |        1 | 670.99 |      3 |
  |       6 | Стихотворения и поэмы                    |         3 |        2 | 650.00 |     15 |
  +---------+------------------------------------------+-----------+----------+--------+--------+
  8 rows in set (0.001 sec)
  Task:
  Удалить из таблиц book и supplyкниги, цены которых заканчиваются на 99 копеек. Например, книга с ценой 670.99 должна быть удалена.
  Decision:
  MariaDB [OnlineBookStore]> CREATE TABLE supply (
      -> supply_id INT PRIMARY KEY AUTO_INCREMENT,
      -> title VARCHAR(50),
      -> author VARCHAR(30),
      -> price DECIMAL(8,2),
      -> amount INT)
      -> ENGINE=MyISAM CHARACTER SET=utf8mb4;
  Query OK, 0 rows affected (0.023 sec)
  MariaDB [OnlineBookStore]> INSERT INTO supply (title, author, price, amount)  
      -> VALUES ('Лирика', 'Пастернак Б.Л.', 518.99, 2),
      -> ('Черный человек', 'Есенин С.А.', 570.20, 6),
      -> ('Белая гвардия', 'Булгаков М.А.', 540.50, 7),
      -> ('Идиот', 'Достоевский Ф.М.', 360.80, 3);
  Query OK, 4 rows affected (0.002 sec)
  Records: 4  Duplicates: 0  Warnings: 0
  MariaDB [OnlineBookStore]> SELECT * FROM supply;
      +-----------+-----------------------------+-------------------------------+--------+--------+
      | supply_id | title                       | author                        | price  | amount |
      +-----------+-----------------------------+-------------------------------+--------+--------+
      |         1 | Лирика                      | Пастернак Б.Л.                | 518.99 |      2 |
      |         2 | Черный человек              | Есенин С.А.                   | 570.20 |      6 |
      |         3 | Белая гвардия               | Булгаков М.А.                 | 540.50 |      7 |
      |         4 | Идиот                       | Достоевский Ф.М.              | 360.80 |      3 |
      +-----------+-----------------------------+-------------------------------+--------+--------+
      4 rows in set (0.001 sec)
  MariaDB [OnlineBookStore]> SELECT * FROM book;
      +---------+------------------------------------------+-----------+----------+--------+--------+
      | book_id | title                                    | author_id | genre_id | price  | amount |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      |       1 | Мастер и Маргарита                       |         1 |        1 | 670.99 |      3 |
      |       2 | Белая гвардия                            |         1 |        1 | 540.50 |      4 |
      |       3 | Идиот                                    |         2 |        1 | 460.00 |     10 |
      |       4 | Братья Карамазовы                        |         2 |        1 | 799.01 |      2 |
      |       5 | Игрок                                    |         2 |        1 | 480.50 |     10 |
      |       6 | Стихотворения и поэмы                    |         3 |        2 | 650.00 |     15 |
      |       7 | Черный человек                           |         3 |        2 | 570.20 |      6 |
      |       8 | Лирика                                   |         4 |        2 | 518.99 |      0 |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      8 rows in set (0.001 sec)
  MariaDB [OnlineBookStore]> DELETE FROM supply
      -> WHERE price % 1 = 0.99;
  Query OK, 0 rows affected (0.001 sec)
  MariaDB [OnlineBookStore]> DELETE FROM book
      -> WHERE price % 1 = 0.99;
  Query OK, 0 rows affected (0.001 sec)
  Task:
  Снизить цены книг, цена которых больше 600 рублей, на 20%. Вывести информацию о книгах, скидку (столбец sale_20) и цену книги со скидкой (price_sale).  Результаты округлить до двух знаков после запятой. Для тех книг, на которые скидка не действует, в последних двух столбцах вывести символ  "-".  Отсортировать информацию сначала по фамилии автора, а потом по названию книги.
  Decision:
  MariaDB [OnlineBookStore]> SELECT * FROM book;
      +---------+-----------------------+------------------+--------+--------+
      | book_id | title                 | author           | price  | amount |
      +---------+-----------------------+------------------+--------+--------+
      | 1       | Мастер и Маргарита    | Булгаков М.А.    | 670.99 | 3      |
      | 2       | Белая гвардия         | Булгаков М.А.    | 540.50 | 5      |
      | 3       | Идиот                 | Достоевский Ф.М. | 460.00 | 10     |
      | 4       | Братья Карамазовы     | Достоевский Ф.М. | 799.01 | 3      |
      | 5       | Игрок                 | Достоевский Ф.М. | 480.50 | 10     |
      | 6       | Стихотворения и поэмы | Есенин С.А.      | 650.00 | 15     |
      +---------+-----------------------+------------------+--------+--------+
  MariaDB [OnlineBookStore]> SELECT author, title, price, amount,
      -> IF(price > 600, ROUND(price * 0.2, 2), '-') AS sale_20,
      -> IF(price > 600, ROUND(price * 0.8, 2),  '-') AS price_sale
      -> FROM book
      -> ORDER BY author, title;
  +------------------+-----------------------+--------+--------+---------+------------+
  | author           | title                 | price  | amount | sale_20 | price_sale |
  +------------------+-----------------------+--------+--------+---------+------------+
  | Булгаков М.А.    | Белая гвардия         | 540.50 | 5      | -       | -          |
  | Булгаков М.А.    | Мастер и Маргарита    | 670.99 | 3      | 134.20  | 536.79     |
  | Достоевский Ф.М. | Братья Карамазовы     | 799.01 | 3      | 159.80  | 639.21     |
  | Достоевский Ф.М. | Игрок                 | 480.50 | 10     | -       | -          |
  | Достоевский Ф.М. | Идиот                 | 460.00 | 10     | -       | -          |
  | Есенин С.А.      | Стихотворения и поэмы | 650.00 | 15     | 130.00  | 520.00     |
  +------------------+-----------------------+--------+--------+---------+------------+
  Task:
  Вывести авторов и суммарную стоимость их книг, если хотя бы одна их книга имеет цену выше средней по складу. Средняя цена рассчитывается как простое среднее, с помощью avg(). Информацию отсортировать по убыванию суммарной стоимости.
  Decision:
  MariaDB [OnlineBookStore]> SELECT * FROM book;
      +---------+-----------------------+------------------+--------+--------+
      | book_id | title                 | author           | price  | amount |
      +---------+-----------------------+------------------+--------+--------+
      | 1       | Мастер и Маргарита    | Булгаков М.А.    | 670.99 | 3      |
      | 2       | Белая гвардия         | Булгаков М.А.    | 540.50 | 5      |
      | 3       | Идиот                 | Достоевский Ф.М. | 460.00 | 10     |
      | 4       | Братья Карамазовы     | Достоевский Ф.М. | 799.01 | 3      |
      | 5       | Игрок                 | Достоевский Ф.М. | 480.50 | 10     |
      | 6       | Стихотворения и поэмы | Есенин С.А.      | 650.00 | 15     |
      +---------+-----------------------+------------------+--------+--------+
  MariaDB [OnlineBookStore]> SET @avg_price := (SELECT AVG(price)
      ->     FROM book);
      -> SELECT author,  
      ->     SUM(price * amount) AS Стоимость
      -> FROM book
      -> WHERE author
      -> IN (SELECT author
      ->     FROM book
      ->     WHERE price > @avg_price)
      -> GROUP BY author
      -> ORDER BY Стоимость DESC;
  +------------------+-----------+
  | author           | Стоимость |
  +------------------+-----------+
  | Достоевский Ф.М. | 11802.03  |
  | Есенин С.А.      | 9750.00   |
  | Булгаков М.А.    | 4715.47   |
  +------------------+-----------+
  Task:
  Вывести автора, название, количество, цену (Розничная_цена). Для тех книг количество которых больше или равно 10, отобразить оптовую скидку 15% (Скидка), округлить до двух знаков после запятой и вывести оптовую цену с учетом скидки -15% (Оптовая_цена). Все атрибуты перевести на русский язык. Отсортировать по автору и названию книги.
  Decision:
  MariaDB [OnlineBookStore]> SELECT * FROM book;
      +---------+-----------------------+------------------+--------+--------+
      | book_id | title                 | author           | price  | amount |
      +---------+-----------------------+------------------+--------+--------+
      | 1       | Мастер и Маргарита    | Булгаков М.А.    | 670.99 | 3      |
      | 2       | Белая гвардия         | Булгаков М.А.    | 540.50 | 5      |
      | 3       | Идиот                 | Достоевский Ф.М. | 460.00 | 10     |
      | 4       | Братья Карамазовы     | Достоевский Ф.М. | 799.01 | 3      |
      | 5       | Игрок                 | Достоевский Ф.М. | 480.50 | 10     |
      | 6       | Стихотворения и поэмы | Есенин С.А.      | 650.00 | 15     |
      +---------+-----------------------+------------------+--------+--------+
  MariaDB [OnlineBookStore]> SELECT author AS "Автор",
      ->     title AS "Название_книги",
      ->     amount AS "Количество",
      ->     price AS "Розничная_цена",
      ->     IF (amount >= 10, 15, 0) AS "Скидка",  round (IF (amount >= 10, price * 0.85, price), 2) AS "Оптовая_цена"    
      -> FROM book
      -> ORDER BY author, title;
  +------------------+-----------------------+------------+----------------+--------+--------------+
  | Автор            | Название_книги        | Количество | Розничная_цена | Скидка | Оптовая_цена |
  +------------------+-----------------------+------------+----------------+--------+--------------+
  | Булгаков М.А.    | Белая гвардия         | 5          | 540.50         | 0      | 540.50       |
  | Булгаков М.А.    | Мастер и Маргарита    | 3          | 670.99         | 0      | 670.99       |
  | Достоевский Ф.М. | Братья Карамазовы     | 3          | 799.01         | 0      | 799.01       |
  | Достоевский Ф.М. | Игрок                 | 10         | 480.50         | 15     | 408.43       |
  | Достоевский Ф.М. | Идиот                 | 10         | 460.00         | 15     | 391.00       |
  | Есенин С.А.      | Стихотворения и поэмы | 15         | 650.00         | 15     | 552.50       |
  +------------------+-----------------------+------------+----------------+--------+--------------+
  Task:
  Вывести авторов, у которых есть книги со стоимостью более 500 и количеством более 1 шт на складе. Учитывать книги только тех авторов, у которых не менее 2-х произведений на складе. Вывести автора, количество различных произведений автора, минимальную цену и количество книг на складе. Информацию отсортировать по фамилии автора в алфавитном порядке.
  Decision:
  MariaDB [OnlineBookStore]> SELECT * FROM book;
      +---------+-----------------------+------------------+--------+--------+
      | book_id | title                 | author           | price  | amount |
      +---------+-----------------------+------------------+--------+--------+
      | 1       | Мастер и Маргарита    | Булгаков М.А.    | 670.99 | 3      |
      | 2       | Белая гвардия         | Булгаков М.А.    | 540.50 | 5      |
      | 3       | Идиот                 | Достоевский Ф.М. | 460.00 | 10     |
      | 4       | Братья Карамазовы     | Достоевский Ф.М. | 799.01 | 3      |
      | 5       | Игрок                 | Достоевский Ф.М. | 480.50 | 10     |
      | 6       | Стихотворения и поэмы | Есенин С.А.      | 650.00 | 15     |
      +---------+-----------------------+------------------+--------+--------+
  MariaDB [OnlineBookStore]> SELECT author,
      ->     COUNT(author) AS Количество_произведений,
      ->     MIN(price) AS Минимальная_цена,
      ->     SUM(amount) AS Число_книг
      -> FROM book
      -> WHERE amount > 1
      -> GROUP BY author
      -> HAVING COUNT(author) > 1
      -> ORDER BY author;
  Task:
  Вывести жанр(ы), в котором было заказано меньше всего экземпляров книг, указать это количество. Учитывать только жанры, в которых была заказана хотя бы одна книга.
  При реализации в основном запросе не используйте LIMIT, поскольку жанров с минимальным количеством заказанных книг может быть несколько.
  Decision:
  MariaDB [OnlineBookStore]> SELECT * FROM genre;
      +----------+------------------------+
      | genre_id | name_genre             |
      +----------+------------------------+
      |        1 | Роман                  |
      |        2 | Поэзия                 |
      |        3 | Приключения            |
      +----------+------------------------+
      3 rows in set (0.001 sec)
  MariaDB [OnlineBookStore]> SELECT * FROM book;
      +---------+------------------------------------------+-----------+----------+--------+--------+
      | book_id | title                                    | author_id | genre_id | price  | amount |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      |       1 | Мастер и Маргарита                       |         1 |        1 | 670.99 |      3 |
      |       2 | Белая гвардия                            |         1 |        1 | 540.50 |      4 |
      |       3 | Идиот                                    |         2 |        1 | 460.00 |     10 |
      |       4 | Братья Карамазовы                        |         2 |        1 | 799.01 |      2 |
      |       5 | Игрок                                    |         2 |        1 | 480.50 |     10 |
      |       6 | Стихотворения и поэмы                    |         3 |        2 | 650.00 |     15 |
      |       7 | Черный человек                           |         3 |        2 | 570.20 |      6 |
      |       8 | Лирика                                   |         4 |        2 | 518.99 |      0 |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      8 rows in set (0.001 sec)
  MariaDB [OnlineBookStore]> SELECT * FROM buy_book;
      +-------------+--------+---------+--------+
      | buy_book_id | buy_id | book_id | amount |
      +-------------+--------+---------+--------+
      |           1 |      1 |       1 |      1 |
      |           2 |      1 |       7 |      2 |
      |           3 |      1 |       3 |      1 |
      |           4 |      2 |       8 |      2 |
      |           5 |      3 |       3 |      2 |
      |           6 |      3 |       2 |      1 |
      |           7 |      3 |       1 |      1 |
      |           8 |      4 |       5 |      1 |
      |           9 |      5 |       8 |      2 |
      |          10 |      5 |       2 |      1 |
      +-------------+--------+---------+--------+
      10 rows in set (0.001 sec)
  MariaDB [OnlineBookStore]> WITH genre_total
      ->     AS (SELECT name_genre, SUM(bb.amount) AS Количество
      ->         FROM genre JOIN book b USING (genre_id)
      ->                    JOIN buy_book bb USING (book_id)
      ->         WHERE bb.amount > 0
      ->         GROUP BY name_genre),
      ->     min_quantity (min_qty)
      ->     AS (SELECT MIN(Количество) FROM genre_total)
      -> SELECT name_genre, Количество
      -> FROM genre_total, min_quantity
      -> WHERE Количество = min_qty;
  +--------------+----------------------+
  | name_genre   | Количество           |
  +--------------+----------------------+
  | Поэзия       |                    6 |
  +--------------+----------------------+
  1 row in set (0.003 sec)
  Task:
  Создать новую таблицу store, в которую занести данные из таблиц book и supply, при условии, что количество книг будет больше среднего количества книг по двум таблицам; если книга есть в обеих таблицах, то стоимость выбрать большую из двух. Отсортировать данные из таблицы их по имени автора в алфавитном порядке и по убыванию цены. Вывести данные из полученной таблицы.
  Decision:
  MariaDB [OnlineBookStore]> SELECT * FROM book;
      +---------+-----------------------+------------------+--------+--------+
      | book_id | title                 | author           | price  | amount |
      +---------+-----------------------+------------------+--------+--------+
      | 1       | Мастер и Маргарита    | Булгаков М.А.    | 670.99 | 3      |
      | 2       | Белая гвардия         | Булгаков М.А.    | 540.50 | 5      |
      | 3       | Идиот                 | Достоевский Ф.М. | 460.00 | 10     |
      | 4       | Братья Карамазовы     | Достоевский Ф.М. | 799.01 | 3      |
      | 5       | Игрок                 | Достоевский Ф.М. | 480.50 | 10     |
      | 6       | Стихотворения и поэмы | Есенин С.А.      | 650.00 | 15     |
      +---------+-----------------------+------------------+--------+--------+
  MariaDB [OnlineBookStore]> SELECT * FROM supply;
      +-----------+----------------+------------------+--------+--------+
      | supply_id | title          | author           | price  | amount |
      +-----------+----------------+------------------+--------+--------+
      | 1         | Лирика         | Пастернак Б.Л.   | 518.99 | 2      |
      | 2         | Черный человек | Есенин С.А.      | 570.20 | 6      |
      | 3         | Белая гвардия  | Булгаков М.А.    | 540.50 | 7      |
      | 4         | Идиот          | Достоевский Ф.М. | 360.80 | 3      |
      +-----------+----------------+------------------+--------+--------+
  MariaDB [OnlineBookStore]> SET @cou := (SELECT ROUND(SUM(amount) / COUNT(amount), 2)
      FROM (SELECT price, amount
          FROM book
          UNION
          SELECT price, amount
          FROM supply) test);            
  CREATE TABLE store AS
  WITH test(title, author, price, amount) AS (SELECT title, author, price, amount
      FROM book
      UNION ALL
      SELECT title, author, price, amount
      FROM supply)
  SELECT title,
      author,
      MAX(price) AS price,
      SUM(amount) AS amount
  FROM test
  GROUP BY author, title
  HAVING SUM(amount) > @cou
  ORDER BY author, price DESC;
  SELECT * FROM store;
      +-----------------------+------------------+--------+--------+
      | title                 | author           | price  | amount |
      +-----------------------+------------------+--------+--------+
      | Белая гвардия         | Булгаков М.А.    | 540.50 | 12     |
      | Игрок                 | Достоевский Ф.М. | 480.50 | 10     |
      | Идиот                 | Достоевский Ф.М. | 460.00 | 13     |
      | Стихотворения и поэмы | Есенин С.А.      | 650.00 | 15     |
      +-----------------------+------------------+--------+--------+
  Task:
  Объявить столбец "категории цены" (price_category): <500 - "низкая", 500 - 700 - "средняя", более 700 - "высокая"
  Вывести автора, название, категорию, стоимость (цена * количество), исключив из авторов Есенина, из названий "Белую гвардию". Отсортировать по убыванию стоимости и названию (по возрастанию)
  Decision:
  MariaDB [OnlineBookStore]> SELECT * FROM book;
      +---------+-----------------------+------------------+--------+--------+
      | book_id | title                 | author           | price  | amount |
      +---------+-----------------------+------------------+--------+--------+
      | 1       | Мастер и Маргарита    | Булгаков М.А.    | 670.99 | 3      |
      | 2       | Белая гвардия         | Булгаков М.А.    | 540.50 | 5      |
      | 3       | Идиот                 | Достоевский Ф.М. | 460.00 | 10     |
      | 4       | Братья Карамазовы     | Достоевский Ф.М. | 799.01 | 3      |
      | 5       | Игрок                 | Достоевский Ф.М. | 480.50 | 10     |
      | 6       | Стихотворения и поэмы | Есенин С.А.      | 650.00 | 15     |
      +---------+-----------------------+------------------+--------+--------+
  MariaDB [OnlineBookStore]> SELECT author,
      title,
      CASE WHEN price < 500 THEN 'низкая'
          WHEN price BETWEEN 500 AND 700 THEN 'средняя'
      ELSE 'высокая'
      END AS price_category,
      price * amount AS cost
  FROM book
  WHERE author <> 'Есенин С.А.' AND title <> 'Белая гвардия'
  ORDER BY cost DESC, title;
      +------------------+--------------------+----------------+---------+
      | author           | title              | price_category | cost    |
      +------------------+--------------------+----------------+---------+
      | Достоевский Ф.М. | Игрок              | низкая         | 4805.00 |
      | Достоевский Ф.М. | Идиот              | низкая         | 4600.00 |
      | Достоевский Ф.М. | Братья Карамазовы  | высокая        | 2397.03 |
      | Булгаков М.А.    | Мастер и Маргарита | средняя        | 2012.97 |
      +------------------+--------------------+----------------+---------+
  Task:
  Для нечетного количества книг посчитать разницу максимальной стоимости (цена * количество) и стоимостью всех экземпляров конкретной книги. Отсортировать по этой разнице по убыванию. Вывести название, автора, количество, разницу с максимальной стоимостью.
  Decision:
  MariaDB [OnlineBookStore]> SELECT * FROM book;
      +---------+-----------------------+------------------+--------+--------+
      | book_id | title                 | author           | price  | amount |
      +---------+-----------------------+------------------+--------+--------+
      | 1       | Мастер и Маргарита    | Булгаков М.А.    | 670.99 | 3      |
      | 2       | Белая гвардия         | Булгаков М.А.    | 540.50 | 5      |
      | 3       | Идиот                 | Достоевский Ф.М. | 460.00 | 10     |
      | 4       | Братья Карамазовы     | Достоевский Ф.М. | 799.01 | 3      |
      | 5       | Игрок                 | Достоевский Ф.М. | 480.50 | 10     |
      | 6       | Стихотворения и поэмы | Есенин С.А.      | 650.00 | 15     |
      +---------+-----------------------+------------------+--------+--------+
  MariaDB [OnlineBookStore]> SELECT title,
      author,
      amount,
      (SELECT price * amount
          FROM book
          WHERE amount % 2 = 1
          ORDER BY price * amount DESC
          LIMIT 1) - amount * price AS Разница_с_макс_стоимостью
  FROM book
  WHERE amount % 2 = 1
  ORDER BY Разница_с_макс_стоимостью DESC;
      +-----------------------+------------------+--------+---------------------------+
      | title                 | author           | amount | Разница_с_макс_стоимостью |
      +-----------------------+------------------+--------+---------------------------+
      | Мастер и Маргарита    | Булгаков М.А.    | 3      | 7737.03                   |
      | Братья Карамазовы     | Достоевский Ф.М. | 3      | 7352.97                   |
      | Белая гвардия         | Булгаков М.А.    | 5      | 7047.50                   |
      | Стихотворения и поэмы | Есенин С.А.      | 15     | 0.00                      |
      +-----------------------+------------------+--------+---------------------------+
  Task:
  На распродаже размер скидки устанавливается в зависимости от количества экземпляров книги в магазине и от цены книги: для книг в остатке не менее 5 шт скидка 50%, тогда как для книг в остатке менее 5 шт скидка устанавливается в зависимости от цены (на книги не дешевле 700 руб скидка 20%, на остальные 10%). Два последних столбца назвать Скидка и Цена_со_скидкой.  Последний столбец округлить до двух знаков после запятой.
  Decision:
  MariaDB [OnlineBookStore]> SELECT * FROM book;
      +---------+-----------------------+------------------+--------+--------+
      | book_id | title                 | author           | price  | amount |
      +---------+-----------------------+------------------+--------+--------+
      | 1       | Мастер и Маргарита    | Булгаков М.А.    | 670.99 | 3      |
      | 2       | Белая гвардия         | Булгаков М.А.    | 540.50 | 5      |
      | 3       | Идиот                 | Достоевский Ф.М. | 460.00 | 10     |
      | 4       | Братья Карамазовы     | Достоевский Ф.М. | 799.01 | 3      |
      | 5       | Игрок                 | Достоевский Ф.М. | 480.50 | 10     |
      | 6       | Стихотворения и поэмы | Есенин С.А.      | 650.00 | 15     |
      +---------+-----------------------+------------------+--------+--------+
  MariaDB [OnlineBookStore]> SELECT author,
      title,
      amount,
      price,
      CASE WHEN amount >= 5 THEN '50%'
          WHEN price >= 700 THEN '20%'
          ELSE '10%'
          END AS Скидка,
      CASE WHEN amount >= 5 THEN ROUND(price * 0.5, 2)
          WHEN price >= 700 THEN ROUND(price * 0.8, 2)
          ELSE ROUND(price * 0.9, 2)
          END AS Цена_со_скидкой
  FROM book;
      +------------------+-----------------------+--------+--------+--------+-----------------+
      | author           | title                 | amount | price  | Скидка | Цена_со_скидкой |
      +------------------+-----------------------+--------+--------+--------+-----------------+
      | Булгаков М.А.    | Мастер и Маргарита    | 3      | 670.99 | 10%    | 603.89          |
      | Булгаков М.А.    | Белая гвардия         | 5      | 540.50 | 50%    | 270.25          |
      | Достоевский Ф.М. | Идиот                 | 10     | 460.00 | 50%    | 230.00          |
      | Достоевский Ф.М. | Братья Карамазовы     | 3      | 799.01 | 20%    | 639.21          |
      | Достоевский Ф.М. | Игрок                 | 10     | 480.50 | 50%    | 240.25          |
      | Есенин С.А.      | Стихотворения и поэмы | 15     | 650.00 | 50%    | 325.00          |
      | Есенин С.А.      | Черный человек        | 5      | 670.99 | 50%    | 335.50          |
      +------------------+-----------------------+--------+--------+--------+-----------------+
  Task:
  Магазин счёл, что классика уже не пользуется популярностью, поэтому необходимо в выборке:
          Сменить всех авторов на "Донцова Дарья".
          К названию каждой книги в начале дописать "Евлампия Романова и " ( пробел в конце).
          Цену поднять на 42% (округлить её до двух знаков после запятой).
          Отсортировать по убыванию цены.
  Decision:
  SELECT * FROM book;
      +---------+-----------------------+------------------+--------+--------+
      | book_id | title                 | author           | price  | amount |
      +---------+-----------------------+------------------+--------+--------+
      | 1       | Мастер и Маргарита    | Булгаков М.А.    | 670.99 | 3      |
      | 2       | Белая гвардия         | Булгаков М.А.    | 540.50 | 5      |
      | 3       | Идиот                 | Достоевский Ф.М. | 460.00 | 10     |
      | 4       | Братья Карамазовы     | Достоевский Ф.М. | 799.01 | 3      |
      | 5       | Игрок                 | Достоевский Ф.М. | 480.50 | 10     |
      | 6       | Стихотворения и поэмы | Есенин С.А.      | 650.00 | 15     |
      +---------+-----------------------+------------------+--------+--------+
  SELECT 'Донцова Дарья' AS author,
      CONCAT('Евлампия Романова и ', title) AS title,
      ROUND(price*1.42,2) AS price
  FROM book
  ORDER BY price DESC;
      +---------------+-------------------------------------------+---------+
      | author        | title                                     | price   |
      +---------------+-------------------------------------------+---------+
      | Донцова Дарья | Евлампия Романова и Братья Карамазовы     | 1134.59 |
      | Донцова Дарья | Евлампия Романова и Мастер и Маргарита    | 952.81  |
      | Донцова Дарья | Евлампия Романова и Стихотворения и поэмы | 923.00  |
      | Донцова Дарья | Евлампия Романова и Белая гвардия         | 767.51  |
      | Донцова Дарья | Евлампия Романова и Игрок                 | 682.31  |
      | Донцова Дарья | Евлампия Романова и Идиот                 | 653.20  |
      +---------------+-------------------------------------------+---------+
  Task:
  Магазин решил быстрее распродать остатки книг, цена которых выше 600, а также прописать условия доставки. Создать запрос на выборку, в котором:
          Столбцы назовите Наименование, Цена и  Стоимость доставки.
          Отберите все книги, цена которых выше 600.
          Если остаток по отдельной книге меньше или равен 5, то стоимость доставки будет 500 рублей, если больше 5, то доставка будет бесплатной (вместо стоимости доставки вставить Бесплатно).
          Отсортируйте значения по убыванию цены книг.
  Decision:
  SELECT * FROM book;
      +---------+-----------------------+------------------+--------+--------+
      | book_id | title                 | author           | price  | amount |
      +---------+-----------------------+------------------+--------+--------+
      | 1       | Мастер и Маргарита    | Булгаков М.А.    | 670.99 | 3      |
      | 2       | Белая гвардия         | Булгаков М.А.    | 540.50 | 5      |
      | 3       | Идиот                 | Достоевский Ф.М. | 460.00 | 10     |
      | 4       | Братья Карамазовы     | Достоевский Ф.М. | 799.01 | 3      |
      | 5       | Игрок                 | Достоевский Ф.М. | 480.50 | 10     |
      | 6       | Стихотворения и поэмы | Есенин С.А.      | 650.00 | 15     |
      | 7       | Черный человек        | Есенин С.А.      | 670.99 | 5      |
      +---------+-----------------------+------------------+--------+--------+
  SELECT title AS Наименование,
      price AS Цена,
      IF (amount<=5, 500, 'Бесплатно') AS 'Стоимость_доставки'
  FROM book
  WHERE price>600
  ORDER BY price DESC;
      +-----------------------+--------+--------------------+
      | Наименование          | Цена   | Стоимость_доставки |
      +-----------------------+--------+--------------------+
      | Братья Карамазовы     | 799.01 | 500                |
      | Мастер и Маргарита    | 670.99 | 500                |
      | Черный человек        | 670.99 | 500                |
      | Стихотворения и поэмы | 650.00 | Бесплатно          |
      +-----------------------+--------+--------------------+
  Task:
  Определить стоимость доставки:
          для книг стоимостью 500 и менее, установить в размере 99.99
          при количестве книг на складе менее 5, установить в размере 149.99
          для остальных случаев доставка должна быть бесплатной
  Определить новую стоимость для книг:
          для книг, совокупной стоимостью более 5000, добавить 20% к стоимости за экземпляр
          для остальных случаев снизить стоимость одного экземпляра на 20%
  Настроить фильтр при выборке: только позиции творчества авторов: Булгаков и Есенин, при количестве экземпляров на складе: от 3 до 14 включительно.
  Сортировку выполнить:
          по имени автора в порядке возрастания
          затем по названию в порядке убывания
          по стоимости доставки (от меньшей к большей)
  В таблице должны быть отображены данные:
          автора
          название
          количество
          цену, как real_price
          новую цену, как new_price (округлить до двух знаков после запятой)
          стоимость доставки, как delivery_price
  Decision:
  SELECT * FROM book;
      +---------+-----------------------+------------------+--------+--------+
      | book_id | title                 | author           | price  | amount |
      +---------+-----------------------+------------------+--------+--------+
      | 1       | Мастер и Маргарита    | Булгаков М.А.    | 670.99 | 3      |
      | 2       | Белая гвардия         | Булгаков М.А.    | 540.50 | 5      |
      | 3       | Идиот                 | Достоевский Ф.М. | 460.00 | 10     |
      | 4       | Братья Карамазовы     | Достоевский Ф.М. | 799.01 | 3      |
      | 5       | Игрок                 | Достоевский Ф.М. | 480.50 | 10     |
      | 6       | Стихотворения и поэмы | Есенин С.А.      | 650.00 | 15     |
      | 7       | Черный человек        | Есенин С.А.      | 670.99 | 5      |
      +---------+-----------------------+------------------+--------+--------+
  SELECT author,
      title,
      amount,
      price AS real_price,
      ROUND(IF(price * amount > 5000, price * 1.2, price * 0.8), 2) AS new_price,
      ROUND(IF(price <= 500, 99.99, IF(amount < 5, 149.99, 0.00)), 2) AS delivery_price
  FROM book
  WHERE author IN ('Булгаков М.А.', 'Есенин С.А.')
      AND amount BETWEEN 3
      AND 14
  ORDER BY author, title DESC, delivery_price;
      +---------------+--------------------+--------+------------+-----------+----------------+
      | author        | title              | amount | real_price | new_price | delivery_price |
      +---------------+--------------------+--------+------------+-----------+----------------+
      | Булгаков М.А. | Мастер и Маргарита | 3      | 670.99     | 536.79    | 149.99         |
      | Булгаков М.А. | Белая гвардия      | 5      | 540.50     | 432.40    | 0.00           |
      | Есенин С.А.   | Черный человек     | 5      | 670.99     | 536.79    | 0.00           |
      +---------------+--------------------+--------+------------+-----------+----------------+
  Task:
  Вывести авторов и названия книг и их цену в двух столбцах - рубли и копейки.  Информацию отсортировать по убыванию копеек.
  Decision:
  SELECT * FROM book;
      +---------+-----------------------+------------------+--------+--------+
      | book_id | title                 | author           | price  | amount |
      +---------+-----------------------+------------------+--------+--------+
      | 1       | Мастер и Маргарита    | Булгаков М.А.    | 670.99 | 3      |
      | 2       | Белая гвардия         | Булгаков М.А.    | 540.50 | 5      |
      | 3       | Идиот                 | Достоевский Ф.М. | 460.00 | 10     |
      | 4       | Братья Карамазовы     | Достоевский Ф.М. | 799.01 | 3      |
      | 5       | Игрок                 | Достоевский Ф.М. | 480.50 | 10     |
      | 6       | Стихотворения и поэмы | Есенин С.А.      | 650.00 | 15     |
      | 7       | Черный человек        | Есенин С.А.      | 670.99 | 5      |
      +---------+-----------------------+------------------+--------+--------+
  SELECT author,
      title,
      TRUNCATE(price, 0) AS Рубли,
      ROUND((price - TRUNCATE(price, 0))*100) AS Копейки
  FROM book
  ORDER BY  ROUND((price - TRUNCATE(price, 0))*100) DESC;
      +------------------+-----------------------+-------+---------+
      | author           | title                 | Рубли | Копейки |
      +------------------+-----------------------+-------+---------+
      | Булгаков М.А.    | Мастер и Маргарита    | 670   | 99      |
      | Есенин С.А.      | Черный человек        | 670   | 99      |
      | Булгаков М.А.    | Белая гвардия         | 540   | 50      |
      | Достоевский Ф.М. | Игрок                 | 480   | 50      |
      | Достоевский Ф.М. | Братья Карамазовы     | 798   | 1       |
      | Достоевский Ф.М. | Идиот                 | 459   | 0       |
      | Есенин С.А.      | Стихотворения и поэмы | 649   | 0       |
      +------------------+-----------------------+-------+---------+
  Task:
  В связи с повышенным спросом на классическую литературу школьниками в формате "А есть то же самое, но покороче, чтобы читать поменьше?" была выпущена серия "Графоман и. Краткое содержание".
  В выборке:
          к имени автора добавить "Графоман и ";
          к названию книги дописать ". Краткое содержание.";
          цену на новый опус установить 40% от цены оригинала, но не более 250. (Если 40% больше 250, то цена должна быть 250);
          в зависимости от остатка на складе вывести "Спрос": до 3 (включительно) - высокий, до 10 (включительно) - средний, иначе низкий;
          добавить колонку "Наличие" в зависимости от количества: 1-2 шт - очень мало, 3-14 - в наличии, 15 и больше - много;
          отсортировать по цене по возрастанию, затем по Спросу от высокого к низкому, а затем по названию книги в алфавитном порядке
  Decision:
  SELECT * FROM book;
      +---------+-----------------------+------------------+--------+--------+
      | book_id | title                 | author           | price  | amount |
      +---------+-----------------------+------------------+--------+--------+
      | 1       | Мастер и Маргарита    | Булгаков М.А.    | 670.99 | 3      |
      | 2       | Белая гвардия         | Булгаков М.А.    | 540.50 | 5      |
      | 3       | Идиот                 | Достоевский Ф.М. | 460.00 | 10     |
      | 4       | Братья Карамазовы     | Достоевский Ф.М. | 799.01 | 2      |
      | 5       | Игрок                 | Достоевский Ф.М. | 480.50 | 10     |
      | 6       | Стихотворения и поэмы | Есенин С.А.      | 650.00 | 15     |
      | 7       | Черный человек        | Есенин С.А.      | 670.99 | 5      |
      +---------+-----------------------+------------------+--------+--------+
  SELECT CONCAT('Графоман и ', author) AS Автор,
      CONCAT(title, '. Краткое содержание.') AS Название,
      IF(price*0.4>=250, 250*1, price*0.4) AS Цена,
      (CASE WHEN amount<=3 THEN 'высокий'
          WHEN amount<=10 THEN 'средний'
          ELSE 'низкий'
      END) AS Спрос,
      (CASE WHEN amount>=1 AND amount<=2 THEN 'очень мало'
          WHEN amount>=3 AND amount<=14 THEN 'в наличии'
          WHEN amount>=15 THEN 'много'
      END) AS Наличие
  FROM book
  ORDER BY Цена, amount, title ASC;
      +-----------------------------+--------------------------------------------+---------+---------+------------+
      | Автор                       | Название                                   | Цена    | Спрос   | Наличие    |
      +-----------------------------+--------------------------------------------+---------+---------+------------+
      | Графоман и Достоевский Ф.М. | Идиот. Краткое содержание.                 | 184.000 | средний | в наличии  |
      | Графоман и Достоевский Ф.М. | Игрок. Краткое содержание.                 | 192.200 | средний | в наличии  |
      | Графоман и Булгаков М.А.    | Белая гвардия. Краткое содержание.         | 216.200 | средний | в наличии  |
      | Графоман и Достоевский Ф.М. | Братья Карамазовы. Краткое содержание.     | 250     | высокий | очень мало |
      | Графоман и Булгаков М.А.    | Мастер и Маргарита. Краткое содержание.    | 250     | высокий | в наличии  |
      | Графоман и Есенин С.А.      | Черный человек. Краткое содержание.        | 250     | средний | в наличии  |
      | Графоман и Есенин С.А.      | Стихотворения и поэмы. Краткое содержание. | 250     | низкий  | много      |
      +-----------------------------+--------------------------------------------+---------+---------+------------+
  Task:
  Акция "Купи книгу от 500 руб. и получи подарок".
  Вывести автора, название книги и цену. Выбрать книги с ценой 500 рублей и выше, отсортировать информацию в алфавитном порядке по автору и названию книги. Добавить столбец Подарок,  в котором вывести, какой подарок получает покупатель: если куплена книга от 500 рублей до 600 рублей (включительно), то подарок - ручка, от 600 до 700 (включительно) - детская раскраска, выше 700 - гороскоп.
  Decision:
  SELECT * FROM book;
      +---------+-----------------------+------------------+--------+--------+
      | book_id | title                 | author           | price  | amount |
      +---------+-----------------------+------------------+--------+--------+
      | 1       | Мастер и Маргарита    | Булгаков М.А.    | 670.99 | 3      |
      | 2       | Белая гвардия         | Булгаков М.А.    | 540.50 | 5      |
      | 3       | Идиот                 | Достоевский Ф.М. | 460.00 | 10     |
      | 4       | Братья Карамазовы     | Достоевский Ф.М. | 799.01 | 2      |
      | 5       | Игрок                 | Достоевский Ф.М. | 480.50 | 10     |
      | 6       | Стихотворения и поэмы | Есенин С.А.      | 650.00 | 15     |
      | 7       | Черный человек        | Есенин С.А.      | 670.99 | 5      |
      +---------+-----------------------+------------------+--------+--------+
  SELECT author AS Автор,
      title AS Название_книги,
      price AS Цена,
      (CASE WHEN price>=500 AND price<=600 THEN 'ручка'
          WHEN price>600 AND price<=700 THEN 'детская раскраска'
          WHEN price>700 THEN 'гороскоп'
      END) AS Подарок
  FROM book
  WHERE price >= 500
  ORDER BY Автор, Название_книги;
      +------------------+-----------------------+--------+-------------------+
      | Автор            | Название_книги        | Цена   | Подарок           |
      +------------------+-----------------------+--------+-------------------+
      | Булгаков М.А.    | Белая гвардия         | 540.50 | ручка             |
      | Булгаков М.А.    | Мастер и Маргарита    | 670.99 | детская раскраска |
      | Достоевский Ф.М. | Братья Карамазовы     | 799.01 | гороскоп          |
      | Есенин С.А.      | Стихотворения и поэмы | 650.00 | детская раскраска |
      | Есенин С.А.      | Черный человек        | 670.99 | детская раскраска |
      +------------------+-----------------------+--------+-------------------+
  Task:
  При анализе остатков книг на складе было решено дополнительно заказать книги авторов, у которых суммарное число экземпляров книг меньше 10. В таблице должны быть отображены авторы, наименьшее и наибольшее количество их книг.
  Decision:
  SELECT * FROM book;
      +---------+-----------------------+------------------+--------+--------+
      | book_id | title                 | author           | price  | amount |
      +---------+-----------------------+------------------+--------+--------+
      | 1       | Мастер и Маргарита    | Булгаков М.А.    | 670.99 | 3      |
      | 2       | Белая гвардия         | Булгаков М.А.    | 540.50 | 5      |
      | 3       | Идиот                 | Достоевский Ф.М. | 460.00 | 10     |
      | 4       | Братья Карамазовы     | Достоевский Ф.М. | 799.01 | 2      |
      | 5       | Игрок                 | Достоевский Ф.М. | 480.50 | 10     |
      | 6       | Стихотворения и поэмы | Есенин С.А.      | 650.00 | 15     |
      | 7       | Черный человек        | Есенин С.А.      | 670.99 | 5      |
      +---------+-----------------------+------------------+--------+--------+
  Task:
  В последний заказ (таблица buy_book) клиента Баранов Павел добавить по одному экземпляру всех книг Достоевского, которые есть в таблице book
  Decision:
  SELECT * FROM buy_book;
      +-------------+--------+---------+--------+
      | buy_book_id | buy_id | book_id | amount |
      +-------------+--------+---------+--------+
      | 1           | 1      | 1       | 1      |
      | 2           | 1      | 7       | 2      |
      | 3           | 2      | 8       | 2      |
      | 4           | 3      | 3       | 2      |
      | 5           | 3      | 2       | 1      |
      | 6           | 3      | 1       | 1      |
      | 7           | 4      | 5       | 1      |
      | 8           | 5      | 8       | 2      |
      | 9           | 5      | 2       | 1      |
      +-------------+--------+---------+--------+
  SELECT * FROM client;
      +-----------+-----------------+---------+----------------+
      | client_id | name_client     | city_id | email          |
      +-----------+-----------------+---------+----------------+
      | 1         | Баранов Павел   | 3       | baranov@test   |
      | 2         | Абрамова Катя   | 1       | abramova@test  |
      | 3         | Семенонов Иван  | 2       | semenov@test   |
      | 4         | Яковлева Галина | 1       | yakovleva@test |
      | 5         | Попов Илья      | 1       | popov@test     |
      +-----------+-----------------+---------+----------------+
  SELECT * FROM buy;
      +--------+---------------------------------------+-----------+
      | buy_id | buy_description                       | client_id |
      +--------+---------------------------------------+-----------+
      | 1      | Доставка только вечером               | 1         |
      | 2      | NULL                                  | 3         |
      | 3      | Упаковать каждую книгу по отдельности | 2         |
      | 4      | NULL                                  | 1         |
      | 5      | Связаться со мной по вопросу доставки | 5         |
      +--------+---------------------------------------+-----------+
  SELECT * FROM author;
      +-----------+------------------+
      | author_id | name_author      |
      +-----------+------------------+
      | 1         | Булгаков М.А.    |
      | 2         | Достоевский Ф.М. |
      | 3         | Есенин С.А.      |
      | 4         | Пастернак Б.Л.   |
      | 5         | Лермонтов М.Ю.   |
      +-----------+------------------+
  SELECT * FROM book;
      +---------+-----------------------+-----------+----------+--------+--------+
      | book_id | title                 | author_id | genre_id | price  | amount |
      +---------+-----------------------+-----------+----------+--------+--------+
      | 1       | Мастер и Маргарита    | 1         | 1        | 670.99 | 3      |
      | 2       | Белая гвардия         | 1         | 1        | 540.50 | 4      |
      | 3       | Идиот                 | 2         | 1        | 460.00 | 10     |
      | 4       | Братья Карамазовы     | 2         | 1        | 799.01 | 3      |
      | 5       | Игрок                 | 2         | 1        | 480.50 | 10     |
      | 6       | Стихотворения и поэмы | 3         | 2        | 650.00 | 15     |
      | 7       | Черный человек        | 3         | 2        | 570.20 | 6      |
      | 8       | Лирика                | 4         | 2        | 518.99 | 0      |
      +---------+-----------------------+-----------+----------+--------+--------+
  INSERT INTO buy_book (buy_id, book_id, amount)
  SELECT DISTINCT *
  FROM((SELECT MAX(buy_id)
      FROM client
      INNER JOIN buy USING(client_id)
      WHERE name_client LtuserE '%Баранов%') a
      CROSS JOIN (SELECT book_id
          FROM author
          INNER JOIN book USING(author_id)
          WHERE name_author = 'Достоевский Ф.М.') b
      CROSS JOIN (SELECT 1
          FROM book) c)
  ORDER BY book_id;
  SELECT * FROM buy_book;
      +-------------+--------+---------+--------+
      | buy_book_id | buy_id | book_id | amount |
      +-------------+--------+---------+--------+
      | 1           | 1      | 1       | 1      |
      | 2           | 1      | 7       | 2      |
      | 3           | 2      | 8       | 2      |
      | 4           | 3      | 3       | 2      |
      | 5           | 3      | 2       | 1      |
      | 6           | 3      | 1       | 1      |
      | 7           | 4      | 5       | 1      |
      | 8           | 5      | 8       | 2      |
      | 9           | 5      | 2       | 1      |
      | 10          | 4      | 3       | 1      |
      | 11          | 4      | 4       | 1      |
      | 12          | 4      | 5       | 1      |
      +-------------+--------+---------+--------+
  Task:
  Разработать базу данных "Тестирование". Университет проводит онлайн-тестирование по нескольким дисциплинам. Каждая дисциплина включает в себя определенное количество вопросов. Ответы на вопрос представлены в виде вариантов ответов, один из этих вариантов правильный.
  Студент регистрируется в системе, указав свое имя, фамилию и отчество. После этого он может пройти тестирование по одной или нескольким дисциплинам. У студента есть несколько попыток сдать тест (необходимо сохранить дату попытки). Каждому студенту случайным образом подбирается набор вопросов по дисциплине и формируется индивидуальный тест. Студент отвечает на вопросы, выбирая один из предложенных ответов.
  После окончания тестирования вычисляется и сохраняется результат (в процентах) попытки.
  Запросы по предметной области:
  Привлеките студентов, которые прошли определенную дисциплину.
  Выведите количество попыток и средний результат по каждой дисциплине.
  Выведите студента(ов), набравшего самый высокий балл во время тестирования.
  Если студент предпринял несколько попыток по одной и той же дисциплине, то выведите разницу в днях между первой и последней попыткой.
  Выведите количество студентов, прошедших тестирование по каждой дисциплине.
  Случайным образом выберите 3 вопроса по определенной дисциплине.
  Выведите вопросы, на которые определенный студент ответил в определенной попытке, ответ студента и результат (правильный или нет).
  Рассчитайте результаты теста для всех попыток.
  Для каждого вопроса выведите процент успешных решений и общее количество ответов.
  Decision:
  mysql> CREATE DATABASE OnlineTest;
      Query OK, 1 row affected (0.21 sec)
  mysql> SHOW DATABASES;
      +--------------------+
      | Database           |
      +--------------------+
      | OnlineBookStore    |
      | OnlineTest         |
      | adminDB            |
      | information_schema |
      | mysql              |
      | performance_schema |
      | sys                |
      | testbdserver       |
      +--------------------+
      8 rows in set (0.00 sec)
  mysql> USE OnlineTest;
      Database changed
  mysql> CREATE TABLE subject (
  subject_id INT PRIMARY KEY AUTO_INCREMENT,
  name_subject varchar(30)
  );
      Query OK, 0 rows affected (2.33 sec)
  mysql> CREATE TABLE student (
  student_id INT PRIMARY KEY AUTO_INCREMENT,
  name_student varchar(50)
  );
      Query OK, 0 rows affected (2.01 sec)
  mysql> CREATE TABLE attempt (
  attempt_id INT PRIMARY KEY AUTO_INCREMENT,
  student_id INT,
  subject_id INT,
  date_attempt date,
  result INT,
  FOREIGN KEY (student_id) REFERENCES student (student_id) ON DELETE CASCADE,
  FOREIGN KEY (subject_id) REFERENCES subject (subject_id) ON DELETE CASCADE
  );
      Query OK, 0 rows affected (1.59 sec)
  mysql> CREATE TABLE question (
  question_id INT PRIMARY KEY AUTO_INCREMENT,
  name_question varchar(100),
  subject_id INT,
  FOREIGN KEY (subject_id) REFERENCES subject (subject_id) ON DELETE CASCADE
  );
      Query OK, 0 rows affected (1.40 sec)
  mysql> CREATE TABLE answer (
  answer_id INT PRIMARY KEY AUTO_INCREMENT,
  name_answer varchar(100),
  question_id INT,
  is_correct BOOLEAN,
  CONSTRAINT answer_ibfk_1 FOREIGN KEY (question_id) REFERENCES question (question_id) ON DELETE CASCADE
  );
      Query OK, 0 rows affected (2.32 sec)
  mysql> CREATE TABLE testing (
  testing_id INT PRIMARY KEY AUTO_INCREMENT,
  attempt_id INT,
  question_id INT,
  answer_id INT,
  FOREIGN KEY (attempt_id) REFERENCES attempt (attempt_id) ON DELETE CASCADE
  );
      Query OK, 0 rows affected (3.46 sec)
  mysql> SHOW tables;
      +----------------------+
      | Tables_in_OnlineTest |
      +----------------------+
      | answer               |
      | attempt              |
      | question             |
      | student              |
      | subject              |
      | testing              |
      +----------------------+
      6 rows in set (0.00 sec)
  mysql> INSERT INTO subject (subject_id,name_subject) VALUES
  (1,'Основы SQL'),
  (2,'Основы баз данных'),
  (3,'Физика');
      Query OK, 3 rows affected (0.20 sec)
      Records: 3  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM subject;
      +------------+----------------------------------+
      | subject_id | name_subject                     |
      +------------+----------------------------------+
      |          1 | Основы SQL                       |
      |          2 | Основы баз данных                |
      |          3 | Физика                           |
      +------------+----------------------------------+
      3 rows in set (0.00 sec)
  mysql> INSERT INTO student (student_id,name_student) VALUES
  (1,'Баранов Павел'),
  (2,'Абрамова Катя'),
  (3,'Семенов Иван'),
  (4,'Яковлева Галина');
      Query OK, 4 rows affected (0.35 sec)
      Records: 4  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM student;
      +------------+-------------------------------+
      | student_id | name_student                  |
      +------------+-------------------------------+
      |          1 | Баранов Павел                 |
      |          2 | Абрамова Катя                 |
      |          3 | Семенов Иван                  |
      |          4 | Яковлева Галина               |
      +------------+-------------------------------+
      4 rows in set (0.00 sec)
  mysql> INSERT INTO attempt (attempt_id,student_id,subject_id,date_attempt,result) VALUES
  (1,1,2,'2020-03-23',67),
  (2,3,1,'2020-03-23',100),
  (3,4,2,'2020-03-26',0),
  (4,1,1,'2020-04-15',33),
  (5,3,1,'2020-04-15',67),
  (6,4,2,'2020-04-21',100),
  (7,3,1,'2020-05-17',33);
      Query OK, 7 rows affected (0.31 sec)
      Records: 7  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM attempt;
      +------------+------------+------------+--------------+--------+
      | attempt_id | student_id | subject_id | date_attempt | result |
      +------------+------------+------------+--------------+--------+
      |          1 |          1 |          2 | 2020-03-23   |     67 |
      |          2 |          3 |          1 | 2020-03-23   |    100 |
      |          3 |          4 |          2 | 2020-03-26   |      0 |
      |          4 |          1 |          1 | 2020-04-15   |     33 |
      |          5 |          3 |          1 | 2020-04-15   |     67 |
      |          6 |          4 |          2 | 2020-04-21   |    100 |
      |          7 |          3 |          1 | 2020-05-17   |     33 |
      +------------+------------+------------+--------------+--------+
      7 rows in set (0.00 sec)
  mysql> INSERT INTO question (question_id,name_question,subject_id) VALUES
  (1,'Запрос на выборку начинается с ключевого слова:',1),
  (2,'Условие, по которому отбираются записи, задается после ключевого слова:',1),
  (3,'Для сортировки используется:',1),
  (4,'Какой запрос выбирает все записи из таблицы student:',1),
  (5,'Для внутреннего соединения таблиц используется оператор:',1),
  (6,'База данных - это:',2),
  (7,'Отношение - это:',2),
  (8,'Концептуальная модель используется для',2),
  (9,'Какой тип данных не допустим в реляционной таблице?',2);
      Query OK, 9 rows affected (0.19 sec)
      Records: 9  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM question;
      +-------------+-------------------------------------------------------------------------------------------------------------------------------------+------------+
      | question_id | name_question                                                                                                                       | subject_id |
      +-------------+-------------------------------------------------------------------------------------------------------------------------------------+------------+
      |           1 | Запрос на выборку начинается с ключевого слова:                                                                                     |          1 |
      |           2 | Условие, по которому отбираются записи, задается после ключевого слова:                                                             |          1 |
      |           3 | Для сортировки используется:                                                                                                        |          1 |
      |           4 | Какой запрос выбирает все записи из таблицы student:                                                                                |          1 |
      |           5 | Для внутреннего соединения таблиц используется оператор:                                                                            |          1 |
      |           6 | База данных - это:                                                                                                                  |          2 |
      |           7 | Отношение - это:                                                                                                                    |          2 |
      |           8 | Концептуальная модель используется для                                                                                              |          2 |
      |           9 | Какой тип данных не допустим в реляционной таблице?                                                                                 |          2 |
      +-------------+-------------------------------------------------------------------------------------------------------------------------------------+------------+
      9 rows in set (0.00 sec)
  mysql> INSERT INTO answer (answer_id,name_answer,question_id,is_correct) VALUES
  (1,'UPDATE',1,FALSE),
  (2,'SELECT',1,TRUE),
  (3,'INSERT',1,FALSE),
  (4,'GROUP BY',2,FALSE),
  (5,'FROM',2,FALSE),
  (6,'WHERE',2,TRUE),
  (7,'SELECT',2,FALSE),
  (8,'SORT',3,FALSE),
  (9,'ORDER BY',3,TRUE),
  (10,'RANG BY',3,FALSE),
  (11,'SELECT * FROM student',4,TRUE),
  (12,'SELECT student',4,FALSE),
  (13,'INNER JOIN',5,TRUE),
  (14,'LEFT JOIN',5,FALSE),
  (15,'RIGHT JOIN',5,FALSE),
  (16,'CROSS JOIN',5,FALSE),
  (17,'совокупность данных, организованных по определенным правилам',6,TRUE),
  (18,'совокупность программ для хранения и обработки больших массивов информации',6,FALSE),
  (19,'строка',7,FALSE),
  (20,'столбец',7,FALSE),
  (21,'таблица',7,TRUE),
  (22,'обобщенное представление пользователей о данных',8,TRUE),
  (23,'описание представления данных в памяти компьютера',8,FALSE),
  (24,'база данных',8,FALSE),
  (25,'file',9,TRUE),
  (26,'INT',9,FALSE),
  (27,'VARCHAR',9,FALSE),
  (28,'DATE',9,FALSE);
      Query OK, 28 rows affected (0.22 sec)
      Records: 28  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM answer;
      +-----------+----------------------------------------------------------------------------------------------------------------------------------------------+-------------+------------+
      | answer_id | name_answer                                                                                                                                  | question_id | is_correct |
      +-----------+----------------------------------------------------------------------------------------------------------------------------------------------+-------------+------------+
      |         1 | UPDATE                                                                                                                                       |           1 |          0 |
      |         2 | SELECT                                                                                                                                       |           1 |          1 |
      |         3 | INSERT                                                                                                                                       |           1 |          0 |
      |         4 | GROUP BY                                                                                                                                     |           2 |          0 |
      |         5 | FROM                                                                                                                                         |           2 |          0 |
      |         6 | WHERE                                                                                                                                        |           2 |          1 |
      |         7 | SELECT                                                                                                                                       |           2 |          0 |
      |         8 | SORT                                                                                                                                         |           3 |          0 |
      |         9 | ORDER BY                                                                                                                                     |           3 |          1 |
      |        10 | RANG BY                                                                                                                                      |           3 |          0 |
      |        11 | SELECT * FROM student                                                                                                                        |           4 |          1 |
      |        12 | SELECT student                                                                                                                               |           4 |          0 |
      |        13 | INNER JOIN                                                                                                                                   |           5 |          1 |
      |        14 | LEFT JOIN                                                                                                                                    |           5 |          0 |
      |        15 | RIGHT JOIN                                                                                                                                   |           5 |          0 |
      |        16 | CROSS JOIN                                                                                                                                   |           5 |          0 |
      |        17 | совокупность данных, организованных по определенным правилам                                                                                 |           6 |          1 |
      |        18 | совокупность программ для хранения и обработки больших массивов информации                                                                   |           6 |          0 |
      |        19 | строка                                                                                                                                       |           7 |          0 |
      |        20 | столбец                                                                                                                                      |           7 |          0 |
      |        21 | таблица                                                                                                                                      |           7 |          1 |
      |        22 | обобщенное представление пользователей о данных                                                                                              |           8 |          1 |
      |        23 | описание представления данных в памяти компьютера                                                                                            |           8 |          0 |
      |        24 | база данных                                                                                                                                  |           8 |          0 |
      |        25 | file                                                                                                                                         |           9 |          1 |
      |        26 | INT                                                                                                                                          |           9 |          0 |
      |        27 | VARCHAR                                                                                                                                      |           9 |          0 |
      |        28 | DATE                                                                                                                                         |           9 |          0 |
      +-----------+----------------------------------------------------------------------------------------------------------------------------------------------+-------------+------------+
      28 rows in set (0.00 sec)
  mysql> INSERT INTO testing (testing_id,attempt_id,question_id,answer_id) VALUES
  (1,1,9,25),
  (2,1,7,19),
  (3,1,6,17),
  (4,2,3,9),
  (5,2,1,2),
  (6,2,4,11),
  (7,3,6,18),
  (8,3,8,24),
  (9,3,9,28),
  (10,4,1,2),
  (11,4,5,16),
  (12,4,3,10),
  (13,5,2,6),
  (14,5,1,2),
  (15,5,4,12),
  (16,6,6,17),
  (17,6,8,22),
  (18,6,7,21),
  (19,7,1,3),
  (20,7,4,11),
  (21,7,5,16);
      Query OK, 21 rows affected (0.22 sec)
      Records: 21  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM testing;
      +------------+------------+-------------+-----------+
      | testing_id | attempt_id | question_id | answer_id |
      +------------+------------+-------------+-----------+
      |          1 |          1 |           9 |        25 |
      |          2 |          1 |           7 |        19 |
      |          3 |          1 |           6 |        17 |
      |          4 |          2 |           3 |         9 |
      |          5 |          2 |           1 |         2 |
      |          6 |          2 |           4 |        11 |
      |          7 |          3 |           6 |        18 |
      |          8 |          3 |           8 |        24 |
      |          9 |          3 |           9 |        28 |
      |         10 |          4 |           1 |         2 |
      |         11 |          4 |           5 |        16 |
      |         12 |          4 |           3 |        10 |
      |         13 |          5 |           2 |         6 |
      |         14 |          5 |           1 |         2 |
      |         15 |          5 |           4 |        12 |
      |         16 |          6 |           6 |        17 |
      |         17 |          6 |           8 |        22 |
      |         18 |          6 |           7 |        21 |
      |         19 |          7 |           1 |         3 |
      |         20 |          7 |           4 |        11 |
      |         21 |          7 |           5 |        16 |
      +------------+------------+-------------+-----------+
      21 rows in set (0.01 sec)
  Task:
  Вывести студентов, которые сдавали дисциплину Основы баз данных», указать дату попытки и результат. Информацию вывести по убыванию результатов тестирования.
  Decision:
  mysql> SELECT * FROM student;
      +------------+-------------------------------+
      | student_id | name_student                  |
      +------------+-------------------------------+
      |          1 | Баранов Павел                 |
      |          2 | Абрамова Катя                 |
      |          3 | Семенов Иван                  |
      |          4 | Яковлева Галина               |
      +------------+-------------------------------+
      4 rows in set (0.00 sec)
  mysql> SELECT * FROM attempt;
      +------------+------------+------------+--------------+--------+
      | attempt_id | student_id | subject_id | date_attempt | result |
      +------------+------------+------------+--------------+--------+
      |          1 |          1 |          2 | 2020-03-23   |     67 |
      |          2 |          3 |          1 | 2020-03-23   |    100 |
      |          3 |          4 |          2 | 2020-03-26   |      0 |
      |          4 |          1 |          1 | 2020-04-15   |     33 |
      |          5 |          3 |          1 | 2020-04-15   |     67 |
      |          6 |          4 |          2 | 2020-04-21   |    100 |
      |          7 |          3 |          1 | 2020-05-17   |     33 |
      +------------+------------+------------+--------------+--------+
      7 rows in set (0.00 sec)
  mysql> SELECT * FROM subject;
      +------------+----------------------------------+
      | subject_id | name_subject                     |
      +------------+----------------------------------+
      |          1 | Основы SQL                       |
      |          2 | Основы баз данных                |
      |          3 | Физика                           |
      +------------+----------------------------------+
      3 rows in set (0.00 sec)
  mysql> SELECT name_student, date_attempt, result
  FROM student
  INNER JOIN attempt
  ON student.student_id=attempt.student_id
  INNER JOIN subject
  ON attempt.subject_id=subject.subject_id
  WHERE subject.name_subject='Основы баз данных'
  ORDER BY result DESC;
      +-------------------------------+--------------+--------+
      | name_student                  | date_attempt | result |
      +-------------------------------+--------------+--------+
      | Яковлева Галина               | 2020-04-21   |    100 |
      | Баранов Павел                 | 2020-03-23   |     67 |
      | Яковлева Галина               | 2020-03-26   |      0 |
      +-------------------------------+--------------+--------+
      3 rows in set (0.01 sec)
  Task:
  Вывести, сколько попыток сделали студенты по каждой дисциплине, а также средний результат попыток, который округлить до 2 знаков после запятой. Под результатом попытки понимается процент правильных ответов на вопросы теста, который занесен в столбец result.  В результат включить название дисциплины, а также вычисляемые столбцы Количество и Среднее. Информацию вывести по убыванию средних результатов.
  Decision:
  mysql> SELECT * FROM attempt;
      +------------+------------+------------+--------------+--------+
      | attempt_id | student_id | subject_id | date_attempt | result |
      +------------+------------+------------+--------------+--------+
      |          1 |          1 |          2 | 2020-03-23   |     67 |
      |          2 |          3 |          1 | 2020-03-23   |    100 |
      |          3 |          4 |          2 | 2020-03-26   |      0 |
      |          4 |          1 |          1 | 2020-04-15   |     33 |
      |          5 |          3 |          1 | 2020-04-15   |     67 |
      |          6 |          4 |          2 | 2020-04-21   |    100 |
      |          7 |          3 |          1 | 2020-05-17   |     33 |
      +------------+------------+------------+--------------+--------+
      7 rows in set (0.00 sec)
  mysql> SELECT * FROM subject;
      +------------+----------------------------------+
      | subject_id | name_subject                     |
      +------------+----------------------------------+
      |          1 | Основы SQL                       |
      |          2 | Основы баз данных                |
      |          3 | Физика                           |
      +------------+----------------------------------+
      3 rows in set (0.00 sec)
  mysql> SELECT name_subject, COUNT(attempt.subject_id) AS Количество, ROUND(AVG(result),2) AS Среднее
  FROM attempt
  RIGHT JOIN subject
  ON attempt.subject_id=subject.subject_id
  GROUP BY name_subject;
      +----------------------------------+----------------------+----------------+
      | name_subject                     | Количество           | Среднее        |
      +----------------------------------+----------------------+----------------+
      | Основы SQL                       |                    4 |          58.25 |
      | Основы баз данных                |                    3 |          55.67 |
      | Физика                           |                    0 |           NULL |
      +----------------------------------+----------------------+----------------+
      3 rows in set (0.10 sec)
  Task:
  Вывести студентов (различных студентов), имеющих максимальные результаты попыток. Информацию отсортировать в алфавитном порядке по фамилии студента.
  Максимальный результат не обязательно будет 100%, поэтому явно это значение в запросе не задавать.
  Decision:
  mysql> SELECT * FROM attempt;
      +------------+------------+------------+--------------+--------+
      | attempt_id | student_id | subject_id | date_attempt | result |
      +------------+------------+------------+--------------+--------+
      |          1 |          1 |          2 | 2020-03-23   |     67 |
      |          2 |          3 |          1 | 2020-03-23   |    100 |
      |          3 |          4 |          2 | 2020-03-26   |      0 |
      |          4 |          1 |          1 | 2020-04-15   |     33 |
      |          5 |          3 |          1 | 2020-04-15   |     67 |
      |          6 |          4 |          2 | 2020-04-21   |    100 |
      |          7 |          3 |          1 | 2020-05-17   |     33 |
      +------------+------------+------------+--------------+--------+
      7 rows in set (0.01 sec)
  mysql> SELECT * FROM student;
      +------------+-------------------------------+
      | student_id | name_student                  |
      +------------+-------------------------------+
      |          1 | Баранов Павел                 |
      |          2 | Абрамова Катя                 |
      |          3 | Семенов Иван                  |
      |          4 | Яковлева Галина               |
      +------------+-------------------------------+
      4 rows in set (0.00 sec)
  mysql> SELECT name_student, result
  FROM attempt
  INNER JOIN student
  ON attempt.student_id=student.student_id
  WHERE result=(
  SELECT MAX(result)
  FROM attempt)
  ORDER BY name_student;
      +-------------------------------+--------+
      | name_student                  | result |
      +-------------------------------+--------+
      | Семенов Иван                  |    100 |
      | Яковлева Галина               |    100 |
      +-------------------------------+--------+
      2 rows in set (0.05 sec)
  Task:
  Если студент совершал несколько попыток по одной и той же дисциплине, то вывести разницу в днях между первой и последней попыткой. В результат включить фамилию и имя студента, название дисциплины и вычисляемый столбец Интервал. Информацию вывести по возрастанию разницы. Студентов, сделавших одну попытку по дисциплине, не учитывать.
  Decision:
  mysql> SELECT * FROM student;
      +------------+-------------------------------+
      | student_id | name_student                  |
      +------------+-------------------------------+
      |          1 | Баранов Павел                 |
      |          2 | Абрамова Катя                 |
      |          3 | Семенов Иван                  |
      |          4 | Яковлева Галина               |
      +------------+-------------------------------+
      4 rows in set (0.00 sec)
  mysql> SELECT * FROM attempt;
      +------------+------------+------------+--------------+--------+
      | attempt_id | student_id | subject_id | date_attempt | result |
      +------------+------------+------------+--------------+--------+
      |          1 |          1 |          2 | 2020-03-23   |     67 |
      |          2 |          3 |          1 | 2020-03-23   |    100 |
      |          3 |          4 |          2 | 2020-03-26   |      0 |
      |          4 |          1 |          1 | 2020-04-15   |     33 |
      |          5 |          3 |          1 | 2020-04-15   |     67 |
      |          6 |          4 |          2 | 2020-04-21   |    100 |
      |          7 |          3 |          1 | 2020-05-17   |     33 |
      +------------+------------+------------+--------------+--------+
      7 rows in set (0.00 sec)
  mysql> SELECT * FROM subject;
      +------------+----------------------------------+
      | subject_id | name_subject                     |
      +------------+----------------------------------+
      |          1 | Основы SQL                       |
      |          2 | Основы баз данных                |
      |          3 | Физика                           |
      +------------+----------------------------------+
      3 rows in set (0.00 sec)
  mysql> SELECT name_student,name_subject,DATEDIFF(MAX(date_attempt),MIN(date_attempt)) AS Интервал
  FROM attempt
  INNER JOIN student
  ON attempt.student_id=student.student_id
  INNER JOIN subject
  ON attempt.subject_id=subject.subject_id
  GROUP BY name_student,name_subject
  HAVING COUNT(date_attempt)>1
  ORDER BY Интервал;
      +-------------------------------+----------------------------------+------------------+
      | name_student                  | name_subject                     | Интервал         |
      +-------------------------------+----------------------------------+------------------+
      | Яковлева Галина               | Основы баз данных                |               26 |
      | Семенов Иван                  | Основы SQL                       |               55 |
      +-------------------------------+----------------------------------+------------------+
      2 rows in set (0.01 sec)
  Task:
  Студенты могут тестироваться по одной или нескольким дисциплинам (не обязательно по всем). Вывести дисциплину и количество уникальных студентов (столбец назвать Количество), которые по ней проходили тестирование . Информацию отсортировать сначала по убыванию количества, а потом по названию дисциплины. В результат включить и дисциплины, тестирование по которым студенты не проходили, в этом случае указать количество студентов 0.
  Decision:
  mysql> SELECT * FROM attempt;
      +------------+------------+------------+--------------+--------+
      | attempt_id | student_id | subject_id | date_attempt | result |
      +------------+------------+------------+--------------+--------+
      |          1 |          1 |          2 | 2020-03-23   |     67 |
      |          2 |          3 |          1 | 2020-03-23   |    100 |
      |          3 |          4 |          2 | 2020-03-26   |      0 |
      |          4 |          1 |          1 | 2020-04-15   |     33 |
      |          5 |          3 |          1 | 2020-04-15   |     67 |
      |          6 |          4 |          2 | 2020-04-21   |    100 |
      |          7 |          3 |          1 | 2020-05-17   |     33 |
      +------------+------------+------------+--------------+--------+
      7 rows in set (0.00 sec)
  mysql> SELECT * FROM subject;
      +------------+----------------------------------+
      | subject_id | name_subject                     |
      +------------+----------------------------------+
      |          1 | Основы SQL                       |
      |          2 | Основы баз данных                |
      |          3 | Физика                           |
      +------------+----------------------------------+
      3 rows in set (0.01 sec)
  mysql> SELECT name_subject,COUNT(new_table.student_id) AS Количество
  FROM (SELECT DISTINCT subject_id,student_id
  FROM attempt) AS new_table
  RIGHT JOIN subject
  ON new_table.subject_id=subject.subject_id
  GROUP BY name_subject
  ORDER BY Количество DESC,name_subject;
      +----------------------------------+----------------------+
      | name_subject                     | Количество           |
      +----------------------------------+----------------------+
      | Основы SQL                       |                    2 |
      | Основы баз данных                |                    2 |
      | Физика                           |                    0 |
      +----------------------------------+----------------------+
      3 rows in set (0.01 sec)
  Task:
  Случайным образом отберите 3 вопроса по дисциплине Основы баз данных». В результат включите столбцы question_id и name_question.
  Decision:
  mysql> SELECT * FROM question;
      +-------------+-------------------------------------------------------------------------------------------------------------------------------------+------------+
      | question_id | name_question                                                                                                                       | subject_id |
      +-------------+-------------------------------------------------------------------------------------------------------------------------------------+------------+
      |           1 | Запрос на выборку начинается с ключевого слова:                                                                                     |          1 |
      |           2 | Условие, по которому отбираются записи, задается после ключевого слова:                                                             |          1 |
      |           3 | Для сортировки используется:                                                                                                        |          1 |
      |           4 | Какой запрос выбирает все записи из таблицы student:                                                                                |          1 |
      |           5 | Для внутреннего соединения таблиц используется оператор:                                                                            |          1 |
      |           6 | База данных - это:                                                                                                                  |          2 |
      |           7 | Отношение - это:                                                                                                                    |          2 |
      |           8 | Концептуальная модель используется для                                                                                              |          2 |
      |           9 | Какой тип данных не допустим в реляционной таблице?                                                                                 |          2 |
      +-------------+-------------------------------------------------------------------------------------------------------------------------------------+------------+
      9 rows in set (0.04 sec)
  mysql> SELECT * FROM subject;
      +------------+----------------------------------+
      | subject_id | name_subject                     |
      +------------+----------------------------------+
      |          1 | Основы SQL                       |
      |          2 | Основы баз данных                |
      |          3 | Физика                           |
      +------------+----------------------------------+
      3 rows in set (0.00 sec)
  mysql> SELECT question_id,name_question
  FROM question
  INNER JOIN subject
  ON question.subject_id=subject.subject_id
  WHERE name_subject='Основы баз данных'
  ORDER BY RAND()
  LIMIT 3;
      +-------------+------------------------------------------------------------------------------------------------+
      | question_id | name_question                                                                                  |
      +-------------+------------------------------------------------------------------------------------------------+
      |           9 | Какой тип данных не допустим в реляционной таблице?                                            |
      |           7 | Отношение - это:                                                                               |
      |           8 | Концептуальная модель используется для                                                         |
      +-------------+------------------------------------------------------------------------------------------------+
      3 rows in set (0.04 sec)
  Task:
  Вывести вопросы, которые были включены в тест для Семенова Ивана по дисциплине Основы SQL» 2020-05-17  (значение attempt_id для этой попытки равно 7). Указать, какой ответ дал студент и правильный он или нет(вывести Верно или Неверно). В результат включить вопрос, ответ и вычисляемый столбец  Результат.
  Decision:
  mysql> SELECT * FROM question;
      +-------------+-------------------------------------------------------------------------------------------------------------------------------------+------------+
      | question_id | name_question                                                                                                                       | subject_id |
      +-------------+-------------------------------------------------------------------------------------------------------------------------------------+------------+
      |           1 | Запрос на выборку начинается с ключевого слова:                                                                                     |          1 |
      |           2 | Условие, по которому отбираются записи, задается после ключевого слова:                                                             |          1 |
      |           3 | Для сортировки используется:                                                                                                        |          1 |
      |           4 | Какой запрос выбирает все записи из таблицы student:                                                                                |          1 |
      |           5 | Для внутреннего соединения таблиц используется оператор:                                                                            |          1 |
      |           6 | База данных - это:                                                                                                                  |          2 |
      |           7 | Отношение - это:                                                                                                                    |          2 |
      |           8 | Концептуальная модель используется для                                                                                              |          2 |
      |           9 | Какой тип данных не допустим в реляционной таблице?                                                                                 |          2 |
      +-------------+-------------------------------------------------------------------------------------------------------------------------------------+------------+
      9 rows in set (0.00 sec)
  mysql> SELECT * FROM answer;
      +-----------+----------------------------------------------------------------------------------------------------------------------------------------------+-------------+------------+
      | answer_id | name_answer                                                                                                                                  | question_id | is_correct |
      +-----------+----------------------------------------------------------------------------------------------------------------------------------------------+-------------+------------+
      |         1 | UPDATE                                                                                                                                       |           1 |          0 |
      |         2 | SELECT                                                                                                                                       |           1 |          1 |
      |         3 | INSERT                                                                                                                                       |           1 |          0 |
      |         4 | GROUP BY                                                                                                                                     |           2 |          0 |
      |         5 | FROM                                                                                                                                         |           2 |          0 |
      |         6 | WHERE                                                                                                                                        |           2 |          1 |
      |         7 | SELECT                                                                                                                                       |           2 |          0 |
      |         8 | SORT                                                                                                                                         |           3 |          0 |
      |         9 | ORDER BY                                                                                                                                     |           3 |          1 |
      |        10 | RANG BY                                                                                                                                      |           3 |          0 |
      |        11 | SELECT * FROM student                                                                                                                        |           4 |          1 |
      |        12 | SELECT student                                                                                                                               |           4 |          0 |
      |        13 | INNER JOIN                                                                                                                                   |           5 |          1 |
      |        14 | LEFT JOIN                                                                                                                                    |           5 |          0 |
      |        15 | RIGHT JOIN                                                                                                                                   |           5 |          0 |
      |        16 | CROSS JOIN                                                                                                                                   |           5 |          0 |
      |        17 | совокупность данных, организованных по определенным правилам                                                                                 |           6 |          1 |
      |        18 | совокупность программ для хранения и обработки больших массивов информации                                                                   |           6 |          0 |
      |        19 | строка                                                                                                                                       |           7 |          0 |
      |        20 | столбец                                                                                                                                      |           7 |          0 |
      |        21 | таблица                                                                                                                                      |           7 |          1 |
      |        22 | обобщенное представление пользователей о данных                                                                                              |           8 |          1 |
      |        23 | описание представления данных в памяти компьютера                                                                                            |           8 |          0 |
      |        24 | база данных                                                                                                                                  |           8 |          0 |
      |        25 | file                                                                                                                                         |           9 |          1 |
      |        26 | INT                                                                                                                                          |           9 |          0 |
      |        27 | VARCHAR                                                                                                                                      |           9 |          0 |
      |        28 | DATE                                                                                                                                         |           9 |          0 |
      +-----------+----------------------------------------------------------------------------------------------------------------------------------------------+-------------+------------+
      28 rows in set (0.12 sec)
  mysql> SELECT * FROM testing;
      +------------+------------+-------------+-----------+
      | testing_id | attempt_id | question_id | answer_id |
      +------------+------------+-------------+-----------+
      |          1 |          1 |           9 |        25 |
      |          2 |          1 |           7 |        19 |
      |          3 |          1 |           6 |        17 |
      |          4 |          2 |           3 |         9 |
      |          5 |          2 |           1 |         2 |
      |          6 |          2 |           4 |        11 |
      |          7 |          3 |           6 |        18 |
      |          8 |          3 |           8 |        24 |
      |          9 |          3 |           9 |        28 |
      |         10 |          4 |           1 |         2 |
      |         11 |          4 |           5 |        16 |
      |         12 |          4 |           3 |        10 |
      |         13 |          5 |           2 |         6 |
      |         14 |          5 |           1 |         2 |
      |         15 |          5 |           4 |        12 |
      |         16 |          6 |           6 |        17 |
      |         17 |          6 |           8 |        22 |
      |         18 |          6 |           7 |        21 |
      |         19 |          7 |           1 |         3 |
      |         20 |          7 |           4 |        11 |
      |         21 |          7 |           5 |        16 |
      +------------+------------+-------------+-----------+
      21 rows in set (0.01 sec)
  mysql> SELECT name_question,
      name_answer,
      IF(is_correct,'Верно','Неверно') AS Результат
  FROM testing
  INNER JOIN answer
  USING(answer_id)
  INNER JOIN question
  ON testing.question_id=question.question_id
  INNER JOIN subject
  USING(subject_id)
  INNER JOIN attempt
  USING(attempt_id)
  INNER JOIN student
  USING(student_id)
  WHERE date_attempt=DATE('2020-05-17')
      AND name_student='Семенов Иван'
      AND name_subject='Основы SQL';
      +------------------------------------------------------------------------------------------------------------+-----------------------+--------------------+
      | name_question                                                                                              | name_answer           | Результат          |
      +------------------------------------------------------------------------------------------------------------+-----------------------+--------------------+
      | Запрос на выборку начинается с ключевого слова:                                                            | INSERT                | Неверно            |
      | Какой запрос выбирает все записи из таблицы student:                                                       | SELECT * FROM student | Верно              |
      | Для внутреннего соединения таблиц используется оператор:                                                   | CROSS JOIN            | Неверно            |
      +------------------------------------------------------------------------------------------------------------+-----------------------+--------------------+
      3 rows in set (0.02 sec)
  Task:
  Посчитать результаты тестирования. Результат попытки вычислить как количество правильных ответов, деленное на 3 (количество вопросов в каждой попытке) и умноженное на 100. Результат округлить до двух знаков после запятой. Вывести фамилию студента, название предмета, дату и результат. Последний столбец назвать Результат. Информацию отсортировать сначала по фамилии студента, потом по убыванию даты попытки.
  Decision:
  mysql> SELECT * FROM answer;
      +-----------+----------------------------------------------------------------------------------------------------------------------------------------------+-------------+------------+
      | answer_id | name_answer                                                                                                                                  | question_id | is_correct |
      +-----------+----------------------------------------------------------------------------------------------------------------------------------------------+-------------+------------+
      |         1 | UPDATE                                                                                                                                       |           1 |          0 |
      |         2 | SELECT                                                                                                                                       |           1 |          1 |
      |         3 | INSERT                                                                                                                                       |           1 |          0 |
      |         4 | GROUP BY                                                                                                                                     |           2 |          0 |
      |         5 | FROM                                                                                                                                         |           2 |          0 |
      |         6 | WHERE                                                                                                                                        |           2 |          1 |
      |         7 | SELECT                                                                                                                                       |           2 |          0 |
      |         8 | SORT                                                                                                                                         |           3 |          0 |
      |         9 | ORDER BY                                                                                                                                     |           3 |          1 |
      |        10 | RANG BY                                                                                                                                      |           3 |          0 |
      |        11 | SELECT * FROM student                                                                                                                        |           4 |          1 |
      |        12 | SELECT student                                                                                                                               |           4 |          0 |
      |        13 | INNER JOIN                                                                                                                                   |           5 |          1 |
      |        14 | LEFT JOIN                                                                                                                                    |           5 |          0 |
      |        15 | RIGHT JOIN                                                                                                                                   |           5 |          0 |
      CT *|        16 | CROSS JOIN                                                                                                                                   |           5 |          0 |
      |        17 | совокупность данных, организованных по определенным правилам                                                                                 |           6 |          1 |
      |        18 | совокупность программ для хранения и обработки больших массивов информации                                                                   |           6 |          0 |
      |        19 | строка                                                                                                                                       |           7 |          0 |
      |        20 | столбец                                                                                                                                      |           7 |          0 |
      |        21 | таблица                                                                                                                                      |           7 |          1 |
      |        22 | обобщенное представление пользователей о данных                                                                                              |           8 |          1 |
      |        23 | описание представления данных в памяти компьютера                                                                                            |           8 |          0 |
      |        24 | база данных                                                                                                                                  |           8 |          0 |
      |        25 | file                                                                                                                                         |           9 |          1 |
      |        26 | INT                                                                                                                                          |           9 |          0 |
      |        27 | VARCHAR                                                                                                                                      |           9 |          0 |
      |        28 | DATE                                                                                                                                         |           9 |          0 |
      +-----------+----------------------------------------------------------------------------------------------------------------------------------------------+-------------+------------+
      28 rows in set (0.00 sec)
  mysql> SELECT * FROM student;
      +------------+-------------------------------+
      | student_id | name_student                  |
      +------------+-------------------------------+
      |          1 | Баранов Павел                 |
      |          2 | Абрамова Катя                 |
      |          3 | Семенов Иван                  |
      |          4 | Яковлева Галина               |
      +------------+-------------------------------+
      4 rows in set (0.00 sec)
  mysql> SELECT * FROM testing;
      +------------+------------+-------------+-----------+
      | testing_id | attempt_id | question_id | answer_id |
      +------------+------------+-------------+-----------+
      |          1 |          1 |           9 |        25 |
      |          2 |          1 |           7 |        19 |
      |          3 |          1 |           6 |        17 |
      |          4 |          2 |           3 |         9 |
      |          5 |          2 |           1 |         2 |
      |          6 |          2 |           4 |        11 |
      |          7 |          3 |           6 |        18 |
      |          8 |          3 |           8 |        24 |
      |          9 |          3 |           9 |        28 |
      |         10 |          4 |           1 |         2 |
      |         11 |          4 |           5 |        16 |
      |         12 |          4 |           3 |        10 |
      |         13 |          5 |           2 |         6 |
      |         14 |          5 |           1 |         2 |
      |         15 |          5 |           4 |        12 |
      |         16 |          6 |           6 |        17 |
      |         17 |          6 |           8 |        22 |
      |         18 |          6 |           7 |        21 |
      |         19 |          7 |           1 |         3 |
      |         20 |          7 |           4 |        11 |
      |         21 |          7 |           5 |        16 |
      +------------+------------+-------------+-----------+
      21 rows in set (0.00 sec)
  mysql> SELECT * FROM attempt;
      +------------+------------+------------+--------------+--------+
      | attempt_id | student_id | subject_id | date_attempt | result |
      +------------+------------+------------+--------------+--------+
      |          1 |          1 |          2 | 2020-03-23   |     67 |
      |          2 |          3 |          1 | 2020-03-23   |    100 |
      |          3 |          4 |          2 | 2020-03-26   |      0 |
      |          4 |          1 |          1 | 2020-04-15   |     33 |
      |          5 |          3 |          1 | 2020-04-15   |     67 |
      |          6 |          4 |          2 | 2020-04-21   |    100 |
      |          7 |          3 |          1 | 2020-05-17   |     33 |
      +------------+------------+------------+--------------+--------+
      7 rows in set (0.00 sec)
  mysql> SELECT * FROM question;
      +-------------+-------------------------------------------------------------------------------------------------------------------------------------+------------+
      | question_id | name_question                                                                                                                       | subject_id |
      +-------------+-------------------------------------------------------------------------------------------------------------------------------------+------------+
      |           1 | Запрос на выборку начинается с ключевого слова:                                                                                     |          1 |
      |           2 | Условие, по которому отбираются записи, задается после ключевого слова:                                                             |          1 |
      |           3 | Для сортировки используется:                                                                                                        |          1 |
      |           4 | Какой запрос выбирает все записи из таблицы student:                                                                                |          1 |
      |           5 | Для внутреннего соединения таблиц используется оператор:                                                                            |          1 |
      |           6 | База данных - это:                                                                                                                  |          2 |
      |           7 | Отношение - это:                                                                                                                    |          2 |
      |           8 | Концептуальная модель используется для                                                                                              |          2 |
      |           9 | Какой тип данных не допустим в реляционной таблице?                                                                                 |          2 |
      +-------------+-------------------------------------------------------------------------------------------------------------------------------------+------------+
      9 rows in set (0.00 sec)
  mysql> SELECT * FROM subject;
      +------------+----------------------------------+
      | subject_id | name_subject                     |
      +------------+----------------------------------+
      |          1 | Основы SQL                       |
      |          2 | Основы баз данных                |
      |          3 | Физика                           |
      +------------+----------------------------------+
      3 rows in set (0.00 sec)
  mysql> SELECT name_student,
      name_subject,
      date_attempt,
      ROUND(100 * SUM(is_correct) / 3, 2) AS Результат
  FROM attempt
  INNER JOIN student
  USING(student_id)
  INNER JOIN subject
  USING(subject_id)
  INNER JOIN testing
  USING(attempt_id)
  INNER JOIN answer
  USING(answer_id)
  GROUP BY attempt_id
  ORDER BY name_student, date_attempt DESC;
      +-------------------------------+----------------------------------+--------------+--------------------+
      | name_student                  | name_subject                     | date_attempt | Результат          |
      +-------------------------------+----------------------------------+--------------+--------------------+
      | Баранов Павел                 | Основы SQL                       | 2020-04-15   |              33.33 |
      | Баранов Павел                 | Основы баз данных                | 2020-03-23   |              66.67 |
      | Семенов Иван                  | Основы SQL                       | 2020-05-17   |              33.33 |
      | Семенов Иван                  | Основы SQL                       | 2020-04-15   |              66.67 |
      | Семенов Иван                  | Основы SQL                       | 2020-03-23   |             100.00 |
      | Яковлева Галина               | Основы баз данных                | 2020-04-21   |             100.00 |
      | Яковлева Галина               | Основы баз данных                | 2020-03-26   |               0.00 |
      +-------------------------------+----------------------------------+--------------+--------------------+
      7 rows in set (1.33 sec)
  Task:
  Для каждого вопроса вывести процент успешных решений, то есть отношение количества верных ответов к общему количеству ответов, значение округлить до 2-х знаков после запятой. Также вывести название предмета, к которому относится вопрос, и общее количество ответов на этот вопрос. В результат включить название дисциплины, вопросы по ней (столбец назвать Вопрос), а также два вычисляемых столбца Всего_ответов и Успешность. Информацию отсортировать сначала по названию дисциплины, потом по убыванию успешности, а потом по тексту вопроса в алфавитном порядке.
  Поскольку тексты вопросов могут быть длинными, обрезать их 30 символов и добавить многоточие "...".
  Decision:
  mysql> SELECT * FROM subject;
      +------------+----------------------------------+
      | subject_id | name_subject                     |
      +------------+----------------------------------+
      |          1 | Основы SQL                       |
      |          2 | Основы баз данных                |
      |          3 | Физика                           |
      +------------+----------------------------------+
      3 rows in set (0.00 sec)
  mysql> SELECT * FROM question;
      +-------------+-------------------------------------------------------------------------------------------------------------------------------------+------------+
      | question_id | name_question                                                                                                                       | subject_id |
      +-------------+-------------------------------------------------------------------------------------------------------------------------------------+------------+
      |           1 | Запрос на выборку начинается с ключевого слова:                                                                                     |          1 |
      |           2 | Условие, по которому отбираются записи, задается после ключевого слова:                                                             |          1 |
      |           3 | Для сортировки используется:                                                                                                        |          1 |
      |           4 | Какой запрос выбирает все записи из таблицы student:                                                                                |          1 |
      |           5 | Для внутреннего соединения таблиц используется оператор:                                                                            |          1 |
      |           6 | База данных - это:                                                                                                                  |          2 |
      |           7 | Отношение - это:                                                                                                                    |          2 |
      |           8 | Концептуальная модель используется для                                                                                              |          2 |
      |           9 | Какой тип данных не допустим в реляционной таблице?                                                                                 |          2 |
      +-------------+-------------------------------------------------------------------------------------------------------------------------------------+------------+
      9 rows in set (0.01 sec)
  mysql> SELECT testing_id, question_id, answer_id FROM testing;
      +------------+-------------+-----------+
      | testing_id | question_id | answer_id |
      +------------+-------------+-----------+
      |          1 |           9 |        25 |
      |          2 |           7 |        19 |
      |          3 |           6 |        17 |
      |          4 |           3 |         9 |
      |          5 |           1 |         2 |
      |          6 |           4 |        11 |
      |          7 |           6 |        18 |
      |          8 |           8 |        24 |
      |          9 |           9 |        28 |
      |         10 |           1 |         2 |
      |         11 |           5 |        16 |
      |         12 |           3 |        10 |
      |         13 |           2 |         6 |
      |         14 |           1 |         2 |
      |         15 |           4 |        12 |
      |         16 |           6 |        17 |
      |         17 |           8 |        22 |
      |         18 |           7 |        21 |
      |         19 |           1 |         3 |
      |         20 |           4 |        11 |
      |         21 |           5 |        16 |
      +------------+-------------+-----------+
      21 rows in set (0.00 sec)
  mysql> SELECT answer_id, question_id, is_correct FROM answer;
      +-----------+-------------+------------+
      | answer_id | question_id | is_correct |
      +-----------+-------------+------------+
      |         1 |           1 |          0 |
      |         2 |           1 |          1 |
      |         3 |           1 |          0 |
      |         4 |           2 |          0 |
      |         5 |           2 |          0 |
      |         6 |           2 |          1 |
      |         7 |           2 |          0 |
      |         8 |           3 |          0 |
      |         9 |           3 |          1 |
      |        10 |           3 |          0 |
      |        11 |           4 |          1 |
      |        12 |           4 |          0 |
      |        13 |           5 |          1 |
      |        14 |           5 |          0 |
      |        15 |           5 |          0 |
      |        16 |           5 |          0 |
      |        17 |           6 |          1 |
      |        18 |           6 |          0 |
      |        19 |           7 |          0 |
      |        20 |           7 |          0 |
      |        21 |           7 |          1 |
      |        22 |           8 |          1 |
      |        23 |           8 |          0 |
      |        24 |           8 |          0 |
      |        25 |           9 |          1 |
      |        26 |           9 |          0 |
      |        27 |           9 |          0 |
      |        28 |           9 |          0 |
      +-----------+-------------+------------+
      28 rows in set (0.00 sec)
  mysql> SELECT name_subject,
      CONCAT(LEFT(name_question, 30), '...') AS Вопрос,
      COUNT(testing.answer_id) AS Всего_ответов,
      ROUND(SUM(is_correct) / COUNT(testing.answer_id) * 100, 2) AS Успешность
  FROM subject
  JOIN question USING(subject_id)
  JOIN testing USING(question_id)
  LEFT JOIN answer USING(answer_id)
  GROUP BY 1, 2
  ORDER BY 1, 4 DESC, 2;
      +----------------------------------+---------------------------------------------------------------+---------------------------+----------------------+
      | name_subject                     | Вопрос                                                        | Всего_ответов             | Успешность           |
      +----------------------------------+---------------------------------------------------------------+---------------------------+----------------------+
      | Основы SQL                       | Условие, по которому отбираютс...                             |                         1 |               100.00 |
      | Основы SQL                       | Запрос на выборку начинается с...                             |                         4 |                75.00 |
      | Основы SQL                       | Какой запрос выбирает все запи...                             |                         3 |                66.67 |
      | Основы SQL                       | Для сортировки используется:...                               |                         2 |                50.00 |
      | Основы SQL                       | Для внутреннего соединения таб...                             |                         2 |                 0.00 |
      | Основы баз данных                | База данных - это:...                                         |                         3 |                66.67 |
      | Основы баз данных                | Какой тип данных не допустим в...                             |                         2 |                50.00 |
      | Основы баз данных                | Концептуальная модель использу...                             |                         2 |                50.00 |
      | Основы баз данных                | Отношение - это:...                                           |                         2 |                50.00 |
      +----------------------------------+---------------------------------------------------------------+---------------------------+----------------------+
      9 rows in set (0.20 sec)
  Task:
  В таблицу attempt включить новую попытку для студента Баранова Павла по дисциплине Основы баз данных». Установить текущую дату в качестве даты выполнения попытки.
  Decision:
  mysql> SELECT * FROM student;
      +------------+-------------------------------+
      | student_id | name_student                  |
      +------------+-------------------------------+
      |          1 | Баранов Павел                 |
      |          2 | Абрамова Катя                 |
      |          3 | Семенов Иван                  |
      |          4 | Яковлева Галина               |
      +------------+-------------------------------+
      4 rows in set (0.00 sec)
  mysql> SELECT * FROM subject;
      +------------+----------------------------------+
      | subject_id | name_subject                     |
      +------------+----------------------------------+
      |          1 | Основы SQL                       |
      |          2 | Основы баз данных                |
      |          3 | Физика                           |
      +------------+----------------------------------+
      3 rows in set (0.01 sec)
  mysql> SELECT * FROM attempt;
      +------------+------------+------------+--------------+--------+
      | attempt_id | student_id | subject_id | date_attempt | result |
      +------------+------------+------------+--------------+--------+
      |          1 |          1 |          2 | 2020-03-23   |     67 |
      |          2 |          3 |          1 | 2020-03-23   |    100 |
      |          3 |          4 |          2 | 2020-03-26   |      0 |
      |          4 |          1 |          1 | 2020-04-15   |     33 |
      |          5 |          3 |          1 | 2020-04-15   |     67 |
      |          6 |          4 |          2 | 2020-04-21   |    100 |
      |          7 |          3 |          1 | 2020-05-17   |     33 |
      +------------+------------+------------+--------------+--------+
      7 rows in set (0.00 sec)
  mysql> INSERT INTO attempt(student_id, subject_id, date_attempt)
  SELECT student_id, subject_id, NOW()
  FROM  student, subject
  WHERE name_student = 'Баранов Павел' AND name_subject = 'Основы баз данных';
      Query OK, 1 row affected, 1 warning (0.16 sec)
      Records: 1  Duplicates: 0  Warnings: 1
  mysql> SELECT * FROM attempt;
      +------------+------------+------------+--------------+--------+
      | attempt_id | student_id | subject_id | date_attempt | result |
      +------------+------------+------------+--------------+--------+
      |          1 |          1 |          2 | 2020-03-23   |     67 |
      |          2 |          3 |          1 | 2020-03-23   |    100 |
      |          3 |          4 |          2 | 2020-03-26   |      0 |
      |          4 |          1 |          1 | 2020-04-15   |     33 |
      |          5 |          3 |          1 | 2020-04-15   |     67 |
      |          6 |          4 |          2 | 2020-04-21   |    100 |
      |          7 |          3 |          1 | 2020-05-17   |     33 |
      |          8 |          1 |          2 | 2022-03-22   |   NULL |
      +------------+------------+------------+--------------+--------+
      8 rows in set (0.00 sec)
  Task:
  Случайным образом выбрать три вопроса (запрос) по дисциплине, тестирование по которой собирается проходить студент, занесенный в таблицу attempt последним, и добавить их в таблицу testing. id последней попытки получить как максимальное значение id из таблицы attempt.
  Decision:
  mysql> SELECT * FROM question;
      +-------------+-------------------------------------------------------------------------------------------------------------------------------------+------------+
      | question_id | name_question                                                                                                                       | subject_id |
      +-------------+-------------------------------------------------------------------------------------------------------------------------------------+------------+
      |           1 | Запрос на выборку начинается с ключевого слова:                                                                                     |          1 |
      |           2 | Условие, по которому отбираются записи, задается после ключевого слова:                                                             |          1 |
      |           3 | Для сортировки используется:                                                                                                        |          1 |
      |           4 | Какой запрос выбирает все записи из таблицы student:                                                                                |          1 |
      |           5 | Для внутреннего соединения таблиц используется оператор:                                                                            |          1 |
      |           6 | База данных - это:                                                                                                                  |          2 |
      |           7 | Отношение - это:                                                                                                                    |          2 |
      |           8 | Концептуальная модель используется для                                                                                              |          2 |
      |           9 | Какой тип данных не допустим в реляционной таблице?                                                                                 |          2 |
      +-------------+-------------------------------------------------------------------------------------------------------------------------------------+------------+
      9 rows in set (0.00 sec)
  mysql> SELECT * FROM attempt;
      +------------+------------+------------+--------------+--------+
      | attempt_id | student_id | subject_id | date_attempt | result |
      +------------+------------+------------+--------------+--------+
      |          1 |          1 |          2 | 2020-03-23   |     67 |
      |          2 |          3 |          1 | 2020-03-23   |    100 |
      |          3 |          4 |          2 | 2020-03-26   |      0 |
      |          4 |          1 |          1 | 2020-04-15   |     33 |
      |          5 |          3 |          1 | 2020-04-15   |     67 |
      |          6 |          4 |          2 | 2020-04-21   |    100 |
      |          7 |          3 |          1 | 2020-05-17   |     33 |
      |          8 |          1 |          2 | 2022-03-22   |   NULL |
      +------------+------------+------------+--------------+--------+
      8 rows in set (0.00 sec)
  mysql> SELECT * FROM testing;
      +------------+------------+-------------+-----------+
      | testing_id | attempt_id | question_id | answer_id |
      +------------+------------+-------------+-----------+
      |          1 |          1 |           9 |        25 |
      |          2 |          1 |           7 |        19 |
      |          3 |          1 |           6 |        17 |
      |          4 |          2 |           3 |         9 |
      |          5 |          2 |           1 |         2 |
      |          6 |          2 |           4 |        11 |
      |          7 |          3 |           6 |        18 |
      |          8 |          3 |           8 |        24 |
      |          9 |          3 |           9 |        28 |
      |         10 |          4 |           1 |         2 |
      |         11 |          4 |           5 |        16 |
      |         12 |          4 |           3 |        10 |
      |         13 |          5 |           2 |         6 |
      |         14 |          5 |           1 |         2 |
      |         15 |          5 |           4 |        12 |
      |         16 |          6 |           6 |        17 |
      |         17 |          6 |           8 |        22 |
      |         18 |          6 |           7 |        21 |
      |         19 |          7 |           1 |         3 |
      |         20 |          7 |           4 |        11 |
      |         21 |          7 |           5 |        16 |
      +------------+------------+-------------+-----------+
      21 rows in set (0.00 sec)
  mysql> INSERT INTO testing(attempt_id, question_id)
  SELECT attempt_id, question_id
  FROM question
  JOIN attempt USING(subject_id)
  WHERE attempt_id = (SELECT MAX(attempt_id)
                  FROM attempt)
  ORDER BY RAND()
  LIMIT 3;
      Query OK, 3 rows affected (0.16 sec)
      Records: 3  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM testing;
      +------------+------------+-------------+-----------+
      | testing_id | attempt_id | question_id | answer_id |
      +------------+------------+-------------+-----------+
      |          1 |          1 |           9 |        25 |
      |          2 |          1 |           7 |        19 |
      |          3 |          1 |           6 |        17 |
      |          4 |          2 |           3 |         9 |
      |          5 |          2 |           1 |         2 |
      |          6 |          2 |           4 |        11 |
      |          7 |          3 |           6 |        18 |
      |          8 |          3 |           8 |        24 |
      |          9 |          3 |           9 |        28 |
      |         10 |          4 |           1 |         2 |
      |         11 |          4 |           5 |        16 |
      |         12 |          4 |           3 |        10 |
      |         13 |          5 |           2 |         6 |
      |         14 |          5 |           1 |         2 |
      |         15 |          5 |           4 |        12 |
      |         16 |          6 |           6 |        17 |
      |         17 |          6 |           8 |        22 |
      |         18 |          6 |           7 |        21 |
      |         19 |          7 |           1 |         3 |
      |         20 |          7 |           4 |        11 |
      |         21 |          7 |           5 |        16 |
      |         22 |          8 |           6 |      NULL |
      |         23 |          8 |           7 |      NULL |
      |         24 |          8 |           8 |      NULL |
      +------------+------------+-------------+-----------+
      24 rows in set (0.00 sec)
  Task:
  Студент прошел тестирование (то есть все его ответы занесены в таблицу testing), далее необходимо вычислить результат(запрос) и занести его в таблицу attempt для соответствующей попытки.  Результат попытки вычислить как количество правильных ответов, деленное на 3 (количество вопросов в каждой попытке) и умноженное на 100. Результат округлить до целого.
  Будем считать, что мы знаем id попытки,  для которой вычисляется результат, в нашем случае это 8. В таблицу testing занесены следующие ответы пользователя:
  +------------+------------+-------------+-----------+
  | testing_id | attempt_id | question_id | answer_id |
  +------------+------------+-------------+-----------+
  | 22         | 8          | 7           | 19        |
  | 23         | 8          | 6           | 17        |
  | 24         | 8          | 8           | 22        |
  +------------+------------+-------------+-----------+
  Decision:
  mysql> SELECT * FROM testing;
      *+------------+------------+-------------+-----------+
      | testing_id | attempt_id | question_id | answer_id |
      +------------+------------+-------------+-----------+
      |          1 |          1 |           9 |        25 |
      |          2 |          1 |           7 |        19 |
      |          3 |          1 |           6 |        17 |
      |          4 |          2 |           3 |         9 |
      |          5 |          2 |           1 |         2 |
      |          6 |          2 |           4 |        11 |
      |          7 |          3 |           6 |        18 |
      |          8 |          3 |           8 |        24 |
      |          9 |          3 |           9 |        28 |
      |         10 |          4 |           1 |         2 |
      |         11 |          4 |           5 |        16 |
      |         12 |          4 |           3 |        10 |
      |         13 |          5 |           2 |         6 |
      |         14 |          5 |           1 |         2 |
      |         15 |          5 |           4 |        12 |
      |         16 |          6 |           6 |        17 |
      |         17 |          6 |           8 |        22 |
      |         18 |          6 |           7 |        21 |
      |         19 |          7 |           1 |         3 |
      |         20 |          7 |           4 |        11 |
      |         21 |          7 |           5 |        16 |
      |         22 |          8 |           6 |      NULL |
      |         23 |          8 |           7 |      NULL |
      |         24 |          8 |           8 |      NULL |
      +------------+------------+-------------+-----------+
      24 rows in set (0.00 sec)
  mysql> SELECT * FROM attempt;
      +------------+------------+------------+--------------+--------+
      | attempt_id | student_id | subject_id | date_attempt | result |
      +------------+------------+------------+--------------+--------+
      |          1 |          1 |          2 | 2020-03-23   |     67 |
      |          2 |          3 |          1 | 2020-03-23   |    100 |
      |          3 |          4 |          2 | 2020-03-26   |      0 |
      |          4 |          1 |          1 | 2020-04-15   |     33 |
      |          5 |          3 |          1 | 2020-04-15   |     67 |
      |          6 |          4 |          2 | 2020-04-21   |    100 |
      |          7 |          3 |          1 | 2020-05-17   |     33 |
      |          8 |          1 |          2 | 2022-03-22   |   NULL |
      +------------+------------+------------+--------------+--------+
      8 rows in set (0.00 sec)
  mysql> SELECT * FROM answer;
      +-----------+----------------------------------------------------------------------------------------------------------------------------------------------+-------------+------------+
      | answer_id | name_answer                                                                                                                                  | question_id | is_correct |
      +-----------+----------------------------------------------------------------------------------------------------------------------------------------------+-------------+------------+
      |         1 | UPDATE                                                                                                                                       |           1 |          0 |
      |         2 | SELECT                                                                                                                                       |           1 |          1 |
      |         3 | INSERT                                                                                                                                       |           1 |          0 |
      |         4 | GROUP BY                                                                                                                                     |           2 |          0 |
      |         5 | FROM                                                                                                                                         |           2 |          0 |
      |         6 | WHERE                                                                                                                                        |           2 |          1 |
      |         7 | SELECT                                                                                                                                       |           2 |          0 |
      |         8 | SORT                                                                                                                                         |           3 |          0 |
      |         9 | ORDER BY                                                                                                                                     |           3 |          1 |
      |        10 | RANG BY                                                                                                                                      |           3 |          0 |
      |        11 | SELECT * FROM student                                                                                                                        |           4 |          1 |
      |        12 | SELECT student                                                                                                                               |           4 |          0 |
      |        13 | INNER JOIN                                                                                                                                   |           5 |          1 |
      |        14 | LEFT JOIN                                                                                                                                    |           5 |          0 |
      |        15 | RIGHT JOIN                                                                                                                                   |           5 |          0 |
      |        16 | CROSS JOIN                                                                                                                                   |           5 |          0 |
      |        17 | совокупность данных, организованных по определенным правилам                                                                                 |           6 |          1 |
      |        18 | совокупность программ для хранения и обработки больших массивов информации                                                                   |           6 |          0 |
      |        19 | строка                                                                                                                                       |           7 |          0 |
      |        20 | столбец                                                                                                                                      |           7 |          0 |
      |        21 | таблица                                                                                                                                      |           7 |          1 |
      |        22 | обобщенное представление пользователей о данных                                                                                              |           8 |          1 |
      |        23 | описание представления данных в памяти компьютера                                                                                            |           8 |          0 |
      |        24 | база данных                                                                                                                                  |           8 |          0 |
      |        25 | file                                                                                                                                         |           9 |          1 |
      |        26 | INT                                                                                                                                          |           9 |          0 |
      |        27 | VARCHAR                                                                                                                                      |           9 |          0 |
      |        28 | DATE                                                                                                                                         |           9 |          0 |
      +-----------+----------------------------------------------------------------------------------------------------------------------------------------------+-------------+------------+
      28 rows in set (0.00 sec)
  mysql> UPDATE attempt
  SET result = (SELECT ROUND((SUM(is_correct)/3)*100, 2)
      FROM answer
      INNER JOIN testing
      ON answer.answer_id = testing.answer_id
      WHERE testing.attempt_id = 8)
  WHERE attempt.attempt_id = 8;
  Task:
  Удалить из таблицы attempt все попытки, выполненные раньше 1 мая 2020 года. Также удалить и все соответствующие этим попыткам вопросы из таблицы testing, которая создавалась следующим запросом:
      CREATE TABLE testing (
          testing_id INT PRIMARY KEY AUTO_INCREMENT,
          attempt_id INT,
          question_id INT,
          answer_id INT,
          FOREIGN KEY (attempt_id)  REFERENCES attempt (attempt_id) ON DELETE CASCADE
      );
  Decision:
  mysql> SELECT * FROM testing;
      +------------+------------+-------------+-----------+
      | testing_id | attempt_id | question_id | answer_id |
      +------------+------------+-------------+-----------+
      |          1 |          1 |           9 |        25 |
      |          2 |          1 |           7 |        19 |
      |          3 |          1 |           6 |        17 |
      |          4 |          2 |           3 |         9 |
      |          5 |          2 |           1 |         2 |
      |          6 |          2 |           4 |        11 |
      |          7 |          3 |           6 |        18 |
      |          8 |          3 |           8 |        24 |
      |          9 |          3 |           9 |        28 |
      |         10 |          4 |           1 |         2 |
      |         11 |          4 |           5 |        16 |
      |         12 |          4 |           3 |        10 |
      |         13 |          5 |           2 |         6 |
      |         14 |          5 |           1 |         2 |
      |         15 |          5 |           4 |        12 |
      |         16 |          6 |           6 |        17 |
      |         17 |          6 |           8 |        22 |
      |         18 |          6 |           7 |        21 |
      |         19 |          7 |           1 |         3 |
      |         20 |          7 |           4 |        11 |
      |         21 |          7 |           5 |        16 |
      |         22 |          8 |           6 |      NULL |
      |         23 |          8 |           7 |      NULL |
      |         24 |          8 |           8 |      NULL |
      +------------+------------+-------------+-----------+
      24 rows in set (0.00 sec)
  mysql> SELECT * FROM attempt;
      +------------+------------+------------+--------------+--------+
      | attempt_id | student_id | subject_id | date_attempt | result |
      +------------+------------+------------+--------------+--------+
      |          1 |          1 |          2 | 2020-03-23   |     67 |
      |          2 |          3 |          1 | 2020-03-23   |    100 |
      |          3 |          4 |          2 | 2020-03-26   |      0 |
      |          4 |          1 |          1 | 2020-04-15   |     33 |
      |          5 |          3 |          1 | 2020-04-15   |     67 |
      |          6 |          4 |          2 | 2020-04-21   |    100 |
      |          7 |          3 |          1 | 2020-05-17   |     33 |
      |          8 |          1 |          2 | 2022-03-22   |   NULL |
      +------------+------------+------------+--------------+--------+
      8 rows in set (0.00 sec)
  mysql> DELETE FROM attempt
  WHERE date_attempt < '2020-05-01';
      Query OK, 6 rows affected (0.19 sec)
  mysql> SELECT * FROM attempt;
      +------------+------------+------------+--------------+--------+
      | attempt_id | student_id | subject_id | date_attempt | result |
      +------------+------------+------------+--------------+--------+
      |          7 |          3 |          1 | 2020-05-17   |     33 |
      |          8 |          1 |          2 | 2022-03-22   |   NULL |
      +------------+------------+------------+--------------+--------+
      2 rows in set (0.00 sec)
  mysql> SELECT * FROM testing;
      +------------+------------+-------------+-----------+
      | testing_id | attempt_id | question_id | answer_id |
      +------------+------------+-------------+-----------+
      |         19 |          7 |           1 |         3 |
      |         20 |          7 |           4 |        11 |
      |         21 |          7 |           5 |        16 |
      |         22 |          8 |           6 |      NULL |
      |         23 |          8 |           7 |      NULL |
      |         24 |          8 |           8 |      NULL |
      +------------+------------+-------------+-----------+
      6 rows in set (0.00 sec)
  Task:
  Найти вопрос, с самой большой успешностью выполнения - "самый легкий" и вопрос, с самой маленькой успешностью выполнения - "самый сложный". (Подробно про успешность на этом шаге). Вывести предмет, эти два вопроса и указание - самый сложный или самый легкий это вопрос. Сначала вывести самый легкий запроса, потом самый сложный.
  Decision:
  SET @mn = (SELECT SUM(is_correct) / COUNT(is_correct) * 100
  FROM subject
  JOIN question USING(subject_id)
  JOIN testing USING(question_id)
  LEFT JOIN answer USING(answer_id)
  GROUP BY name_subject, name_question
  ORDER BY 1
  LIMIT 1);
  SET @mx = (SELECT SUM(is_correct) / COUNT(is_correct) * 100
  FROM subject
  JOIN question USING(subject_id)
  JOIN testing USING(question_id)
  LEFT JOIN answer USING(answer_id)
  GROUP BY name_subject, name_question
  ORDER BY 1 DESC
  LIMIT 1);
  SELECT name_subject, name_question,
  IF(SUM(is_correct) / COUNT(is_correct) * 100 = @mx, 'самый легкий', 'самый сложный') AS Сложность
  FROM subject
  JOIN question USING(subject_id)
  JOIN testing USING(question_id)
  LEFT JOIN answer USING(answer_id)
  GROUP BY name_subject, name_question
  HAVING SUM(is_correct) / COUNT(is_correct) * 100 = @mn OR SUM(is_correct) / COUNT(is_correct) * 100 = @mx
  ORDER BY SUM(is_correct) / COUNT(is_correct) * 100 DESC
  +--------------+-------------------------------------------------------------------------+---------------+
  | name_subject | name_question | Сложность |
  +--------------+-------------------------------------------------------------------------+---------------+
  | Основы SQL | Условие, по которому отбираются записи, задается после ключевого слова: | самый легкий |
  | Основы SQL | Для внутреннего соединения таблиц используется оператор: | самый сложный |
  +--------------+-------------------------------------------------------------------------+---------------+
  Task:
  Для повышения успеваемости, предоставить возможность студентам снова пройти тестирование.Для студентов, у которых количество попыток меньше 3 и максимальный балл < 70, в таблицу attempt добавить новые попытки по соответствующим предметам с текущей датой.
  Decision:
  INSERT attempt(student_id, subject_id, date_attempt, result)
  SELECT student_id, subject_id, NOW(), NULL
  FROM attempt
  GROUP BY student_id, subject_id
  HAVING COUNT(subject_id) < 3 AND MAX(result) < 70;
  SELECT * FROM attempt;
  +------------+------------+------------+--------------+--------+
  | attempt_id | student_id | subject_id | date_attempt | result |
  +------------+------------+------------+--------------+--------+
  | 1 | 1 | 2 | 2020-03-23 | 67 |
  | 2 | 3 | 1 | 2020-03-23 | 100 |
  | 3 | 4 | 2 | 2020-03-26 | 0 |
  | 4 | 1 | 1 | 2020-04-15 | 33 |
  | 5 | 3 | 1 | 2020-04-15 | 67 |
  | 6 | 4 | 2 | 2020-04-21 | 100 |
  | 7 | 3 | 1 | 2020-05-17 | 33 |
  | 8 | 1 | 1 | 2020-05-18 | None |
  | 9 | 1 | 2 | 2020-05-18 | None |
  +------------+------------+------------+--------------+--------+
  Task:
  Разработать базу "Абитуриент".
  Университет состоит из множества факультетов (школ). Абитуриенты зачисляются на образовательные программы по результатам Единого государственного экзамена (ЕГЭ). Каждая образовательная программа относится к определенному факультету, для нее определяются предметы ЕГЭ, необходимые для поступления, минимальный балл по этим предметам, а также план набора (количество мест) на образовательную программу.
  Абитуриенты подают заявление в приемную комиссию на образовательную программу, каждый абитуриент может выбрать несколько образовательных программ (но не более трех). В заявлении указываются фамилия, имя, отчество заявителя, а также его достижения: получил ли он медаль за учебу в школе, есть ли у него значок ГТО и т.д. При этом за каждое достижение начисляется дополнительное очко. Абитуриент предоставляет справку с результатами сдачи Единого государственного экзамена. Если абитуриент выбирает образовательную программу, то он должен был сдать предметы, определенные для этой программы, и балл должен быть как минимум минимальным по этому предмету.
  Зачисление абитуриентов осуществляется следующим образом: сначала подсчитывается сумма баллов по предметам для каждой образовательной программы, суммируются баллы успеваемости, затем абитуриенты сортируются в порядке убывания суммы баллов и отбираются первые в соответствии с количеством мест, определенным планом набора.
  Decision:
  mysql> CREATE DATABASE Students;
  Query OK, 1 row affected (0.26 sec)
  mysql> USE Students;
  Database changed
  mysql> CREATE TABLE department (department_id INT PRIMARY KEY AUTO_INCREMENT,
      -> name_department VARCHAR(30));
  Query OK, 0 rows affected (1.35 sec)
  mysql> INSERT INTO department (department_id, name_department)
      -> VALUES (1, 'Инженерная школа'), (2, 'Школа естественных наук');
  Query OK, 2 rows affected (0.15 sec)
  Records: 2  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM department;
  +---------------+----------------------------------------------+
  | department_id | name_department                              |
  +---------------+----------------------------------------------+
  |             1 | Инженерная школа                             |
  |             2 | Школа естественных наук                      |
  +---------------+----------------------------------------------+
  2 rows in set (0.00 sec)
  mysql> CREATE TABLE subject (subject_id INT PRIMARY KEY AUTO_INCREMENT,
      -> name_subject VARCHAR(30));
  Query OK, 0 rows affected (2.33 sec)
  mysql> INSERT INTO subject (subject_id, name_subject)
      -> VALUES (1, 'Русский язык'), (2, 'Математика'), (3, 'Физика'), (4, 'Информатика');
  Query OK, 4 rows affected (0.26 sec)
  Records: 4  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM subject;
  +------------+-------------------------+
  | subject_id | name_subject            |
  +------------+-------------------------+
  |          1 | Русский язык            |
  |          2 | Математика              |
  |          3 | Физика                  |
  |          4 | Информатика             |
  +------------+-------------------------+
  4 rows in set (0.00 sec)
  mysql> CREATE TABLE program (program_id INT PRIMARY KEY AUTO_INCREMENT,
      -> name_program VARCHAR(50),
      -> department_id INT,
      -> plan INT,
      -> FOREIGN KEY (department_id) REFERENCES department(department_id) ON DELETE CASCADE);
  Query OK, 0 rows affected (1.43 sec)
  mysql> INSERT INTO program (program_id, name_program, department_id, plan)
      -> VALUES (1, 'Прикладная математика и информатика', 2, 2),
      -> (2, 'Математика и компьютерные науки', 2, 1),
      -> (3, 'Прикладная механика', 1, 2),
      -> (4, 'Мехатроника и робототехника', 1, 3);
  Query OK, 4 rows affected (0.14 sec)
  Records: 4  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM program;
  +------------+---------------------------------------------------------------------+---------------+------+
  | program_id | name_program                                                        | department_id | plan |
  +------------+---------------------------------------------------------------------+---------------+------+
  |          1 | Прикладная математика и информатика                                 |             2 |    2 |
  |          2 | Математика и компьютерные науки                                     |             2 |    1 |
  |          3 | Прикладная механика                                                 |             1 |    2 |
  |          4 | Мехатроника и робототехника                                         |             1 |    3 |
  +------------+---------------------------------------------------------------------+---------------+------+
  4 rows in set (0.01 sec)
  mysql> CREATE TABLE enrollee (enrollee_id INT PRIMARY KEY AUTO_INCREMENT,
      -> name_enrollee VARCHAR(50));
  Query OK, 0 rows affected (2.96 sec)
  mysql> INSERT INTO enrollee (enrollee_id, name_enrollee)
      -> VALUES (1, 'Баранов Павел'), (2, 'Абрамова Катя'), (3, 'Семенов Иван'),
      -> (4, 'Яковлева Галина'), (5, 'Попов Илья'), (6, 'Степанова Дарья');
  Query OK, 6 rows affected (0.30 sec)
  Records: 6  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM enrollee;
  +-------------+-------------------------------+
  | enrollee_id | name_enrollee                 |
  +-------------+-------------------------------+
  |           1 | Баранов Павел                 |
  |           2 | Абрамова Катя                 |
  |           3 | Семенов Иван                  |
  |           4 | Яковлева Галина               |
  |           5 | Попов Илья                    |
  |           6 | Степанова Дарья               |
  +-------------+-------------------------------+
  6 rows in set (0.01 sec)
  mysql> CREATE TABLE achievement (achievement_id INT PRIMARY KEY AUTO_INCREMENT,
      -> name_achievement VARCHAR(30),
      -> bonus INT);
  Query OK, 0 rows affected (1.13 sec)
  mysql> INSERT INTO achievement (achievement_id, name_achievement, bonus)
      -> VALUES (1, 'Золотая медаль', 5), (2, 'Серебряная медаль', 3),
      -> (3, 'Золотой значок ГТО', 3),(4, 'Серебряный значок ГТО', 1);
  Query OK, 4 rows affected (0.31 sec)
  Records: 4  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM achievement;
  +----------------+------------------------------------------+-------+
  | achievement_id | name_achievement                         | bonus |
  +----------------+------------------------------------------+-------+
  |              1 | Золотая медаль                           |     5 |
  |              2 | Серебряная медаль                        |     3 |
  |              3 | Золотой значок ГТО                       |     3 |
  |              4 | Серебряный значок ГТО                    |     1 |
  +----------------+------------------------------------------+-------+
  4 rows in set (0.00 sec)
  mysql> CREATE TABLE enrollee_achievement (enrollee_achiev_id INT PRIMARY KEY AUTO_INCREMENT,
      -> enrollee_id INT,
      -> achievement_id INT,
      -> FOREIGN KEY (enrollee_id) REFERENCES enrollee(enrollee_id) ON DELETE CASCADE,
      -> FOREIGN KEY (achievement_id) REFERENCES achievement(achievement_id) ON DELETE CASCADE);
  Query OK, 0 rows affected (1.85 sec)
  mysql> INSERT INTO enrollee_achievement (enrollee_achiev_id, enrollee_id, achievement_id)
      -> VALUES (1, 1, 2),
      -> (2, 1, 3),
      -> (3, 3, 1),
      -> (4, 4, 4),
      -> (5, 5, 1),
      -> (6, 5, 3);
  Query OK, 6 rows affected (0.29 sec)
  Records: 6  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM enrollee_achievement;
  +--------------------+-------------+----------------+
  | enrollee_achiev_id | enrollee_id | achievement_id |
  +--------------------+-------------+----------------+
  |                  1 |           1 |              2 |
  |                  2 |           1 |              3 |
  |                  3 |           3 |              1 |
  |                  4 |           4 |              4 |
  |                  5 |           5 |              1 |
  |                  6 |           5 |              3 |
  +--------------------+-------------+----------------+
  6 rows in set (0.00 sec)
  mysql> CREATE TABLE program_subject (program_subject_id INT PRIMARY KEY AUTO_INCREMENT,
      -> program_id INT,
      -> subject_id INT,
      -> min_result INT,
      -> FOREIGN KEY (program_id) REFERENCES program(program_id)  ON DELETE CASCADE,
      -> FOREIGN KEY (subject_id) REFERENCES subject(subject_id) ON DELETE CASCADE);
  Query OK, 0 rows affected (2.22 sec)
  mysql> INSERT INTO program_subject (program_subject_id, program_id, subject_id, min_result)
      -> VALUES (1, 1, 1, 40),(2, 1, 2, 50), (3, 1, 4, 60), (4, 2, 1, 30),
      -> (5, 2, 2, 50),(6, 2, 4, 60), (7, 3, 1, 30),(8, 3, 2, 45),
      -> (9, 3, 3, 45),(10, 4, 1, 40), (11, 4, 2, 45), (12, 4, 3, 45);
  Query OK, 12 rows affected (0.30 sec)
  Records: 12  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM program_subject;
  +--------------------+------------+------------+------------+
  | program_subject_id | program_id | subject_id | min_result |
  +--------------------+------------+------------+------------+
  |                  1 |          1 |          1 |         40 |
  |                  2 |          1 |          2 |         50 |
  |                  3 |          1 |          4 |         60 |
  |                  4 |          2 |          1 |         30 |
  |                  5 |          2 |          2 |         50 |
  |                  6 |          2 |          4 |         60 |
  |                  7 |          3 |          1 |         30 |
  |                  8 |          3 |          2 |         45 |
  |                  9 |          3 |          3 |         45 |
  |                 10 |          4 |          1 |         40 |
  |                 11 |          4 |          2 |         45 |
  |                 12 |          4 |          3 |         45 |
  +--------------------+------------+------------+------------+
  12 rows in set (0.00 sec)
  mysql> CREATE TABLE program_enrollee (program_enrollee_id INT PRIMARY KEY AUTO_INCREMENT,
      -> program_id INT,
      -> enrollee_id INT,
      -> FOREIGN KEY (program_id) REFERENCES program(program_id) ON DELETE CASCADE,
      -> FOREIGN KEY (enrollee_id) REFERENCES enrollee(enrollee_id) ON DELETE CASCADE);
  Query OK, 0 rows affected (2.10 sec)
  mysql> INSERT INTO program_enrollee (program_enrollee_id, program_id, enrollee_id)
      -> VALUES (1, 3, 1), (2, 4, 1), (3, 1, 1), (4, 2, 2), (5, 1, 2),
      -> (6, 1, 3), (7, 2, 3), (8, 4, 3), (9, 3, 4), (10, 3, 5),
      -> (11, 4, 5), (12, 2, 6), (13, 3, 6), (14, 4, 6);
  Query OK, 14 rows affected (0.24 sec)
  Records: 14  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM program_enrollee;
  +---------------------+------------+-------------+
  | program_enrollee_id | program_id | enrollee_id |
  +---------------------+------------+-------------+
  |                   1 |          3 |           1 |
  |                   2 |          4 |           1 |
  |                   3 |          1 |           1 |
  |                   4 |          2 |           2 |
  |                   5 |          1 |           2 |
  |                   6 |          1 |           3 |
  |                   7 |          2 |           3 |
  |                   8 |          4 |           3 |
  |                   9 |          3 |           4 |
  |                  10 |          3 |           5 |
  |                  11 |          4 |           5 |
  |                  12 |          2 |           6 |
  |                  13 |          3 |           6 |
  |                  14 |          4 |           6 |
  +---------------------+------------+-------------+
  14 rows in set (0.00 sec)
  mysql> CREATE TABLE enrollee_subject (enrollee_subject_id INT PRIMARY KEY AUTO_INCREMENT,
      -> enrollee_id INT,
      -> subject_id INT,
      -> result INT,
      -> FOREIGN KEY (enrollee_id) REFERENCES enrollee(enrollee_id) ON DELETE CASCADE,
      -> FOREIGN KEY (subject_id) REFERENCES subject(subject_id) ON DELETE CASCADE);
  Query OK, 0 rows affected (2.15 sec)
  mysql> INSERT INTO enrollee_subject (enrollee_subject_id, enrollee_id, subject_id, result)
      -> VALUES (1, 1, 1, 68), (2, 1, 2, 70), (3, 1, 3, 41), (4, 1, 4, 75), (5, 2, 1, 75), (6, 2, 2, 70),
      -> (7, 2, 4, 81), (8, 3, 1, 85), (9, 3, 2, 67), (10, 3, 3, 90), (11, 3, 4, 78), (12, 4, 1, 82),
      -> (13, 4, 2, 86), (14, 4, 3, 70), (15, 5, 1, 65), (16, 5, 2, 67), (17, 5, 3, 60),
      -> (18, 6, 1, 90), (19, 6, 2, 92), (20, 6, 3, 88), (21, 6, 4, 94);
  Query OK, 21 rows affected (0.30 sec)
  Records: 21  Duplicates: 0  Warnings: 0
  mysql> SHOW TABLES;
  +----------------------+
  | Tables_in_Students   |
  +----------------------+
  | achievement          |
  | department           |
  | enrollee             |
  | enrollee_achievement |
  | enrollee_subject     |
  | program              |
  | program_enrollee     |
  | program_subject      |
  | subject              |
  +----------------------+
  9 rows in set (0.00 sec)
  Запросы на выборку
  Task:
  Вывести абитуриентов, которые хотят поступать на образовательную программу Мехатроника и робототехника» в отсортированном по фамилиям виде.
  Decision:
  mysql> SELECT * FROM program;
  +------------+---------------------------------------------------------------------+---------------+------+
  | program_id | name_program                                                        | department_id | plan |
  +------------+---------------------------------------------------------------------+---------------+------+
  |          1 | Прикладная математика и информатика                                 |             2 |    2 |
  |          2 | Математика и компьютерные науки                                     |             2 |    1 |
  |          3 | Прикладная механика                                                 |             1 |    2 |
  |          4 | Мехатроника и робототехника                                         |             1 |    3 |
  +------------+---------------------------------------------------------------------+---------------+------+
  4 rows in set (0.00 sec)
  mysql> SELECT * FROM enrollee;
  +-------------+-------------------------------+
  | enrollee_id | name_enrollee                 |
  +-------------+-------------------------------+
  |           1 | Баранов Павел                 |
  |           2 | Абрамова Катя                 |
  |           3 | Семенов Иван                  |
  |           4 | Яковлева Галина               |
  |           5 | Попов Илья                    |
  |           6 | Степанова Дарья               |
  +-------------+-------------------------------+
  6 rows in set (0.00 sec)
  mysql> SELECT * FROM program_enrollee;
  +---------------------+------------+-------------+
  | program_enrollee_id | program_id | enrollee_id |
  +---------------------+------------+-------------+
  |                   1 |          3 |           1 |
  |                   2 |          4 |           1 |
  |                   3 |          1 |           1 |
  |                   4 |          2 |           2 |
  |                   5 |          1 |           2 |
  |                   6 |          1 |           3 |
  |                   7 |          2 |           3 |
  |                   8 |          4 |           3 |
  |                   9 |          3 |           4 |
  |                  10 |          3 |           5 |
  |                  11 |          4 |           5 |
  |                  12 |          2 |           6 |
  |                  13 |          3 |           6 |
  |                  14 |          4 |           6 |
  +---------------------+------------+-------------+
  14 rows in set (0.00 sec)
  mysql> SELECT name_enrollee
      -> FROM enrollee
      -> INNER JOIN program_enrollee
      -> ON enrollee.enrollee_id = program_enrollee.enrollee_id
      -> INNER JOIN program
      -> ON program_enrollee.program_id = program.program_id
      -> WHERE name_program="Мехатроника и робототехника"
      -> ORDER BY name_enrollee;
  +-------------------------------+
  | name_enrollee                 |
  +-------------------------------+
  | Баранов Павел                 |
  | Попов Илья                    |
  | Семенов Иван                  |
  | Степанова Дарья               |
  +-------------------------------+
  4 rows in set (0.00 sec)
  Task:
  Вывести образовательные программы, на которые для поступления необходим предмет Информатика». Программы отсортировать в обратном алфавитном порядке.
  Decision:
  mysql> SELECT * FROM program;
  +------------+---------------------------------------------------------------------+---------------+------+
  | program_id | name_program                                                        | department_id | plan |
  +------------+---------------------------------------------------------------------+---------------+------+
  |          1 | Прикладная математика и информатика                                 |             2 |    2 |
  |          2 | Математика и компьютерные науки                                     |             2 |    1 |
  |          3 | Прикладная механика                                                 |             1 |    2 |
  |          4 | Мехатроника и робототехника                                         |             1 |    3 |
  +------------+---------------------------------------------------------------------+---------------+------+
  4 rows in set (0.00 sec)
  mysql> SELECT * FROM subject;
  +------------+-------------------------+
  | subject_id | name_subject            |
  +------------+-------------------------+
  |          1 | Русский язык            |
  |          2 | Математика              |
  |          3 | Физика                  |
  |          4 | Информатика             |
  +------------+-------------------------+
  4 rows in set (0.01 sec)
  mysql> SELECT * FROM program_subject;
  +--------------------+------------+------------+------------+
  | program_subject_id | program_id | subject_id | min_result |
  +--------------------+------------+------------+------------+
  |                  1 |          1 |          1 |         40 |
  |                  2 |          1 |          2 |         50 |
  |                  3 |          1 |          4 |         60 |
  |                  4 |          2 |          1 |         30 |
  |                  5 |          2 |          2 |         50 |
  |                  6 |          2 |          4 |         60 |
  |                  7 |          3 |          1 |         30 |
  |                  8 |          3 |          2 |         45 |
  |                  9 |          3 |          3 |         45 |
  |                 10 |          4 |          1 |         40 |
  |                 11 |          4 |          2 |         45 |
  |                 12 |          4 |          3 |         45 |
  +--------------------+------------+------------+------------+
  12 rows in set (0.00 sec)
  mysql> SELECT name_program
      -> FROM program
      -> INNER JOIN program_subject
      -> USING(program_id)
      -> INNER JOIN subject
      -> USING(subject_id)
      -> WHERE name_subject="Информатика";
  +---------------------------------------------------------------------+
  | name_program                                                        |
  +---------------------------------------------------------------------+
  | Прикладная математика и информатика                                 |
  | Математика и компьютерные науки                                     |
  +---------------------------------------------------------------------+
  2 rows in set (0.00 sec)
  Task:
  Выведите количество абитуриентов, сдавших ЕГЭ по каждому предмету, максимальное, минимальное и среднее значение баллов по предмету ЕГЭ. Вычисляемые столбцы назвать Количество, Максимум, Минимум, Среднее. Информацию отсортировать по названию предмета в алфавитном порядке, среднее значение округлить до одного знака после запятой.
  Decision:
  mysql> SELECT * FROM subject;
  +------------+-------------------------+
  | subject_id | name_subject            |
  +------------+-------------------------+
  |          1 | Русский язык            |
  |          2 | Математика              |
  |          3 | Физика                  |
  |          4 | Информатика             |
  +------------+-------------------------+
  4 rows in set (0.00 sec)
  mysql> SELECT * FROM enrollee_subject;
  +---------------------+-------------+------------+--------+
  | enrollee_subject_id | enrollee_id | subject_id | result |
  +---------------------+-------------+------------+--------+
  |                   1 |           1 |          1 |     68 |
  |                   2 |           1 |          2 |     70 |
  |                   3 |           1 |          3 |     41 |
  |                   4 |           1 |          4 |     75 |
  |                   5 |           2 |          1 |     75 |
  |                   6 |           2 |          2 |     70 |
  |                   7 |           2 |          4 |     81 |
  |                   8 |           3 |          1 |     85 |
  |                   9 |           3 |          2 |     67 |
  |                  10 |           3 |          3 |     90 |
  |                  11 |           3 |          4 |     78 |
  |                  12 |           4 |          1 |     82 |
  |                  13 |           4 |          2 |     86 |
  |                  14 |           4 |          3 |     70 |
  |                  15 |           5 |          1 |     65 |
  |                  16 |           5 |          2 |     67 |
  |                  17 |           5 |          3 |     60 |
  |                  18 |           6 |          1 |     90 |
  |                  19 |           6 |          2 |     92 |
  |                  20 |           6 |          3 |     88 |
  |                  21 |           6 |          4 |     94 |
  +---------------------+-------------+------------+--------+
  21 rows in set (0.01 sec)
  mysql> SELECT name_subject,
      ->     COUNT(enrollee_id) AS Количество,
      ->     MAX(result) AS Максимум,
      ->     MIN(result) AS Минимум,
      ->     ROUND(AVG(result), 1) AS Среднее
      -> FROM subject
      -> INNER JOIN enrollee_subject
      -> USING(subject_id)
      -> GROUP BY name_subject
      -> ORDER BY name_subject;
  +-------------------------+----------------------+------------------+----------------+----------------+
  | name_subject            | Количество           | Максимум         | Минимум        | Среднее        |
  +-------------------------+----------------------+------------------+----------------+----------------+
  | Информатика             |                    4 |               94 |             75 |           82.0 |
  | Математика              |                    6 |               92 |             67 |           75.3 |
  | Русский язык            |                    6 |               90 |             65 |           77.5 |
  | Физика                  |                    5 |               90 |             41 |           69.8 |
  +-------------------------+----------------------+------------------+----------------+----------------+
  4 rows in set (0.01 sec)
  Task:
  Вывести образовательные программы, для которых минимальный балл ЕГЭ по каждому предмету больше или равен 40 баллам. Программы вывести в отсортированном по алфавиту виде.
  Decision:
  mysql> SELECT * FROM program;
  +------------+---------------------------------------------------------------------+---------------+------+
  | program_id | name_program                                                        | department_id | plan |
  +------------+---------------------------------------------------------------------+---------------+------+
  |          1 | Прикладная математика и информатика                                 |             2 |    2 |
  |          2 | Математика и компьютерные науки                                     |             2 |    1 |
  |          3 | Прикладная механика                                                 |             1 |    2 |
  |          4 | Мехатроника и робототехника                                         |             1 |    3 |
  +------------+---------------------------------------------------------------------+---------------+------+
  4 rows in set (0.00 sec)
  mysql> SELECT * FROM program_subject;
  +--------------------+------------+------------+------------+
  | program_subject_id | program_id | subject_id | min_result |
  +--------------------+------------+------------+------------+
  |                  1 |          1 |          1 |         40 |
  |                  2 |          1 |          2 |         50 |
  |                  3 |          1 |          4 |         60 |
  |                  4 |          2 |          1 |         30 |
  |                  5 |          2 |          2 |         50 |
  |                  6 |          2 |          4 |         60 |
  |                  7 |          3 |          1 |         30 |
  |                  8 |          3 |          2 |         45 |
  |                  9 |          3 |          3 |         45 |
  |                 10 |          4 |          1 |         40 |
  |                 11 |          4 |          2 |         45 |
  |                 12 |          4 |          3 |         45 |
  +--------------------+------------+------------+------------+
  12 rows in set (0.00 sec)
  mysql> SELECT name_program
      -> FROM (SELECT name_program, MIN(min_result)
      ->      FROM program
      ->      INNER JOIN program_subject
      ->      USING(program_id)
      ->      GROUP BY name_program
      ->      HAVING MIN(min_result)>=40) table1
      -> ORDER BY name_program;
  +---------------------------------------------------------------------+
  | name_program                                                        |
  +---------------------------------------------------------------------+
  | Мехатроника и робототехника                                         |
  | Прикладная математика и информатика                                 |
  +---------------------------------------------------------------------+
  2 rows in set (0.01 sec)
  Task:
  Вывести образовательные программы, которые имеют самый большой план набора,  вместе с этой величиной.
  Decision:
  mysql> SELECT * FROM program;
  +------------+---------------------------------------------------------------------+---------------+------+
  | program_id | name_program                                                        | department_id | plan |
  +------------+---------------------------------------------------------------------+---------------+------+
  |          1 | Прикладная математика и информатика                                 |             2 |    2 |
  |          2 | Математика и компьютерные науки                                     |             2 |    1 |
  |          3 | Прикладная механика                                                 |             1 |    2 |
  |          4 | Мехатроника и робототехника                                         |             1 |    3 |
  +------------+---------------------------------------------------------------------+---------------+------+
  4 rows in set (0.00 sec)
  mysql> SELECT name_program, plan
      -> FROM program
      -> WHERE plan=(SELECT MAX(plan)
      ->     FROM program) ;
  +------------------------------------------------------+------+
  | name_program                                         | plan |
  +------------------------------------------------------+------+
  | Мехатроника и робототехника                          |    3 |
  +------------------------------------------------------+------+
  1 row in set (0.11 sec)
  Task:
  Посчитать, сколько дополнительных баллов получит каждый абитуриент. Столбец с дополнительными баллами назвать Бонус. Информацию вывести в отсортированном по фамилиям виде.
  Decision:
  mysql> SELECT * FROM achievement;
  +----------------+------------------------------------------+-------+
  | achievement_id | name_achievement                         | bonus |
  +----------------+------------------------------------------+-------+
  |              1 | Золотая медаль                           |     5 |
  |              2 | Серебряная медаль                        |     3 |
  |              3 | Золотой значок ГТО                       |     3 |
  |              4 | Серебряный значок ГТО                    |     1 |
  +----------------+------------------------------------------+-------+
  4 rows in set (0.00 sec)
  mysql> SELECT * FROM enrollee;
  +-------------+-------------------------------+
  | enrollee_id | name_enrollee                 |
  +-------------+-------------------------------+
  |           1 | Баранов Павел                 |
  |           2 | Абрамова Катя                 |
  |           3 | Семенов Иван                  |
  |           4 | Яковлева Галина               |
  |           5 | Попов Илья                    |
  |           6 | Степанова Дарья               |
  +-------------+-------------------------------+
  6 rows in set (0.00 sec)
  mysql> SELECT * FROM enrollee_achievement;
  +--------------------+-------------+----------------+
  | enrollee_achiev_id | enrollee_id | achievement_id |
  +--------------------+-------------+----------------+
  |                  1 |           1 |              2 |
  |                  2 |           1 |              3 |
  |                  3 |           3 |              1 |
  |                  4 |           4 |              4 |
  |                  5 |           5 |              1 |
  |                  6 |           5 |              3 |
  +--------------------+-------------+----------------+
  6 rows in set (0.00 sec)
  mysql> SELECT name_enrollee,
      ->     IFNULL(SUM(bonus),0) AS Бонус
      -> FROM enrollee
      -> LEFT JOIN enrollee_achievement
      -> USING(enrollee_id)
      -> LEFT JOIN achievement
      -> USING(achievement_id)
      -> GROUP BY name_enrollee
      -> ORDER BY name_enrollee;
  +-------------------------------+------------+
  | name_enrollee                 | Бонус      |
  +-------------------------------+------------+
  | Абрамова Катя                 |          0 |
  | Баранов Павел                 |          6 |
  | Попов Илья                    |          8 |
  | Семенов Иван                  |          5 |
  | Степанова Дарья               |          0 |
  | Яковлева Галина               |          1 |
  +-------------------------------+------------+
  6 rows in set (0.00 sec)
  Task:
  Выведите сколько человек подало заявление на каждую образовательную программу и конкурс на нее (число поданных заявлений деленное на количество мест по плану), округленный до 2-х знаков после запятой. В запросе вывести название факультета, к которому относится образовательная программа, название образовательной программы, план набора абитуриентов на образовательную программу (plan), количество поданных заявлений (Количество) и Конкурс. Информацию отсортировать в порядке убывания конкурса.
  Decision:
  mysql> SELECT * FROM department;
  +---------------+----------------------------------------------+
  | department_id | name_department                              |
  +---------------+----------------------------------------------+
  |             1 | Инженерная школа                             |
  |             2 | Школа естественных наук                      |
  +---------------+----------------------------------------------+
  2 rows in set (0.01 sec)
  mysql> SELECT * FROM program;
  +------------+---------------------------------------------------------------------+---------------+------+
  | program_id | name_program                                                        | department_id | plan |
  +------------+---------------------------------------------------------------------+---------------+------+
  |          1 | Прикладная математика и информатика                                 |             2 |    2 |
  |          2 | Математика и компьютерные науки                                     |             2 |    1 |
  |          3 | Прикладная механика                                                 |             1 |    2 |
  |          4 | Мехатроника и робототехника                                         |             1 |    3 |
  +------------+---------------------------------------------------------------------+---------------+------+
  4 rows in set (0.01 sec)
  mysql> SELECT * FROM program_enrollee;
  +---------------------+------------+-------------+
  | program_enrollee_id | program_id | enrollee_id |
  +---------------------+------------+-------------+
  |                   1 |          3 |           1 |
  |                   2 |          4 |           1 |
  |                   3 |          1 |           1 |
  |                   4 |          2 |           2 |
  |                   5 |          1 |           2 |
  |                   6 |          1 |           3 |
  |                   7 |          2 |           3 |
  |                   8 |          4 |           3 |
  |                   9 |          3 |           4 |
  |                  10 |          3 |           5 |
  |                  11 |          4 |           5 |
  |                  12 |          2 |           6 |
  |                  13 |          3 |           6 |
  |                  14 |          4 |           6 |
  +---------------------+------------+-------------+
  14 rows in set (0.00 sec)
  mysql> SELECT name_department,
      ->     name_program,
      ->     plan,
      ->     COUNT(enrollee_id) AS Количество,
      -> ROUND(COUNT(enrollee_id)/plan ,2) AS Конкурс
      -> FROM department
      -> INNER JOIN program
      -> USING(department_id)
      -> INNER JOIN program_enrollee
      -> USING(program_id)
      -> GROUP BY name_department, name_program, plan
      -> ORDER BY Конкурс DESC;
  +----------------------------------------------+---------------------------------------------------------------------+------+----------------------+----------------+
  | name_department                              | name_program                                                        | plan | Количество           | Конкурс        |
  +----------------------------------------------+---------------------------------------------------------------------+------+----------------------+----------------+
  | Школа естественных наук                      | Математика и компьютерные науки                                     |    1 |                    3 |           3.00 |
  | Инженерная школа                             | Прикладная механика                                                 |    2 |                    4 |           2.00 |
  | Школа естественных наук                      | Прикладная математика и информатика                                 |    2 |                    3 |           1.50 |
  | Инженерная школа                             | Мехатроника и робототехника                                         |    3 |                    4 |           1.33 |
  +----------------------------------------------+---------------------------------------------------------------------+------+----------------------+----------------+
  4 rows in set (0.01 sec)
  Task:
  Вывести образовательные программы, на которые для поступления необходимы предмет Информатика» и Математика» в отсортированном по названию программ виде.
  Decision:
  mysql> SELECT * FROM program;
  +------------+---------------------------------------------------------------------+---------------+------+
  | program_id | name_program                                                        | department_id | plan |
  +------------+---------------------------------------------------------------------+---------------+------+
  |          1 | Прикладная математика и информатика                                 |             2 |    2 |
  |          2 | Математика и компьютерные науки                                     |             2 |    1 |
  |          3 | Прикладная механика                                                 |             1 |    2 |
  |          4 | Мехатроника и робототехника                                         |             1 |    3 |
  +------------+---------------------------------------------------------------------+---------------+------+
  4 rows in set (0.00 sec)
  mysql> SELECT * FROM subject;
  +------------+-------------------------+
  | subject_id | name_subject            |
  +------------+-------------------------+
  |          1 | Русский язык            |
  |          2 | Математика              |
  |          3 | Физика                  |
  |          4 | Информатика             |
  +------------+-------------------------+
  4 rows in set (0.00 sec)
  mysql> SELECT * FROM program_subject;
  +--------------------+------------+------------+------------+
  | program_subject_id | program_id | subject_id | min_result |
  +--------------------+------------+------------+------------+
  |                  1 |          1 |          1 |         40 |
  |                  2 |          1 |          2 |         50 |
  |                  3 |          1 |          4 |         60 |
  |                  4 |          2 |          1 |         30 |
  |                  5 |          2 |          2 |         50 |
  |                  6 |          2 |          4 |         60 |
  |                  7 |          3 |          1 |         30 |
  |                  8 |          3 |          2 |         45 |
  |                  9 |          3 |          3 |         45 |
  |                 10 |          4 |          1 |         40 |
  |                 11 |          4 |          2 |         45 |
  |                 12 |          4 |          3 |         45 |
  +--------------------+------------+------------+------------+
  12 rows in set (0.01 sec)
  mysql> SELECT name_program
      -> FROM program
      -> INNER JOIN program_subject
      -> USING(program_id)
      -> INNER JOIN subject
      -> ON program_subject.subject_id=subject.subject_id AND name_subject IN ('Математика', 'Информатика')
      -> GROUP BY name_program
      -> HAVING COUNT(name_subject)=2
      -> ORDEORDER BY name_program;
  +---------------------------------------------------------------------+
  | name_program                                                        |
  +---------------------------------------------------------------------+
  | Математика и компьютерные науки                                     |
  | Прикладная математика и информатика                                 |
  +---------------------------------------------------------------------+
  2 rows in set (0.01 sec)
  Task:
  Посчитать количество баллов каждого абитуриента на каждую образовательную программу, на которую он подал заявление, по результатам ЕГЭ. В результат включить название образовательной программы, фамилию и имя абитуриента, а также столбец с суммой баллов, который назвать itog. Информацию вывести в отсортированном сначала по образовательной программе, а потом по убыванию суммы баллов виде.
  Decision:
  mysql> SELECT program.name_program, enrollee.name_enrollee, SUM(enrollee_subject.result) AS itog
      -> FROM program_subject
      -> INNER JOIN program USING(program_id)
      -> INNER JOIN program_enrollee USING(program_id)
      -> INNER JOIN enrollee USING(enrollee_id)
      -> INNER JOIN enrollee_subject ON enrollee_subject.subject_id = program_subject.subject_id
      ->     AND enrollee_subject.enrollee_id = program_enrollee.enrollee_id
      -> GROUP BY 1, 2
      -> ORDER BY 1, 3 DESC;
  +---------------------------------------------------------------------+-------------------------------+------+
  | name_program                                                        | name_enrollee                 | itog |
  +---------------------------------------------------------------------+-------------------------------+------+
  | Математика и компьютерные науки                                     | Степанова Дарья               |  276 |
  | Математика и компьютерные науки                                     | Семенов Иван                  |  230 |
  | Математика и компьютерные науки                                     | Абрамова Катя                 |  226 |
  | Мехатроника и робототехника                                         | Степанова Дарья               |  270 |
  | Мехатроника и робототехника                                         | Семенов Иван                  |  242 |
  | Мехатроника и робототехника                                         | Попов Илья                    |  192 |
  | Мехатроника и робототехника                                         | Баранов Павел                 |  179 |
  | Прикладная математика и информатика                                 | Семенов Иван                  |  230 |
  | Прикладная математика и информатика                                 | Абрамова Катя                 |  226 |
  | Прикладная математика и информатика                                 | Баранов Павел                 |  213 |
  | Прикладная механика                                                 | Степанова Дарья               |  270 |
  | Прикладная механика                                                 | Яковлева Галина               |  238 |
  | Прикладная механика                                                 | Попов Илья                    |  192 |
  | Прикладная механика                                                 | Баранов Павел                 |  179 |
  +---------------------------------------------------------------------+-------------------------------+------+
  14 rows in set (0.00 sec)
  Task:
  Вывести название образовательной программы и фамилию тех абитуриентов, которые подавали документы на эту образовательную программу, но не могут быть зачислены на нее. Эти абитуриенты имеют результат по одному или нескольким предметам ЕГЭ, необходимым для поступления на эту образовательную программу, меньше минимального балла. Информацию вывести в отсортированном сначала по программам, а потом по фамилиям абитуриентов виде.
  Например, Баранов Павел по Физике» набрал 41 балл, а  для образовательной программы Прикладная механика» минимальный балл по этому предмету определен в 45 баллов. Следовательно, абитуриент на данную программу не может поступить.
  Decision:
  mysql> SELECT * FROM enrollee;
  +-------------+-------------------------------+
  | enrollee_id | name_enrollee                 |
  +-------------+-------------------------------+
  |           1 | Баранов Павел                 |
  |           2 | Абрамова Катя                 |
  |           3 | Семенов Иван                  |
  |           4 | Яковлева Галина               |
  |           5 | Попов Илья                    |
  |           6 | Степанова Дарья               |
  +-------------+-------------------------------+
  6 rows in set (0.00 sec)
  mysql> SELECT * FROM program_enrollee;
  +---------------------+------------+-------------+
  | program_enrollee_id | program_id | enrollee_id |
  +---------------------+------------+-------------+
  |                   1 |          3 |           1 |
  |                   2 |          4 |           1 |
  |                   3 |          1 |           1 |
  |                   4 |          2 |           2 |
  |                   5 |          1 |           2 |
  |                   6 |          1 |           3 |
  |                   7 |          2 |           3 |
  |                   8 |          4 |           3 |
  |                   9 |          3 |           4 |
  |                  10 |          3 |           5 |
  |                  11 |          4 |           5 |
  |                  12 |          2 |           6 |
  |                  13 |          3 |           6 |
  |                  14 |          4 |           6 |
  +---------------------+------------+-------------+
  14 rows in set (0.00 sec)
  mysql> SELECT * FROM program_enrollee;
  +---------------------+------------+-------------+
  | program_enrollee_id | program_id | enrollee_id |
  +---------------------+------------+-------------+
  |                   1 |          3 |           1 |
  |                   2 |          4 |           1 |
  |                   3 |          1 |           1 |
  |                   4 |          2 |           2 |
  |                   5 |          1 |           2 |
  |                   6 |          1 |           3 |
  |                   7 |          2 |           3 |
  |                   8 |          4 |           3 |
  |                   9 |          3 |           4 |
  |                  10 |          3 |           5 |
  |                  11 |          4 |           5 |
  |                  12 |          2 |           6 |
  |                  13 |          3 |           6 |
  |                  14 |          4 |           6 |
  +---------------------+------------+-------------+
  14 rows in set (0.00 sec)
  mysql> SELECT * FROM program_subject;
  +--------------------+------------+------------+------------+
  | program_subject_id | program_id | subject_id | min_result |
  +--------------------+------------+------------+------------+
  |                  1 |          1 |          1 |         40 |
  |                  2 |          1 |          2 |         50 |
  |                  3 |          1 |          4 |         60 |
  |                  4 |          2 |          1 |         30 |
  |                  5 |          2 |          2 |         50 |
  |                  6 |          2 |          4 |         60 |
  |                  7 |          3 |          1 |         30 |
  |                  8 |          3 |          2 |         45 |
  |                  9 |          3 |          3 |         45 |
  |                 10 |          4 |          1 |         40 |
  |                 11 |          4 |          2 |         45 |
  |                 12 |          4 |          3 |         45 |
  +--------------------+------------+------------+------------+
  12 rows in set (0.00 sec)
  mysql> SELECT * FROM subject;
  +------------+-------------------------+
  | subject_id | name_subject            |
  +------------+-------------------------+
  |          1 | Русский язык            |
  |          2 | Математика              |
  |          3 | Физика                  |
  |          4 | Информатика             |
  +------------+-------------------------+
  4 rows in set (0.00 sec)
  mysql> SELECT * FROM enrollee_subject;
  +---------------------+-------------+------------+--------+
  | enrollee_subject_id | enrollee_id | subject_id | result |
  +---------------------+-------------+------------+--------+
  |                   1 |           1 |          1 |     68 |
  |                   2 |           1 |          2 |     70 |
  |                   3 |           1 |          3 |     41 |
  |                   4 |           1 |          4 |     75 |
  |                   5 |           2 |          1 |     75 |
  |                   6 |           2 |          2 |     70 |
  |                   7 |           2 |          4 |     81 |
  |                   8 |           3 |          1 |     85 |
  |                   9 |           3 |          2 |     67 |
  |                  10 |           3 |          3 |     90 |
  |                  11 |           3 |          4 |     78 |
  |                  12 |           4 |          1 |     82 |
  |                  13 |           4 |          2 |     86 |
  |                  14 |           4 |          3 |     70 |
  |                  15 |           5 |          1 |     65 |
  |                  16 |           5 |          2 |     67 |
  |                  17 |           5 |          3 |     60 |
  |                  18 |           6 |          1 |     90 |
  |                  19 |           6 |          2 |     92 |
  |                  20 |           6 |          3 |     88 |
  |                  21 |           6 |          4 |     94 |
  +---------------------+-------------+------------+--------+
  21 rows in set (0.00 sec)
  mysql> SELECT name_program, name_enrollee
      -> FROM enrollee
      -> INNER JOIN program_enrollee USING(enrollee_id)
      -> INNER JOIN program USING(program_id)
      -> INNER JOIN program_subject USING(program_id)
      -> INNER JOIN subject USING(subject_id)
      -> INNER JOIN enrollee_subject USING(subject_id)
      -> WHERE enrollee_subject.enrollee_id = enrollee.enrollee_id AND result < min_result
      -> ORDER BY name_program;
  +------------------------------------------------------+---------------------------+
  | name_program                                         | name_enrollee             |
  +------------------------------------------------------+---------------------------+
  | Мехатроника и робототехника                          | Баранов Павел             |
  | Прикладная механика                                  | Баранов Павел             |
  +------------------------------------------------------+---------------------------+
  2 rows in set (0.00 sec)
  Task:
  Создать вспомогательную таблицу applicant,  куда включить id образовательной программы, id абитуриента, сумму баллов абитуриентов (столбец itog) в отсортированном сначала по id образовательной программы, а потом по убыванию суммы баллов виде (использовать запрос из предыдущего урока).
  Decision:
  MariaDB [Students]> SELECT * FROM enrollee;
      +-------------+-------------------------------+
      | enrollee_id | name_enrollee                 |
      +-------------+-------------------------------+
      |           1 | Баранов Павел                 |
      |           2 | Абрамова Катя                 |
      |           3 | Семенов Иван                  |
      |           4 | Яковлева Галина               |
      |           5 | Попов Илья                    |
      |           6 | Степанова Дарья               |
      +-------------+-------------------------------+
      6 rows in set (0.001 sec)
  MariaDB [Students]> SELECT * FROM program_enrollee;
      +---------------------+------------+-------------+
      | program_enrollee_id | program_id | enrollee_id |
      +---------------------+------------+-------------+
      |                   1 |          3 |           1 |
      |                   2 |          4 |           1 |
      |                   3 |          1 |           1 |
      |                   4 |          2 |           2 |
      |                   5 |          1 |           2 |
      |                   6 |          1 |           3 |
      |                   7 |          2 |           3 |
      |                   8 |          4 |           3 |
      |                   9 |          3 |           4 |
      |                  10 |          3 |           5 |
      |                  11 |          4 |           5 |
      |                  12 |          2 |           6 |
      |                  13 |          3 |           6 |
      |                  14 |          4 |           6 |
      +---------------------+------------+-------------+
      14 rows in set (0.001 sec)
  MariaDB [Students]> SELECT * FROM program;
      +------------+---------------------------------------------------------------------+---------------+------+
      | program_id | name_program                                                        | department_id | plan |
      +------------+---------------------------------------------------------------------+---------------+------+
      |          1 | Прикладная математика и информатика                                 |             2 |    2 |
      |          2 | Математика и компьютерные науки                                     |             2 |    1 |
      |          3 | Прикладная механика                                                 |             1 |    2 |
      |          4 | Мехатроника и робототехника                                         |             1 |    3 |
      +------------+---------------------------------------------------------------------+---------------+------+
      4 rows in set (0.001 sec)
  MariaDB [Students]> SELECT * FROM program_subject;
      +--------------------+------------+------------+------------+
      | program_subject_id | program_id | subject_id | min_result |
      +--------------------+------------+------------+------------+
      |                  1 |          1 |          1 |         40 |
      |                  2 |          1 |          2 |         50 |
      |                  3 |          1 |          4 |         60 |
      |                  4 |          2 |          1 |         30 |
      |                  5 |          2 |          2 |         50 |
      |                  6 |          2 |          4 |         60 |
      |                  7 |          3 |          1 |         30 |
      |                  8 |          3 |          2 |         45 |
      |                  9 |          3 |          3 |         45 |
      |                 10 |          4 |          1 |         40 |
      |                 11 |          4 |          2 |         45 |
      |                 12 |          4 |          3 |         45 |
      +--------------------+------------+------------+------------+
      12 rows in set (0.002 sec)
  MariaDB [Students]> SELECT * FROM subject;
      +------------+-------------------------+
      | subject_id | name_subject            |
      +------------+-------------------------+
      |          1 | Русский язык            |
      |          2 | Математика              |
      |          3 | Физика                  |
      |          4 | Информатика             |
      +------------+-------------------------+
      4 rows in set (0.001 sec)
  MariaDB [Students]> SELECT * FROM enrollee_subject;
      +---------------------+-------------+------------+--------+
      | enrollee_subject_id | enrollee_id | subject_id | result |
      +---------------------+-------------+------------+--------+
      |                   1 |           1 |          1 |     68 |
      |                   2 |           1 |          2 |     70 |
      |                   3 |           1 |          3 |     41 |
      |                   4 |           1 |          4 |     75 |
      |                   5 |           2 |          1 |     75 |
      |                   6 |           2 |          2 |     70 |
      |                   7 |           2 |          4 |     81 |
      |                   8 |           3 |          1 |     85 |
      |                   9 |           3 |          2 |     67 |
      |                  10 |           3 |          3 |     90 |
      |                  11 |           3 |          4 |     78 |
      |                  12 |           4 |          1 |     82 |
      |                  13 |           4 |          2 |     86 |
      |                  14 |           4 |          3 |     70 |
      |                  15 |           5 |          1 |     65 |
      |                  16 |           5 |          2 |     67 |
      |                  17 |           5 |          3 |     60 |
      |                  18 |           6 |          1 |     90 |
      |                  19 |           6 |          2 |     92 |
      |                  20 |           6 |          3 |     88 |
      |                  21 |           6 |          4 |     94 |
      +---------------------+-------------+------------+--------+
      21 rows in set (0.001 sec)
  MariaDB [Students]> CREATE TABLE applicant
      -> SELECT program_id, enrollee.enrollee_id, SUM(result) AS itog
      -> FROM enrollee
      -> JOIN program_enrollee USING(enrollee_id)
      -> JOIN program USING(program_id)
      -> JOIN program_subject USING(program_id)
      -> JOIN subject USING(subject_id)
      -> JOIN enrollee_subject USING(subject_id)
      -> WHERE enrollee_subject.enrollee_id = enrollee.enrollee_id
      -> GROUP BY program_id, enrollee_id
      -> ORDER BY program_id, itog DESC;
  Query OK, 14 rows affected (0.028 sec)
  Records: 14  Duplicates: 0  Warnings: 0
  MariaDB [Students]> SELECT * FROM applicant;
      +------------+-------------+------+
      | program_id | enrollee_id | itog |
      +------------+-------------+------+
      |          1 |           3 |  230 |
      |          1 |           2 |  226 |
      |          1 |           1 |  213 |
      |          2 |           6 |  276 |
      |          2 |           3 |  230 |
      |          2 |           2 |  226 |
      |          3 |           6 |  270 |
      |          3 |           4 |  238 |
      |          3 |           5 |  192 |
      |          3 |           1 |  179 |
      |          4 |           6 |  270 |
      |          4 |           3 |  242 |
      |          4 |           5 |  192 |
      |          4 |           1 |  179 |
      +------------+-------------+------+
      14 rows in set (0.001 sec)
  Task:
  Из таблицы applicant, созданной на предыдущем шаге, удалить записи, если абитуриент на выбранную образовательную программу не набрал минимального балла хотя бы по одному предмету (использовать запрос из предыдущего урока).
  Decision:
  MariaDB [Students]> DELETE FROM applicant
      -> USING applicant
      -> JOIN (SELECT program_enrollee.program_id, program_enrollee.enrollee_id
      ->     FROM program
      ->     JOIN program_subject  USING(program_id)
      ->     JOIN program_enrollee USING(program_id)
      ->     JOIN enrollee_subject
      ->     ON enrollee_subject.enrollee_id = program_enrollee.enrollee_id
      ->         AND enrollee_subject.subject_id = program_subject.subject_id
      ->     WHERE result < min_result) AS table1
      -> ON applicant.program_id = table1.program_id
      ->     AND applicant.enrollee_id = table1.enrollee_id;
  Query OK, 2 rows affected (0.005 sec)
  MariaDB [Students]> SELECT * FROM applicant;
      +------------+-------------+------+
      | program_id | enrollee_id | itog |
      +------------+-------------+------+
      |          1 |           3 |  230 |
      |          1 |           2 |  226 |
      |          1 |           1 |  213 |
      |          2 |           6 |  276 |
      |          2 |           3 |  230 |
      |          2 |           2 |  226 |
      |          3 |           6 |  270 |
      |          3 |           4 |  238 |
      |          3 |           5 |  192 |
      |          4 |           6 |  270 |
      |          4 |           3 |  242 |
      |          4 |           5 |  192 |
      +------------+-------------+------+
      12 rows in set (0.001 sec)
  Task:
  Повысить итоговые баллы абитуриентов в таблице applicant на значения дополнительных баллов (использовать запрос из предыдущего урока).
  Decision:
  MariaDB [Students]> SELECT * FROM applicant;
      +------------+-------------+------+
      | program_id | enrollee_id | itog |
      +------------+-------------+------+
      |          1 |           3 |  230 |
      |          1 |           2 |  226 |
      |          1 |           1 |  213 |
      |          2 |           6 |  276 |
      |          2 |           3 |  230 |
      |          2 |           2 |  226 |
      |          3 |           6 |  270 |
      |          3 |           4 |  238 |
      |          3 |           5 |  192 |
      |          4 |           6 |  270 |
      |          4 |           3 |  242 |
      |          4 |           5 |  192 |
      +------------+-------------+------+
      12 rows in set (0.001 sec)
  MariaDB [Students]> SELECT * FROM achievement;
      +----------------+------------------------------------------+-------+
      | achievement_id | name_achievement                         | bonus |
      +----------------+------------------------------------------+-------+
      |              1 | Золотая медаль                           |     5 |
      |              2 | Серебряная медаль                        |     3 |
      |              3 | Золотой значок ГТО                       |     3 |
      |              4 | Серебряный значок ГТО                    |     1 |
      +----------------+------------------------------------------+-------+
      4 rows in set (0.001 sec)
  MariaDB [Students]> SELECT * FROM enrollee;
      +-------------+-------------------------------+
      | enrollee_id | name_enrollee                 |
      +-------------+-------------------------------+
      |           1 | Баранов Павел                 |
      |           2 | Абрамова Катя                 |
      |           3 | Семенов Иван                  |
      |           4 | Яковлева Галина               |
      |           5 | Попов Илья                    |
      |           6 | Степанова Дарья               |
      +-------------+-------------------------------+
      6 rows in set (0.001 sec)
  MariaDB [Students]> SELECT * FROM enrollee_achievement;
      +--------------------+-------------+----------------+
      | enrollee_achiev_id | enrollee_id | achievement_id |
      +--------------------+-------------+----------------+
      |                  1 |           1 |              2 |
      |                  2 |           1 |              3 |
      |                  3 |           3 |              1 |
      |                  4 |           4 |              4 |
      |                  5 |           5 |              1 |
      |                  6 |           5 |              3 |
      +--------------------+-------------+----------------+
      6 rows in set (0.001 sec)
  MariaDB [Students]> UPDATE applicant
      -> JOIN (SELECT enrollee_id, IFNULL(SUM(bonus),0) AS Бонус
      ->     FROM enrollee_achievement
      ->     LEFT JOIN achievement
      ->     USING(achievement_id)
      ->     GROUP BY enrollee_id) AS table1
      -> USING(enrollee_id)
      -> SET itog = itog + Бонус;
  Query OK, 7 rows affected (0.004 sec)
  Rows matched: 7  Changed: 7  Warnings: 0
  MariaDB [Students]> SELECT * FROM applicant;
      +------------+-------------+------+
      | program_id | enrollee_id | itog |
      +------------+-------------+------+
      |          1 |           3 |  235 |
      |          1 |           2 |  226 |
      |          1 |           1 |  219 |
      |          2 |           6 |  276 |
      |          2 |           3 |  235 |
      |          2 |           2 |  226 |
      |          3 |           6 |  270 |
      |          3 |           4 |  239 |
      |          3 |           5 |  200 |
      |          4 |           6 |  270 |
      |          4 |           3 |  247 |
      |          4 |           5 |  200 |
      +------------+-------------+------+
      12 rows in set (0.001 sec)
  Task:
  Поскольку при добавлении дополнительных баллов, абитуриенты по каждой образовательной программе могут следовать не в порядке убывания суммарных баллов, необходимо создать новую таблицу applicant_order на основе таблицы applicant. При создании таблицы данные нужно отсортировать сначала по id образовательной программы, потом по убыванию итогового балла. А таблицу applicant, которая была создана как вспомогательная, необходимо удалить.
  Decision:
  MariaDB [Students]> SELECT * FROM applicant;
      +------------+-------------+------+
      | program_id | enrollee_id | itog |
      +------------+-------------+------+
      |          1 |           3 |  235 |
      |          1 |           2 |  226 |
      |          1 |           1 |  219 |
      |          2 |           6 |  276 |
      |          2 |           3 |  235 |
      |          2 |           2 |  226 |
      |          3 |           6 |  270 |
      |          3 |           4 |  239 |
      |          3 |           5 |  200 |
      |          4 |           6 |  270 |
      |          4 |           3 |  247 |
      |          4 |           5 |  200 |
      +------------+-------------+------+
      12 rows in set (0.001 sec)
  MariaDB [Students]> CREATE TABLE applicant_order
      -> SELECT * FROM applicant
      -> ORDER BY program_id, itog DESC;
  Query OK, 12 rows affected (0.010 sec)
  Records: 12  Duplicates: 0  Warnings: 0
  MariaDB [Students]> DROP TABLE applicant;
  Query OK, 0 rows affected (0.005 sec)
  MariaDB [Students]> SELECT * FROM applicant_order;
      +------------+-------------+------+
      | program_id | enrollee_id | itog |
      +------------+-------------+------+
      |          1 |           3 |  235 |
      |          1 |           2 |  226 |
      |          1 |           1 |  219 |
      |          2 |           6 |  276 |
      |          2 |           3 |  235 |
      |          2 |           2 |  226 |
      |          3 |           6 |  270 |
      |          3 |           4 |  239 |
      |          3 |           5 |  200 |
      |          4 |           6 |  270 |
      |          4 |           3 |  247 |
      |          4 |           5 |  200 |
      +------------+-------------+------+
      12 rows in set (0.001 sec)
  Task:
  Включить в таблицу applicant_order новый столбец str_id целого типа , расположить его перед первым.
  Decision:
  MariaDB [Students]> SELECT * FROM applicant_order;
      +------------+-------------+------+
      | program_id | enrollee_id | itog |
      +------------+-------------+------+
      |          1 |           3 |  235 |
      |          1 |           2 |  226 |
      |          1 |           1 |  219 |
      |          2 |           6 |  276 |
      |          2 |           3 |  235 |
      |          2 |           2 |  226 |
      |          3 |           6 |  270 |
      |          3 |           4 |  239 |
      |          3 |           5 |  200 |
      |          4 |           6 |  270 |
      |          4 |           3 |  247 |
      |          4 |           5 |  200 |
      +------------+-------------+------+
      12 rows in set (0.001 sec)
  MariaDB [Students]> ALTER TABLE applicant_order
      -> ADD str_id int FIRST;
  Query OK, 0 rows affected (0.004 sec)
  Records: 0  Duplicates: 0  Warnings: 0
  MariaDB [Students]> SELECT * FROM applicant_order;
      +--------+------------+-------------+------+
      | str_id | program_id | enrollee_id | itog |
      +--------+------------+-------------+------+
      |   NULL |          1 |           3 |  235 |
      |   NULL |          1 |           2 |  226 |
      |   NULL |          1 |           1 |  219 |
      |   NULL |          2 |           6 |  276 |
      |   NULL |          2 |           3 |  235 |
      |   NULL |          2 |           2 |  226 |
      |   NULL |          3 |           6 |  270 |
      |   NULL |          3 |           4 |  239 |
      |   NULL |          3 |           5 |  200 |
      |   NULL |          4 |           6 |  270 |
      |   NULL |          4 |           3 |  247 |
      |   NULL |          4 |           5 |  200 |
      +--------+------------+-------------+------+
      12 rows in set (0.001 sec)
  Task:
  Занести в столбец str_id таблицы applicant_order нумерацию абитуриентов, которая начинается с 1 для каждой образовательной программы.
  Decision:
  MariaDB [Students]> SELECT * FROM applicant_order;
      +--------+------------+-------------+------+
      | str_id | program_id | enrollee_id | itog |
      +--------+------------+-------------+------+
      |   NULL |          1 |           3 |  235 |
      |   NULL |          1 |           2 |  226 |
      |   NULL |          1 |           1 |  219 |
      |   NULL |          2 |           6 |  276 |
      |   NULL |          2 |           3 |  235 |
      |   NULL |          2 |           2 |  226 |
      |   NULL |          3 |           6 |  270 |
      |   NULL |          3 |           4 |  239 |
      |   NULL |          3 |           5 |  200 |
      |   NULL |          4 |           6 |  270 |
      |   NULL |          4 |           3 |  247 |
      |   NULL |          4 |           5 |  200 |
      +--------+------------+-------------+------+
      12 rows in set (0.001 sec)
  MariaDB [Students]> SET @row_num := 1;
      Query OK, 0 rows affected (0.001 sec)
  MariaDB [Students]> SET @num_pr := 0;
      Query OK, 0 rows affected (0.000 sec)
  MariaDB [Students]> UPDATE applicant_order
      ->     SET str_id = IF(program_id = @num_pr, @row_num := @row_num + 1, @row_num := 1 AND @num_pr := @num_pr + 1);
  Query OK, 12 rows affected (0.003 sec)
  Rows matched: 12  Changed: 12  Warnings: 0
  MariaDB [Students]> SELECT * FROM applicant_order;
      +--------+------------+-------------+------+
      | str_id | program_id | enrollee_id | itog |
      +--------+------------+-------------+------+
      |      1 |          1 |           3 |  235 |
      |      2 |          1 |           2 |  226 |
      |      3 |          1 |           1 |  219 |
      |      1 |          2 |           6 |  276 |
      |      2 |          2 |           3 |  235 |
      |      3 |          2 |           2 |  226 |
      |      1 |          3 |           6 |  270 |
      |      2 |          3 |           4 |  239 |
      |      3 |          3 |           5 |  200 |
      |      1 |          4 |           6 |  270 |
      |      2 |          4 |           3 |  247 |
      |      3 |          4 |           5 |  200 |
      +--------+------------+-------------+------+
      12 rows in set (0.001 sec)
  Task:
  Создать таблицу student,  в которую включить абитуриентов, которые могут быть рекомендованы к зачислению  в соответствии с планом набора. Информацию отсортировать сначала в алфавитном порядке по названию программ, а потом по убыванию итогового балла.
  Decision:
  MariaDB [Students]> SELECT * FROM applicant_order;
      +--------+------------+-------------+------+
      | str_id | program_id | enrollee_id | itog |
      +--------+------------+-------------+------+
      |      1 |          1 |           3 |  235 |
      |      2 |          1 |           2 |  226 |
      |      3 |          1 |           1 |  219 |
      |      1 |          2 |           6 |  276 |
      |      2 |          2 |           3 |  235 |
      |      3 |          2 |           2 |  226 |
      |      1 |          3 |           6 |  270 |
      |      2 |          3 |           4 |  239 |
      |      3 |          3 |           5 |  200 |
      |      1 |          4 |           6 |  270 |
      |      2 |          4 |           3 |  247 |
      |      3 |          4 |           5 |  200 |
      +--------+------------+-------------+------+
      12 rows in set (0.001 sec)
  MariaDB [Students]> SELECT * FROM enrollee;
      +-------------+-------------------------------+
      | enrollee_id | name_enrollee                 |
      +-------------+-------------------------------+
      |           1 | Баранов Павел                 |
      |           2 | Абрамова Катя                 |
      |           3 | Семенов Иван                  |
      |           4 | Яковлева Галина               |
      |           5 | Попов Илья                    |
      |           6 | Степанова Дарья               |
      +-------------+-------------------------------+
      6 rows in set (0.001 sec)
  MariaDB [Students]> SELECT * FROM program;
      +------------+---------------------------------------------------------------------+---------------+------+
      | program_id | name_program                                                        | department_id | plan |
      +------------+---------------------------------------------------------------------+---------------+------+
      |          1 | Прикладная математика и информатика                                 |             2 |    2 |
      |          2 | Математика и компьютерные науки                                     |             2 |    1 |
      |          3 | Прикладная механика                                                 |             1 |    2 |
      |          4 | Мехатроника и робототехника                                         |             1 |    3 |
      +------------+---------------------------------------------------------------------+---------------+------+
      4 rows in set (0.001 sec)
  MariaDB [Students]> CREATE TABLE student AS
      -> SELECT name_program, name_enrollee, itog
      -> FROM enrollee
      -> INNER JOIN applicant_order
      -> USING(enrollee_id)
      -> INNER JOIN program
      -> USING(program_id)
      -> WHERE str_id<=plan
      -> ORDER BY name_program, itog DESC;
  Query OK, 8 rows affected (0.012 sec)
  Records: 8  Duplicates: 0  Warnings: 0
  MariaDB [Students]> SELECT * FROM student;
      +---------------------------------------------------------------------+-------------------------------+------+
      | name_program                                                        | name_enrollee                 | itog |
      +---------------------------------------------------------------------+-------------------------------+------+
      | Математика и компьютерные науки                                     | Степанова Дарья               |  276 |
      | Мехатроника и робототехника                                         | Степанова Дарья               |  270 |
      | Мехатроника и робототехника                                         | Семенов Иван                  |  247 |
      | Мехатроника и робототехника                                         | Попов Илья                    |  200 |
      | Прикладная математика и информатика                                 | Семенов Иван                  |  235 |
      | Прикладная математика и информатика                                 | Абрамова Катя                 |  226 |
      | Прикладная механика                                                 | Степанова Дарья               |  270 |
      | Прикладная механика                                                 | Яковлева Галина               |  239 |
      +---------------------------------------------------------------------+-------------------------------+------+
      8 rows in set (0.001 sec)
  Task:
  Разработать базу "Аналитика образовательных курсов"
  Курс на платформе Steptuser состоит из нескольких модулей, каждый модуль включает в себя несколько уроков, для каждого урока сохраняется информация о его положении в модуле. Каждый урок состоит из последовательности шагов. Каждый шаг имеет свой собственный тип (это может быть текст, SQL-задание и т.д.), а также порядковый номер в уроке.
  Пользователи регистрируются на курс, указывают свое имя. Когда пользователь проходит курс на платформе Steptuser, все его действия оставляют "цифровой след": какие задачи и когда он выполнил, сколько попыток он предпринял, правильно ли он решил задачу. Все его комментарии также сохраняются. Если пользователь проходит курс и получает сертификат, дата его выдачи сохраняется. Вся эта информация является первичной для образовательной аналитики.
  Образовательная аналитика - это измерение, сбор, анализ и представление данных об учащемся и его действиях на онлайн-платформе с целью понимания и оптимизации образовательного процесса и среды, в которой этот процесс происходит.
  Для этого урока была создана база данных с полным описанием структуры курса. Образовательная аналитика включена в базу данных не полностью, а только для определенной группы пользователей из-за большого объема данных. Например, информация о решениях 17 000 пользователей нашего курса за шесть месяцев его существования содержит 534 500 записей.
  Мы выбрали пользователей для базы данных уроков следующим образом:
          мы отклонили всех тех, кто не выполнил ни одного задания (их было 8800).;
          мы сгруппировали оставшихся пользователей в зависимости от количества решенных задач, вот что произошло (мы считаем, что те, кто не отправлял задания более месяца, покинули курс):
      Всего    Закончили обучение или покинули курс    Активные пользователи
      Выполнили все задания    116    75    41
      Получили сертификат    617    470    147
      Третий модуль    225    220    5
      Второй модуль    940    762    178
      Первый модуль, 5-7 урок    1077    891    186
      Первый модуль, 4 урок    701    589    112
      Первый модуль, 3 урок    823    670    153
      Первый модуль, 2 урок    1268    1044    224
      Первый модуль, 1 урок    2430    2020    410
      затем были отобраны типичные представители групп более или менее пропорционально численности каждой группы (имена пользователей, разумеется, были заменены).;
  Получилось 64 пользователя и более 2000 их попыток.
  Группировка и выборка каждой группы обычно зависят от целей исследования, например, если вам нужно понять, когда и по какой причине пользователи покидают курс, то для начальных шагов необходимо более "мелкое" разделение.
  Структура и частичное наполнение таблиц
  Таблица module:
      module_id    module_name
      INT PRIMARY KEY
      AUTO_INCREMENT    VARCHAR(64)
      1    Основы реляционной модели и SQL
      2    Запросы SQL к связанным таблицам
  Таблица lesson (в последнем столбце указан порядковый номер урока внутри модуля):
      lesson_id    lesson_name    module_id    lesson_position
      INT PRIMARY KEY
      AUTO_INCREMENT    VARCHAR(50)    INT    INT
      1    Отношение(таблица)    1    1
      2    Выборка данных    1    2
      3    Таблица "Командировки", запросы на выборку    1    6
      4    Вложенные запросы    1    4
  Таблица step:
      step_id    step_name    step_type    lesson_id    step_position
      INT PRIMARY KEY
      AUTO_INCREMENT    VARCHAR(256)    VARCHAR(16)    INT    INT
      1    Структура уроков курса    text    1    1
      2    Содержание урока    text    1    2
      3    Реляционная модель, основные положения    table    1    3
      4    Отношение, реляционная модель    choice    1    4
  Таблица keyword:
      keyword_id    keyword_name
      INT PRIMARY KEY
      AUTO_INCREMENT    VARCHAR(16)
      1    SELECT
      2    FROM
  Таблица step_keyword:
      step_id    keyword_id
      INT PRIMARY KEY    INT PRIMARY KEY
      38    1
      81    3
  Пояснение
  В этой таблице ключ состоит из двух столбцов. Это сделано для того, чтобы в таблицу нельзя было включить одинаковые записи. Для создания таблицы с двумя ключами используется код:
      CREATE TABLE step_keyword (
          step_id INT,
          keyword_id INT,
          PRIMARY KEY (step_id, keyword_id),
          FOREIGN KEY (step_id)  REFERENCES step (step_id) ON DELETE CASCADE,
          FOREIGN KEY (keyword_id)  REFERENCES keyword (keyword_id) ON DELETE CASCADE
      );
  Таблица student:
      student_id    student_name
      INT PRIMARY KEY
      AUTO_INCREMENT    VARCHAR(64)
      1    student_1
      2    student_2
  Таблица step_student  (в этой таблице хранятся все попытки пользователей по каждому шагу, указывается время начала попытки и время отправки задания на проверку, а также верный или неверный получился результат):
      step_student_id    step_id    student_id    attempt_time    submission_time    result
      INT PRIMARY KEY
      AUTO_INCREMENT    INT    INT    INT    INT    VARCHAR(16)
      1    10    52    1598291444    1598291490    correct
      2    10    11    1593291995    1593292031    correct
      3    10    19    1591017571    1591017743    wrong
      4    10    4    1590254781    1590254800    correct
  Пояснение
  Время в этой таблице представлено в формате  Unix-время , в котором хранится количество секунд, прошедших с 1 января 1970 года.
  Для перевода к привычному типу DATE используется формула:
      1970-01-01 + time_unix / 86400
  В SQL для перевода удобно использовать функцию  
      FROM_UNIXTIME(time_unix)
  Decision:
  MariaDB [(none)]> CREATE DATABASE Analitics;
      Query OK, 1 row affected (0.002 sec)
  MariaDB [(none)]> SHOW DATABASES;
      +--------------------+
      | Database           |
      +--------------------+
      | Analitics          |
      | RPA                |
      | Students           |
      | information_schema |
      | mysql              |
      | performance_schema |
      +--------------------+
      6 rows in set (0.005 sec)
  MariaDB [(none)]> USE Analitics;
  Database changed
  MariaDB [Analitics]> CREATE TABLE module(
      -> module_id INT PRIMARY KEY AUTO_INCREMENT,
      -> module_name VARCHAR(64));
  Query OK, 0 rows affected (0.010 sec)
  MariaDB [Analitics]> INSERT INTO module (module_name)
      -> VALUES ('Основы реляционной модели и SQL'),
      -> ('Запросы SQL к связанным таблицам');
  ERROR 1366 (22007): Incorrect string value: '\xD0\x9E\xD1\x81\xD0\xBD...' for column `Analitics`.`module`.`module_name` at row 1
  MariaDB [Analitics]> SHOW VARIABLES WHERE variable_name LtuserE '%char%' OR variable_name LtuserE '%coll%';
      +--------------------------+------------------------------+
      | Variable_name            | Value                        |
      +--------------------------+------------------------------+
      | character_set_client     | utf8                         |
      | character_set_connection | utf8                         |
      | character_set_database   | latin1                       |
      | character_set_filesystem | binary                       |
      | character_set_results    | utf8                         |
      | character_set_server     | latin1                       |
      | character_set_system     | utf8                         |
      | character_sets_dir       | /usr/share/mariadb/charsets/ |
      | collation_connection     | utf8_general_ci              |
      | collation_database       | latin1_swedish_ci            |
      | collation_server         | latin1_swedish_ci            |
      +--------------------------+------------------------------+
      11 rows in set (0.006 sec)
  MariaDB [Analitics]> CREATE DROP module;
      ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near 'DROP module' at line 1
  MariaDB [Analitics]> DROP TABLE module;
      Query OK, 0 rows affected (0.005 sec)
  MariaDB [Analitics]> CREATE TABLE module( module_id INT PRIMARY KEY AUTO_INCREMENT, module_name VARCHAR(64)) ENGINE=MyISAM CHARACTER SET=utf8mb4;
      Query OK, 0 rows affected (0.003 sec)
  MariaDB [Analitics]> INSERT INTO module (module_name) VALUES ('Основы реляционной модели и SQL'), ('Запросы SQL к связанным таблицам');
      Query OK, 2 rows affected (0.001 sec)
      Records: 2  Duplicates: 0  Warnings: 0
  MariaDB [Analitics]> SHOW TABLES;
      +---------------------+
      | Tables_in_Analitics |
      +---------------------+
      | module              |
      +---------------------+
      1 row in set (0.001 sec)
  MariaDB [Analitics]> SELECT * FROM module;
      +-----------+-----------------------------------------------------------+
      | module_id | module_name                                               |
      +-----------+-----------------------------------------------------------+
      |         1 | Основы реляционной модели и SQL                           |
      |         2 | Запросы SQL к связанным таблицам                          |
      +-----------+-----------------------------------------------------------+
      2 rows in set (0.001 sec)
  MariaDB [Analitics]> CREATE TABLE lesson(
      -> lesson_id       INT PRIMARY KEY AUTO_INCREMENT,
      -> lesson_name     VARCHAR(50),
      -> module_id       INT,
      -> lesson_position INT,
      -> FOREIGN KEY (module_id) REFERENCES module (module_id) ON DELETE CASCADE)
      -> ENGINE=MyISAM CHARACTER SET=utf8mb4;
  Query OK, 0 rows affected (0.003 sec)
  MariaDB [Analitics]> INSERT INTO lesson(lesson_name, module_id, lesson_position)
      -> VALUES ('Отношение(таблица)', 1, 1),
      -> ('Выборка данных', 1, 2),
      -> ('Таблица "Командировки", запросы на выборку', 1, 6),
      -> ('Вложенные запросы', 1, 4);
  Query OK, 4 rows affected (0.002 sec)
  Records: 4  Duplicates: 0  Warnings: 0
  MariaDB [Analitics]> SELECT * FROM lesson;
      +-----------+-------------------------------------------------------------------------------+-----------+-----------------+
      | lesson_id | lesson_name                                                                   | module_id | lesson_position |
      +-----------+-------------------------------------------------------------------------------+-----------+-----------------+
      |         1 | Отношение(таблица)                                                            |         1 |               1 |
      |         2 | Выборка данных                                                                |         1 |               2 |
      |         3 | Таблица "Командировки", запросы на выборку                                    |         1 |               6 |
      |         4 | Вложенные запросы                                                             |         1 |               4 |
      +-----------+-------------------------------------------------------------------------------+-----------+-----------------+
      4 rows in set (0.001 sec)
  MariaDB [Analitics]> CREATE TABLE step(
      -> step_id       INT PRIMARY KEY AUTO_INCREMENT,
      -> step_name     VARCHAR(256),
      -> step_type     VARCHAR(16),
      -> lesson_id     INT,
      -> step_position INT,
      -> FOREIGN KEY (lesson_id) REFERENCES lesson (lesson_id) ON DELETE CASCADE)
      -> ENGINE=MyISAM CHARACTER SET=utf8mb4;
  Query OK, 0 rows affected (0.004 sec)
  MariaDB [Analitics]> INSERT INTO step(step_name, step_type, lesson_id, step_position)
      -> VALUES ('Структура уроков курса', 'text', 1, 1),
      -> ('Содержание урока', 'text', 1, 2),
      -> ('Реляционная модель, основные положения', 'table', 1, 3),
      -> ('Отношение, реляционная модель', 'choice', 1, 4);
  Query OK, 4 rows affected (0.001 sec)
  Records: 4  Duplicates: 0  Warnings: 0
  MariaDB [Analitics]> SELECT * FROM step;
      +---------+--------------------------------------------------------------------------+-----------+-----------+---------------+
      | step_id | step_name                                                                | step_type | lesson_id | step_position |
      +---------+--------------------------------------------------------------------------+-----------+-----------+---------------+
      |       1 | Структура уроков курса                                                   | text      |         1 |             1 |
      |       2 | Содержание урока                                                         | text      |         1 |             2 |
      |       3 | Реляционная модель, основные положения                                   | table     |         1 |             3 |
      |       4 | Отношение, реляционная модель                                            | choice    |         1 |             4 |
      +---------+--------------------------------------------------------------------------+-----------+-----------+---------------+
      4 rows in set (0.001 sec)
  MariaDB [Analitics]> CREATE TABLE keyword(
      -> keyword_id   INT PRIMARY KEY AUTO_INCREMENT,
      -> keyword_name VARCHAR(16))
      -> ENGINE=MyISAM CHARACTER SET=utf8mb4;
  Query OK, 0 rows affected (0.003 sec)
  MariaDB [Analitics]> INSERT INTO keyword(keyword_name)
      -> VALUES ('SELECT'),
      -> ('FROM');
  Query OK, 2 rows affected (0.001 sec)
  Records: 2  Duplicates: 0  Warnings: 0
  MariaDB [Analitics]> SELECT * FROM keyword;
      +------------+--------------+
      | keyword_id | keyword_name |
      +------------+--------------+
      |          1 | SELECT       |
      |          2 | FROM         |
      +------------+--------------+
      2 rows in set (0.001 sec)
  MariaDB [Analitics]> CREATE TABLE step_keyword(
      -> step_id    INT,
      -> keyword_id INT,
      -> PRIMARY KEY (step_id, keyword_id),
      -> FOREIGN KEY (step_id) REFERENCES step (step_id) ON DELETE CASCADE,
      -> FOREIGN KEY (keyword_id) REFERENCES keyword (keyword_id) ON DELETE CASCADE)
      -> ENGINE=MyISAM CHARACTER SET=utf8mb4;
  Query OK, 0 rows affected (0.003 sec)
  MariaDB [Analitics]> SET FOREIGN_KEY_CHECKS = 0;
      Query OK, 0 rows affected (0.000 sec)
  MariaDB [Analitics]> INSERT INTO step_keyword (step_id, keyword_id) VALUE (38, 1);
      Query OK, 1 row affected (0.001 sec)
  MariaDB [Analitics]> INSERT INTO step_keyword (step_id, keyword_id) VALUE (81, 3);
      Query OK, 1 row affected (0.000 sec)
  MariaDB [Analitics]> SELECT * FROM step_keyword;
      +---------+------------+
      | step_id | keyword_id |
      +---------+------------+
      |      38 |          1 |
      |      81 |          3 |
      +---------+------------+
      2 rows in set (0.001 sec)
  MariaDB [Analitics]> CREATE TABLE student(
      -> student_id   INT PRIMARY KEY AUTO_INCREMENT,
      -> student_name VARCHAR(64))
      -> ENGINE=MyISAM CHARACTER SET=utf8mb4;
  Query OK, 0 rows affected (0.003 sec)
  MariaDB [Analitics]> INSERT INTO student(student_name)
      -> VALUES ('student_1'),
      -> ('student_2');
  Query OK, 2 rows affected (0.001 sec)
  Records: 2  Duplicates: 0  Warnings: 0
  MariaDB [Analitics]> SELECT * FROM student;
      +------------+--------------+
      | student_id | student_name |
      +------------+--------------+
      |          1 | student_1    |
      |          2 | student_2    |
      +------------+--------------+
      2 rows in set (0.001 sec)
  MariaDB [Analitics]> CREATE TABLE step_student(
      -> step_student_id INT PRIMARY KEY AUTO_INCREMENT,
      -> step_id         INT,
      -> student_id      INT,
      -> attempt_time    INT,
      -> submission_time INT,
      -> result          VARCHAR(16),
      -> FOREIGN KEY (student_id) REFERENCES student (student_id) ON DELETE CASCADE,
      -> FOREIGN KEY (step_id) REFERENCES step (step_id) ON DELETE CASCADE)
      -> ENGINE=MyISAM CHARACTER SET=utf8mb4;
  Query OK, 0 rows affected (0.003 sec)
  MariaDB [Analitics]> INSERT INTO step_student (step_id, student_id, attempt_time, submission_time, result)
      -> VALUES (10, 52, 1598291444, 1598291490, 'correct'),
      -> (10, 11, 1593291995, 1593292031, 'correct'),
      -> (10, 19, 1591017571, 1591017743, 'wrong'),
      -> (10, 4, 1590254781, 1590254800, 'correct');
  Query OK, 4 rows affected (0.002 sec)
  Records: 4  Duplicates: 0  Warnings: 0
  MariaDB [Analitics]> SET FOREIGN_KEY_CHECKS = 1;
      Query OK, 0 rows affected (0.001 sec)
  MariaDB [Analitics]> SELECT * FROM step_student;
      +-----------------+---------+------------+--------------+-----------------+---------+
      | step_student_id | step_id | student_id | attempt_time | submission_time | result  |
      +-----------------+---------+------------+--------------+-----------------+---------+
      |               1 |      10 |         52 |   1598291444 |      1598291490 | correct |
      |               2 |      10 |         11 |   1593291995 |      1593292031 | correct |
      |               3 |      10 |         19 |   1591017571 |      1591017743 | wrong   |
      |               4 |      10 |          4 |   1590254781 |      1590254800 | correct |
      +-----------------+---------+------------+--------------+-----------------+---------+
      4 rows in set (0.001 sec)
  MariaDB [Analitics]> SHOW TABLES;
      +---------------------+
      | Tables_in_Analitics |
      +---------------------+
      | keyword             |
      | lesson              |
      | module              |
      | step                |
      | step_keyword        |
      | step_student        |
      | student             |
      +---------------------+
      7 rows in set (0.001 sec)
  Task:
  Отобрать все шаги, в которых рассматриваются вложенные запросы (то есть в названии шага упоминаются вложенные запросы). Указать к какому уроку и модулю они относятся. Для этого вывести 3 поля:
          в поле Модуль указать номер модуля и его название через пробел;
          в поле Урок указать номер модуля, порядковый номер урока (lesson_position) через точку и название урока через пробел;
          в поле Шаг указать номер модуля, порядковый номер урока (lesson_position) через точку, порядковый номер шага (step_position) через точку и название шага через пробел.
  Длину полей Модуль и Урок ограничить 19 символами, при этом слишком длинные надписи обозначить многоточием в конце (16 символов - это номер модуля или урока, пробел и  название Урока или Модуля к ним присоединить "..."). Информацию отсортировать по возрастанию номеров модулей, порядковых номеров уроков и порядковых номеров шагов.
  Decision:
  MariaDB [Analitics]> SELECT lesson_id, lesson_name, module_id FROM lesson;
      +-----------+-------------------------------------------------------------------------------+-----------+
      | lesson_id | lesson_name                                                                   | module_id |
      +-----------+-------------------------------------------------------------------------------+-----------+
      |         1 | Отношение(таблица)                                                            |         1 |
      |         2 | Выборка данных                                                                |         1 |
      |         3 | Таблица "Командировки", запросы на выборку                                    |         1 |
      |         4 | Вложенные запросы                                                             |         1 |
      +-----------+-------------------------------------------------------------------------------+-----------+
      4 rows in set (0.001 sec)
  MariaDB [Analitics]> SELECT * FROM module;
      +-----------+-----------------------------------------------------------+
      | module_id | module_name                                               |
      +-----------+-----------------------------------------------------------+
      |         1 | Основы реляционной модели и SQL                           |
      |         2 | Запросы SQL к связанным таблицам                          |
      +-----------+-----------------------------------------------------------+
      2 rows in set (0.000 sec)
  MariaDB [Analitics]> SELECT step_id, step_name, lesson_id FROM step;
      +---------+--------------------------------------------------------------------------+-----------+
      | step_id | step_name                                                                | lesson_id |
      +---------+--------------------------------------------------------------------------+-----------+
      |       1 | Структура уроков курса                                                   |         1 |
      |       2 | Содержание урока                                                         |         1 |
      |       3 | Реляционная модель, основные положения                                   |         1 |
      |       4 | Отношение, реляционная модель                                            |         1 |
      +---------+--------------------------------------------------------------------------+-----------+
      4 rows in set (0.001 sec)
  MariaDB [Analitics]> SELECT CONCAT(LEFT(CONCAT(module_id, ' ', module_name), 16), '...') AS Модуль,
      ->     CONCAT(LEFT(CONCAT(module_id, '.', lesson_position, ' ', lesson_name), 16), '...') AS Урок,
      ->     CONCAT(module_id, '.', lesson_position, '.', step_position, ' ', step_name) AS Шаг
      -> FROM module
      -> JOIN lesson
      ->     USING(module_id)
      -> JOIN step
      ->     USING(lesson_id)
      -> WHERE step_name LtuserE '%ложенн% запрос%'
      -> ORDER BY module_id, lesson_id, step_id;
  Query result:
  +---------------------+---------------------+-------------------------------------------------------------+
  | Модуль              | Урок                | Шаг                                                         |
  +---------------------+---------------------+-------------------------------------------------------------+
  | 1 Основы реляцио... | 1.4 Вложенные за... | 1.4.2 Вложенный запрос, возвращающий одно значение          |
  | 1 Основы реляцио... | 1.4 Вложенные за... | 1.4.3 Использование вложенного запроса в выражении          |
  | 1 Основы реляцио... | 1.4 Вложенные за... | 1.4.4 Вложенный запрос, оператор IN                         |
  | 1 Основы реляцио... | 1.4 Вложенные за... | 1.4.5 Вложенный запрос, операторы ANY и ALL                 |
  | 1 Основы реляцио... | 1.4 Вложенные за... | 1.4.6 Вложенный запрос после SELECT                         |
  | 1 Основы реляцио... | 1.5 Запросы корр... | 1.5.5 Добавление записей, вложенные запросы                 |
  | 2 Запросы SQL к ... | 2.2 Запросы на в... | 2.2.7 Запросы для нескольких таблиц со вложенными запросами |
  | 2 Запросы SQL к ... | 2.2 Запросы на в... | 2.2.8 Вложенные запросы в операторах соединения             |
  | 2 Запросы SQL к ... | 2.3 Запросы корр... | 2.3.5 Запрос на обновление, вложенные запросы               |
  +---------------------+---------------------+-------------------------------------------------------------+
  Affected rows: 9
  Task:
  Заполнить таблицу step_keyword следующим образом: если ключевое слово есть в названии шага, то включить в step_keyword строку с id шага и id ключевого слова.
  Decision:
  MariaDB [Analitics]> SELECT * FROM keyword;
      +------------+--------------+
      | keyword_id | keyword_name |
      +------------+--------------+
      |          1 | SELECT       |
      |          2 | FROM         |
      +------------+--------------+
      2 rows in set (0.000 sec)
  MariaDB [Analitics]> SELECT * FROM step;
      +---------+--------------------------------------------------------------------------+-----------+-----------+---------------+
      | step_id | step_name                                                                | step_type | lesson_id | step_position |
      +---------+--------------------------------------------------------------------------+-----------+-----------+---------------+
      |       1 | Структура уроков курса                                                   | text      |         1 |             1 |
      |       2 | Содержание урока                                                         | text      |         1 |             2 |
      |       3 | Реляционная модель, основные положения                                   | table     |         1 |             3 |
      |       4 | Отношение, реляционная модель                                            | choice    |         1 |             4 |
      +---------+--------------------------------------------------------------------------+-----------+-----------+---------------+
      4 rows in set (0.001 sec)
  MariaDB [Analitics]> INSERT INTO step_keyword(step_id, keyword_id)
      -> SELECT step_id, keyword_id
      -> FROM step
      -> INNER JOIN keyword
      -> ON INSTR(CONCAT(step_name, ' '), CONCAT(' ', keyword_name, ' '))
      ->     OR INSTR(CONCAT(step_name, ' '), CONCAT(' ', keyword_name, ','))
      ->     OR INSTR(CONCAT(step_name, ' '), CONCAT(' ', keyword_name, '('));
  Query result:
  +---------+------------+
  | step_id | keyword_id |
  +---------+------------+
  | 38      | 1          |
  | 81      | 3          |
  | 82      | 4          |
  | 82      | 5          |
  | 82      | 6          |
  | 81      | 7          |
  | 82      | 7          |
  | 83      | 7          |
  | 83      | 8          |
  | 47      | 10         |
  | 47      | 11         |
  | 42      | 15         |
  | 43      | 16         |
  | 44      | 16         |
  | 42      | 17         |
  | 43      | 18         |
  | 46      | 18         |
  | 43      | 19         |
  | 88      | 26         |
  | 112     | 27         |
  | 113     | 27         |
  | 37      | 28         |
  | 37      | 29         |
  | 18      | 30         |
  | 36      | 30         |
  | 19      | 31         |
  | 18      | 32         |
  +---------+------------+
  Affected rows: 27
  Task:
  Реализовать поиск по ключевым словам. Вывести шаги, с которыми связаны ключевые слова MAX и AVG одновременно. Для шагов указать id модуля, позицию урока в модуле, позицию шага в уроке через точку, после позиции шага перед заголовком - пробел. Позицию шага в уроке вывести в виде двух цифр (если позиция шага меньше 10, то перед цифрой поставить 0). Столбец назвать Шаг. Информацию отсортировать по первому столбцу в алфавитном порядке.
  Decision:
  MariaDB [Analitics]> SELECT CONCAT(module_id,'.',
      ->     lesson_position,
      ->     IF(step_position < 10, ".0","."),
      ->     step_position,
      ->     " ",
      ->     step_name) AS Шаг
      -> FROM step
      -> JOIN lesson
      ->     USING(lesson_id)
      -> JOIN module
      ->     USING(module_id)
      -> JOIN step_keyword
      ->     USING (step_id)
      -> JOIN keyword
      ->     USING(keyword_id)
      -> WHERE keyword_name = 'MAX'
      ->     OR keyword_name ='AVG'
      -> GROUP BY ШАГ
      -> HAVING COUNT(*) = 2
      -> ORDER BY 1;
  Query result:
  +---------------------------------------------------------+
  | Шаг                                                     |
  +---------------------------------------------------------+
  | 1.3.04 Выборка данных, групповые функции MIN, MAX и AVG |
  | 1.4.06 Вложенный запрос после SELECT                    |
  +---------------------------------------------------------+
  Affected rows: 2
  Task:
  Посчитать, сколько студентов относится к каждой группе. Столбцы назвать Группа, Интервал, Количество. Указать границы интервала.
  Decision:
  MariaDB [Analitics]> SELECT rate_group Группа,
      ->     CASE rate_group
      ->         WHEN 'I'   THEN 'от 0 до 10'
      ->         WHEN 'II'  THEN 'от 11 до 15'
      ->         WHEN 'III' THEN 'от 16 до 27'
      ->         ELSE 'больше 27'
      ->     END Интервал,
      ->     COUNT(*) Количество
      -> FROM(
      ->     SELECT
      ->         CASE
      ->             WHEN COUNT(DISTINCT step_id) <= 10 THEN 'I'
      ->             WHEN COUNT(DISTINCT step_id) <= 15 THEN 'II'
      ->             WHEN COUNT(DISTINCT step_id) <= 27 THEN 'III'
      ->             ELSE 'IV'
      ->         END rate_group
      ->     FROM step_student
      ->     WHERE result = 'correct'
      ->     GROUP BY student_id) query_in
      -> GROUP BY rate_group
      -> ORDER BY rate_group;
  Query result:
  +--------+-------------+------------+
  | Группа | Интервал    | Количество |
  +--------+-------------+------------+
  | I      | от 0 до 10  | 10         |
  | II     | от 11 до 15 | 27         |
  | III    | от 16 до 27 | 9          |
  | IV     | больше 27   | 18         |
  +--------+-------------+------------+
  Affected rows: 4
  Task:
  Исправить запрос примера так: для шагов, которые  не имеют неверных ответов,  указать 100 как процент успешных попыток, если же шаг не имеет верных ответов, указать 0. Информацию отсортировать сначала по возрастанию успешности, а затем по названию шага в алфавитном порядке.
  Decision:
  MariaDB [Analitics]> WITH table1 (step_name, correct, count)
      ->     AS (SELECT step_name,
      ->         SUM( IF (result = 'correct' , 1 , 0)),
      ->         COUNT(result)
      ->         FROM step
      ->         JOIN step_student
      ->             USING (step_id)
      ->         GROUP BY step_name)
      -> SELECT step_name AS Шаг,
      ->     ROUND((correct/count)*100) AS Успешность
      -> FROM table1
      -> ORDER BY 2, 1;
  Query result:
  +--------------------------------------------------------------------------+------------+
  | Шаг                                                                      | Успешность |
  +--------------------------------------------------------------------------+------------+
  | Задание. Работа с архивной таблицей, оператор UNION, часть 1             | 0          |
  | Выборка данных, оператор LtuserE                                            | 19         |
  | Вложенные запросы в операторах соединения                                | 32         |
  | Задание. Вывести самый популярный жанр                                   | 33         |
  | Запросы для нескольких таблиц с группировкой                             | 33         |
  | Задание. Вывести заказы, доставленные с опозданием                       | 35         |
  | Задание. Вывести информацию о движении каждого заказа                    | 36         |
  | Запросы для нескольких таблиц со вложенными запросами                    | 36         |
  | Задание. Вывести подробную информацию о каждом заказе                    | 37         |
  | Выборка данных, вычисляемые столбцы, логические функции                  | 44         |
  | Операция соединение, использование USING()                               | 45         |
  | Перекрестное соединение CROSS JOIN                                       | 45         |
  | Задание. Вывести города, в которых живут клиенты магазина                | 48         |
  | Задание. Посчитать, сколько раз была заказана каждая книга               | 48         |
  | Запросы на основе трех и более связанных таблиц                          | 49         |
  | Выборка данных с сортировкой                                             | 53         |
  | Внешнее соединение LEFT и RIGHT OUTER JOIN                               | 55         |
  | Запросы на выборку из нескольких таблиц                                  | 58         |
  | Выборка данных, вычисляемые столбцы, математические функции              | 59         |
  | Задание. Вывести клиентов, которые заказывали книги определенного автора | 63         |
  | Задание. Вывести информацию об оплате каждого заказа                     | 65         |
  | Выборка данных, логические операции                                      | 67         |
  | Проектирование концептуальной модели базы данных                         | 70         |
  | Выборка данных, операторы BETWEEN, IN                                    | 72         |
  | Выборка данных с созданием вычисляемого столбца                          | 74         |
  | Выборка отдельных столбцов                                               | 76         |
  | Соединение INNER JOIN                                                    | 78         |
  | Выборка данных по условию                                                | 81         |
  | Выборка отдельных столбцов и присвоение им новых имен                    | 84         |
  | Выборка всех данных из таблицы                                           | 87         |
  | Задание. Работа с архивной таблицей, оператор UNION, часть 2             | 100        |
  | Построение логической схемы базы данных                                  | 100        |
  +--------------------------------------------------------------------------+------------+
  Affected rows: 32
  Task:
  Вычислить прогресс пользователей по курсу. Прогресс вычисляется как отношение верно пройденных шагов к общему количеству шагов в процентах, округленное до целого. В нашей базе данные о
  Тем пользователям, которые прошли все шаги (прогресс = 100%) выдать "Сертификат с отличием". Тем, у кого прогресс больше или равен 80% - "Сертификат". Для остальных записей в столбце Результат задать пустую строку ("").
  Информацию отсортировать по убыванию прогресса, затем по имени пользователя в алфавитном порядке.
  Decision:
  MariaDB [Analitics]> WITH get_passed (student_name, pssd)
      ->     AS( SELECT student_name, COUNT(DISTINCT step_id) AS passed
      ->         FROM student JOIN step_student USING(student_id)
      ->         WHERE result = "correct"
      ->         GROUP BY student_id
      ->         ORDER BY passed)
      -> SELECT student_name AS Студент,
      ->     ROUND(100*pssd/(SELECT COUNT(DISTINCT step_id)
      ->         FROM step_student)) AS Прогресс,
      ->     CASE
      ->         WHEN ROUND(100*pssd/(SELECT COUNT(DISTINCT step_id) FROM step_student)) =  100 THEN "Сертификат с отличием"
      ->         WHEN ROUND(100*pssd/(SELECT COUNT(DISTINCT step_id) FROM step_student)) >= 80 THEN "Сертификат"
      ->         ELSE ""
      ->     END AS Результат
      -> FROM get_passed
      -> ORDER BY Прогресс DESC, Студент;
  Query result:
  +------------+----------+-----------------------+
  | Студент    | Прогресс | Результат             |
  +------------+----------+-----------------------+
  | student_60 | 100      | Сертификат с отличием |
  | student_15 | 94       | Сертификат            |
  | student_18 | 94       | Сертификат            |
  | student_27 | 94       | Сертификат            |
  | student_30 | 94       | Сертификат            |
  | student_31 | 94       | Сертификат            |
  | student_36 | 94       | Сертификат            |
  | student_39 | 94       | Сертификат            |
  | student_4  | 94       | Сертификат            |
  | student_43 | 94       | Сертификат            |
  | student_44 | 94       | Сертификат            |
  | student_46 | 94       | Сертификат            |
  | student_49 | 94       | Сертификат            |
  | student_51 | 94       | Сертификат            |
  | student_53 | 94       | Сертификат            |
  | student_59 | 91       | Сертификат            |
  | student_9  | 91       | Сертификат            |
  | student_23 | 88       | Сертификат            |
  | student_50 | 84       | Сертификат            |
  | student_20 | 78       |                       |
  | student_24 | 78       |                       |
  | student_52 | 63       |                       |
  | student_56 | 63       |                       |
  | student_34 | 59       |                       |
  | student_40 | 59       |                       |
  | student_11 | 50       |                       |
  | student_48 | 50       |                       |
  | student_42 | 47       |                       |
  | student_61 | 44       |                       |
  | student_13 | 41       |                       |
  | student_26 | 41       |                       |
  | student_1  | 34       |                       |
  | student_10 | 34       |                       |
  | student_12 | 34       |                       |
  | student_14 | 34       |                       |
  | student_19 | 34       |                       |
  | student_2  | 34       |                       |
  | student_21 | 34       |                       |
  | student_22 | 34       |                       |
  | student_25 | 34       |                       |
  | student_28 | 34       |                       |
  | student_3  | 34       |                       |
  | student_32 | 34       |                       |
  | student_35 | 34       |                       |
  | student_37 | 34       |                       |
  | student_41 | 34       |                       |
  | student_45 | 34       |                       |
  | student_54 | 34       |                       |
  | student_55 | 34       |                       |
  | student_57 | 34       |                       |
  | student_6  | 34       |                       |
  | student_62 | 34       |                       |
  | student_7  | 34       |                       |
  | student_8  | 34       |                       |
  | student_17 | 31       |                       |
  | student_33 | 31       |                       |
  | student_38 | 31       |                       |
  | student_58 | 31       |                       |
  | student_64 | 31       |                       |
  | student_16 | 28       |                       |
  | student_5  | 28       |                       |
  | student_63 | 28       |                       |
  | student_29 | 25       |                       |
  | student_47 | 25       |                       |
  +------------+----------+-----------------------+
  Task:
  Для студента с именем student_61 вывести все его попытки: название шага, результат и дату отправки попытки (submission_time). Информацию отсортировать по дате отправки попытки и указать, сколько минут прошло между отправкой соседних попыток. Название шага ограничить 20 символами и добавить "...". Столбцы назвать Студент, Шаг, Результат, Дата_отправки, Разница.
  Decision:
  SELECT student_name AS Студент,
  CONCAT(LEFT(step_name, 20), '...') AS Шаг,
  result AS Результат,
  FROM_UNIXTIME(submission_time) AS Дата_отправки,
  SEC_TO_TIME(submission_time - LAG(submission_time,
  1,
  submission_time)
  OVER (ORDER BY submission_time)) AS Разница
  FROM student
  INNER JOIN step_student USING(student_id)
  INNER JOIN step USING(step_id)
  WHERE student_name = 'student_61'
  ORDER BY Дата_отправки;
  +------------+-------------------------+-----------+---------------------+------------------+
  | Студент | Шаг | Результат | Дата_отправки | Разница |
  +------------+-------------------------+-----------+---------------------+------------------+
  | student_61 | Выборка всех данных ... | correct | 2020-08-27 14:22:14 | 0:00:00 |
  | student_61 | Выборка отдельных ст... | correct | 2020-08-27 14:23:53 | 0:01:39 |
  | student_61 | Выборка отдельных ст... | correct | 2020-08-27 14:28:41 | 0:04:48 |
  | student_61 | Выборка данных с соз... | wrong | 2020-08-27 14:33:57 | 0:05:16 |
  | student_61 | Выборка данных с соз... | wrong | 2020-08-27 14:34:24 | 0:00:27 |
  | student_61 | Выборка данных с соз... | correct | 2020-08-27 14:34:50 | 0:00:26 |
  | student_61 | Выборка данных, вычи... | correct | 2020-08-27 14:42:44 | 0:07:54 |
  | student_61 | Выборка данных, вычи... | wrong | 2020-08-27 14:54:06 | 0:11:22 |
  | student_61 | Выборка данных, вычи... | wrong | 2020-08-27 14:55:04 | 0:00:58 |
  | student_61 | Выборка данных, вычи... | wrong | 2020-08-27 14:58:23 | 0:03:19 |
  | student_61 | Выборка данных, вычи... | wrong | 2020-08-27 14:58:56 | 0:00:33 |
  | student_61 | Выборка данных, вычи... | wrong | 2020-08-27 14:59:09 | 0:00:13 |
  | student_61 | Выборка данных, вычи... | wrong | 2020-08-27 14:59:49 | 0:00:40 |
  | student_61 | Выборка данных, вычи... | wrong | 2020-08-27 15:01:00 | 0:01:11 |
  | student_61 | Выборка данных, вычи... | wrong | 2020-08-27 15:05:20 | 0:04:20 |
  | student_61 | Выборка данных, вычи... | wrong | 2020-08-27 15:06:19 | 0:00:59 |
  | student_61 | Выборка данных, вычи... | wrong | 2020-08-27 15:06:58 | 0:00:39 |
  | student_61 | Выборка данных, вычи... | wrong | 2020-08-27 15:08:40 | 0:01:42 |
  | student_61 | Выборка данных, вычи... | wrong | 2020-08-27 15:09:02 | 0:00:22 |
  | student_61 | Выборка данных, вычи... | correct | 2020-08-27 15:13:06 | 0:04:04 |
  | student_61 | Выборка данных по ус... | wrong | 2020-08-27 15:21:02 | 0:07:56 |
  | student_61 | Выборка данных по ус... | correct | 2020-08-27 15:21:18 | 0:00:16 |
  | student_61 | Выборка данных, логи... | correct | 2020-08-27 15:26:05 | 0:04:47 |
  | student_61 | Выборка данных, опер... | correct | 2020-08-27 15:31:31 | 0:05:26 |
  | student_61 | Выборка данных, опер... | wrong | 2020-08-27 15:42:30 | 0:10:59 |
  | student_61 | Выборка данных, опер... | wrong | 2020-08-27 15:43:35 | 0:01:05 |
  | student_61 | Выборка данных, опер... | wrong | 2020-08-27 15:48:09 | 0:04:34 |
  | student_61 | Выборка данных, опер... | wrong | 2020-08-27 15:49:47 | 0:01:38 |
  | student_61 | Выборка данных, опер... | wrong | 2020-08-27 15:52:13 | 0:02:26 |
  | student_61 | Выборка данных, опер... | wrong | 2020-08-27 15:57:41 | 0:05:28 |
  | student_61 | Выборка данных, опер... | wrong | 2020-08-27 15:57:53 | 0:00:12 |
  | student_61 | Выборка данных, опер... | wrong | 2020-08-27 15:58:28 | 0:00:35 |
  | student_61 | Выборка данных, опер... | wrong | 2020-08-27 15:59:58 | 0:01:30 |
  | student_61 | Выборка данных, опер... | wrong | 2020-08-27 16:00:22 | 0:00:24 |
  | student_61 | Выборка данных, опер... | correct | 2020-08-27 16:01:05 | 0:00:43 |
  | student_61 | Выборка данных с сор... | wrong | 2020-08-27 16:12:51 | 0:11:46 |
  | student_61 | Выборка данных с сор... | correct | 2020-08-27 16:14:15 | 0:01:24 |
  | student_61 | Соединение INNER JOI... | correct | 2020-09-01 07:25:39 | 4 days, 15:11:24 |
  | student_61 | Внешнее соединение L... | wrong | 2020-09-01 09:53:30 | 2:27:51 |
  | student_61 | Внешнее соединение L... | correct | 2020-09-01 09:53:50 | 0:00:20 |
  | student_61 | Перекрестное соедине... | wrong | 2020-09-01 10:45:30 | 0:51:40 |
  | student_61 | Перекрестное соедине... | wrong | 2020-09-01 10:46:21 | 0:00:51 |
  | student_61 | Перекрестное соедине... | correct | 2020-09-01 10:47:55 | 0:01:34 |
  +------------+-------------------------+-----------+---------------------+------------------+
  Task:
  Посчитать среднее время, за которое пользователи проходят урок по следующему алгоритму:

          для каждого пользователя вычислить время прохождения шага как сумму времени, потраченного на каждую попытку (время попытки - это разница между временем отправки задания и временем начала попытки), при этом попытки, которые длились больше 4 часов не учитывать, так как пользователь мог просто оставить задание открытым в браузере, а вернуться к нему на следующий день;
          для каждого студента посчитать общее время, которое он затратил на каждый урок;
          вычислить среднее время выполнения урока в часах, результат округлить до 2-х знаков после запятой;
          вывести информацию по возрастанию времени, пронумеровав строки, для каждого урока указать номер модуля и его позицию в нем.
  Decision:
  MariaDB [Analitics]> SELECT ROW_NUMBER() OVER (ORDER BY Среднее_время) AS Номер,
      ->     Урок, Среднее_время
      -> FROM(
      ->     SELECT
      ->         Урок, ROUND(AVG(difference), 2) AS Среднее_время
      -> FROM
      ->      (SELECT student_id,
      ->              CONCAT(module_id, '.', lesson_position, ' ', lesson_name) AS Урок,
      ->              SUM((submission_time - attempt_time) / 3600) AS difference
      ->       FROM module INNER JOIN lesson USING (module_id)
      ->                   INNER JOIN step USING (lesson_id)
      ->                   INNER JOIN step_student USING (step_id)
      ->       WHERE submission_time - attempt_time <= 4 * 3600
      ->       GROUP BY 1, 2) AS query_1
      -> GROUP BY 1) AS TA
      -> order by 3;
  Query result:
  +-------+-------------------------------------------------------------+---------------+
  | Номер | Урок                                                        | Среднее_время |
  +-------+-------------------------------------------------------------+---------------+
  | 1     | 2.2 Запросы на выборку, соединение таблиц                   | 2.37          |
  | 2     | 1.2 Выборка данных                                          | 2.65          |
  | 3     | 2.4 База данных "Интернет-магазин книг", запросы на выборку | 3.65          |
  +-------+-------------------------------------------------------------+---------------+
  Affected rows: 3
  Task:
  Вычислить рейтинг каждого студента относительно студента, прошедшего наибольшее количество шагов в модуле (вычисляется как отношение количества пройденных студентом шагов к максимальному количеству пройденных шагов, умноженное на 100). Вывести номер модуля, имя студента, количество пройденных им шагов и относительный рейтинг. Относительный рейтинг округлить до одного знака после запятой. Столбцы назвать Модуль, Студент, Пройдено_шагов и Относительный_рейтинг  соответственно. Информацию отсортировать сначала по возрастанию номера модуля, потом по убыванию относительного рейтинга и, наконец, по имени студента в алфавитном порядке.
  Decision:
  MariaDB [Analitics]> SELECT  module_id AS Модуль, student_name AS Студент, COUNT(DISTINCT step_id) AS Пройдено_шагов ,
      -> ROUND(COUNT(DISTINCT step_id) /
      ->       MAX(COUNT(DISTINCT step_id)) OVER(PARTITION BY module_id) *100, 1) AS Относительный_рейтинг
      -> FROM lesson
      -> JOIN step USING (lesson_id)
      -> JOIN step_student USING (step_id)
      -> JOIN student USING (student_id)
      -> WHERE result = 'correct'
      -> GROUP BY module_id, student_name
      -> ORDER BY 1, 4 DESC, 2;
  Query result:
  +--------+------------+----------------+-----------------------+
  | Модуль | Студент    | Пройдено_шагов | Относительный_рейтинг |
  +--------+------------+----------------+-----------------------+
  | 1      | student_1  | 11             | 100.0                 |
  | 1      | student_10 | 11             | 100.0                 |
  | 1      | student_11 | 11             | 100.0                 |
  | 1      | student_12 | 11             | 100.0                 |
  | 1      | student_13 | 11             | 100.0                 |
  | 1      | student_14 | 11             | 100.0                 |
  | 1      | student_15 | 11             | 100.0                 |
  | 1      | student_18 | 11             | 100.0                 |
  | 1      | student_19 | 11             | 100.0                 |
  | 1      | student_2  | 11             | 100.0                 |
  | 1      | student_20 | 11             | 100.0                 |
  | 1      | student_21 | 11             | 100.0                 |
  | 1      | student_22 | 11             | 100.0                 |
  | 1      | student_23 | 11             | 100.0                 |
  | 1      | student_24 | 11             | 100.0                 |
  | 1      | student_25 | 11             | 100.0                 |
  | 1      | student_26 | 11             | 100.0                 |
  | 1      | student_27 | 11             | 100.0                 |
  | 1      | student_28 | 11             | 100.0                 |
  | 1      | student_3  | 11             | 100.0                 |
  | 1      | student_30 | 11             | 100.0                 |
  | 1      | student_31 | 11             | 100.0                 |
  | 1      | student_32 | 11             | 100.0                 |
  | 1      | student_34 | 11             | 100.0                 |
  | 1      | student_35 | 11             | 100.0                 |
  | 1      | student_36 | 11             | 100.0                 |
  | 1      | student_37 | 11             | 100.0                 |
  | 1      | student_39 | 11             | 100.0                 |
  | 1      | student_4  | 11             | 100.0                 |
  | 1      | student_40 | 11             | 100.0                 |
  | 1      | student_41 | 11             | 100.0                 |
  | 1      | student_42 | 11             | 100.0                 |
  | 1      | student_43 | 11             | 100.0                 |
  | 1      | student_44 | 11             | 100.0                 |
  | 1      | student_45 | 11             | 100.0                 |
  | 1      | student_46 | 11             | 100.0                 |
  | 1      | student_48 | 11             | 100.0                 |
  | 1      | student_49 | 11             | 100.0                 |
  | 1      | student_50 | 11             | 100.0                 |
  | 1      | student_51 | 11             | 100.0                 |
  | 1      | student_52 | 11             | 100.0                 |
  | 1      | student_53 | 11             | 100.0                 |
  | 1      | student_54 | 11             | 100.0                 |
  | 1      | student_55 | 11             | 100.0                 |
  | 1      | student_56 | 11             | 100.0                 |
  | 1      | student_57 | 11             | 100.0                 |
  | 1      | student_59 | 11             | 100.0                 |
  | 1      | student_6  | 11             | 100.0                 |
  | 1      | student_60 | 11             | 100.0                 |
  | 1      | student_61 | 11             | 100.0                 |
  | 1      | student_62 | 11             | 100.0                 |
  | 1      | student_7  | 11             | 100.0                 |
  | 1      | student_8  | 11             | 100.0                 |
  | 1      | student_9  | 11             | 100.0                 |
  | 1      | student_17 | 10             | 90.9                  |
  | 1      | student_33 | 10             | 90.9                  |
  | 1      | student_38 | 10             | 90.9                  |
  | 1      | student_58 | 10             | 90.9                  |
  | 1      | student_64 | 10             | 90.9                  |
  | 1      | student_16 | 9              | 81.8                  |
  | 1      | student_5  | 9              | 81.8                  |
  | 1      | student_63 | 9              | 81.8                  |
  | 1      | student_29 | 8              | 72.7                  |
  | 1      | student_47 | 8              | 72.7                  |
  | 2      | student_60 | 21             | 100.0                 |
  | 2      | student_15 | 19             | 90.5                  |
  | 2      | student_18 | 19             | 90.5                  |
  | 2      | student_27 | 19             | 90.5                  |
  | 2      | student_30 | 19             | 90.5                  |
  | 2      | student_31 | 19             | 90.5                  |
  | 2      | student_36 | 19             | 90.5                  |
  | 2      | student_39 | 19             | 90.5                  |
  | 2      | student_4  | 19             | 90.5                  |
  | 2      | student_43 | 19             | 90.5                  |
  | 2      | student_44 | 19             | 90.5                  |
  | 2      | student_46 | 19             | 90.5                  |
  | 2      | student_49 | 19             | 90.5                  |
  | 2      | student_51 | 19             | 90.5                  |
  | 2      | student_53 | 19             | 90.5                  |
  | 2      | student_59 | 18             | 85.7                  |
  | 2      | student_9  | 18             | 85.7                  |
  | 2      | student_23 | 17             | 81.0                  |
  | 2      | student_50 | 16             | 76.2                  |
  | 2      | student_20 | 14             | 66.7                  |
  | 2      | student_24 | 14             | 66.7                  |
  | 2      | student_52 | 9              | 42.9                  |
  | 2      | student_56 | 9              | 42.9                  |
  | 2      | student_34 | 8              | 38.1                  |
  | 2      | student_40 | 8              | 38.1                  |
  | 2      | student_11 | 5              | 23.8                  |
  | 2      | student_48 | 5              | 23.8                  |
  | 2      | student_42 | 4              | 19.0                  |
  | 2      | student_61 | 3              | 14.3                  |
  | 2      | student_13 | 2              | 9.5                   |
  | 2      | student_26 | 2              | 9.5                   |
  +--------+------------+----------------+-----------------------+
  Affected rows: 95
  Task:
  Проанализировать, в каком порядке и с каким интервалом пользователь отправлял последнее верно выполненное задание каждого урока. Учитывать только студентов, прошедших хотя бы один шаг из всех трех уроков. В базе занесены попытки студентов  для трех уроков курса, поэтому анализ проводить только для этих уроков.
  Для студентов прошедших как минимум по одному шагу в каждом уроке, найти последний пройденный шаг каждого урока - крайний шаг, и указать:
          имя студента;
          номер урока, состоящий из номера модуля и через точку позиции каждого урока в модуле;
          время отправки  - время подачи решения на проверку;
          разницу во времени отправки между текущим и предыдущим крайним шагом в днях, при этом для первого шага поставить прочерк ("-"), а количество дней округлить до целого в большую сторону.
  Столбцы назвать  Студент, Урок,  Макс_время_отправки и Интервал  соответственно. Отсортировать результаты по имени студента в алфавитном порядке, а потом по возрастанию времени отправки.
  Decision:
  MariaDB [Analitics]> WITH get_time_lesson(student_name,  lesson, max_submission_time)
      -> AS( SELECT student_name,  
      ->    CONCAT(module_id,
      ->        '.',
      ->         lesson_position),
      ->    MAX(submission_time)
      ->    FROM step_student
      ->    INNER JOIN step USING (step_id)
      ->    INNER JOIN lesson USING (lesson_id)
      ->    INNER JOIN student USING(student_id)
      ->    WHERE  result = 'correct'  
      ->    GROUP BY 1,2
      ->    ORDER BY 1),
      ->    get_students(student_name)
      ->  AS( SELECT student_name
      ->    FROM get_time_lesson
      ->    GROUP BY student_name
      ->    HAVING COUNT(lesson) = 3)
      -> SELECT student_name AS Студент,  
      ->    lesson AS Урок,
      ->    FROM_UNIXTIME(max_submission_time) AS Макс_время_отправки,
      ->    IFNULL(CEIL((max_submission_time - LAG(max_submission_time) OVER (PARTITION BY student_name
      ->        ORDER BY max_submission_time )) / 86400),'-') AS Интервал
      -> FROM get_time_lesson
      -> WHERE student_name in (SELECT * FROM get_students)
      -> ORDER BY 1,3;
  Query result:
  +------------+------+---------------------+----------+
  | Студент    | Урок | Макс_время_отправки | Интервал |
  +------------+------+---------------------+----------+
  | student_15 | 1.2  | 2020-05-20 12:35:57 | -        |
  | student_15 | 2.4  | 2020-06-08 07:10:24 | 19       |
  | student_15 | 2.2  | 2020-08-18 12:47:03 | 72       |
  | student_18 | 1.2  | 2020-04-17 03:22:14 | -        |
  | student_18 | 2.2  | 2020-06-18 07:25:44 | 63       |
  | student_18 | 2.4  | 2020-06-18 07:34:14 | 1        |
  | student_20 | 1.2  | 2020-05-28 12:08:53 | -        |
  | student_20 | 2.2  | 2020-06-17 15:55:29 | 21       |
  | student_20 | 2.4  | 2020-06-18 09:48:39 | 1        |
  | student_23 | 1.2  | 2020-05-24 18:15:27 | -        |
  | student_23 | 2.2  | 2020-06-01 04:37:16 | 8        |
  | student_23 | 2.4  | 2020-06-01 04:42:36 | 1        |
  | student_24 | 1.2  | 2020-04-14 16:16:22 | -        |
  | student_24 | 2.2  | 2020-05-11 12:28:49 | 27       |
  | student_24 | 2.4  | 2020-05-13 12:20:39 | 2        |
  | student_27 | 1.2  | 2020-08-12 10:18:47 | -        |
  | student_27 | 2.2  | 2020-08-14 17:14:51 | 3        |
  | student_27 | 2.4  | 2020-08-20 12:23:34 | 6        |
  | student_30 | 1.2  | 2020-08-10 08:38:49 | -        |
  | student_30 | 2.2  | 2020-08-16 12:53:39 | 7        |
  | student_30 | 2.4  | 2020-08-19 11:41:49 | 3        |
  | student_31 | 1.2  | 2020-06-13 09:03:39 | -        |
  | student_31 | 2.2  | 2020-07-02 16:43:36 | 20       |
  | student_31 | 2.4  | 2020-07-05 17:18:56 | 4        |
  | student_36 | 1.2  | 2020-08-04 07:25:30 | -        |
  | student_36 | 2.2  | 2020-08-07 11:39:12 | 4        |
  | student_36 | 2.4  | 2020-08-07 20:33:02 | 1        |
  | student_39 | 1.2  | 2020-05-31 12:35:10 | -        |
  | student_39 | 2.2  | 2020-06-02 09:47:15 | 2        |
  | student_39 | 2.4  | 2020-06-02 17:06:41 | 1        |
  | student_4  | 1.2  | 2020-05-31 17:46:27 | -        |
  | student_4  | 2.2  | 2020-07-27 17:12:45 | 57       |
  | student_4  | 2.4  | 2020-07-29 09:21:24 | 2        |
  | student_43 | 1.2  | 2020-07-16 21:19:13 | -        |
  | student_43 | 2.4  | 2020-08-06 13:02:44 | 21       |
  | student_43 | 2.2  | 2020-08-08 20:11:52 | 3        |
  | student_44 | 1.2  | 2020-05-26 14:23:39 | -        |
  | student_44 | 2.2  | 2020-06-02 11:07:52 | 7        |
  | student_44 | 2.4  | 2020-06-06 21:57:20 | 5        |
  | student_46 | 1.2  | 2020-05-26 13:02:10 | -        |
  | student_46 | 2.4  | 2020-06-03 20:30:01 | 9        |
  | student_46 | 2.2  | 2020-06-03 20:54:34 | 1        |
  | student_49 | 1.2  | 2020-07-11 16:31:12 | -        |
  | student_49 | 2.2  | 2020-07-15 05:00:03 | 4        |
  | student_49 | 2.4  | 2020-07-16 04:57:51 | 1        |
  | student_50 | 1.2  | 2020-07-01 08:16:41 | -        |
  | student_50 | 2.2  | 2020-08-10 08:26:49 | 41       |
  | student_50 | 2.4  | 2020-09-09 12:44:00 | 31       |
  | student_51 | 1.2  | 2020-09-03 07:24:26 | -        |
  | student_51 | 2.2  | 2020-09-07 19:31:01 | 5        |
  | student_51 | 2.4  | 2020-09-10 13:12:11 | 3        |
  | student_52 | 1.2  | 2020-08-24 18:30:55 | -        |
  | student_52 | 2.2  | 2020-09-07 13:51:02 | 14       |
  | student_52 | 2.4  | 2020-09-07 22:16:19 | 1        |
  | student_53 | 1.2  | 2020-07-11 09:32:33 | -        |
  | student_53 | 2.2  | 2020-07-17 12:34:54 | 7        |
  | student_53 | 2.4  | 2020-07-19 05:09:32 | 2        |
  | student_56 | 1.2  | 2020-07-15 12:20:48 | -        |
  | student_56 | 2.2  | 2020-08-06 10:22:13 | 22       |
  | student_56 | 2.4  | 2020-08-20 09:18:46 | 14       |
  | student_59 | 1.2  | 2020-08-17 19:29:09 | -        |
  | student_59 | 2.2  | 2020-08-21 10:35:18 | 4        |
  | student_59 | 2.4  | 2020-08-22 10:39:29 | 2        |
  | student_60 | 1.2  | 2020-09-01 12:54:58 | -        |
  | student_60 | 2.2  | 2020-09-02 15:34:45 | 2        |
  | student_60 | 2.4  | 2020-09-03 10:53:13 | 1        |
  | student_9  | 1.2  | 2020-05-01 05:40:11 | -        |
  | student_9  | 2.2  | 2020-05-05 09:29:20 | 5        |
  | student_9  | 2.4  | 2020-05-06 10:52:38 | 2        |
  +------------+------+---------------------+----------+
  Affected rows: 69
  Task:
  Для студента с именем student_59 вывести следующую информацию по всем его попыткам:
          информация о шаге: номер модуля, символ '.', позиция урока в модуле, символ '.', позиция шага в модуле;
          порядковый номер попытки для каждого шага - определяется по возрастанию времени отправки попытки;
          результат попытки;
          время попытки (преобразованное к формату времени) - определяется как разность между временем отправки попытки и времени ее начала, в случае если попытка длилась  более 1 часа, то время попытки заменить на среднее время всех попыток пользователя по всем шагам без учета тех, которые длились больше 1 часа;
          относительное время попытки  - определяется как отношение времени попытки (с учетом замены времени попытки) к суммарному времени всех попыток  шага, округленное до двух знаков после запятой  .
  Столбцы назвать  Студент,  Шаг, Номер_попытки, Результат, Время_попытки и Относительное_время. Информацию отсортировать сначала по возрастанию id шага, а затем по возрастанию номера попытки (определяется по времени отправки попытки).
  Decision:
  MariaDB [Analitics]> SET @avg_time := (SELECT CEIL(AVG(submission_time - attempt_time))
      ->     FROM step_student
      ->     INNER JOIN student USING(student_id)
      ->     WHERE student_name = "student_59"
      ->         AND (submission_time - attempt_time) < 3600);
  Query OK, 0 rows affected (0.002 sec)
  MariaDB [Analitics]>     WITH get_stat
      ->     AS( SELECT student_name,
      ->        CONCAT(module_id,
      ->            ".",
      ->            lesson_position,
      ->            ".",
      ->            step_position) AS less,
      ->        step_id,
      ->        RANK() OVER (PARTITION BY CONCAT(module_id,
      ->            ".",
      ->            lesson_position,
      ->            ".",
      ->            step_position)
      ->        ORDER BY submission_time) AS rang,
      ->        result,
      ->        CASE
      ->            WHEN (submission_time - attempt_time) > 3600
      ->               THEN @avg_time
      ->            ELSE (submission_time - attempt_time)
      ->        END AS qr
      ->     FROM student
      ->     INNER JOIN step_student USING(student_id)
      ->     INNER JOIN step USING(step_id)
      ->     INNER JOIN lesson USING(lesson_id)
      ->     WHERE student_name = "student_59")
      -> SELECT student_name AS Студент,
      ->     less AS Шаг,
      ->     rang AS Номер_попытки,
      ->     result AS Результат,
      ->     SEC_TO_TIME(CEIL(qr)) AS Время_попытки,
      ->     ROUND((qr / (SUM(qr) OVER (PARTITION BY less ORDER BY less)) * 100), 2) AS Относительное_время
      -> FROM get_stat
      -> ORDER BY step_id, 3;
  Affected rows: 0
  Query result:
  +------------+--------+---------------+-----------+---------------+---------------------+
  | Студент    | Шаг    | Номер_попытки | Результат | Время_попытки | Относительное_время |
  +------------+--------+---------------+-----------+---------------+---------------------+
  | student_59 | 1.2.2  | 1             | correct   | 0:00:28       | 100.00              |
  | student_59 | 1.2.3  | 1             | correct   | 0:01:11       | 100.00              |
  | student_59 | 1.2.4  | 1             | correct   | 0:06:09       | 100.00              |
  | student_59 | 1.2.5  | 1             | correct   | 0:02:24       | 100.00              |
  | student_59 | 1.2.6  | 1             | wrong     | 0:09:42       | 90.37               |
  | student_59 | 1.2.6  | 2             | wrong     | 0:00:05       | 0.78                |
  | student_59 | 1.2.6  | 3             | wrong     | 0:00:23       | 3.57                |
  | student_59 | 1.2.6  | 4             | wrong     | 0:00:10       | 1.55                |
  | student_59 | 1.2.6  | 5             | correct   | 0:00:20       | 3.11                |
  | student_59 | 1.2.6  | 6             | correct   | 0:00:04       | 0.62                |
  | student_59 | 1.2.7  | 1             | wrong     | 0:11:44       | 98.88               |
  | student_59 | 1.2.7  | 2             | correct   | 0:00:08       | 1.12                |
  | student_59 | 1.2.8  | 1             | correct   | 0:02:23       | 100.00              |
  | student_59 | 1.2.9  | 1             | wrong     | 0:04:53       | 92.72               |
  | student_59 | 1.2.9  | 2             | correct   | 0:00:23       | 7.28                |
  | student_59 | 1.2.10 | 1             | wrong     | 0:03:19       | 76.83               |
  | student_59 | 1.2.10 | 2             | wrong     | 0:00:07       | 2.70                |
  | student_59 | 1.2.10 | 3             | correct   | 0:00:53       | 20.46               |
  | student_59 | 1.2.11 | 1             | wrong     | 0:15:50       | 79.56               |
  | student_59 | 1.2.11 | 2             | wrong     | 0:00:06       | 0.50                |
  | student_59 | 1.2.11 | 3             | wrong     | 0:00:10       | 0.84                |
  | student_59 | 1.2.11 | 4             | wrong     | 0:00:29       | 2.43                |
  | student_59 | 1.2.11 | 5             | wrong     | 0:00:07       | 0.59                |
  | student_59 | 1.2.11 | 6             | wrong     | 0:00:08       | 0.67                |
  | student_59 | 1.2.11 | 7             | wrong     | 0:00:04       | 0.34                |
  | student_59 | 1.2.11 | 8             | wrong     | 0:00:24       | 2.01                |
  | student_59 | 1.2.11 | 9             | wrong     | 0:00:07       | 0.59                |
  | student_59 | 1.2.11 | 10            | wrong     | 0:00:10       | 0.84                |
  | student_59 | 1.2.11 | 11            | wrong     | 0:02:11       | 10.97               |
  | student_59 | 1.2.11 | 12            | correct   | 0:00:08       | 0.67                |
  | student_59 | 1.2.12 | 1             | correct   | 0:07:10       | 100.00              |
  | student_59 | 2.2.2  | 1             | correct   | 0:08:52       | 100.00              |
  | student_59 | 2.2.3  | 1             | wrong     | 0:11:31       | 98.86               |
  | student_59 | 2.2.3  | 2             | correct   | 0:00:08       | 1.14                |
  | student_59 | 2.2.4  | 1             | wrong     | 0:17:46       | 93.18               |
  | student_59 | 2.2.4  | 2             | wrong     | 0:00:51       | 4.46                |
  | student_59 | 2.2.4  | 3             | wrong     | 0:00:15       | 1.31                |
  | student_59 | 2.2.4  | 4             | wrong     | 0:00:08       | 0.70                |
  | student_59 | 2.2.4  | 5             | wrong     | 0:00:04       | 0.35                |
  | student_59 | 2.2.5  | 1             | correct   | 0:07:10       | 100.00              |
  | student_59 | 2.2.6  | 1             | correct   | 0:24:35       | 100.00              |
  | student_59 | 2.2.7  | 1             | wrong     | 0:53:14       | 99.29               |
  | student_59 | 2.2.7  | 2             | correct   | 0:00:23       | 0.71                |
  | student_59 | 2.2.8  | 1             | wrong     | 0:07:10       | 48.31               |
  | student_59 | 2.2.8  | 2             | correct   | 0:07:40       | 51.69               |
  | student_59 | 2.2.9  | 1             | correct   | 0:31:13       | 100.00              |
  | student_59 | 2.4.2  | 1             | correct   | 0:03:31       | 100.00              |
  | student_59 | 2.4.3  | 1             | correct   | 0:08:21       | 100.00              |
  | student_59 | 2.4.5  | 1             | correct   | 0:07:10       | 100.00              |
  | student_59 | 2.4.6  | 1             | correct   | 0:13:38       | 100.00              |
  | student_59 | 2.4.7  | 1             | correct   | 0:21:18       | 100.00              |
  | student_59 | 2.4.8  | 1             | correct   | 0:33:02       | 100.00              |
  | student_59 | 2.4.9  | 1             | wrong     | 0:18:12       | 71.75               |
  | student_59 | 2.4.9  | 2             | correct   | 0:07:10       | 28.25               |
  | student_59 | 2.4.10 | 1             | correct   | 0:05:32       | 100.00              |
  | student_59 | 2.4.11 | 1             | correct   | 0:40:27       | 100.00              |
  | student_59 | 2.4.12 | 1             | correct   | 0:07:10       | 100.00              |
  | student_59 | 2.4.13 | 1             | correct   | 0:07:15       | 100.00              |
  +------------+--------+---------------+-----------+---------------+---------------------+
  Affected rows: 58
  Task:
  Online курс обучающиеся могут проходить по различным траекториям, проследить за которыми можно по способу решения ими заданий шагов курса. Большинство обучающихся за несколько попыток  получают правильный ответ
  и переходят к следующему шагу. Но есть такие, что остаются на шаге, выполняя несколько верных попыток, или переходят к следующему, оставив нерешенные шаги.
  Выделив эти "необычные" действия обучающихся, можно проследить их траекторию работы с курсом и проанализировать задания, для которых эти действия выполнялись, а затем их как-то изменить.
  Для этой цели необходимо выделить группы обучающихся по способу прохождения шагов:
          I группа - это те пользователи, которые после верной попытки решения шага делают неверную (скорее всего для того, чтобы поэкспериментировать или проверить, как работают примеры);
          II группа - это те пользователи, которые делают больше одной верной попытки для одного шага (возможно, улучшают свое решение или пробуют другой вариант);
          III группа - это те пользователи, которые не смогли решить задание какого-то шага (у них все попытки по этому шагу - неверные).
  Вывести группу (I, II, III), имя пользователя, количество шагов, которые пользователь выполнил по соответствующему способу. Столбцы назвать Группа, Студент, Количество_шагов. Отсортировать информацию по возрастанию номеров групп, потом по убыванию количества шагов и, наконец, по имени студента в алфавитном порядке.
  Decision:
  MariaDB [Analitics]> WITH qr
      -> AS(SELECT student_name,
      ->     step_id,
      ->     count(result) AS sm
      ->     FROM step_student
      ->     INNER JOIN student
      ->         USING(student_id)
      ->     WHERE result = "correct"
      ->     GROUP BY 1, 2
      ->     HAVING count(result) > 1)
      -> SELECT "I" AS Группа,
      ->     student_name AS Студент,
      ->     count(step_id) AS Количество_шагов
      -> FROM (SELECT student_name,
      ->     step_id,
      ->     IF(result = "correct"
      ->        AND submission_time < MAX(submission_time) OVER (PARTITION BY student_name, step_id),
      ->        IF(LEAD(result) OVER (PARTITION BY student_id, step_id ORDER BY submission_time) = "wrong",
      ->            1,
      ->            0),
      ->        0) AS change_res
      -> FROM step_student INNER JOIN student USING(student_id))qr1
      -> WHERE change_res = 1
      -> GROUP BY 1, 2
      -> UNION
      -> SELECT "II" AS Группа,
      ->     student_name AS Студент,
      ->     count(step_id) AS Количество_шагов
      -> FROM qr
      -> GROUP BY 1, 2
      -> UNION
      -> SELECT "III" AS Группа,
      ->     student_name AS Студент,
      ->     count(DISTINCT step_id) AS Количество_шагов
      -> FROM (SELECT student_id,
      ->     step_id,
      ->     SUM(new_result) OVER (PARTITION BY student_id, step_id) AS sum_result
      ->     FROM (SELECT student_id,
      ->         step_id,
      ->         IF(result = "wrong",
      ->             0,
      ->             1) AS new_result
      ->         FROM step_student)qr_1)qr_2
      ->         INNER JOIN student
      ->             USING(student_id)
      -> WHERE sum_result = 0
      -> GROUP BY student_id
      -> ORDER BY Группа, Количество_шагов DESC, Студент;
  Query result:
  +--------+------------+------------------+
  | Группа | Студент    | Количество_шагов |
  +--------+------------+------------------+
  | I      | student_15 | 2                |
  | I      | student_53 | 2                |
  | I      | student_11 | 1                |
  | I      | student_34 | 1                |
  | I      | student_35 | 1                |
  | I      | student_40 | 1                |
  | I      | student_57 | 1                |
  | I      | student_62 | 1                |
  | I      | student_9  | 1                |
  | II     | student_53 | 4                |
  | II     | student_62 | 4                |
  | II     | student_34 | 3                |
  | II     | student_60 | 3                |
  | II     | student_20 | 2                |
  | II     | student_35 | 2                |
  | II     | student_9  | 2                |
  | II     | student_11 | 1                |
  | II     | student_15 | 1                |
  | II     | student_30 | 1                |
  | II     | student_36 | 1                |
  | II     | student_39 | 1                |
  | II     | student_40 | 1                |
  | II     | student_46 | 1                |
  | II     | student_57 | 1                |
  | II     | student_59 | 1                |
  | III    | student_24 | 3                |
  | III    | student_33 | 1                |
  | III    | student_42 | 1                |
  | III    | student_50 | 1                |
  | III    | student_51 | 1                |
  | III    | student_59 | 1                |
  | III    | student_64 | 1                |
  +--------+------------+------------------+
  Affected rows: 32
  Task:
  Разработать базу "Склад Книг"
  Известны название книги, ее автор, количество экземпляров в наличии и ее цена. Вся эта информация может быть представлена в виде таблицы, состоящей из 4 столбцов (приведены только 4 записи, на самом деле их гораздо больше).:
  Название            Автор               Цена, руб   Количество
  Мастер и Маргарита  Булгаков М.А.       670.99      3
  Белая гвардия       Булгаков М.А.       540.50      5
  Идиот               Достоевский Ф.М.    460         10
  Братья Карамазовы   Достоевский Ф.М.    799.01      2
  Task:
  Сформулируйте SQL запрос для создания таблицы book
  Структура таблицы book:
  Поле        Тип, описание
  book_id     INT PRIMARY KEY AUTO_INCREMENT
  title       VARCHAR(50)
  author      VARCHAR(30)
  price       DECIMAL(8, 2)
  amount      INT
  Decision:
  mysql> CREATE TABLE book(
      -> book_id INT PRIMARY KEY AUTO_INCREMENT,
      -> title VARCHAR(50),
      -> author VARCHAR(30),
      -> price DECIMAL(8, 2),
      -> amount INT
      -> );  
      Query OK, 0 rows affected (0.16 sec)
  Task:
  Занесите новую строку в таблицу book.
  текстовые значения (тип VARCHAR) заключать либо в двойные, либо в одинарные кавычки:
  book_id                         title               author          price           amount
  INT PRIMARY KEY AUTO_INCREMENT  VARCHAR(50)         VARCHAR(30)     DECIMAL(8,2)    INT
  1                               Мастер и Маргарита  Булгаков М.А.   670.99          3
  Decision:
  mysql> INSERT INTO book (title, author, price, amount)
      -> VALUES ('Мастер и Маргарита', 'Булгаков М.А.', '670.99', '3');
      Query OK, 1 row affected (0.09 sec)
  mysql> SELECT * FROM book;
      +---------+------------------------------------+-------------------------+--------+--------+
      | book_id | title                              | author                  | price  | amount |
      +---------+------------------------------------+-------------------------+--------+--------+
      |       1 | Мастер и Маргарита                 | Булгаков М.А.           | 670.99 |      3 |
      +---------+------------------------------------+-------------------------+--------+--------+
      1 row in set (0.00 sec)
  Task:
  Занесите три последние записи в таблицу book.
  book_id                         title   author  price   amount
  INT PRIMARY KEY AUTO_INCREMENT  VARCHAR(50)             VARCHAR(30)         DECIMAL(8,2)    INT
  1                               Мастер и Маргарита      Булгаков М.А.       670.99          3
  2                               Белая гвардия           Булгаков М.А.       540.50          5
  3                               Идиот                   Достоевский Ф.М.    460.00          10
  4                               Братья Карамазовы       Достоевский Ф.М.    799.01          2
  Decision:
  mysql> INSERT INTO book (title, author, price, amount) VALUES ('Белая гвардия', 'Булгаков М.А.', 540.50, 5),
      -> ('Идиот', 'Достоевский Ф.М.', 460.00, 10),
      -> ('Братья Карамазовы', 'Достоевский Ф.М.', 799.01, 2);
      Query OK, 3 rows affected (0.14 sec)
      Records: 3  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM book;
      +---------+------------------------------------+-------------------------------+--------+--------+
      | book_id | title                              | author                        | price  | amount |
      +---------+------------------------------------+-------------------------------+--------+--------+
      |       1 | Мастер и Маргарита                 | Булгаков М.А.                 | 670.99 |      3 |
      |       2 | Белая гвардия                      | Булгаков М.А.                 | 540.50 |      5 |
      |       3 | Идиот                              | Достоевский Ф.М.              | 460.00 |     10 |
      |       4 | Братья Карамазовы                  | Достоевский Ф.М.              | 799.01 |      2 |
      +---------+------------------------------------+-------------------------------+--------+--------+
      4 rows in set (0.00 sec)
  Task:
  Вывести информацию о всех книгах, хранящихся на складе.
  Decision:
  mysql> SELECT * FROM book;
      +---------+------------------------------------------+-------------------------------+--------+--------+
      | book_id | title                                    | author                        | price  | amount |
      +---------+------------------------------------------+-------------------------------+--------+--------+
      |       1 | Мастер и Маргарита                       | Булгаков М.А.                 | 670.99 |      3 |
      |       2 | Белая гвардия                            | Булгаков М.А.                 | 540.50 |      5 |
      |       3 | Идиот                                    | Достоевский Ф.М.              | 460.00 |     10 |
      |       4 | Братья Карамазовы                        | Достоевский Ф.М.              | 799.01 |      2 |
      |       5 | Стихотворение и поэмы                    | Есенин С.А.                   | 650.00 |     15 |
      +---------+------------------------------------------+-------------------------------+--------+--------+
      5 rows in set (0.01 sec)
  Task:
  Выбрать авторов, название книг и их цену из таблицы book.
  Decision:
  mysql> SELECT author, title, price FROM book;
      +-------------------------------+------------------------------------------+--------+
      | author                        | title                                    | price  |
      +-------------------------------+------------------------------------------+--------+
      | Булгаков М.А.                 | Мастер и Маргарита                       | 670.99 |
      | Булгаков М.А.                 | Белая гвардия                            | 540.50 |
      | Достоевский Ф.М.              | Идиот                                    | 460.00 |
      | Достоевский Ф.М.              | Братья Карамазовы                        | 799.01 |
      | Есенин С.А.                   | Стихотворение и поэмы                    | 650.00 |
      +-------------------------------+------------------------------------------+--------+
      5 rows in set (0.00 sec)
  Task:
  Выбрать названия книг и авторов из таблицы book, для поля title задать имя(псевдоним) Название, для поля author –  Автор.
  Decision:
  mysql> SELECT title AS Название, author AS Автор FROM book;
      +------------------------------------------+-------------------------------+
      | Название                                 | Автор                         |
      +------------------------------------------+-------------------------------+
      | Мастер и Маргарита                       | Булгаков М.А.                 |
      | Белая гвардия                            | Булгаков М.А.                 |
      | Идиот                                    | Достоевский Ф.М.              |
      | Братья Карамазовы                        | Достоевский Ф.М.              |
      | Стихотворение и поэмы                    | Есенин С.А.                   |
      +------------------------------------------+-------------------------------+
      5 rows in set (0.00 sec)
  Task:
  Для упаковки каждой книги требуется один лист бумаги, цена которого 1 рубль 65 копеек. Посчитать стоимость упаковки для каждой книги (сколько денег потребуется, чтобы упаковать все экземпляры книги). В запросе вывести название книги, ее количество и стоимость упаковки, последний столбец назвать pack.
  Decision:
  mysql> SELECT title, amount, amount*1.65 AS pack FROM book;
      +------------------------------------------+--------+-------+
      | title                                    | amount | pack  |
      +------------------------------------------+--------+-------+
      | Мастер и Маргарита                       |      3 |  4.95 |
      | Белая гвардия                            |      5 |  8.25 |
      | Идиот                                    |     10 | 16.50 |
      | Братья Карамазовы                        |      2 |  3.30 |
      | Стихотворение и поэмы                    |     15 | 24.75 |
      +------------------------------------------+--------+-------+
      5 rows in set (0.00 sec)
  Task:
  В конце года цену всех книг на складе пересчитывают – снижают ее на 30%. Написать SQL запрос, который из таблицы book выбирает названия, авторов, количества и вычисляет новые цены книг. Столбец с новой ценой назвать new_price, цену округлить до 2-х знаков после запятой.
  Decision:
  mysql> SELECT title, author, amount, ROUND(price*0.7,2) AS new_price FROM book;
      +------------------------------------------+-------------------------------+--------+-----------+
      | title                                    | author                        | amount | new_price |
      +------------------------------------------+-------------------------------+--------+-----------+
      | Мастер и Маргарита                       | Булгаков М.А.                 |      3 |    469.69 |
      | Белая гвардия                            | Булгаков М.А.                 |      5 |    378.35 |
      | Идиот                                    | Достоевский Ф.М.              |     10 |    322.00 |
      | Братья Карамазовы                        | Достоевский Ф.М.              |      2 |    559.31 |
      | Стихотворение и поэмы                    | Есенин С.А.                   |     15 |    455.00 |
      +------------------------------------------+-------------------------------+--------+-----------+
      5 rows in set (0.01 sec)
  Task:
  Для каждой книги из таблицы book установим скидку следующим образом: если количество книг меньше 4, то скидка будет составлять 50% от цены, в противном случае 30%.
  Decision:
  SELECT title, amount, price,
      IF(amount<4, price*0.5, price*0.7) AS sale
  FROM book;
  +-----------------------+--------+--------+---------+
  | title                 | amount | price  | sale    |
  +-----------------------+--------+--------+---------+
  | Мастер и Маргарита    | 3      | 670.99 | 335.495 |
  | Белая гвардия         | 5      | 540.50 | 378.350 |
  | Идиот                 | 10     | 460.00 | 322.000 |
  | Братья Карамазовы     | 2      | 799.01 | 399.505 |
  | Стихотворения и поэмы | 15     | 650.00 | 455.000 |
  +-----------------------+--------+--------+---------+
  Task:
  Цена по скидке должна отображаться с двумя знаками после запятой, добавим в запрос округление:
  Decision:
  SELECT title, amount, price,
      ROUND(IF(amount<4, price*0.5, price*0.7),2) AS sale
  FROM book;
  +-----------------------+--------+--------+--------+
  | title                 | amount | price  | sale   |
  +-----------------------+--------+--------+--------+
  | Мастер и Маргарита    | 3      | 670.99 | 335.50 |
  | Белая гвардия         | 5      | 540.50 | 378.35 |
  | Идиот                 | 10     | 460.00 | 322.00 |
  | Братья Карамазовы     | 2      | 799.01 | 399.51 |
  | Стихотворения и поэмы | 15     | 650.00 | 455.00 |
  +-----------------------+--------+--------+--------+
  Task:
  При анализе продаж книг выяснилось, что наибольшей популярностью пользуются книги Михаила Булгакова, на втором месте книги Сергея Есенина. Исходя из этого решили поднять цену книг Булгакова на 10%, а цену книг Есенина - на 5%. Написать запрос, куда включить автора, название книги и новую цену, последний столбец назвать new_price. Значение округлить до двух знаков после запятой.
  Decision:
  mysql> SELECT author, title,
      -> ROUND(
      -> IF(author='Булгаков М.А.', price*1.1,
      -> IF(author='Есенин С.А.', price*1.05, price)
      -> ),2) AS new_price
      -> FROM book;
      +-------------------------------+------------------------------------------+-----------+
      | author                        | title                                    | new_price |
      +-------------------------------+------------------------------------------+-----------+
      | Булгаков М.А.                 | Мастер и Маргарита                       |    738.09 |
      | Булгаков М.А.                 | Белая гвардия                            |    594.55 |
      | Достоевский Ф.М.              | Идиот                                    |    460.00 |
      | Достоевский Ф.М.              | Братья Карамазовы                        |    799.01 |
      | Есенин С.А.                   | Стихотворение и поэмы                    |    682.50 |
      +-------------------------------+------------------------------------------+-----------+
      5 rows in set (0.00 sec)
  mysql> SELECT author, title,
      -> ROUND
      ->     (CASE
      ->         WHEN author = 'Булгаков М.А.' THEN price*1.1
      ->         WHEN author = 'Есенин С.А.' THEN price*1.05
      ->             ELSE price END,2)
      ->     AS new_price
      -> FROM book;
      +-------------------------------+------------------------------------------+-----------+
      | author                        | title                                    | new_price |
      +-------------------------------+------------------------------------------+-----------+
      | Булгаков М.А.                 | Мастер и Маргарита                       |    738.09 |
      | Булгаков М.А.                 | Белая гвардия                            |    594.55 |
      | Достоевский Ф.М.              | Идиот                                    |    460.00 |
      | Достоевский Ф.М.              | Братья Карамазовы                        |    799.01 |
      | Есенин С.А.                   | Стихотворение и поэмы                    |    682.50 |
      +-------------------------------+------------------------------------------+-----------+
      5 rows in set (0.00 sec)
  Task:
  Вывести автора, название  и цены тех книг, количество которых меньше 10.
  Decision:
  mysql> SELECT author, title, price FROM book WHERE amount<10;
      +-------------------------------+------------------------------------+--------+
      | author                        | title                              | price  |
      +-------------------------------+------------------------------------+--------+
      | Булгаков М.А.                 | Мастер и Маргарита                 | 670.99 |
      | Булгаков М.А.                 | Белая гвардия                      | 540.50 |
      | Достоевский Ф.М.              | Братья Карамазовы                  | 799.01 |
      +-------------------------------+------------------------------------+--------+
      3 rows in set (0.00 sec)
  Task:
  Вывести название, автора,  цену  и количество всех книг, цена которых меньше 500 или больше 600, а стоимость всех экземпляров этих книг больше или равна 5000.
  Decision:
  mysql> SELECT title, author, price, amount FROM book
      -> WHERE (price<500 OR price>600) AND (price*amount >= 5000);
      +------------------------------------------+---------------------+--------+--------+
      | title                                    | author              | price  | amount |
      +------------------------------------------+---------------------+--------+--------+
      | Стихотворение и поэмы                    | Есенин С.А.         | 650.00 |     15 |
      +------------------------------------------+---------------------+--------+--------+
      1 row in set (0.00 sec)
  Task:
  Вывести название и авторов тех книг, цены которых принадлежат интервалу от 540.50 до 800 (включая границы),  а количество или 2, или 3, или 5, или 7
  Decision:
  mysql> SELECT title, author
      -> FROM book
      -> WHERE (price BETWEEN 540.50 AND 800) AND (amount IN (2,3,5,7));
      +------------------------------------+-------------------------------+
      | title                              | author                        |
      +------------------------------------+-------------------------------+
      | Мастер и Маргарита                 | Булгаков М.А.                 |
      | Белая гвардия                      | Булгаков М.А.                 |
      | Братья Карамазовы                  | Достоевский Ф.М.              |
      +------------------------------------+-------------------------------+
      3 rows in set (0.00 sec)
  Task:
  Вывести  автора и название  книг, количество которых принадлежит интервалу от 2 до 14 (включая границы). Информацию  отсортировать сначала по авторам (в обратном алфавитном порядке), а затем по названиям книг (по алфавиту).
  Decision:
  mysql> SELECT author, title  FROM book WHERE amount BETWEEN 2 AND 14 ORDER BY author DESC, title;
      +-------------------------------+------------------------------------+
      | author                        | title                              |
      +-------------------------------+------------------------------------+
      | Достоевский Ф.М.              | Братья Карамазовы                  |
      | Достоевский Ф.М.              | Идиот                              |
      | Булгаков М.А.                 | Белая гвардия                      |
      | Булгаков М.А.                 | Мастер и Маргарита                 |
      +-------------------------------+------------------------------------+
      4 rows in set (0.00 sec)
  Task:
  Вывести название и автора тех книг, название которых состоит из двух и более слов, а инициалы автора содержат букву «С». Считать, что в названии слова отделяются друг от друга пробелами и не содержат знаков препинания, между фамилией автора и инициалами обязателен пробел, инициалы записываются без пробела в формате: буква, точка, буква, точка. Информацию отсортировать по названию книги в алфавитном порядке.
  Decision:
  mysql> INSERT INTO book (title, author, price, amount) VALUES ('', 'Иванов С.С.', 50.00, 10),
      -> ('Дети полуночи', 'Рушди Салман', 950.00, 5),
      -> ('Лирика', 'Гумилев Н.С.', 460.00, 10),
      -> ('Поэмы', 'Бехтерев С.С.', 460.00, 10),
      -> ('Капитанская дочка', 'Пушкин А.С.', 520.50, 7);
      Query OK, 5 rows affected (0.05 sec)
      Records: 5  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM book;
      +---------+------------------------------------------+-------------------------------+--------+--------+
      | book_id | title                                    | author                        | price  | amount |
      +---------+------------------------------------------+-------------------------------+--------+--------+
      |       1 | Мастер и Маргарита                       | Булгаков М.А.                 | 670.99 |      3 |
      |       2 | Белая гвардия                            | Булгаков М.А.                 | 540.50 |      5 |
      |       3 | Идиот                                    | Достоевский Ф.М.              | 460.00 |     10 |
      |       4 | Братья Карамазовы                        | Достоевский Ф.М.              | 799.01 |      2 |
      |       5 | Стихотворение и поэмы                    | Есенин С.А.                   | 650.00 |     15 |
      |       6 |                                          | Иванов С.С.                   |  50.00 |     10 |
      |       7 | Дети полуночи                            | Рушди Салман                  | 950.00 |      5 |
      |       8 | Лирика                                   | Гумилев Н.С.                  | 460.00 |     10 |
      |       9 | Поэмы                                    | Бехтерев С.С.                 | 460.00 |     10 |
      |      10 | Капитанская дочка                        | Пушкин А.С.                   | 520.50 |      7 |
      +---------+------------------------------------------+-------------------------------+--------+--------+
      10 rows in set (0.00 sec)
  mysql> SELECT title, author
      -> FROM book
      -> WHERE title LtuserE "%_ %"
      -> AND author LtuserE "%С.%"
      -> ORDER BY title;
      +------------------------------------------+---------------------+
      | title                                    | author              |
      +------------------------------------------+---------------------+
      | Капитанская дочка                        | Пушкин А.С.         |
      | Стихотворение и поэмы                    | Есенин С.А.         |
      +------------------------------------------+---------------------+
      2 rows in set (0.00 sec)
      +------------------------------------------+---------------------+
      | title                                    | author              |
      +------------------------------------------+---------------------+
      | Капитанская дочка                        | Пушкин А.С.         |
      | Стихотворение и поэмы                    | Есенин С.А.         |
      +------------------------------------------+---------------------+
      2 rows in set (0.00 sec)
  Task:
  Отобрать различные (уникальные) элементы столбца amount таблицы book.
  Decision:
  mysql> SELECT DISTINCT amount
      -> FROM book;
      +--------+
      | amount |
      +--------+
      |      3 |
      |      5 |
      |     10 |
      |      2 |
      |     15 |
      +--------+
      5 rows in set (0.00 sec)
  Task:
  Посчитать, количество различных книг и количество экземпляров книг каждого автора , хранящихся на складе.  Столбцы назвать Автор, Различных_книг и Количество_экземпляров соответственно.
  Decision:
  mysql> SELECT  author AS Автор,  COUNT(title) AS Различных_книг,  SUM(amount) AS Количество_экземпляров  FROM book  GROUP BY author;
      +-------------------------------+-----------------------------+---------------------------------------------+
      | Автор                         | Различных_книг              | Количество_экземпляров                      |
      +-------------------------------+-----------------------------+---------------------------------------------+
      | Булгаков М.А.                 |                           2 |                                           8 |
      | Достоевский Ф.М.              |                           3 |                                          22 |
      | Есенин С.А.                   |                           1 |                                          15 |
      +-------------------------------+-----------------------------+---------------------------------------------+
      3 rows in set (0.00 sec)
  Task:
  Вывести фамилию автора, минимальную, максимальную и среднюю цену книг каждого автора . Вычисляемые столбцы назвать Минимальная_цена, Максимальная_цена и Средняя_цена соответственно.
  Decision:
  mysql> SELECT author, MIN(price) AS Минимальная_цена, MAX(price) AS Максимальная_цена, AVG(price) AS Средняя_цена
      -> FROM book
      -> GROUP BY author;
      +-------------------------------+---------------------------------+-----------------------------------+-------------------------+
      | author                        | Минимальная_цена                | Максимальная_цена                 | Средняя_цена            |
      +-------------------------------+---------------------------------+-----------------------------------+-------------------------+
      | Булгаков М.А.                 |                          540.50 |                            670.99 |              605.745000 |
      | Достоевский Ф.М.              |                          460.00 |                            799.01 |              579.836667 |
      | Есенин С.А.                   |                          650.00 |                            650.00 |              650.000000 |
      +-------------------------------+---------------------------------+-----------------------------------+-------------------------+
      3 rows in set (0.01 sec)
  Task:
  Для каждого автора вычислить суммарную стоимость книг S (имя столбца Стоимость), а также вычислить налог на добавленную стоимость  для полученных сумм (имя столбца НДС ) , который включен в стоимость и составляет k = 18%,  а также стоимость книг  (Стоимость_без_НДС) без него. Значения округлить до двух знаков после запятой.
  Decision:
  mysql> SELECT
      -> author,
      -> ROUND(SUM(price * amount),2) AS Стоимость,
      -> ROUND(SUM(price * amount*18/100)/(1+18/100),2) AS НДС,
      -> ROUND(SUM(price * amount/(1+18/100)),2) AS Стоимость_без_НДС
      -> FROM book
      -> GROUP BY author;
      +-------------------------------+--------------------+---------+----------------------------------+
      | author                        | Стоимость          | НДС     | Стоимость_без_НДС                |
      +-------------------------------+--------------------+---------+----------------------------------+
      | Булгаков М.А.                 |            4715.47 |  719.31 |                          3996.16 |
      | Достоевский Ф.М.              |           11003.02 | 1678.43 |                          9324.59 |
      | Есенин С.А.                   |            9750.00 | 1487.29 |                          8262.71 |
      +-------------------------------+--------------------+---------+----------------------------------+
      3 rows in set (0.01 sec)
  Task:
  Вывести  цену самой дешевой книги, цену самой дорогой и среднюю цену книг на складе. Названия столбцов Минимальная_цена, Максимальная_цена, Средняя_цена соответственно. Среднюю цену округлить до двух знаков после запятой.
  Decision:
  mysql> SELECT MIN(price) AS Минимальная_цена, MAX(price) AS Максимальная_цена, ROUND(AVG(price),2) AS Средняя_цена FROM book;
      +---------------------------------+-----------------------------------+-------------------------+
      | Минимальная_цена                | Максимальная_цена                 | Средняя_цена            |
      +---------------------------------+-----------------------------------+-------------------------+
      |                          460.00 |                            799.01 |                  600.17 |
      +---------------------------------+-----------------------------------+-------------------------+
      1 row in set (0.00 sec)   
  Task:
  Вычислить среднюю цену и суммарную стоимость тех книг, количество экземпляров которых принадлежит интервалу от 5 до 14, включительно. Столбцы назвать Средняя_цена и Стоимость, значения округлить до 2-х знаков после запятой.
  Decision:
  mysql> SELECT
      -> ROUND(AVG(price), 2) AS Средняя_цена,
      -> ROUND(SUM(price * amount), 2) AS Стоимость
      -> FROM book
      -> WHERE amount BETWEEN 5 AND 14
      -> HAVING SUM(price * amount);
      +-------------------------+--------------------+
      | Средняя_цена            | Стоимость          |
      +-------------------------+--------------------+
      |                  493.67 |           12107.50 |
      +-------------------------+--------------------+
      1 row in set (0.01 sec)
  Task:
  Посчитать стоимость всех экземпляров каждого автора без учета книг «Идиот» и «Белая гвардия». В результат включить только тех авторов, у которых суммарная стоимость книг более 5000 руб. Вычисляемый столбец назвать Стоимость. Результат отсортировать по убыванию стоимости.
  Decision:
  mysql> SELECT author, SUM(amount*price) AS Стоимость
      -> FROM book
      -> WHERE title <> 'Идиот' AND title <> 'Белая гвардия'
      -> GROUP BY author
      -> HAVING SUM(amount*price) > 5000
      -> ORDER BY 2 DESC;
      +-------------------------------+--------------------+
      | author                        | Стоимость          |
      +-------------------------------+--------------------+
      | Есенин С.А.                   |            9750.00 |
      | Достоевский Ф.М.              |            6403.02 |
      +-------------------------------+--------------------+
      2 rows in set (0.00 sec)
  Task:
  Вывести информацию (автора, название и цену) о  книгах, цены которых меньше или равны средней цене книг на складе. Информацию вывести в отсортированном по убыванию цены виде. Среднее вычислить как среднее по цене книги.
  Decision:
  SELECT author, title, price
  FROM book
  WHERE price<=(
      SELECT AVG(price)
      FROM book
  ) ORDER BY price DESC;
      +------------------+---------------+--------+
      | author           | title         | price  |
      +------------------+---------------+--------+
      | Булгаков М.А.    | Белая гвардия | 540.50 |
      | Достоевский Ф.М. | Игрок         | 480.50 |
      | Достоевский Ф.М. | Идиот         | 460.00 |
      +------------------+---------------+--------+
  Task:
  Вывести информацию (автора, название и цену) о тех книгах, цены которых превышают минимальную цену книги на складе не более чем на 150 рублей в отсортированном по возрастанию цены виде.
  Decision:
  SELECT author, title, price
  FROM book
  WHERE price<=(
      SELECT MIN(price)
      FROM book
  ) +150 ORDER BY price ASC;
      +------------------+----------------+--------+
      | author           | title          | price  |
      +------------------+----------------+--------+
      | Достоевский Ф.М. | Идиот          | 460.00 |
      | Достоевский Ф.М. | Игрок          | 480.50 |
      | Булгаков М.А.    | Белая гвардия  | 540.50 |
      | Пушкин А.С.      | Евгений Онегин | 610.00 |
      +------------------+----------------+--------+
  Task:
  Вывести информацию (автора, книгу и количество) о тех книгах, количество экземпляров которых в таблице book не дублируется.
  Decision:
  SELECT author, title, amount
  FROM book
  WHERE amount IN(
      SELECT amount
      FROM book
      GROUP BY amount
      HAVING count(amount) = 1
  );
      +---------------+-----------------------+--------+
      | author        | title                 | amount |
      +---------------+-----------------------+--------+
      | Булгаков М.А. | Белая гвардия         | 5      |
      | Есенин С.А.   | Стихотворения и поэмы | 15     |
      +---------------+-----------------------+--------+
  Task:
  Вывести информацию о книгах(автор, название, цена), цена которых меньше самой большой из минимальных цен, вычисленных для каждого автора
  Decision:
  SELECT author, title, price
  FROM book
  WHERE price < ANY(
      SELECT MIN(price)
      FROM book
      GROUP BY author
  );
      +------------------+---------------+--------+
      | author           | title         | price  |
      +------------------+---------------+--------+
      | Булгаков М.А.    | Белая гвардия | 540.50 |
      | Достоевский Ф.М. | Идиот         | 460.00 |
      | Достоевский Ф.М. | Игрок         | 480.50 |
      +------------------+---------------+--------+
  Task:
  Посчитать сколько и каких экземпляров книг нужно заказать поставщикам, чтобы на складе стало одинаковое количество экземпляров каждой книги, равное значению самого большего количества экземпляров одной книги на складе. Вывести название книги, ее автора, текущее количество экземпляров на складе и количество заказываемых экземпляров книг. Последнему столбцу присвоить имя Заказ.
  Decision:
  SELECT title, author, amount,
        ABS(((SELECT MAX(amount) FROM book)-amount)) AS 'Заказ'
  FROM book
  WHERE amount  NOT IN (SELECT MAX(amount) FROM book);
      +-----------------------+------------------+--------+--------------------+
      | title                 | author           | amount | Среднее_количество |
      +-----------------------+------------------+--------+--------------------+
      | Мастер и Маргарита    | Булгаков М.А.    | 3      | 7                  |
      | Братья Карамазовы     | Достоевский Ф.М. | 3      | 7                  |
      | Стихотворения и поэмы | Есенин С.А.      | 15     | 7                  |
      +-----------------------+------------------+--------+--------------------+
  Task:
  Создать таблицу поставка (supply), которая имеет структуру:
  Поле    Тип, описание
  supply_id   INT PRIMARY KEY AUTO_INCREMENT
  title   VARCHAR(50)
  author  VARCHAR(30)
  price   DECIMAL(8, 2)
  amount  INT
  Decision:
  mysql> CREATE TABLE supply (
      -> supply_id INT PRIMARY KEY AUTO_INCREMENT,
      -> title VARCHAR(50),
      -> author VARCHAR(30),
      -> price DECIMAL(8,2),
      -> amount INT
      -> );
      Query OK, 0 rows affected (0.42 sec)
  mysql> SELECT * FROM supply;
      Empty set (0.00 sec)
  Task:
  Занесите в таблицу supply четыре записи, чтобы получилась следующая таблица
  supply_id   title   author  price   amount
  1   Лирика  Пастернак Б.Л.  518.99  2
  2   Черный человек      Есенин С.А.     570.20  6
  3   Белая гвардия   Булгаков М.А.   540.50  7
  4   Идиот   Достоевский Ф.М.    360.80  3
  Decision:
  mysql> INSERT INTO supply (title, author, price, amount)  VALUES ('Лирика', 'Пастернак Б.Л.', 518.99, 2), ('Черный человек', 'Есенин С.А.', 570.20, 6), ('Белая гвардия', 'Булгаков М.А.', 540.50, 7),
      -> ('Идиот', 'Достоевский Ф.М.', 360.80, 3);
      Query OK, 4 rows affected (0.18 sec)
      Records: 4  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM supply;
      +-----------+-----------------------------+-------------------------------+--------+--------+
      | supply_id | title                       | author                        | price  | amount |
      +-----------+-----------------------------+-------------------------------+--------+--------+
      |         1 | Лирика                      | Пастернак Б.Л.                | 518.99 |      2 |
      |         2 | Черный человек              | Есенин С.А.                   | 570.20 |      6 |
      |         3 | Белая гвардия               | Булгаков М.А.                 | 540.50 |      7 |
      |         4 | Идиот                       | Достоевский Ф.М.              | 360.80 |      3 |
      +-----------+-----------------------------+-------------------------------+--------+--------+
      4 rows in set (0.00 sec)
  Task:
  Добавить из таблицы supply в таблицу book, все книги, кроме книг, написанных Булгаковым М.А. и Достоевским Ф.М.
  Decision:
  mysql> SELECT * FROM book;
      +---------+------------------------------------------+-------------------------------+--------+--------+
      | book_id | title                                    | author                        | price  | amount |
      +---------+------------------------------------------+-------------------------------+--------+--------+
      |       1 | Мастер и Маргарита                       | Булгаков М.А.                 | 670.99 |      3 |
      |       2 | Белая гвардия                            | Булгаков М.А.                 | 540.50 |      5 |
      |       3 | Идиот                                    | Достоевский Ф.М.              | 460.00 |     10 |
      |       4 | Братья Карамазовы                        | Достоевский Ф.М.              | 799.01 |      2 |
      |       5 | Игрок                                    | Достоевский Ф.М.              | 480.50 |     10 |
      |       6 | Стихотворения и поэмы                    | Есенин С.А.                   | 650.00 |     15 |
      +---------+------------------------------------------+-------------------------------+--------+--------+
      6 rows in set (0.00 sec)
  mysql> SELECT * FROM supply;
      +-----------+-----------------------------+-------------------------------+--------+--------+
      | supply_id | title                       | author                        | price  | amount |
      +-----------+-----------------------------+-------------------------------+--------+--------+
      |         1 | Лирика                      | Пастернак Б.Л.                | 518.99 |      2 |
      |         2 | Черный человек              | Есенин С.А.                   | 570.20 |      6 |
      |         3 | Белая гвардия               | Булгаков М.А.                 | 540.50 |      7 |
      |         4 | Идиот                       | Достоевский Ф.М.              | 360.80 |      3 |
      +-----------+-----------------------------+-------------------------------+--------+--------+
      4 rows in set (0.00 sec)
  mysql> INSERT INTO book (title, author, price, amount)
      -> SELECT title, author, price, amount
      -> FROM supply
      -> where (author != 'Булгаков М.А.') and (author !='Достоевский Ф.М.');
      Query OK, 2 rows affected (0.12 sec)
      Records: 2  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM book;
      +---------+------------------------------------------+-------------------------------+--------+--------+
      | book_id | title                                    | author                        | price  | amount |
      +---------+------------------------------------------+-------------------------------+--------+--------+
      |       1 | Мастер и Маргарита                       | Булгаков М.А.                 | 670.99 |      3 |
      |       2 | Белая гвардия                            | Булгаков М.А.                 | 540.50 |      5 |
      |       3 | Идиот                                    | Достоевский Ф.М.              | 460.00 |     10 |
      |       4 | Братья Карамазовы                        | Достоевский Ф.М.              | 799.01 |      2 |
      |       5 | Игрок                                    | Достоевский Ф.М.              | 480.50 |     10 |
      |       6 | Стихотворения и поэмы                    | Есенин С.А.                   | 650.00 |     15 |
      |      17 | Лирика                                   | Пастернак Б.Л.                | 518.99 |      2 |
      |      18 | Черный человек                           | Есенин С.А.                   | 570.20 |      6 |
      +---------+------------------------------------------+-------------------------------+--------+--------+
      8 rows in set (0.01 sec)
  Task:
  Занести из таблицы supply в таблицу book только те книги, авторов которых нет в book.
  Decision:
  mysql> INSERT INTO book (title, author, price, amount)
      -> SELECT title, author, price, amount
      -> FROM supply
      -> WHERE author NOT IN (
      -> SELECT author
      -> FROM book
      -> );
      Query OK, 0 rows affected (0.02 sec)
      Records: 0  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM book;
      +---------+------------------------------------------+-------------------------------+--------+--------+
      | book_id | title                                    | author                        | price  | amount |
      +---------+------------------------------------------+-------------------------------+--------+--------+
      |       1 | Мастер и Маргарита                       | Булгаков М.А.                 | 670.99 |      3 |
      |       2 | Белая гвардия                            | Булгаков М.А.                 | 540.50 |      5 |
      |       3 | Идиот                                    | Достоевский Ф.М.              | 460.00 |     10 |
      |       4 | Братья Карамазовы                        | Достоевский Ф.М.              | 799.01 |      2 |
      |       5 | Игрок                                    | Достоевский Ф.М.              | 480.50 |     10 |
      |       6 | Стихотворения и поэмы                    | Есенин С.А.                   | 650.00 |     15 |
      |      17 | Лирика                                   | Пастернак Б.Л.                | 518.99 |      2 |
      |      18 | Черный человек                           | Есенин С.А.                   | 570.20 |      6 |
      +---------+------------------------------------------+-------------------------------+--------+--------+
      8 rows in set (0.00 sec)
  Task:
  Уменьшить на 10% цену тех книг в таблице book, количество которых принадлежит интервалу от 5 до 10, включая границы.
  Decision:
  mysql> UPDATE book  SET price = 0.9 * price  WHERE amount BETWEEN 5 AND 10;
  mysql> SELECT * FROM book;
      +---------+------------------------------------------+-------------------------------+--------+--------+
      | book_id | title                                    | author                        | price  | amount |
      +---------+------------------------------------------+-------------------------------+--------+--------+
      |       1 | Мастер и Маргарита                       | Булгаков М.А.                 | 670.99 |      3 |
      |       2 | Белая гвардия                            | Булгаков М.А.                 | 486.45 |      5 |
      |       3 | Идиот                                    | Достоевский Ф.М.              | 414.00 |     10 |
      |       4 | Братья Карамазовы                        | Достоевский Ф.М.              | 799.01 |      2 |
      |       5 | Игрок                                    | Достоевский Ф.М.              | 432.45 |     10 |
      |       6 | Стихотворения и поэмы                    | Есенин С.А.                   | 650.00 |     15 |
      |      17 | Лирика                                   | Пастернак Б.Л.                | 518.99 |      2 |
      |      18 | Черный человек                           | Есенин С.А.                   | 513.18 |      6 |
      +---------+------------------------------------------+-------------------------------+--------+--------+
      8 rows in set (0.00 sec)
  Task:
  В таблице book необходимо скорректировать значение для покупателя в столбце buy таким образом, чтобы оно не превышало количество экземпляров книг, указанных в столбце amount. А цену тех книг, которые покупатель не заказывал, снизить на 10%.
  Decision:
  mysql> update book
  set buy = if(buy>amount,amount,buy),
  price = if(buy=0, price * 0.9, price);
  mysql> SELECT * FROM book;
      +---------+-----------------------+------------------+--------+--------+-----+
      | book_id | title                 | author           | price  | amount | buy |
      +---------+-----------------------+------------------+--------+--------+-----+
      | 1       | Мастер и Маргарита    | Булгаков М.А.    | 670.99 | 3      | 0   |
      | 2       | Белая гвардия         | Булгаков М.А.    | 540.50 | 5      | 3   |
      | 3       | Идиот                 | Достоевский Ф.М. | 460.00 | 10     | 8   |
      | 4       | Братья Карамазовы     | Достоевский Ф.М. | 799.01 | 2      | 0   |
      | 5       | Стихотворения и поэмы | Есенин С.А.      | 650.00 | 15     | 18  |
      +---------+-----------------------+------------------+--------+--------+-----+
  Task:
  Для тех книг в таблице book , которые есть в таблице supply, не только увеличить их количество в таблице book ( увеличить их количество на значение столбца amount таблицы supply), но и пересчитать их цену (для каждой книги найти сумму цен из таблиц book и supply и разделить на 2).
  Decision:
  mysql> UPDATE book, supply
      -> SET book.price = (book.price + supply.price)/2, book.amount = book.amount + supply.amount
      -> WHERE book.title = supply.title AND book.author = supply.author;
      Query OK, 4 rows affected, 1 warning (0.05 sec)
      Rows matched: 4  Changed: 4  Warnings: 1
  mysql> SELECT * FROM book;
      +---------+------------------------------------------+-------------------------------+--------+--------+
      | book_id | title                                    | author                        | price  | amount |
      +---------+------------------------------------------+-------------------------------+--------+--------+
      |       1 | Мастер и Маргарита                       | Булгаков М.А.                 | 670.99 |      3 |
      |       2 | Белая гвардия                            | Булгаков М.А.                 | 513.48 |     12 |
      |       3 | Идиот                                    | Достоевский Ф.М.              | 387.40 |     13 |
      |       4 | Братья Карамазовы                        | Достоевский Ф.М.              | 799.01 |      2 |
      |       5 | Игрок                                    | Достоевский Ф.М.              | 432.45 |     10 |
      |       6 | Стихотворения и поэмы                    | Есенин С.А.                   | 650.00 |     15 |
      |      17 | Лирика                                   | Пастернак Б.Л.                | 518.99 |      4 |
      |      18 | Черный человек                           | Есенин С.А.                   | 541.69 |     12 |
      +---------+------------------------------------------+-------------------------------+--------+--------+
      8 rows in set (0.00 sec)
  Task:
  Удалить из таблицы supply книги тех авторов, общее количество экземпляров книг которых в таблице book превышает 10.
  Decision:
  mysql> SELECT * FROM book;
      +---------+------------------------------------------+-------------------------------+--------+--------+
      | book_id | title                                    | author                        | price  | amount |
      +---------+------------------------------------------+-------------------------------+--------+--------+
      |       1 | Мастер и Маргарита                       | Булгаков М.А.                 | 670.99 |      3 |
      |       2 | Белая гвардия                            | Булгаков М.А.                 | 513.48 |     12 |
      |       3 | Идиот                                    | Достоевский Ф.М.              | 387.40 |     13 |
      |       4 | Братья Карамазовы                        | Достоевский Ф.М.              | 799.01 |      2 |
      |       5 | Игрок                                    | Достоевский Ф.М.              | 432.45 |     10 |
      |       6 | Стихотворения и поэмы                    | Есенин С.А.                   | 650.00 |     15 |
      |      17 | Лирика                                   | Пастернак Б.Л.                | 518.99 |      4 |
      |      18 | Черный человек                           | Есенин С.А.                   | 541.69 |     12 |
      +---------+------------------------------------------+-------------------------------+--------+--------+
      8 rows in set (0.00 sec)
  mysql> SELECT * FROM supply;
      +-----------+-----------------------------+-------------------------------+--------+--------+
      | supply_id | title                       | author                        | price  | amount |
      +-----------+-----------------------------+-------------------------------+--------+--------+
      |         1 | Лирика                      | Пастернак Б.Л.                | 518.99 |      2 |
      |         2 | Черный человек              | Есенин С.А.                   | 570.20 |      6 |
      |         3 | Белая гвардия               | Булгаков М.А.                 | 540.50 |      7 |
      |         4 | Идиот                       | Достоевский Ф.М.              | 360.80 |      3 |
      +-----------+-----------------------------+-------------------------------+--------+--------+
      4 rows in set (0.00 sec)
  mysql> DELETE FROM supply
      -> WHERE author IN(SELECT author FROM book
      -> GROUP BY author HAVING SUM(amount)>10);
      Query OK, 3 rows affected (0.02 sec)
  mysql> SELECT * FROM supply;
      +-----------+--------------+---------------------------+--------+--------+
      | supply_id | title        | author                    | price  | amount |
      +-----------+--------------+---------------------------+--------+--------+
      |         1 | Лирика       | Пастернак Б.Л.            | 518.99 |      2 |
      +-----------+--------------+---------------------------+--------+--------+
      1 row in set (0.00 sec)
  Task:
  Создать таблицу заказ (ordering), куда включить авторов и названия тех книг, количество экземпляров которых в таблице book меньше среднего количества экземпляров книг в таблице book. В таблицу включить столбец   amount, в котором для всех книг указать одинаковое значение - среднее количество экземпляров книг в таблице book.
  Decision:
  mysql> Select * from supply;
      +-----------+--------------+---------------------------+--------+--------+
      | supply_id | title        | author                    | price  | amount |
      +-----------+--------------+---------------------------+--------+--------+
      |         1 | Лирика       | Пастернак Б.Л.            | 518.99 |      2 |
      +-----------+--------------+---------------------------+--------+--------+
      1 row in set (0.00 sec)
  mysql> SELECT * FROM book;
      +---------+------------------------------------------+-------------------------------+--------+--------+
      | book_id | title                                    | author                        | price  | amount |
      +---------+------------------------------------------+-------------------------------+--------+--------+
      |       1 | Мастер и Маргарита                       | Булгаков М.А.                 | 670.99 |      3 |
      |       2 | Белая гвардия                            | Булгаков М.А.                 | 513.48 |     12 |
      |       3 | Идиот                                    | Достоевский Ф.М.              | 387.40 |     13 |
      |       4 | Братья Карамазовы                        | Достоевский Ф.М.              | 799.01 |      2 |
      |       5 | Игрок                                    | Достоевский Ф.М.              | 432.45 |     10 |
      |       6 | Стихотворения и поэмы                    | Есенин С.А.                   | 650.00 |     15 |
      |      17 | Лирика                                   | Пастернак Б.Л.                | 518.99 |      4 |
      |      18 | Черный человек                           | Есенин С.А.                   | 541.69 |     12 |
      +---------+------------------------------------------+-------------------------------+--------+--------+
      8 rows in set (0.01 sec)
  mysql> CREATE TABLE ordering AS
      -> SELECT author, title,
      -> (
      -> SELECT ROUND(AVG(amount))
      -> FROM book
      -> ) AS amount
      -> FROM book
      -> WHERE amount < (SELECT AVG(amount) FROM book) ;
      Query OK, 3 rows affected (0.23 sec)
      Records: 3  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM ordering;
      +-------------------------------+------------------------------------+--------+
      | author                        | title                              | amount |
      +-------------------------------+------------------------------------+--------+
      | Булгаков М.А.                 | Мастер и Маргарита                 |      9 |
      | Достоевский Ф.М.              | Братья Карамазовы                  |      9 |
      | Пастернак Б.Л.                | Лирика                             |      9 |
      +-------------------------------+------------------------------------+--------+
      3 rows in set (0.00 sec)
  Task:
  Создать таблицу author следующей структуры:
  Поле            Тип, описание
  author_id       INT PRIMARY KEY AUTO_INCREMENT
  name_author     VARCHAR(50)
  Decision:
  mysql> CREATE TABLE author (
  author_id INT PRIMARY KEY AUTO_INCREMENT,
  name_author VARCHAR(50)
  );
      Query OK, 0 rows affected (0.92 sec)
  Task:
  Заполнить таблицу author. В нее включить следующих авторов:
  Булгаков М.А.
  Достоевский Ф.М.
  Есенин С.А.
  Пастернак Б.Л
  Decision:
  mysql> INSERT INTO author (name_author)  VALUES ('Булгаков М.А.'),
  ('Достоевский Ф.М.'),
  ('Есенин С.А.'),
  ('Пастернак Б.Л.');
      Query OK, 4 rows affected (1.08 sec)
      Records: 4  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM author;
      +-----------+-------------------------------+
      | author_id | name_author                   |
      +-----------+-------------------------------+
      |         1 | Булгаков М.А.                 |
      |         2 | Достоевский Ф.М.              |
      |         3 | Есенин С.А.                   |
      |         4 | Пастернак Б.Л.                |
      +-----------+-------------------------------+
      4 rows in set (0.01 sec)
  Task:
  Создадим таблицу genre следующей структуры.
  Поле        Тип, описание
  genre_id    INT PRIMARY KEY AUTO_INCREMENT
  name_genre  VARCHAR(30)
  Decision:
  mysql> CREATE TABLE genre(     genre_id INT PRIMARY KEY AUTO_INCREMENT,      name_genre VARCHAR(30) );
      Query OK, 0 rows affected (0.23 sec)
  Task:
  Вставим новую запись в таблицу genre
  В первых двух строках показана структура таблицы, далее - ее содержимое:
  genre_id                        name_genre
  INT PRIMARY KEY AUTO_INCREMENT  VARCHAR(30)
  1                               Роман
  Decision
  mysql> INSERT INTO genre (name_genre)
      -> VALUES ('Роман');
      Query OK, 1 row affected (0.06 sec)
  mysql> SELECT * FROM genre;
      +----------+------------+
      | genre_id | name_genre |
      +----------+------------+
      |        1 | Роман      |
      +----------+------------+
      1 row in set (0.00 sec)
  Task:
  Перепишите запрос на создание таблицы book , чтобы ее структура соответствовала структуре, показанной на логической схеме (таблица genre уже создана, порядок следования столбцов - как на логической схеме в таблице book, genre_id  - внешний ключ) . Для genre_id ограничение о недопустимости пустых значений не задавать. В качестве главной таблицы для описания поля  genre_idиспользовать таблицу genre следующей структуры:
  Поле        Тип, описание
  genre_id    INT PRIMARY KEY AUTO_INCREMENT
  name_genre  VARCHAR(30)
  Decision:
  mysql> SELECT * FROM author;
      +-----------+-------------------------------+
      | author_id | name_author                   |
      +-----------+-------------------------------+
      |         1 | Булгаков М.А.                 |
      |         2 | Достоевский Ф.М.              |
      |         3 | Есенин С.А.                   |
      |         4 | Пастернак Б.Л.                |
      +-----------+-------------------------------+
      4 rows in set (0.00 sec)
  mysql> SELECT * FROM genre;
      +----------+------------+
      | genre_id | name_genre |
      +----------+------------+
      |        1 | Роман      |
      +----------+------------+
      1 row in set (0.11 sec)
  mysql> CREATE TABLE book1 (
  book_id INT PRIMARY KEY AUTO_INCREMENT,
  title VARCHAR(50),
  author_id INT NOT NULL,
  genre_id INT,
  price DECIMAL(8,2),
  amount INT,
  FOREIGN KEY (author_id)  REFERENCES author (author_id),
  FOREIGN KEY (genre_id)  REFERENCES genre (genre_id)
  );
      Query OK, 0 rows affected (0.33 sec)
  mysql> DESCRIBE book1;
      +-----------+--------------+------+-----+---------+----------------+
      | Field     | Type         | Null | Key | Default | Extra          |
      +-----------+--------------+------+-----+---------+----------------+
      | book_id   | int          | NO   | PRI | NULL    | auto_increment |
      | title     | varchar(50)  | YES  |     | NULL    |                |
      | author_id | int          | NO   | MUL | NULL    |                |
      | genre_id  | int          | YES  | MUL | NULL    |                |
      | price     | decimal(8,2) | YES  |     | NULL    |                |
      | amount    | int          | YES  |     | NULL    |                |
      +-----------+--------------+------+-----+---------+----------------+
      6 rows in set (0.01 sec)
  mysql> SHOW COLUMNS FROM book1;
      +-----------+--------------+------+-----+---------+----------------+
      | Field     | Type         | Null | Key | Default | Extra          |
      +-----------+--------------+------+-----+---------+----------------+
      | book_id   | int          | NO   | PRI | NULL    | auto_increment |
      | title     | varchar(50)  | YES  |     | NULL    |                |
      | author_id | int          | NO   | MUL | NULL    |                |
      | genre_id  | int          | YES  | MUL | NULL    |                |
      | price     | decimal(8,2) | YES  |     | NULL    |                |
      | amount    | int          | YES  |     | NULL    |                |
      +-----------+--------------+------+-----+---------+----------------+
      6 rows in set (0.01 sec)
  Task:
  Создать таблицу book той же структуры, что и на предыдущем шаге. Будем считать, что при удалении автора из таблицы author, должны удаляться все записи о книгах из таблицы book, написанные этим автором. А при удалении жанра из таблицы genre для соответствующей записи book установить значение Null в столбце genre_id.
  Decision:
  mysql> CREATE TABLE book2 (
  book_id INT PRIMARY KEY AUTO_INCREMENT,
  title VARCHAR(50),
  author_id INT NOT NULL,
  genre_id INT,
  price DECIMAL(8,2),
  amount INT,
  FOREIGN KEY (author_id)  REFERENCES author (author_id) ON DELETE CASCADE,
  FOREIGN KEY (genre_id)  REFERENCES genre (genre_id) ON DELETE SET NULL
  );
      Query OK, 0 rows affected (0.28 sec)
  mysql> SHOW COLUMNS FROM book2;
      +-----------+--------------+------+-----+---------+----------------+
      | Field     | Type         | Null | Key | Default | Extra          |
      +-----------+--------------+------+-----+---------+----------------+
      | book_id   | int          | NO   | PRI | NULL    | auto_increment |
      | title     | varchar(50)  | YES  |     | NULL    |                |
      | author_id | int          | NO   | MUL | NULL    |                |
      | genre_id  | int          | YES  | MUL | NULL    |                |
      | price     | decimal(8,2) | YES  |     | NULL    |                |
      | amount    | int          | YES  |     | NULL    |                |
      +-----------+--------------+------+-----+---------+----------------+
      6 rows in set (0.01 sec)
  Task:
  На предыдущих шагах были созданы и заполнены таблицы author:
  author_id   name_author
  1   Булгаков М.А.
  2   Достоевский Ф.М.
  3   Есенин С.А.
  4   Пастернак Б.Л.
  и  genre:
  genre_id    name_genre
  1   Роман
  2   Поэзия
  Добавьте три последние записи (с ключевыми значениями 6, 7, 8) в таблицу book:
  book_id     title           author_id   genre_id    price   amount
  1   Мастер и Маргарита      1           1   670.99  3
  2   Белая гвардия           1           1   540.50  5
  3   Идиот                   2           1   460.00  10
  4   Братья Карамазовы       2           1   799.01  3
  5   Игрок                   2           1   480.50  10
  6   Стихотворения и поэмы   3           2   650.00  15
  7   Черный человек          3           2   570.20  6
  8   Лирика                  4           2   518.99  2
  Decision:
  mysql> SELECT * FROM genre;
      +----------+------------+
      | genre_id | name_genre |
      +----------+------------+
      |        1 | Роман      |
      +----------+------------+
      1 row in set (0.00 sec)
  mysql> SELECT * FROM author;
      +-----------+-------------------------------+
      | author_id | name_author                   |
      +-----------+-------------------------------+
      |         1 | Булгаков М.А.                 |
      |         2 | Достоевский Ф.М.              |
      |         3 | Есенин С.А.                   |
      |         4 | Пастернак Б.Л.                |
      +-----------+-------------------------------+
      4 rows in set (0.00 sec)
  mysql> SHOW COLUMNS FROM book2;
      +-----------+--------------+------+-----+---------+----------------+
      | Field     | Type         | Null | Key | Default | Extra          |
      +-----------+--------------+------+-----+---------+----------------+
      | book_id   | int          | NO   | PRI | NULL    | auto_increment |
      | title     | varchar(50)  | YES  |     | NULL    |                |
      | author_id | int          | NO   | MUL | NULL    |                |
      | genre_id  | int          | YES  | MUL | NULL    |                |
      | price     | decimal(8,2) | YES  |     | NULL    |                |
      | amount    | int          | YES  |     | NULL    |                |
      +-----------+--------------+------+-----+---------+----------------+
      6 rows in set (0.00 sec)
  mysql> INSERT INTO book2 (title, author_id, genre_id, price, amount) VALUES ('Мастер и Маргарита', 1, 1, 670.99, 3),('Белая гвардия', 1, 1, 540.50, 5),('Идиот', 2, 1, 460.00, 10),('Братья Карамазовы', 2, 1, 799.01, 3),('Игрок', 2, 1, 480.50, 10);
      Query OK, 5 rows affected (0.12 sec)
      Records: 5  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM book2;
      +---------+------------------------------------+-----------+----------+--------+--------+
      | book_id | title                              | author_id | genre_id | price  | amount |
      +---------+------------------------------------+-----------+----------+--------+--------+
      |       9 | Мастер и Маргарита                 |         1 |        1 | 670.99 |      3 |
      |      10 | Белая гвардия                      |         1 |        1 | 540.50 |      5 |
      |      11 | Идиот                              |         2 |        1 | 460.00 |     10 |
      |      12 | Братья Карамазовы                  |         2 |        1 | 799.01 |      3 |
      |      13 | Игрок                              |         2 |        1 | 480.50 |     10 |
      +---------+------------------------------------+-----------+----------+--------+--------+
      5 rows in set (0.00 sec)
  mysql> INSERT INTO genre (name_genre) VALUES ('Поэзия');
      Query OK, 1 row affected (0.08 sec)
  mysql> SELECT * FROM genre;
      +----------+--------------+
      | genre_id | name_genre   |
      +----------+--------------+
      |        1 | Роман        |
      |        2 | Поэзия       |
      +----------+--------------+
      2 rows in set (0.00 sec)
  mysql> INSERT INTO book2 (title, author_id, genre_id, price, amount) VALUES ('Стихотворения и поэмы', 3, 2, 650.00, 15);
      Query OK, 1 row affected (0.08 sec)
  mysql> SELECT * FROM book2;
      +---------+------------------------------------------+-----------+----------+--------+--------+
      | book_id | title                                    | author_id | genre_id | price  | amount |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      |       9 | Мастер и Маргарита                       |         1 |        1 | 670.99 |      3 |
      |      10 | Белая гвардия                            |         1 |        1 | 540.50 |      5 |
      |      11 | Идиот                                    |         2 |        1 | 460.00 |     10 |
      |      12 | Братья Карамазовы                        |         2 |        1 | 799.01 |      3 |
      |      13 | Игрок                                    |         2 |        1 | 480.50 |     10 |
      |      14 | Стихотворения и поэмы                    |         3 |        2 | 650.00 |     15 |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      6 rows in set (0.00 sec)
  mysql> INSERT INTO book2 (title, author_id, genre_id, price, amount) VALUES ('Черный человек', 3, 2, 570.20, 6), ('Лирика', 4, 2, 518.99, 2);
      Query OK, 2 rows affected (0.12 sec)
      Records: 2  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM book2;
      +---------+------------------------------------------+-----------+----------+--------+--------+
      | book_id | title                                    | author_id | genre_id | price  | amount |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      |       9 | Мастер и Маргарита                       |         1 |        1 | 670.99 |      3 |
      |      10 | Белая гвардия                            |         1 |        1 | 540.50 |      5 |
      |      11 | Идиот                                    |         2 |        1 | 460.00 |     10 |
      |      12 | Братья Карамазовы                        |         2 |        1 | 799.01 |      3 |
      |      13 | Игрок                                    |         2 |        1 | 480.50 |     10 |
      |      14 | Стихотворения и поэмы                    |         3 |        2 | 650.00 |     15 |
      |      15 | Черный человек                           |         3 |        2 | 570.20 |      6 |
      |      16 | Лирика                                   |         4 |        2 | 518.99 |      2 |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      8 rows in set (0.00 sec)
  Task:
  Вывести название, жанр и цену тех книг, количество которых больше 8, в отсортированном по убыванию цены виде.
  Decision:
  mysql> SELECT * FROM genre;
      +----------+--------------+
      | genre_id | name_genre   |
      +----------+--------------+
      |        1 | Роман        |
      |        2 | Поэзия       |
      +----------+--------------+
      2 rows in set (0.27 sec)
  mysql> INSERT INTO genre (name_genre)
  VALUES ('Приключения');
      Query OK, 1 row affected (0.75 sec)
  mysql> SELECT * FROM genre;
      +----------+------------------------+
      | genre_id | name_genre             |
      +----------+------------------------+
      |        1 | Роман                  |
      |        2 | Поэзия                 |
      |        3 | Приключения            |
      +----------+------------------------+
      3 rows in set (0.01 sec)
  mysql> SELECT * FROM author;
      +-----------+-------------------------------+
      | author_id | name_author                   |
      +-----------+-------------------------------+
      |         1 | Булгаков М.А.                 |
      |         2 | Достоевский Ф.М.              |
      |         3 | Есенин С.А.                   |
      |         4 | Пастернак Б.Л.                |
      +-----------+-------------------------------+
      4 rows in set (0.23 sec)
  mysql> INSERT INTO author (name_author) VALUES ('Лермонтов М.Ю.');
      Query OK, 1 row affected (0.02 sec)
  mysql> SELECT * FROM author;
      +-----------+-------------------------------+
      | author_id | name_author                   |
      +-----------+-------------------------------+
      |         1 | Булгаков М.А.                 |
      |         2 | Достоевский Ф.М.              |
      |         3 | Есенин С.А.                   |
      |         4 | Пастернак Б.Л.                |
      |         5 | Лермонтов М.Ю.                |
      +-----------+-------------------------------+
      5 rows in set (0.00 sec)
  mysql> SELECT * FROM book2;
      +---------+------------------------------------------+-----------+----------+--------+--------+
      | book_id | title                                    | author_id | genre_id | price  | amount |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      |       9 | Мастер и Маргарита                       |         1 |        1 | 670.99 |      3 |
      |      10 | Белая гвардия                            |         1 |        1 | 540.50 |      5 |
      |      11 | Идиот                                    |         2 |        1 | 460.00 |     10 |
      |      12 | Братья Карамазовы                        |         2 |        1 | 799.01 |      3 |
      |      13 | Игрок                                    |         2 |        1 | 480.50 |     10 |
      |      14 | Стихотворения и поэмы                    |         3 |        2 | 650.00 |     15 |
      |      15 | Черный человек                           |         3 |        2 | 570.20 |      6 |
      |      16 | Лирика                                   |         4 |        2 | 518.99 |      2 |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      8 rows in set (0.05 sec)
  mysql> SELECT title, name_genre, price
  FROM genre INNER JOIN book2
  ON book2.genre_id = genre.genre_id
  WHERE amount>8
  ORDER BY price DESC;
      +------------------------------------------+--------------+--------+
      | title                                    | name_genre   | price  |
      +------------------------------------------+--------------+--------+
      | Стихотворения и поэмы                    | Поэзия       | 650.00 |
      | Игрок                                    | Роман        | 480.50 |
      | Идиот                                    | Роман        | 460.00 |
      +------------------------------------------+--------------+--------+
      3 rows in set (0.00 sec)
  Task:
  Вывести все жанры, которые не представлены в книгах на складе.
  Decision:
  mysql> SELECT * FROM book2;
      +---------+------------------------------------------+-----------+----------+--------+--------+
      | book_id | title                                    | author_id | genre_id | price  | amount |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      |       9 | Мастер и Маргарита                       |         1 |        1 | 670.99 |      3 |
      |      10 | Белая гвардия                            |         1 |        1 | 540.50 |      5 |
      |      11 | Идиот                                    |         2 |        1 | 460.00 |     10 |
      |      12 | Братья Карамазовы                        |         2 |        1 | 799.01 |      3 |
      |      13 | Игрок                                    |         2 |        1 | 480.50 |     10 |
      |      14 | Стихотворения и поэмы                    |         3 |        2 | 650.00 |     15 |
      |      15 | Черный человек                           |         3 |        2 | 570.20 |      6 |
      |      16 | Лирика                                   |         4 |        2 | 518.99 |      2 |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      8 rows in set (0.00 sec)
  mysql> SELECT * FROM author;
      +-----------+-------------------------------+
      | author_id | name_author                   |
      +-----------+-------------------------------+
      |         1 | Булгаков М.А.                 |
      |         2 | Достоевский Ф.М.              |
      |         3 | Есенин С.А.                   |
      |         4 | Пастернак Б.Л.                |
      |         5 | Лермонтов М.Ю.                |
      +-----------+-------------------------------+
      5 rows in set (0.00 sec)
  mysql> SELECT * FROM genre;
      +----------+------------------------+
      | genre_id | name_genre             |
      +----------+------------------------+
      |        1 | Роман                  |
      |        2 | Поэзия                 |
      |        3 | Приключения            |
      +----------+------------------------+
      3 rows in set (0.00 sec)
  mysql> SELECT name_genre
  FROM genre LEFT JOIN  book2
  ON book2.genre_id=genre.genre_id
  WHERE book2.genre_id IS NULL;
      +------------------------+
      | name_genre             |
      +------------------------+
      | Приключения            |
      +------------------------+
      1 row in set (0.00 sec)
  Task:
  Есть список городов, хранящийся в таблице city:
  city_id     name_city
  1   Москва
  2   Санкт-Петербург
  3   Владивосток
  Необходимо в каждом городе провести выставку книг каждого автора в течение 2020 года. Дату проведения выставки выбрать случайным образом. Создать запрос, который выведет город, автора и дату проведения выставки. Последний столбец назвать Дата. Информацию вывести, отсортировав сначала в алфавитном порядке по названиям городов, а потом по убыванию дат проведения выставок.
  Decision:
  mysql> SELECT * FROM city;
      ERROR 1146 (42S02): Table 'testbdserver.city' doesn't exist
  mysql> CREATE TABLE city(
      book_id SERIAL PRIMARY KEY,
      name_city VARCHAR(30)
  );
      Query OK, 0 rows affected (0.54 sec)
  mysql> INSERT INTO city (name_city) VALUES ('Москва'), ('Санкт-Петербург'), ('Владивосток');
      Query OK, 3 rows affected (0.33 sec)
      Records: 3  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM city;
      +---------+-------------------------------+
      | book_id | name_city                     |
      +---------+-------------------------------+
      |       1 | Москва                        |
      |       2 | Санкт-Петербург               |
      |       3 | Владивосток                   |
      +---------+-------------------------------+
      3 rows in set (0.01 sec)
  mysql> SELECT * FROM genre;
      +----------+------------------------+
      | genre_id | name_genre             |
      +----------+------------------------+
      |        1 | Роман                  |
      |        2 | Поэзия                 |
      |        3 | Приключения            |
      +----------+------------------------+
      3 rows in set (0.00 sec)
  mysql> SELECT * FROM author;
      +-----------+-------------------------------+
      | author_id | name_author                   |
      +-----------+-------------------------------+
      |         1 | Булгаков М.А.                 |
      |         2 | Достоевский Ф.М.              |
      |         3 | Есенин С.А.                   |
      |         4 | Пастернак Б.Л.                |
      |         5 | Лермонтов М.Ю.                |
      +-----------+-------------------------------+
      5 rows in set (0.00 sec)
  mysql> SELECT * FROM book2;
      +---------+------------------------------------------+-----------+----------+--------+--------+
      | book_id | title                                    | author_id | genre_id | price  | amount |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      |       9 | Мастер и Маргарита                       |         1 |        1 | 670.99 |      3 |
      |      10 | Белая гвардия                            |         1 |        1 | 540.50 |      5 |
      |      11 | Идиот                                    |         2 |        1 | 460.00 |     10 |
      |      12 | Братья Карамазовы                        |         2 |        1 | 799.01 |      3 |
      |      13 | Игрок                                    |         2 |        1 | 480.50 |     10 |
      |      14 | Стихотворения и поэмы                    |         3 |        2 | 650.00 |     15 |
      |      15 | Черный человек                           |         3 |        2 | 570.20 |      6 |
      |      16 | Лирика                                   |         4 |        2 | 518.99 |      2 |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      8 rows in set (0.00 sec)
  mysql> SELECT name_city, name_author, DATE_ADD('2020-01-01', INTERVAL FLOOR(RAND()*365) DAY) AS Дата
  FROM city CROSS JOIN author
  ORDER BY name_city ASC, Дата DESC;
      +-------------------------------+-------------------------------+------------+
      | name_city                     | name_author                   | Дата       |
      +-------------------------------+-------------------------------+------------+
      | Владивосток                   | Булгаков М.А.                 | 2020-10-23 |
      | Владивосток                   | Есенин С.А.                   | 2020-06-19 |
      | Владивосток                   | Пастернак Б.Л.                | 2020-05-29 |
      | Владивосток                   | Достоевский Ф.М.              | 2020-04-30 |
      | Владивосток                   | Лермонтов М.Ю.                | 2020-01-30 |
      | Москва                        | Достоевский Ф.М.              | 2020-12-02 |
      | Москва                        | Пастернак Б.Л.                | 2020-09-07 |
      | Москва                        | Лермонтов М.Ю.                | 2020-06-30 |
      | Москва                        | Есенин С.А.                   | 2020-06-02 |
      | Москва                        | Булгаков М.А.                 | 2020-02-02 |
      | Санкт-Петербург               | Пастернак Б.Л.                | 2020-10-12 |
      | Санкт-Петербург               | Булгаков М.А.                 | 2020-09-14 |
      | Санкт-Петербург               | Есенин С.А.                   | 2020-07-24 |
      | Санкт-Петербург               | Достоевский Ф.М.              | 2020-05-19 |
      | Санкт-Петербург               | Лермонтов М.Ю.                | 2020-05-07 |
      +-------------------------------+-------------------------------+------------+
      15 rows in set (0.03 sec)
  Task:
  Вывести информацию о книгах (жанр, книга, автор), относящихся к жанру, включающему слово роман» в отсортированном по названиям книг виде.
  Decision:
  mysql> SELECT name_genre, title, name_author
  FROM genre
  INNER JOIN book2 ON genre.genre_id = book2.genre_id
  INNER JOIN author ON author.author_id = book2.author_id
  WHERE name_genre="роман"
  ORDER BY title;
      +------------+------------------------------------+-------------------------------+
      | name_genre | title                              | name_author                   |
      +------------+------------------------------------+-------------------------------+
      | Роман      | Белая гвардия                      | Булгаков М.А.                 |
      | Роман      | Братья Карамазовы                  | Достоевский Ф.М.              |
      | Роман      | Игрок                              | Достоевский Ф.М.              |
      | Роман      | Идиот                              | Достоевский Ф.М.              |
      | Роман      | Мастер и Маргарита                 | Булгаков М.А.                 |
      +------------+------------------------------------+-------------------------------+
      5 rows in set (0.00 sec)
  Task:
  Посчитать количество экземпляров  книг каждого автора из таблицы author.  Вывести тех авторов,  количество книг которых меньше 10, в отсортированном по возрастанию количества виде. Последний столбец назвать Количество.
  Decision:
  mysql> SELECT name_author, IF(SUM(amount) IS NULL, NULL, SUM(amount)) AS Количество
  FROM
  author LEFT JOIN book2
  ON author.author_id = book2.author_id
  GROUP BY name_author
  HAVING  Количество < 10 or COUNT(title) = 0
  ORDER BY Количество;
      +---------------------------+----------------------+
      | name_author               | Количество           |
      +---------------------------+----------------------+
      | Лермонтов М.Ю.            |                 NULL |
      | Пастернак Б.Л.            |                    2 |
      | Булгаков М.А.             |                    8 |
      +---------------------------+----------------------+
      3 rows in set (0.00 sec)
  Task:
  Вывести в алфавитном порядке всех авторов, которые пишут только в одном жанре. Поскольку у нас в таблицах так занесены данные, что у каждого автора книги только в одном жанре,  для этого запроса внесем изменения в таблицу book. Пусть у нас  книга Есенина Черный человек» относится к жанру Роман», а книга Булгакова Белая гвардия» к Приключениям» (эти изменения в таблицы уже внесены).
  Decision:
  mysql> SELECT * FROM book2;
      +---------+------------------------------------------+-----------+----------+--------+--------+
      | book_id | title                                    | author_id | genre_id | price  | amount |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      |       9 | Мастер и Маргарита                       |         1 |        1 | 670.99 |      3 |
      |      10 | Белая гвардия                            |         1 |        1 | 540.50 |      5 |
      |      11 | Идиот                                    |         2 |        1 | 460.00 |     10 |
      |      12 | Братья Карамазовы                        |         2 |        1 | 799.01 |      3 |
      |      13 | Игрок                                    |         2 |        1 | 480.50 |     10 |
      |      14 | Стихотворения и поэмы                    |         3 |        2 | 650.00 |     15 |
      |      15 | Черный человек                           |         3 |        2 | 570.20 |      6 |
      |      16 | Лирика                                   |         4 |        2 | 518.99 |      2 |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      8 rows in set (0.00 sec)
  mysql> SELECT * FROM author;
      +-----------+-------------------------------+
      | author_id | name_author                   |
      +-----------+-------------------------------+
      |         1 | Булгаков М.А.                 |
      |         2 | Достоевский Ф.М.              |
      |         3 | Есенин С.А.                   |
      |         4 | Пастернак Б.Л.                |
      |         5 | Лермонтов М.Ю.                |
      +-----------+-------------------------------+
      5 rows in set (0.00 sec)
  mysql> SELECT * FROM genre;
      +----------+------------------------+
      | genre_id | name_genre             |
      +----------+------------------------+
      |        1 | Роман                  |
      |        2 | Поэзия                 |
      |        3 | Приключения            |
      +----------+------------------------+
      3 rows in set (0.00 sec)
  mysql> UPDATE book2 SET genre_id=1 WHERE book_id=15;
      Query OK, 1 row affected (0.17 sec)
      Rows matched: 1  Changed: 1  Warnings: 0
  mysql> SELECT * FROM book2;
      +---------+------------------------------------------+-----------+----------+--------+--------+
      | book_id | title                                    | author_id | genre_id | price  | amount |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      |       9 | Мастер и Маргарита                       |         1 |        1 | 670.99 |      3 |
      |      10 | Белая гвардия                            |         1 |        1 | 540.50 |      5 |
      |      11 | Идиот                                    |         2 |        1 | 460.00 |     10 |
      |      12 | Братья Карамазовы                        |         2 |        1 | 799.01 |      3 |
      |      13 | Игрок                                    |         2 |        1 | 480.50 |     10 |
      |      14 | Стихотворения и поэмы                    |         3 |        2 | 650.00 |     15 |
      |      15 | Черный человек                           |         3 |        1 | 570.20 |      6 |
      |      16 | Лирика                                   |         4 |        2 | 518.99 |      2 |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      8 rows in set (0.00 sec)
  mysql> UPDATE book2 SET genre_id=3 WHERE book_id=10;
      Query OK, 1 row affected (0.12 sec)
      Rows matched: 1  Changed: 1  Warnings: 0
  mysql> SELECT * FROM book2;
      +---------+------------------------------------------+-----------+----------+--------+--------+
      | book_id | title                                    | author_id | genre_id | price  | amount |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      |       9 | Мастер и Маргарита                       |         1 |        1 | 670.99 |      3 |
      |      10 | Белая гвардия                            |         1 |        3 | 540.50 |      5 |
      |      11 | Идиот                                    |         2 |        1 | 460.00 |     10 |
      |      12 | Братья Карамазовы                        |         2 |        1 | 799.01 |      3 |
      |      13 | Игрок                                    |         2 |        1 | 480.50 |     10 |
      |      14 | Стихотворения и поэмы                    |         3 |        2 | 650.00 |     15 |
      |      15 | Черный человек                           |         3 |        1 | 570.20 |      6 |
      |      16 | Лирика                                   |         4 |        2 | 518.99 |      2 |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      8 rows in set (0.00 sec)
  mysql> SELECT DISTINCT author_id, genre_id
  FROM book2;
      +-----------+----------+
      | author_id | genre_id |
      +-----------+----------+
      |         1 |        1 |
      |         1 |        3 |
      |         2 |        1 |
      |         3 |        2 |
      |         3 |        1 |
      |         4 |        2 |
      +-----------+----------+
      6 rows in set (0.00 sec)
  mysql> SELECT author_id, COUNT(genre_id) AS genre_count
  FROM (
  SELECT DISTINCT author_id, genre_id
  FROM book2
  ) q1
  GROUP BY author_id
  HAVING genre_count = 1;
      +-----------+-------------+
      | author_id | genre_count |
      +-----------+-------------+
      |         2 |           1 |
      |         4 |           1 |
      +-----------+-------------+
      2 rows in set (0.00 sec)
  mysql> SELECT name_author
  FROM author INNER JOIN (
  SELECT author_id, COUNT(genre_id) AS genre_count
  FROM (
  SELECT DISTINCT author_id, genre_id
  FROM book2
  ) q1
  GROUP BY author_id
  HAVING genre_count = 1) q2
  ON author.author_id = q2.author_id;
      +-------------------------------+
      | name_author                   |
      +-------------------------------+
      | Достоевский Ф.М.              |
      | Пастернак Б.Л.                |
      +-------------------------------+
      2 rows in set (0.00 sec)
  Task:
  Вывести информацию о книгах (название книги, фамилию и инициалы автора, название жанра, цену и количество экземпляров книги), написанных в самых популярных жанрах, в отсортированном в алфавитном порядке по названию книг виде. Самым популярным считать жанр, общее количество экземпляров книг которого на складе максимально.
  Decision:
  mysql> SELECT genre_id, SUM(amount) AS sum_amount
  FROM book2
  GROUP BY genre_id;
      +----------+------------+
      | genre_id | sum_amount |
      +----------+------------+
      |        1 |         32 |
      |        2 |         17 |
      |        3 |          5 |
      +----------+------------+
      3 rows in set (0.00 sec)
  mysql> SELECT genre_id, SUM(amount) AS sum_amount
  FROM book2
  GROUP BY genre_id
  ORDER BY sum_amount DESC
  LIMIT 1;
      +----------+------------+
      | genre_id | sum_amount |
      +----------+------------+
      |        1 |         32 |
      +----------+------------+
      1 row in set (0.00 sec)
  mysql> SELECT query_in_1.genre_id
  FROM (
  SELECT genre_id, SUM(amount) AS sum_amount
  FROM book2
  GROUP BY genre_id
  )query_in_1 INNER JOIN (
  SELECT genre_id, SUM(amount) AS sum_amount
  FROM book2
  GROUP BY genre_id
  ORDER BY sum_amount DESC
  LIMIT 1
  )
  query_in_2
  ON query_in_1.sum_amount= query_in_2.sum_amount;
      +----------+
      | genre_id |
      +----------+
      |        1 |
      +----------+
      1 row in set (0.00 sec)
  mysql> SELECT  title, name_author, name_genre, price, amount
  FROM
  author
  INNER JOIN book2 ON author.author_id = book2.author_id
  INNER JOIN genre ON  book2.genre_id = genre.genre_id
  WHERE genre.genre_id IN(
  SELECT query_in_1.genre_id
  FROM (
  SELECT genre_id, SUM(amount) AS sum_amount
  FROM book2
  GROUP BY genre_id
  )query_in_1 INNER JOIN (
  SELECT genre_id, SUM(amount) AS sum_amount
  FROM book2
  GROUP BY genre_id
  ORDER BY sum_amount DESC
  LIMIT 1
  )
  query_in_2 ON query_in_1.sum_amount= query_in_2.sum_amount)
  ORDER BY title ASC;
      +------------------------------------+-------------------------------+------------+--------+--------+
      | title                              | name_author                   | name_genre | price  | amount |
      +------------------------------------+-------------------------------+------------+--------+--------+
      | Братья Карамазовы                  | Достоевский Ф.М.              | Роман      | 799.01 |      3 |
      | Игрок                              | Достоевский Ф.М.              | Роман      | 480.50 |     10 |
      | Идиот                              | Достоевский Ф.М.              | Роман      | 460.00 |     10 |
      | Мастер и Маргарита                 | Булгаков М.А.                 | Роман      | 670.99 |      3 |
      | Черный человек                     | Есенин С.А.                   | Роман      | 570.20 |      6 |
      +------------------------------------+-------------------------------+------------+--------+--------+
      5 rows in set (0.11 sec)
  Task:
  Если в таблицах supply  и book есть одинаковые книги, которые имеют равную цену,  вывести их название и автора, а также посчитать общее количество экземпляров книг в таблицах supply и book,  столбцы назвать Название, Автор  и Количество.
  Decision:
  mysql> SELECT * FROM supply;
      +-----------+--------------+---------------------------+--------+--------+
      | supply_id | title        | author                    | price  | amount |
      +-----------+--------------+---------------------------+--------+--------+
      |         1 | Лирика       | Пастернак Б.Л.            | 518.99 |      2 |
      +-----------+--------------+---------------------------+--------+--------+
      1 row in set (0.10 sec)
  mysql> DELETE FROM supply
  WHERE title='Лирика';
      Query OK, 1 row affected (0.03 sec)
  mysql> INSERT INTO supply (title, author, price, amount)VALUES
  ('Доктор Живаго', 'Пастернак Б.Л.', 618.99, 3),
  ('Черный человек', 'Есенин С.А.', 570.20, 6),
  ('Евгений Онегин', 'Пушкин А.С.', 440.80, 5),
  ('Идиот', 'Достоевский Ф.М.', 360.80, 3);
      Query OK, 4 rows affected (0.03 sec)
      Records: 4  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM supply;
      +-----------+-----------------------------+-------------------------------+--------+--------+
      | supply_id | title                       | author                        | price  | amount |
      +-----------+-----------------------------+-------------------------------+--------+--------+
      |         5 | Доктор Живаго               | Пастернак Б.Л.                | 618.99 |      3 |
      |         6 | Черный человек              | Есенин С.А.                   | 570.20 |      6 |
      |         7 | Евгений Онегин              | Пушкин А.С.                   | 440.80 |      5 |
      |         8 | Идиот                       | Достоевский Ф.М.              | 360.80 |      3 |
      +-----------+-----------------------------+-------------------------------+--------+--------+
      4 rows in set (0.00 sec)
  mysql> SELECT * FROM author;
      +-----------+-------------------------------+
      | author_id | name_author                   |
      +-----------+-------------------------------+
      |         1 | Булгаков М.А.                 |
      |         2 | Достоевский Ф.М.              |
      |         3 | Есенин С.А.                   |
      |         4 | Пастернак Б.Л.                |
      |         5 | Лермонтов М.Ю.                |
      +-----------+-------------------------------+
      5 rows in set (0.00 sec)
  mysql> SELECT * FROM book2;
      +---------+------------------------------------------+-----------+----------+--------+--------+
      | book_id | title                                    | author_id | genre_id | price  | amount |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      |       9 | Мастер и Маргарита                       |         1 |        1 | 670.99 |      3 |
      |      10 | Белая гвардия                            |         1 |        3 | 540.50 |      5 |
      |      11 | Идиот                                    |         2 |        1 | 460.00 |     10 |
      |      12 | Братья Карамазовы                        |         2 |        1 | 799.01 |      3 |
      |      13 | Игрок                                    |         2 |        1 | 480.50 |     10 |
      |      14 | Стихотворения и поэмы                    |         3 |        2 | 650.00 |     15 |
      |      15 | Черный человек                           |         3 |        1 | 570.20 |      6 |
      |      16 | Лирика                                   |         4 |        2 | 518.99 |      2 |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      8 rows in set (0.00 sec)
  mysql> SELECT book2.title as Название, name_author as Автор, sum(book2.amount + supply.amount) as Количество
  FROM
  author
  INNER JOIN book2 USING (author_id)
  INNER JOIN supply ON book2.title = supply.title AND author.name_author = supply.author
  WHERE book2.price = supply.price
  GROUP BY book2.title, name_author;
      +-----------------------------+---------------------+----------------------+
      | Название                    | Автор               | Количество           |
      +-----------------------------+---------------------+----------------------+
      | Черный человек              | Есенин С.А.         |                   12 |
      +-----------------------------+---------------------+----------------------+
      1 row in set (0.00 sec)
  Task:
  Для книг, которые уже есть на складе (в таблице book), но по другой цене, чем в поставке (supply),  необходимо в таблице book увеличить количество на значение, указанное в поставке,  и пересчитать цену. А в таблице  supply обнулить количество этих книг. Формула для пересчета цены:
      price=(p1∗k1+p2∗k2)/(k1+k2)
  где  p1, p2 - цена книги в таблицах book и supply;
  k1, k2 - количество книг в таблицах book и supply.
  Decision:
  mysql> SELECT * FROM book2;
      +---------+------------------------------------------+-----------+----------+--------+--------+
      | book_id | title                                    | author_id | genre_id | price  | amount |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      |       9 | Мастер и Маргарита                       |         1 |        1 | 670.99 |      3 |
      |      10 | Белая гвардия                            |         1 |        3 | 540.50 |      5 |
      |      11 | Идиот                                    |         2 |        1 | 460.00 |     10 |
      |      12 | Братья Карамазовы                        |         2 |        1 | 799.01 |      3 |
      |      13 | Игрок                                    |         2 |        1 | 480.50 |     10 |
      |      14 | Стихотворения и поэмы                    |         3 |        2 | 650.00 |     15 |
      |      15 | Черный человек                           |         3 |        1 | 570.20 |      6 |
      |      16 | Лирика                                   |         4 |        2 | 518.99 |      2 |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      8 rows in set (0.00 sec)
  mysql> SELECT * FROM supply;
      +-----------+-----------------------------+-------------------------------+--------+--------+
      | supply_id | title                       | author                        | price  | amount |
      +-----------+-----------------------------+-------------------------------+--------+--------+
      |         5 | Доктор Живаго               | Пастернак Б.Л.                | 618.99 |      3 |
      |         6 | Черный человек              | Есенин С.А.                   | 570.20 |      6 |
      |         7 | Евгений Онегин              | Пушкин А.С.                   | 440.80 |      5 |
      |         8 | Идиот                       | Достоевский Ф.М.              | 360.80 |      3 |
      +-----------+-----------------------------+-------------------------------+--------+--------+
      4 rows in set (0.00 sec)
  mysql> INSERT INTO supply (title, author, price, amount) VALUES ('Стихотворения и поэмы', 'Лермонтов М.Ю.', 255.90, 4),('Остров сокровищ', 'Стивенсон Р.Л.', 599.99, 5);
      Query OK, 2 rows affected (0.09 sec)
      Records: 2  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM supply;
      +-----------+------------------------------------------+-------------------------------+--------+--------+
      | supply_id | title                                    | author                        | price  | amount |
      +-----------+------------------------------------------+-------------------------------+--------+--------+
      |         5 | Доктор Живаго                            | Пастернак Б.Л.                | 618.99 |      3 |
      |         6 | Черный человек                           | Есенин С.А.                   | 570.20 |      6 |
      |         7 | Евгений Онегин                           | Пушкин А.С.                   | 440.80 |      5 |
      |         8 | Идиот                                    | Достоевский Ф.М.              | 360.80 |      3 |
      |       100 | Стихотворения и поэмы                    | Лермонтов М.Ю.                | 255.90 |      4 |
      |       101 | Остров сокровищ                          | Стивенсон Р.Л.                | 599.99 |      5 |
      +-----------+------------------------------------------+-------------------------------+--------+--------+
      6 rows in set (0.00 sec)
  mysql> SELECT * FROM author;
      +-----------+-------------------------------+
      | author_id | name_author                   |
      +-----------+-------------------------------+
      |         1 | Булгаков М.А.                 |
      |         2 | Достоевский Ф.М.              |
      |         3 | Есенин С.А.                   |
      |         4 | Пастернак Б.Л.                |
      |         5 | Лермонтов М.Ю.                |
      |         6 | Булгаков М.А.                 |
      |         7 | Достоевский Ф.М.              |
      |         8 | Есенин С.А.                   |
      |         9 | Пастернак Б.Л.                |
      |        10 | Лермонтов М.Ю.                |
      +-----------+-------------------------------+
      10 rows in set (0.01 sec)
  mysql> SELECT * FROM genre;
      +----------+------------------------+
      | genre_id | name_genre             |
      +----------+------------------------+
      |        1 | Роман                  |
      |        2 | Поэзия                 |
      |        3 | Приключения            |
      +----------+------------------------+
      3 rows in set (0.01 sec)
  mysql> UPDATE book
       INNER JOIN author
       ON author.author_id = book.author_id
       INNER JOIN supply
       ON book.title = supply.title
          AND supply.author = author.name_author
  SET
      book.price = (book.amount * book.price + supply.amount*supply.price) / (book.amount + supply.amount),
      book.amount = book.amount + supply.amount,
      supply.amount = 0   
  WHERE book.price <> supply.price;
      Query OK, 2 rows affected, 1 warning (1.72 sec)
      Rows matched: 2  Changed: 2  Warnings: 1
  mysql> SELECT * FROM book2;
      +---------+------------------------------------------+-----------+----------+--------+--------+
      | book_id | title                                    | author_id | genre_id | price  | amount |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      |       9 | Мастер и Маргарита                       |         1 |        1 | 670.99 |      3 |
      |      10 | Белая гвардия                            |         1 |        3 | 540.50 |      5 |
      |      11 | Идиот                                    |         2 |        1 | 437.11 |     13 |
      |      12 | Братья Карамазовы                        |         2 |        1 | 799.01 |      3 |
      |      13 | Игрок                                    |         2 |        1 | 480.50 |     10 |
      |      14 | Стихотворения и поэмы                    |         3 |        2 | 650.00 |     15 |
      |      15 | Черный человек                           |         3 |        1 | 570.20 |      6 |
      |      16 | Лирика                                   |         4 |        2 | 518.99 |      2 |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      8 rows in set (0.00 sec)
  mysql> SELECT * FROM supply;
      +-----------+------------------------------------------+-------------------------------+--------+--------+
      | supply_id | title                                    | author                        | price  | amount |
      +-----------+------------------------------------------+-------------------------------+--------+--------+
      |         5 | Доктор Живаго                            | Пастернак Б.Л.                | 618.99 |      3 |
      |         6 | Черный человек                           | Есенин С.А.                   | 570.20 |      6 |
      |         7 | Евгений Онегин                           | Пушкин А.С.                   | 440.80 |      5 |
      |         8 | Идиот                                    | Достоевский Ф.М.              | 360.80 |      0 |
      |       100 | Стихотворения и поэмы                    | Лермонтов М.Ю.                | 255.90 |      4 |
      |       101 | Остров сокровищ                          | Стивенсон Р.Л.                | 599.99 |      5 |
      +-----------+------------------------------------------+-------------------------------+--------+--------+
      6 rows in set (0.00 sec)
  Task:
  Включить новых авторов в таблицу author с помощью запроса на добавление, а затем вывести все данные из таблицы author.  Новыми считаются авторы, которые есть в таблице supply, но нет в таблице author.
  Decision:
  mysql> INSERT INTO author (name_author)
  SELECT supply.author
  FROM
      author
      RIGHT JOIN supply ON author.name_author = supply.author
  WHERE name_author IS NULL;
      Query OK, 0 rows affected (0.00 sec)
      Records: 0  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM author;
      +-----------+-------------------------------+
      | author_id | name_author                   |
      +-----------+-------------------------------+
      |         1 | Булгаков М.А.                 |
      |         2 | Достоевский Ф.М.              |
      |         3 | Есенин С.А.                   |
      |         4 | Пастернак Б.Л.                |
      |         5 | Лермонтов М.Ю.                |
      |         6 | Булгаков М.А.                 |
      |         7 | Достоевский Ф.М.              |
      |         8 | Есенин С.А.                   |
      |         9 | Пастернак Б.Л.                |
      |        10 | Лермонтов М.Ю.                |
      |        11 | Пушкин А.С.                   |
      |        12 | Стивенсон Р.Л.                |
      +-----------+-------------------------------+
      12 rows in set (0.00 sec)
  Task:
  Добавить новые книги из таблицы supply в таблицу book на основе сформированного выше запроса. Затем вывести для просмотра таблицу book.
  Decision:
  mysql> SELECT * FROM book2;
      +---------+------------------------------------------+-----------+----------+--------+--------+
      | book_id | title                                    | author_id | genre_id | price  | amount |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      |       9 | Мастер и Маргарита                       |         1 |        1 | 670.99 |      3 |
      |      10 | Белая гвардия                            |         1 |        3 | 540.50 |      5 |
      |      11 | Идиот                                    |         2 |        1 | 437.11 |     13 |
      |      12 | Братья Карамазовы                        |         2 |        1 | 799.01 |      3 |
      |      13 | Игрок                                    |         2 |        1 | 480.50 |     10 |
      |      14 | Стихотворения и поэмы                    |         3 |        2 | 650.00 |     15 |
      |      15 | Черный человек                           |         3 |        1 | 570.20 |      6 |
      |      16 | Лирика                                   |         4 |        2 | 518.99 |      2 |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      8 rows in set (0.01 sec)
  mysql> INSERT INTO book2 (title, author_id, price, amount)
  SELECT title, author_id, price, amount
  FROM
      author
      INNER JOIN supply ON author.name_author = supply.author
  WHERE amount <> 0;
      Query OK, 8 rows affected (0.14 sec)
      Records: 8  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM book2;
      +---------+------------------------------------------+-----------+----------+--------+--------+
      | book_id | title                                    | author_id | genre_id | price  | amount |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      |       9 | Мастер и Маргарита                       |         1 |        1 | 670.99 |      3 |
      |      10 | Белая гвардия                            |         1 |        3 | 540.50 |      5 |
      |      11 | Идиот                                    |         2 |        1 | 437.11 |     13 |
      |      12 | Братья Карамазовы                        |         2 |        1 | 799.01 |      3 |
      |      13 | Игрок                                    |         2 |        1 | 480.50 |     10 |
      |      14 | Стихотворения и поэмы                    |         3 |        2 | 650.00 |     15 |
      |      15 | Черный человек                           |         3 |        1 | 570.20 |      6 |
      |      16 | Лирика                                   |         4 |        2 | 518.99 |      2 |
      |      17 | Черный человек                           |         3 |     NULL | 570.20 |      6 |
      |      18 | Доктор Живаго                            |         4 |     NULL | 618.99 |      3 |
      |      19 | Стихотворения и поэмы                    |         5 |     NULL | 255.90 |      4 |
      |      20 | Черный человек                           |         8 |     NULL | 570.20 |      6 |
      |      21 | Доктор Живаго                            |         9 |     NULL | 618.99 |      3 |
      |      22 | Стихотворения и поэмы                    |        10 |     NULL | 255.90 |      4 |
      |      23 | Евгений Онегин                           |        11 |     NULL | 440.80 |      5 |
      |      24 | Остров сокровищ                          |        12 |     NULL | 599.99 |      5 |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      16 rows in set (0.00 sec)
  Task:
  Занести для книги Стихотворения и поэмы» Лермонтова жанр Поэзия», а для книги Остров сокровищ» Стивенсона - Приключения». (Использовать два запроса).
  Decision:
  mysql> SELECT * FROM book2;
      +---------+------------------------------------------+-----------+----------+--------+--------+
      | book_id | title                                    | author_id | genre_id | price  | amount |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      |       9 | Мастер и Маргарита                       |         1 |        1 | 670.99 |      3 |
      |      10 | Белая гвардия                            |         1 |        3 | 540.50 |      5 |
      |      11 | Идиот                                    |         2 |        1 | 437.11 |     13 |
      |      12 | Братья Карамазовы                        |         2 |        1 | 799.01 |      3 |
      |      13 | Игрок                                    |         2 |        1 | 480.50 |     10 |
      |      14 | Стихотворения и поэмы                    |         3 |        2 | 650.00 |     15 |
      |      15 | Черный человек                           |         3 |        1 | 570.20 |      6 |
      |      16 | Лирика                                   |         4 |        2 | 518.99 |      2 |
      |      17 | Черный человек                           |         3 |     NULL | 570.20 |      6 |
      |      18 | Доктор Живаго                            |         4 |     NULL | 618.99 |      3 |
      |      19 | Стихотворения и поэмы                    |         5 |     NULL | 255.90 |      4 |
      |      20 | Черный человек                           |         8 |     NULL | 570.20 |      6 |
      |      21 | Доктор Живаго                            |         9 |     NULL | 618.99 |      3 |
      |      22 | Стихотворения и поэмы                    |        10 |     NULL | 255.90 |      4 |
      |      23 | Евгений Онегин                           |        11 |     NULL | 440.80 |      5 |
      |      24 | Остров сокровищ                          |        12 |     NULL | 599.99 |      5 |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      16 rows in set (0.00 sec)
  mysql> SELECT * FROM genre;
      +----------+------------------------+
      | genre_id | name_genre             |
      +----------+------------------------+
      |        1 | Роман                  |
      |        2 | Поэзия                 |
      |        3 | Приключения            |
      +----------+------------------------+
      3 rows in set (0.00 sec)
  mysql> UPDATE book2
  SET genre_id = (SELECT genre_id
      FROM genre
      WHERE name_genre = 'Поэзия')
  WHERE book_id = 19;
      Query OK, 1 row affected (0.21 sec)
      Rows matched: 1  Changed: 1  Warnings: 0
  mysql> UPDATE book2
  SET genre_id = (SELECT genre_id
      FROM genre
      WHERE name_genre = 'Приключения')
  WHERE book_id = 24;
      Query OK, 1 row affected (0.05 sec)
      Rows matched: 1  Changed: 1  Warnings: 0
  mysql> SELECT * FROM book2;
      +---------+------------------------------------------+-----------+----------+--------+--------+
      | book_id | title                                    | author_id | genre_id | price  | amount |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      |       9 | Мастер и Маргарита                       |         1 |        1 | 670.99 |      3 |
      |      10 | Белая гвардия                            |         1 |        3 | 540.50 |      5 |
      |      11 | Идиот                                    |         2 |        1 | 437.11 |     13 |
      |      12 | Братья Карамазовы                        |         2 |        1 | 799.01 |      3 |
      |      13 | Игрок                                    |         2 |        1 | 480.50 |     10 |
      |      14 | Стихотворения и поэмы                    |         3 |        2 | 650.00 |     15 |
      |      15 | Черный человек                           |         3 |        1 | 570.20 |      6 |
      |      16 | Лирика                                   |         4 |        2 | 518.99 |      2 |
      |      17 | Черный человек                           |         3 |     NULL | 570.20 |      6 |
      |      18 | Доктор Живаго                            |         4 |     NULL | 618.99 |      3 |
      |      19 | Стихотворения и поэмы                    |         5 |        2 | 255.90 |      4 |
      |      20 | Черный человек                           |         8 |     NULL | 570.20 |      6 |
      |      21 | Доктор Живаго                            |         9 |     NULL | 618.99 |      3 |
      |      22 | Стихотворения и поэмы                    |        10 |     NULL | 255.90 |      4 |
      |      23 | Евгений Онегин                           |        11 |     NULL | 440.80 |      5 |
      |      24 | Остров сокровищ                          |        12 |        3 | 599.99 |      5 |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      16 rows in set (0.01 sec)
  Task:
  Удалить всех авторов и все их книги, общее количество книг которых меньше 20.
  Decision:
  SELECT * FROM author;
  SELECT * FROM book;
  DELETE FROM author
  WHERE author_id IN (SELECT author_id
      FROM book
      GROUP BY author_id
      HAVING SUM(amount)<20);
  SELECT * FROM author;
  SELECT * FROM book;
      Query result:
      +-----------+------------------+
      | author_id | name_author      |
      +-----------+------------------+
      | 1         | Булгаков М.А.    |
      | 2         | Достоевский Ф.М. |
      | 3         | Есенин С.А.      |
      | 4         | Пастернак Б.Л.   |
      | 5         | Лермонтов М.Ю.   |
      | 6         | Стивенсон Р.Л.   |
      +-----------+------------------+
      Affected rows: 6
      Query result:
      +---------+-----------------------+-----------+----------+--------+--------+
      | book_id | title                 | author_id | genre_id | price  | amount |
      +---------+-----------------------+-----------+----------+--------+--------+
      | 1       | Мастер и Маргарита    | 1         | 1        | 670.99 | 3      |
      | 2       | Белая гвардия         | 1         | 1        | 540.50 | 12     |
      | 3       | Идиот                 | 2         | 1        | 437.11 | 13     |
      | 4       | Братья Карамазовы     | 2         | 1        | 799.01 | 3      |
      | 5       | Игрок                 | 2         | 1        | 480.50 | 10     |
      | 6       | Стихотворения и поэмы | 3         | 2        | 650.00 | 15     |
      | 7       | Черный человек        | 3         | 2        | 570.20 | 12     |
      | 8       | Лирика                | 4         | 2        | 518.99 | 2      |
      | 9       | Доктор Живаго         | 4         | 1        | 380.80 | 4      |
      | 10      | Стихотворения и поэмы | 5         | 2        | 255.90 | 4      |
      | 11      | Остров сокровищ       | 6         | 3        | 599.99 | 5      |
      +---------+-----------------------+-----------+----------+--------+--------+
      Affected rows: 11
      Affected rows: 4
      Query result:
      +-----------+------------------+
      | author_id | name_author      |
      +-----------+------------------+
      | 2         | Достоевский Ф.М. |
      | 3         | Есенин С.А.      |
      +-----------+------------------+
      Affected rows: 2
      Query result:
      +---------+-----------------------+-----------+----------+--------+--------+
      | book_id | title                 | author_id | genre_id | price  | amount |
      +---------+-----------------------+-----------+----------+--------+--------+
      | 3       | Идиот                 | 2         | 1        | 437.11 | 13     |
      | 4       | Братья Карамазовы     | 2         | 1        | 799.01 | 3      |
      | 5       | Игрок                 | 2         | 1        | 480.50 | 10     |
      | 6       | Стихотворения и поэмы | 3         | 2        | 650.00 | 15     |
      | 7       | Черный человек        | 3         | 2        | 570.20 | 12     |
      +---------+-----------------------+-----------+----------+--------+--------+
      Affected rows: 5
  Task:
  Удалить все жанры, к которым относится меньше 4-х книг. В таблице book для этих жанров установить значение Null.
  Decision:
  SELECT * FROM genre;
  SELECT * FROM book;
  DELETE FROM genre
  WHERE genre_id IN (SELECT genre_id
      FROM book
      GROUP BY genre_id
      HAVING count(title)<4);
  SELECT * FROM genre;
  SELECT * FROM book;
  Query result:
      +----------+-------------+
      | genre_id | name_genre  |
      +----------+-------------+
      | 1        | Роман       |
      | 2        | Поэзия      |
      | 3        | Приключения |
      +----------+-------------+
      Affected rows: 3
      Query result:
      +---------+-----------------------+-----------+----------+--------+--------+
      | book_id | title                 | author_id | genre_id | price  | amount |
      +---------+-----------------------+-----------+----------+--------+--------+
      | 1       | Мастер и Маргарита    | 1         | 1        | 670.99 | 3      |
      | 2       | Белая гвардия         | 1         | 1        | 540.50 | 12     |
      | 3       | Идиот                 | 2         | 1        | 437.11 | 13     |
      | 4       | Братья Карамазовы     | 2         | 1        | 799.01 | 3      |
      | 5       | Игрок                 | 2         | 1        | 480.50 | 10     |
      | 6       | Стихотворения и поэмы | 3         | 2        | 650.00 | 15     |
      | 7       | Черный человек        | 3         | 2        | 570.20 | 12     |
      | 8       | Лирика                | 4         | 2        | 518.99 | 2      |
      | 9       | Доктор Живаго         | 4         | 1        | 380.80 | 4      |
      | 10      | Стихотворения и поэмы | 5         | 2        | 255.90 | 4      |
      | 11      | Остров сокровищ       | 6         | 3        | 599.99 | 5      |
      +---------+-----------------------+-----------+----------+--------+--------+
      Affected rows: 11
      Affected rows: 1
      Query result:
      +----------+------------+
      | genre_id | name_genre |
      +----------+------------+
      | 1        | Роман      |
      | 2        | Поэзия     |
      +----------+------------+
      Affected rows: 2
      Query result:
      +---------+-----------------------+-----------+----------+--------+--------+
      | book_id | title                 | author_id | genre_id | price  | amount |
      +---------+-----------------------+-----------+----------+--------+--------+
      | 1       | Мастер и Маргарита    | 1         | 1        | 670.99 | 3      |
      | 2       | Белая гвардия         | 1         | 1        | 540.50 | 12     |
      | 3       | Идиот                 | 2         | 1        | 437.11 | 13     |
      | 4       | Братья Карамазовы     | 2         | 1        | 799.01 | 3      |
      | 5       | Игрок                 | 2         | 1        | 480.50 | 10     |
      | 6       | Стихотворения и поэмы | 3         | 2        | 650.00 | 15     |
      | 7       | Черный человек        | 3         | 2        | 570.20 | 12     |
      | 8       | Лирика                | 4         | 2        | 518.99 | 2      |
      | 9       | Доктор Живаго         | 4         | 1        | 380.80 | 4      |
      | 10      | Стихотворения и поэмы | 5         | 2        | 255.90 | 4      |
      | 11      | Остров сокровищ       | 6         | NULL     | 599.99 | 5      |
      +---------+-----------------------+-----------+----------+--------+--------+
      Affected rows: 11
  Task:
  Удалить всех авторов, которые пишут в жанре "Поэзия". Из таблицы book удалить все книги этих авторов. В запросе для отбора авторов использовать полное название жанра, а не его id.
  Decision:
  SELECT * FROM author;
  SELECT * FROM book;
  DELETE FROM author
  USING
      book
      INNER JOIN author ON author.author_id = book.author_id
      INNER JOIN genre ON book.genre_id = genre.genre_id
  WHERE genre.name_genre = 'Поэзия';
  SELECT * FROM author;
  SELECT * FROM book;
      Query result:
      +-----------+------------------+
      | author_id | name_author      |
      +-----------+------------------+
      | 1         | Булгаков М.А.    |
      | 2         | Достоевский Ф.М. |
      | 3         | Есенин С.А.      |
      | 4         | Пастернак Б.Л.   |
      | 5         | Лермонтов М.Ю.   |
      | 6         | Стивенсон Р.Л.   |
      +-----------+------------------+
      Affected rows: 6
      Query result:
      +---------+-----------------------+-----------+----------+--------+--------+
      | book_id | title                 | author_id | genre_id | price  | amount |
      +---------+-----------------------+-----------+----------+--------+--------+
      | 1       | Мастер и Маргарита    | 1         | 1        | 670.99 | 3      |
      | 2       | Белая гвардия         | 1         | 1        | 540.50 | 12     |
      | 3       | Идиот                 | 2         | 1        | 437.11 | 13     |
      | 4       | Братья Карамазовы     | 2         | 1        | 799.01 | 3      |
      | 5       | Игрок                 | 2         | 1        | 480.50 | 10     |
      | 6       | Стихотворения и поэмы | 3         | 2        | 650.00 | 15     |
      | 7       | Черный человек        | 3         | 2        | 570.20 | 12     |
      | 8       | Лирика                | 4         | 2        | 518.99 | 2      |
      | 9       | Доктор Живаго         | 4         | 1        | 380.80 | 4      |
      | 10      | Стихотворения и поэмы | 5         | 2        | 255.90 | 4      |
      | 11      | Остров сокровищ       | 6         | 3        | 599.99 | 5      |
      +---------+-----------------------+-----------+----------+--------+--------+
      Affected rows: 11
      Affected rows: 3
      Query result:
      +-----------+------------------+
      | author_id | name_author      |
      +-----------+------------------+
      | 1         | Булгаков М.А.    |
      | 2         | Достоевский Ф.М. |
      | 6         | Стивенсон Р.Л.   |
      +-----------+------------------+
      Affected rows: 3
      Query result:
      +---------+--------------------+-----------+----------+--------+--------+
      | book_id | title              | author_id | genre_id | price  | amount |
      +---------+--------------------+-----------+----------+--------+--------+
      | 1       | Мастер и Маргарита | 1         | 1        | 670.99 | 3      |
      | 2       | Белая гвардия      | 1         | 1        | 540.50 | 12     |
      | 3       | Идиот              | 2         | 1        | 437.11 | 13     |
      | 4       | Братья Карамазовы  | 2         | 1        | 799.01 | 3      |
      | 5       | Игрок              | 2         | 1        | 480.50 | 10     |
      | 11      | Остров сокровищ    | 6         | 3        | 599.99 | 5      |
      +---------+--------------------+-----------+----------+--------+--------+
      Affected rows: 6
  Source:
  https://stepik.org/course/63054/info

С/С++ vs Python
  Task:
  Мне нужно написать программу, которая считывает возраст человека. Программа сначала запрашивает год рождения.
  Decision:
  https://github.com/David138it/Engineer-MyFirstMiniProjects
  $ cat Cpp-AgeDetermination.cpp
  #include <iostream>
  using namespace std;
  int age(int current_date, int current_month, int current_year, int birth_date, int birth_month, int birth_year)
  {
    //если дата рождения больше текущей даты рождения тогда не считайте в этом месяце и добавьте 30 к дате так как вычесть дату и получить оставшиеся дни
    int month[]={31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
    if (birth_date > current_date)
    {
      current_month = current_month - 1;
      current_date = current_date + month[birth_month-1];
    }
    //если месяц рождения превышает текущий месяц, то  Не считайте в этом году и добавьте 12 к месяц, чтобы мы могли вычесть и выяснить различия
    if (birth_month > current_month)
    {
      current_year = current_year - 1;
          current_month = current_month + 12;
    }
      // вычислить дату, месяц, год
      int calculated_date = current_date - birth_date;
      int calculated_month = current_month - birth_month;
      int calculated_year = current_year - birth_year;
    // печать нынешнего возраста
      cout<<"Present Age:"<<endl;
      cout<<"Years: "<<calculated_year<<" Months: "<<calculated_month<<" Days: "<<calculated_date<<endl;
    return 0;
  }
  int main()
  {
    int current_date, current_month, current_year, birth_date, birth_month, birth_year;
    //код пользователя
    cout<<"Today:"<<endl;
    cout<<"DD: ";
    cin>>current_date;
    cout<<"MM: ";
    cin>>current_month;
    cout<<"YYYY: ";
    cin>>current_year;
    //рождение дд // мм // гггг
    cout<<"You'r Birthday:"<<endl;
    cout<<"DD: ";
    cin>>birth_date;
      cout<<"MM: ";
    cin>>birth_month;
      cout<<"YYYY:";
    cin>>birth_year;
    age(current_date, current_month, current_year, birth_date, birth_month, birth_year);
    system("pause");
    return 0;
  }
  $ cat Py-AgeDetermination.py
  def age(current_date, current_month, current_year, birth_date, birth_month, birth_year):
      #если дата рождения больше текущей даты рождения тогда не считайте в этом месяце и добавьте 30 к дате так как вычесть дату и получить оставшиеся дни
      month =[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
      if (birth_date > current_date):
          current_month = current_month - 1
          current_date = current_date + month[birth_month-1]
      #если месяц рождения превышает текущий месяц, то Не считайте в этом году и добавьте 12 к месяц, чтобы мы могли вычесть и выяснить различия
      if (birth_month > current_month):
          current_year = current_year - 1;
          current_month = current_month + 12;
      # вычислить дату, месяц, год
      calculated_date = current_date - birth_date;
      calculated_month = current_month - birth_month;
      calculated_year = current_year - birth_year;
      # печать нынешнего возраста
      print("Present Age:")
      print("Years:", calculated_year, "Months:", calculated_month, "Days:", calculated_date)
  print("Today:")
  # код пользователя
  current_date = int(input("DD: "))
  current_month = int(input("MM: "))
  current_year = int(input("YYYY: "))
  # рождение дд // мм // гггг
  print("You'r Birthday:")
  birth_date = int(input("DD: "))
  birth_month = int(input("MM: "))
  birth_year = int(input("YYYY: "))
  age(current_date, current_month, current_year, birth_date, birth_month, birth_year)
  $ python3 Py-AgeDetermination.py
  Today:
  DD: 18
  MM: 07
  YYYY: 2022
  You'r Birthday:
  DD: 23
  MM: 09
  YYYY: 1992
  Present Age:
  Years: 29 Months: 9 Days: 25
  $ g++ Cpp-AgeDetermination.cpp -o output
  $ ./output
  Today:
  DD: 18
  MM: 07
  YYYY: 2022
  You'r Birthday:
  DD: 23
  MM: 09
  YYYY:1992
  Present Age:
  Years: 29 Months: 9 Days: 25
  https://github.com/David138it/MyFirstMiniProjects
  Task:
  Создайте конвертер валют, который получает данные из национального банка с помощью json и выводит данные о стоимости рубля к доллару, евро и юаню. Запустите программу через терминал.
  Decision:
  $ cat Cpp-CurrencyConverter.cpp
  #include <iostream>
  using namespace std;
  int main()
  {
    float dollar, euro, yuan;
    cout<<"current dollar data: ";
    cin>>dollar;
          cout<<"current euro data: ";
    cin>>euro;
          cout<<"current yuan data: ";
    cin>>yuan;
    //cout<<dollar<<" "<<euro<<" "<<yuan<<" "<<endl;
    cout<<"1) Convert to dollars, Euros, yuan"<<endl<<"2) Transfer from dollars, Euros, yuan"<<endl<<"Choose your actions: ";
    int choise;
    cin>>choise;
    //cout<<choise; 
    if (choise==1){
      float ruble, resultDollar, resultEuro, resultYuan;
      cout<<"Enter the number of rubles: ";
      cin>>ruble;
      resultDollar=ruble/dollar;
      resultEuro=ruble/euro;
      resultYuan=ruble/yuan;
      cout<<"The result of your transfer = "<<resultDollar<<endl<<"The result of your transfer = "<<resultEuro<<endl<<"The result of your transfer = "<<resultYuan<<endl;
    } else if (choise==2) {
      float d, e, y, resultDollar, resultEuro, resultYuan;
      cout<<"Enter the number of dollars: ";
      cin>>d;
      cout<<"Enter the number of euroes: ";
      cin>>e;
      cout<<"Enter the number of yuans: ";
      cin>>y;
      resultDollar=d*dollar;
      resultEuro=e*euro;
      resultYuan=y*yuan;
      cout<<"The result of your transfer = "<<resultDollar<<endl<<"The result of your transfer = "<<resultEuro<<endl<<"The result of your transfer = "<<resultYuan<<endl;
    } else {
      cout<<"Error! Enter only 1 or 2: "<<endl;
      exit(0);
    }
    //system("pause");
    return 0;
  }
  $ cat Py-CurrencyConverter.py 
  from pprint import pprint
  import requests
  data = requests.get('https://www.cbr-xml-daily.ru/daily_json.js').json()
  dictionaryU=data['Valute']['USD']
  dictionaryE=data['Valute']['EUR']
  dictionaryC=data['Valute']['CNY']
  '''
  lists=[dictionaryU, dictionaryE, dictionaryC]
  for index in lists:
    print(index)
  '''
  '''
  print(dictionaryU['Value'],dictionaryU['Name'])
  print(dictionaryE['Value'],dictionaryE['Name'])
  print(dictionaryC['Value'],dictionaryC['Name'])
  '''
  '''
  dollar=float(input("Enter the dollar rate: "))
  euro=float(input("Enter the euro exchange rate: "))
  yuan=float(input("Enter the yuan exchange rate: "))
  '''
  dollar=dictionaryU['Value']
  euro=dictionaryE['Value']
  yuan=dictionaryC['Value']
  print("Dollar exchange rate: ",dollar)
  print("Euro exchange rate: ",euro)
  print("Yuan exchange rate: ",yuan)
  print("1) Convert to dollars, Euros, yuan\n2) Transfer from dollars, Euros, yuan\n")
  choise=int(input("Choose your actions:\n"))
  if choise==1:
    ruble=float(input("Enter the number of rubles: "))
    resultDollar=ruble/dollar
    resultEuro=ruble/euro
    resultYuan=ruble/yuan
    print("The result of your transfer = ", '{:.2f}'.format(resultDollar))
    print("The result of your transfer = ", '{:.2f}'.format(resultEuro))
    print("The result of your transfer = ", '{:.2f}'.format(resultYuan))
  elif choise==2:
    d=float(input("Enter the number of dollars: "))
    e=float(input("Enter the number of euroes: "))  
    y=float(input("Enter the number of yuans: "))
    resultDollar=d*dollar
    resultEuro=e*euro
    resultYuan=y*yuan
    print("The result of your transfer = ", '{:.2f}'.format(resultDollar))
    print("The result of your transfer = ", '{:.2f}'.format(resultEuro))
    print("The result of your transfer = ", '{:.2f}'.format(resultYuan))
  else:
    print("Error! Enter only 1 or 2")
    exit(0)
  $ python3 Py-CurrencyConverter.py
  Dollar exchange rate:  61.3101
  Euro exchange rate:  62.5695
  Yuan exchange rate:  92.1636
  1) Convert to dollars, Euros, yuan
  2) Transfer from dollars, Euros, yuan
  Choose your actions:
  1
  Enter the number of rubles: 500
  The result of your transfer =  8.16
  The result of your transfer =  7.99
  The result of your transfer =  5.43
  $ python3 Py-CurrencyConverter.py
  Dollar exchange rate:  61.3101
  Euro exchange rate:  62.5695
  Yuan exchange rate:  92.1636
  1) Convert to dollars, Euros, yuan
  2) Transfer from dollars, Euros, yuan
  Choose your actions:
  2
  Enter the number of dollars: 1000
  Enter the number of euroes: 900
  Enter the number of yuans: 100
  The result of your transfer =  61310.10
  The result of your transfer =  56312.55
  The result of your transfer =  9216.36
  $ python3 Py-CurrencyConverter.py
  Dollar exchange rate:  61.3101
  Euro exchange rate:  62.5695
  Yuan exchange rate:  92.1636
  1) Convert to dollars, Euros, yuan
  2) Transfer from dollars, Euros, yuan
  Choose your actions:
  3
  Error! Enter only 1 or 2
  $ g++ Cpp-CurrencyConverter.cpp -o output
  $ ./output
  current dollar data: 61.3101
  current euro data: 62.5695
  current yuan data: 92.1636
  1) Convert to dollars, Euros, yuan
  2) Transfer from dollars, Euros, yuan
  Choose your actions: 1
  Enter the number of rubles: 500
  The result of your transfer = 8.15526
  The result of your transfer = 7.99111
  The result of your transfer = 5.42514
  $ ./output
  current dollar data: 61.3101
  current euro data: 62.5695
  current yuan data: 92.1636
  1) Convert to dollars, Euros, yuan
  2) Transfer from dollars, Euros, yuan
  Choose your actions: 2
  Enter the number of dollars: 1000
  Enter the number of euroes: 900
  Enter the number of yuans: 100
  The result of your transfer = 61310.1
  The result of your transfer = 56312.6
  The result of your transfer = 9216.36
  $ ./output
  current dollar data: 61.3101
  current euro data: 62.5695
  current yuan data: 92.1636
  1) Convert to dollars, Euros, yuan
  2) Transfer from dollars, Euros, yuan
  Choose your actions: 3
  Error! Enter only 1 or 2:
  https://github.com/David138it/MyFirstMiniProjects
  Task:
  Создайте простой калькулятор, который запускается через терминал.
  Decision:
  $ cat Cpp-Calculator.cpp
  #include <iostream>
  using namespace std;
  int main()
  {
    string repeat="y";
    while (repeat == "y"){
        int numb1, numb2;
        cout<<("Enter number1: ");
        cin>>numb1;
        cout<<("Enter number2: ");
        cin>>numb2;
        char operation;
        cout<<("Enter the operation: ");
        cin>>operation;
        if (operation == '+')
            cout<<(numb1 + numb2)<<endl;
        else if (operation == '-')
            cout<<(numb1 - numb2)<<endl;
        else if (operation == '*')
            cout<<(numb1 * numb2)<<endl;
        else if (operation == '/'){
            if (numb2 == 0)
                cout<<("You cant divide by zero!")<<endl;
            else
                cout<<(numb1 / numb2)<<endl;
        }else{
            cout<<("Invalid operation")<<endl;
        }
        cout<<("Do you want to continue? (y/n): ");
        cin>>repeat;
        if (repeat == "n"){
            break;
        }
        while (repeat!="y" && repeat!="n"){
            cout<<("Please enter the correct answer (y/n): ");
            cin>>repeat;
        }
    }
    return 0;
  }
  $ cat Py-Calculator.py
  repeat="y"
  while repeat == "y":
      numb1, numb2 = int(input("Enter number1: ")), int(input("Enter number2: "))
      operation = input("Enter the operation: ")
      if operation == '+':
          print(numb1 + numb2)
      elif operation == '-':
          print(numb1 - numb2)
      elif operation == '*':
          print(numb1 * numb2)
      elif operation == '/':
          if numb2 == 0:
              print('You cant divide by zero!')
          else:
              print(numb1 / numb2)
      else:
          print('Invalid operation')
      repeat = input("Do you want to continue? (y/n): ")
      if repeat == "n":
          break
      while (repeat!="y" and repeat!="n"):
          repeat = input("Please enter the correct answer (y/n): ")
  $ python3 Py-Calculator.py
  Enter number1: 16
  Enter number2: 0
  Enter the operation: /
  You cant divide by zero!
  Do you want to continue? (y/n): t
  Please enter the correct answer (y/n): t
  Please enter the correct answer (y/n): y
  Enter number1: 16
  Enter number2: 1
  Enter the operation: t
  Invalid operation
  Do you want to continue? (y/n): y
  Enter number1: 16
  Enter number2: 1
  Enter the operation: -
  15
  Do you want to continue? (y/n): n
  $ g++ Cpp-Calculator.cpp -o output
  $ ./output
  Enter number1: 16
  Enter number2: 0
  Enter the operation: /
  You cant divide by zero!
  Do you want to continue? (y/n): t
  Please enter the correct answer (y/n): t
  Please enter the correct answer (y/n): y
  Enter number1: 16
  Enter number2: 1
  Enter the operation: t
  Invalid operation
  Do you want to continue? (y/n): y
  Enter number1: 16
  Enter number2: 1
  Enter the operation: -
  15
  Do you want to continue? (y/n): n

Windows vs Linux
  Task:
  Установить Centos рядом с Windows
  Decision:
  Скачиваем iso-файл с официального сайта Centos - Запускаем Rufus - Выбираем скаченный ISO файл дистрибутива и схему раздела (Если на старые компьютеры, то нужно выбрать MBR и целевую систему Bios, Файловую систему — Fat32, а размер кластера — 4068 байт, а если же компьютеры по новее и поддерживают Uefi, тогда выбираем в схеме раздела GPT и целевую систему Uefi)
  2. После успешной установки, загрузимся с флешки - в биосе настроиваем приоритет загрузчика, чтоб первая запускалась загрузочная флешка 
  3. Перейдём к установке операционной системы - выбираем Install - выбрать размер разделов - поменяем систему разметки LVM на Standart Portition - нажимаем на click here to create them autmaticaly - установщик автоматически разделит диск - уменьшить размер корневого раздела / и раздел /home - Меняю у них размеры - Done - интернет настроить в Network & Host Name - Ethernet переключаем тумблер - Done - software Slection - minmal install- Done - запуск
  Task:
  После установки Linux на Windows, Windows показывает неправильное время
  Decision:
  Win+R ->regedit -> HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\TimeZoneInfor-tation -> Щелкаем правой кнопкой мыши в правой части окна -> новый параметр DWORD(32) -> имя — RealTimeIsUniversal -> щелкаем по новому параметру два раза -> значение 1 -> Перезагружаемся
  Task:
  Для воспроизведения видео вам может потребоваться установить необходимые видеокодеки
  Decision:
  $ sudo dnf update -y
  $ sudo dnf config-manager --set-enabled crb
  $ sudo dnf install -y epel-release epel-next-release
  $ dnf repolist
  $ sudo dnf install -y https://mirrors.rpmfusion.org/free/el/rpmfusion-free-release-9.noarch.rpm
  $ sudo dnf install -y https://mirrors.rpmfusion.org/nonfree/el/rpmfusion-nonfree-release-9.noarch.rpm
  $ sudo dnf install -y ffmpeg ffmpeg-devel
  $ ffmpeg -version
  Source:
  https://setiwik.ru/kak-vklyuchit-repozitoriy-epel-v-centos-9-stream/
  https://setiwik.ru/kak-ustanovit-ffmpeg-na-centos-9-stream/?ysclid=lkordttfyw687770645

1c
    Task:
    Во время установки 1C 8.3 выходит сообщение об ошибке с кодом 1311.
    Decision:
    Поик - regedit - HLM>SYSTEM>CurrentControlSet>Control>NIls>Codepage - выбрать 1252 - изменить в нем значение с "c_1252.nls" на "c_1251.nls" - перезагрузиться - заново установить 1С
    Task:
    В 1 кабинете ошибка:
    лицензия не обнаружена
    в другом кабинете посмотрел, там другая ошибка: 
    Не найдена лицензия, ключ защиты не обнаружен.
    Decision:
    Подключился к серверу, запустил программу HASP License Manager for Win32 (рядом с часами), load смотрю, IPX-unload, TCP/IP-load, NetBios-Load,  перезагрузил комп, HASP License Manager for Win32, load смотрю, IPX-unload, TCP/IP-load, NetBios-unload, нажимаю load, all, теперь в NetBios-Load - все запустилось.
    Task:
    Установить 1С в 101 кабинете или просто обновить 1С
    Decision:
    1С - тонкий клиент - Сетап от администратора - рус - далее - ок - запуск - добавление (изменить) - добавл в сущ - наименов любое - галочку на Сервере 1С предприятия - кластер (w-1c-app:1741) - инф база имя (tDb) - далее - тонкий клиент - версия 1С -(8.3... - будет меняться) - готово - запуск - инциалы, пароль - меняем на нужный пароль
    Task:     
    переименовать пользователя (кадры) в 1с 
    Установить 1С в 101 кабинете или просто обновить 1С
    Decision:
    из под учетки бухгалтера в 1с выбрать администрирование и польз, меняем имя.
    Task:
    Написать программный код (наСервере) изменения всех элементов справочника "Номенклатура", добавить к наименованию слово " проверено". Выборку элементов произвести через запрос.
    Decision:
    Сделать печатную форму для документа «Реализация товаров и услуг» со следующими данными:
    Шапка:
        Организация
        Покупатель
        Телефон покупателя
    Таблица
    Номер по порядку
        Наименование товара
        Количество
        Цена
        Сумма
        Вес
        Объем
    В итогах вывести поля
        Сумма
        Вес
        Объем
    Задание выполнить в демонстрационной базе 1С:Управление торговлей, версии 11.4.
    В результате решения предоставить внешнюю печатную форму.

C/C++
    Task:
    Первый запуск на языке Си
    Decision:
    Начало (Welcome) - проекты - создаем проект - проект без Qt - приложение на языке Си - qmake - ok - проекты - запуск - запуск в терминале - ок - запуск (зеленый треугольник внизу или ctrl+r)
    Task:
    Установка OpenGl
    Task:
    Настроим утилиту для OpenGl в ubuntu 20.04
    Decision:
    $ sudo apt-get update
    $ sudo apt-get install libglu1-mesa-dev freeglut3-dev mesa-common-dev
    Task:
    Первый запуск OpenGl
    Decision:$ vim main.cpp
    $ cat main.cpp
      #include <GL/glut.h>
      void displayMe(void)
      {
          glClear(GL_COLOR_BUFFER_BIT);
          glBegin(GL_POLYGON);
              glVertex3f(0.5, 0.0, 0.5);
              glVertex3f(0.5, 0.0, 0.0);
              glVertex3f(0.0, 0.5, 0.0);
              glVertex3f(0.0, 0.0, 0.5);
          glEnd();
          glFlush();
      }
      int main(int argc, char** argv)
      {
          glutInit(&argc, argv);
          glutInitDisplayMode(GLUT_SINGLE);
          glutInitWindowSize(400, 300);
          glutInitWindowPosition(100, 100);
          glutCreateWindow("Hello world!");
          glutDisplayFunc(displayMe);
          glutMainLoop();
          return 0;
      }
    $ g++ main.cpp -o firstOpenGlApp -lglut -lGLU -lGL
    $ ./firstOpenGlApp
    Task:
    Установка Qt Creator под Windows
    Decision:
        https://visualstudio.microsoft.com/ru/downloads/ -> Инструменты для Visual Studio 2022 -> Инструменты сборки для Visual Studio 2022 -> aka.ms
    C:\Users\...\Downloads\qt C++ installer> vs_buildtools.exe --layout offline --lang en-us --add Microsoft.VisualStudio.Workload.VCTools --includeRecommended
        ...\offline\vs_setup.exe
        https://developer.microsoft.com/en-US/windows/downloads/windows-sdk/-> Getting started -> https://go.microsoft.com/fwlink/?linkid=2173746-> ...\22000.194.210911-1543.co_release_svc_prod1_WindowsSDK.iso -> Извлечь в текущую папку -> ...\22000.194.210911-1543.co_release_svc_prod1_WindowsSDK\Installers\X64 Debuggers And Tools-x64_en-us.exe -> ...\22000.194.210911-1543.co_release_svc_prod1_WindowsSDK\Installers\X86 Debuggers And Tools-x86_en-us.exe
        https://cmake.org/download/-> Binary distributions: -> Windows x64 Installer: Installer tool has changed. Uninstall CMake 3.4 or lower first! -> https://github.com/Kitware/CMake/releases/download/v3.22.0/cmake-3.22.0-windows-x86_64.msi
        ...\cmake-3.22.0-windows-x86_64.msi -> Add CMake to the system PATH for all users
        https://www.qt.io/offline-installers -> Windows Host -> \qt-opensource-windows-x86-5.12.11.exe -> Select Components -> Qt 5.12 -> MSVC 2017 32-bit -> MSVC 2017 64-bit -> Launch QT Creator -> Компьютер -> Свойства -> Дополнительные параметры системы -> Переменные среды ->  Системные переменные -> Path -> Изменить -> Создать -> C:\Qt\Qt5.12.11\Tools\QtCreator\bin -> Пуск -> QT Creator Community -> Инструменты -> Параметры
    Task:
    Установка Qt Creator под Ubuntu 20.04
    Decision:
    https://www.qt.io/download-qt-installer - Download:
    $ chmod u+x qt-unified-linux-x64-4.1.1-online.run
    $ ./qt-unified-linux-x64-4.1.1-online.run
    нужно выбрать компоненты
    Task:
    Компиляция программ с помощью команд ./configure и make. Давайте что-нибудь скомпилируем. Для этого нам понадобятся некоторые инструменты, такие как компилятор, компоновщик и утилита make . Практически во всех системах Linux используется один и тот же компилятор языка C с именем gcc (GNU C Compiler). Проверить его присутствие в системе можно так
    Decision:
    $ which gcc
        /usr/bin/gcc
    Task:
    Получение исходного кода
    Ckомпилируем программу с названием diction из проекта GNU. Эта маленькая удобная программка проверяет качество и стиль содержимого текстовых файлов. А поскольку она невелика, она легко компилируется.
    Следуя соглашениям, мы сначала создадим каталог src для исходного кода и затем загрузим в него исходный код с помощью команды ftp
    Decision:
    $ mkdir src
    $ cd src/
    /src$ ftp ftp.gnu.org
        Name (ftp.gnu.org:server): anonymous
        ...
        230 Login successful.
        Remote system type is UNIX.
        Using binary mode to transfer files.
    ftp> cd gnu/diction
        250 Directory successfully changed.
    ftp> ls
        200 PORT command successful. Consider using PASV.
        150 Here comes the directory listing.
        -rw-r--r--    1 3003     65534       68940 Aug 28  1998 diction-0.7.tar.gz
        -rw-r--r--    1 3003     65534       90957 Mar 04  2002 diction-1.02.tar.gz
        -rw-r--r--    1 3003     65534      141062 Sep 17  2007 diction-1.11.tar.gz
        -rw-r--r--    1 3003     65534         189 Sep 17  2007 diction-1.11.tar.gz.sig
        226 Directory send OK.
    ftp> get diction-1.11.tar.gz
    ftp> bye
        221 Goodbye.
    Task:
    Поскольку мы сами управляем процессом компиляции исходного кода, поместим его в каталог ~/src. Исходный код, устанавливаемый дистрибутивом, помещается в каталог /usr/src, а исходный код, предназначенный для использования множеством пользователей, обычно устанавливается в /usr/local/src.
    Исходный код обычно распространяется в виде сжатого tar-файла. Подключившись к FTP-сайту, мы получили список доступных tar-файлов и выбрали для загрузки самую свежую версию. При помощи команды get программы ftp скопировали файл с сервера FTP на локальную машину.
    После загрузки tar-файла его нужно распаковать. Программа diction , подобно всем программам из проекта GNU, следует определенным стандартам упаковки исходного кода. Большая часть других исходных кодов, доступных в экосистеме Linux, также следует этому стандарту. Одним из элементов стандарта является создание каталога с деревом исходных текстов и именем project-x.xx после распаковывания tar-файла, то есть с именем, содержащим имя проекта и номер версии. Такая схема упрощает установку нескольких версий одной и той же программы. Однако перед распаковыванием хорошо бы исследовать организацию дерева. При распаковывании некоторых проектов каталог не создается, а файлы помещаются непосредственно в текущий каталог, что может вызвать неразбериху и путаницу в хорошо организованном каталоге src. Чтобы избежать этого, пользуйтесь следующей командой для исследования содержимого tar-файла
    Decision:
    /src$ tar tzvf diction-1.11.tar.gz | head
        -rw-r--r-- michael/user  35068 2007-07-30 14:47 diction-1.11/COPYING
        -rw-r--r-- michael/user   9416 2007-08-03 01:03 diction-1.11/INSTALL
        -rw-r--r-- michael/user   3920 2007-08-03 04:05 diction-1.11/Makefile.in
        -rw-r--r-- michael/user   1448 2007-08-30 04:20 diction-1.11/README
        -rw-r--r-- michael/user    152 2007-08-30 02:08 diction-1.11/NEWS
        -rwxr-xr-x michael/user 144080 2007-08-30 02:06 diction-1.11/configure
        -rwxr-xr-x michael/user  13184 2007-08-03 01:03 diction-1.11/install-sh
        -rw-r--r-- michael/user   2621 2007-03-30 15:45 diction-1.11/de
        -rw-r--r-- michael/user  24830 2007-03-30 15:45 diction-1.11/en
        -rw-r--r-- michael/user  25043 2007-03-30 15:45 diction-1.11/en_GB
    /src$ tar xzf diction-1.11.tar.gz
    /src$ ls -l
        total 144
        drwxrwxr-x 3 s s   4096 Jan  3 20:55 diction-1.11
        -rw-rw-r-- 1 s s 141062 Jan  3 20:47 diction-1.11.tar.gz
    Task:
    Исследование дерева исходных текстов
    Decision:
    /src$ cd diction-1.11
    /src/diction-1.11$ ls -l
        config.guess  de            diction.spec.in  getopt.c      misc.c  sentence.c
        config.h.in   de.po         diction.texi.in  getopt.h      misc.h  sentence.h
        config.sub    diction.1.in  en               getopt_int.h  NEWS    style.1.in
        configure     diction.c     en_GB            INSTALL       nl      style.c
        configure.in  diction.pot   en_GB.po         install-sh    nl.po   test
        COPYING       diction.spec  getopt1.c        Makefile.in   README
    /src/diction-1.11$ ls *.c
        diction.c  getopt1.c  getopt.c  misc.c  sentence.c  style.c
    /src/diction-1.11$ ls *.h
        getopt.h  getopt_int.h  misc.h  sentence.h
    Decision:
    /src/diction-1.11$ ls /usr/include
        aio.h        fnmatch.h       mcheck.h        pty.h          sysexits.h
        aliases.h    fstab.h         memory.h        pwd.h          syslog.h
        alloca.h     fts.h           misc            python3.8      tar.h
        argp.h       ftw.h           mlocate         rdma           termio.h
        argz.h       gcalc-2         mntent.h        re_comp.h      termios.h
        ar.h         gci-2           monetary.h      regex.h        tgmath.h
        arpa         gconv.h         mqueue.h        regexp.h       thread_db.h
        asm-generic  getopt.h        mtd             reglib         threads.h
        assert.h     GL              net             resolv.h       time.h
        byteswap.h   glob.h          netash          rpc            ttyent.h
        c++          gnumake.h       netatalk        rpcsvc         uchar.h
        clif.h       gnu-versions.h  netax25         sched.h        ucontext.h
        complex.h    grp.h           netdb.h         scsi           ulimit.h
        cpio.h       gshadow.h       neteconet       search.h       unistd.h
        crypt.h      iconv.h         netinet         semaphore.h    utime.h
        ctype.h      ifaddrs.h       netipx          setjmp.h       utmp.h
        dirent.h     inttypes.h      netiucv         sgtty.h        utmpx.h
        dlfcn.h      iproute2        netpacket       shadow.h       values.h
        drm          KHR             netrom          signal.h       video
        elf.h        langinfo.h      netrose         sound          wait.h
        endian.h     lastlog.h       nfs             spawn.h        wchar.h
        envz.h       libdrm          nl_types.h      stab.h         wctype.h
        err.h        libgen.h        nss.h           stdc-predef.h  wordexp.h
        errno.h      libintl.h       obstack.h       stdint.h       X11
        error.h      libsync.h       openvpn         stdio_ext.h    x86_64-linux-gnu
        execinfo.h   limits.h        paths.h         stdio.h        xcb
        fcntl.h      link.h          poll.h          stdlib.h       xen
        features.h   linux           printf.h        string.h       xf86drm.h
        fenv.h       locale.h        proc_service.h  strings.h      xf86drmMode.h
        finclude     malloc.h        protocols       sudo_plugin.h  xorg
        fmtmsg.h     math.h          pthread.h       syscall.h
    Task:
    Сборка программ
    Давайте запустим configure . Так как эта программа находится не там, где командная оболочка обычно ищет выполняемые файлы, нужно явно сообщить ей местоположение программы, добавив в команду префикс ./ . Он указывает, что программа находится в текущем рабочем каталоге
    Decision:
    /src/diction-1.11$ ./configure
        ...
        configure: creating ./config.status
        config.status: creating Makefile
        config.status: creating diction.1
        config.status: creating diction.texi
        config.status: creating diction.spec
        config.status: creating style.1
        config.status: creating test/rundiction
        config.status: creating config.h
    /src/diction-1.11$ cat Makefile
    ...
    CC=     gcc
    ...
    diction:    diction.o sentence.o misc.o getopt.o getopt1.o
            $(CC) -o $@ $(LDFLAGS) diction.o sentence.o misc.o \
            getopt.o getopt1.o $(LIBS)
    ...
    .c.o:
            $(CC) -c $(CPPFLAGS) $(CFLAGS) $<
            ...
    #{{{ dependencies
    diction.o:  diction.c config.h getopt.h misc.h sentence.h
    getopt.o:   getopt.c getopt.h getopt_int.h
    getopt1.o:  getopt1.c getopt.h getopt_int.h
    misc.o: misc.c config.h misc.h
    sentence.o: sentence.c config.h misc.h sentence.h
    style.o:    style.c config.h getopt.h misc.h sentence.h
    #}}}
    Task:
    давайте запустим make и соберем наши программы:
    Decision:
    /src/diction-1.11$ make
    /src/diction-1.11$ ls
        config.guess   de.po            diction.texi.in  INSTALL      README
        config.h       diction          en               install-sh   sentence.c
        config.h.in    diction.1        en_GB            Makefile     sentence.h
        config.log     diction.1.in     en_GB.po         Makefile.in  sentence.o
        config.status  diction.c        getopt1.c        misc.c       style
        config.sub     diction.o        getopt1.o        misc.h       style.1
        configure      diction.pot      getopt.c         misc.o       style.1.in
        configure.in   diction.spec     getopt.h         NEWS         style.c
        COPYING        diction.spec.in  getopt_int.h     nl           style.o
        de             diction.texi     getopt.o         nl.po        test
    Task:
    Мы только что скомпилировали первые программы из исходного кода! Но, исключительно ради любопытства, запустим make еще раз
    Decision:
    /src/diction-1.11$ make
        make: Nothing to be done for 'all'.
    Task:
    Во всем виновата make . Вместо того чтобы просто собрать все заново, make собирает только то, что нужно собрать. Так как все целевые файлы уже присутствуют в каталоге, make решила, что ничего больше делать не требуется. Продемонстрировать это можно, удалив одну из собранных целей и запустив make снова.
    Decision:
    /src/diction-1.11$ rm getopt.o
    /src/diction-1.11$ make
        ...
        gcc -o diction -g diction.o sentence.o misc.o \
            getopt.o getopt1.o
        gcc -o style -g style.o sentence.o misc.o \
            getopt.o getopt1.o -lm
    Task:
    Воспользуемся программой touch , чтобы «обновить» один из файлов с исходным кодом, и посмотрим, к чему это приведет
    Decision:
    /src/diction-1.11$ ls -l diction getopt.c
        -rwxrwxr-x 1 s s 68128 Jan  3 21:22 diction
        -rw-r--r-- 1 s s 33125 Mar 30  2007 getopt.c
    /src/diction-1.11$ touch getopt.c
    /src/diction-1.11$ ls -l diction getopt.c
        -rwxrwxr-x 1 s s 68128 Jan  3 21:22 diction
        -rw-r--r-- 1 s s 33125 Jan  3 21:24 getopt.c
    /src/diction-1.11$ make
        gcc -c -I. -DSHAREDIR=\"/usr/local/share\" -DLOCALEDIR=\"/usr/local/share/locale\" -g -O2 -pipe -Wno-unused -Wshadow -Wbad-function-cast -Wmissing-prototypes -Wstrict-prototypes -Wcast-align -Wcast-qual -Wpointer-arith -Wcast-align -Wwrite-strings -Wmissing-declarations -Wnested-externs -Wundef -pedantic -fno-common getopt.c
        gcc -o diction -g diction.o sentence.o misc.o \
            getopt.o getopt1.o
        gcc -o style -g style.o sentence.o misc.o \
            getopt.o getopt1.o -lm
    /src/diction-1.11$ ls -l diction getopt.c
        -rwxrwxr-x 1 s s 68128 Jan  3 21:24 diction
        -rw-r--r-- 1 s s 33125 Jan  3 21:24 getopt.c
    Task:
    Установка программ
    Старательно упакованный исходный код часто включает специальную цель для make , которая называется install (установить). Эта цель выполняет установку готового программного продукта в системный каталог. Обычно это каталог /usr/local/bin, традиционное место для установки программного обеспечения, собранного в локальной системе. Однако этот каталог, как правило, недоступен рядовым пользователям для записи, поэтому, чтобы выполнить установку, вам потребуются привилегии суперпользователя. После установки проверим готовность программы к использованию
    Decision:
    /src/diction-1.11$ sudo make install
    /src/diction-1.11$ which diction
        /usr/local/bin/diction
    Task:
    Установка g++
    Decision:
    $ sudo apt install build-essential
    $ g++ --version
        g++ (Ubuntu 9.3.0-10ubuntu2) 9.3.0
        Copyright (C) 2019 Free Software Foundation, Inc.
        This is free software; see the source for copying conditions.  There is NO
        warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    Task:
    Первый запуск
    Decision:
    $ vim hello.cc
    $ cat hello.cc
        #include <iostream>
        using namespace std;
        int main()
        {
            cout << "Hello, World!";
            return 0;
        }
    $ ls -l
        итого 28
        -rw-rw-r-- 1     100 Jul 20 20:13 hello.cc
    $ g++ -o hello hello.cc
    $ ls -l
        итого 48
        -rwxrwxr-x 1   17160 Jul 20 20:13 hello
        -rw-rw-r-- 1     100 Jul 20 20:13 hello.cc
    $ ./hello
        Hello, World!
    Decision:
    $ vim test.cpp
    $ cat test.cpp
        fint main(){
        }
    $ g++ test.cpp -o test
        test.cpp:1:1: error: ‘fint’ does not name a type; did you mean ‘int’?
            1 | fint main(){
              | ^~~~
              | int
    $ vim test.cpp
    $ cat test.cpp
        int main(){
        }
    $ g++ test.cpp -o test
    $ ls
        test  test.cpp
    $ gdb --annotate=3 test
        GNU gdb (Ubuntu 9.1-0ubuntu1) 9.1
        Copyright (C) 2020 Free Software Foundation, Inc.
        License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
        This is free software: you are free to change and redistribute it.
        There is NO WARRANTY, to the extent permitted by law.
        Type "show copying" and "show warranty" for details.
        This GDB was configured as "x86_64-linux-gnu".
        Type "show configuration" for configuration details.
        For bug reporting instructions, please see:
        <http://www.gnu.org/software/gdb/bugs/>.
        Find the GDB manual and other documentation resources online at:
            <http://www.gnu.org/software/gdb/documentation/>.
        For help, type "help".
        Type "apropos word" to search for commands related to "word"...
        Reading symbols from test...
        (No debugging symbols found in test)
        ��pre-prompt
        (gdb)
        ��prompt
    run
        ��post-prompt
        Starting program: /home/as/Документы/C++/C++ Open GL/test/test
        ��starting
        ��exited 0
        [Inferior 1 (process 8426) exited normally]
        ��thread-exited,id="1",group-id="i1"
        ��stopped
        ��pre-prompt
        (gdb)
        ��prompt
    quit
        ��post-prompt
    Task:
    Теперь попробуем добавить что-нибудь в программе. Чтобы добавить какой-нибудь текст, нужно подключить библиотеку iostream
    Decision:
    $ vim test.cpp
    $ cat test.cpp
        #include <iostream>
        int main(){
            std::cout<<"Hello"<<std::endl;
        }
    $ g++ test.cpp -o test
    $ gdb --annotate=3 test
        Copyright (C) 2020 Free Software Foundation, Inc.
        License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
        This is free software: you are free to change and redistribute it.
        There is NO WARRANTY, to the extent permitted by law.
        Type "show copying" and "show warranty" for details.
        This GDB was configured as "x86_64-linux-gnu".
        Type "show configuration" for configuration details.
        For bug reporting instructions, please see:
        <http://www.gnu.org/software/gdb/bugs/>.
        Find the GDB manual and other documentation resources online at:
            <http://www.gnu.org/software/gdb/documentation/>.
        For help, type "help".
        Type "apropos word" to search for commands related to "word"...
        Reading symbols from test...
        (No debugging symbols found in test)
        ��pre-prompt
        (gdb)
        ��prompt
    run
        ��post-prompt
        Starting program: /home/as/Документы/C++/C++ Open GL/test/test
        ��starting
        Hello
        ��exited 0
        [Inferior 1 (process 8581) exited normally]
        ��thread-exited,id="1",group-id="i1"
        ��stopped
        ��pre-prompt
        (gdb)
        ��prompt
    q
        ��post-prompt
    Decision:
    $ vim test.cpp
    $ cat test.cpp
        #include <iostream>
        using namespace std;
        int main(){
            int i=1;
            float f=1.1123;
            char c='f';
            cin>>i;
            cin>>f;
            cin>>c;
            cout<<i<<endl;
            cout<<f<<endl;
            cout<<c<<endl;
        }
    $ g++ test.cpp -o test
    $ gdb --annotate=3 test
        GNU gdb (Ubuntu 9.1-0ubuntu1) 9.1
        Copyright (C) 2020 Free Software Foundation, Inc.
        License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
        This is free software: you are free to change and redistribute it.
        There is NO WARRANTY, to the extent permitted by law.
        Type "show copying" and "show warranty" for details.
        This GDB was configured as "x86_64-linux-gnu".
        Type "show configuration" for configuration details.
        For bug reporting instructions, please see:
        <http://www.gnu.org/software/gdb/bugs/>.
        Find the GDB manual and other documentation resources online at:
            <http://www.gnu.org/software/gdb/documentation/>.
        For help, type "help".
        Type "apropos word" to search for commands related to "word"...
        Reading symbols from test...
        (No debugging symbols found in test)
        ��pre-prompt
        (gdb)
        ��prompt
    run
        ��post-prompt
        Starting program: /home/as/Документы/C++/C++ Open GL/test/test
        ��starting
        32
        15.04
        g
        32
        15.04
        g
        ��exited 0
        [Inferior 1 (process 9164) exited normally]
        ��thread-exited,id="1",group-id="i1"
        ��stopped
        ��pre-prompt
        (gdb)
        ��prompt
    q
        ��post-prompt
    Task:
    Создание плитки пятнашек
    Decision:
    Создать->приложение (qt quick)->application empty->qmake->ok->/->add new->qt->файл qml->ok
        Tile.qml:
    Rectangle {
        id: root
        color: "lightgreen"
        radius: 10
        border.color: "black"
        border.width: 1
        Text {
            id: _firstText
            anchors.centerIn: root
            text: "1"
            font {
                pointSize: Math.min(root.width, root.height) / 3
                bold: true
            }
        }
    }
        main.qml:
    Window {
        id: root
        width: 640
        height: 480
        visible: true
        title: qsTr("Hello World")
        Tile {
            width: root.width / 4
            height: root.height / 4
        }
    }
    Task:
    C:\Users\...\OneDrive\Документы\Projects\Cpp\Test\CMakeLists.txt:3: ошибка: The CMAKE_CXX_COMPILER: cl is not a full path and was not found in the PATH. To use the JOM generator with Visual C++, cmake must be run from a shell that can use the compiler cl from the command line.  This environment is unable to invoke the cl compiler.  To fix this problem, run cmake from the Visual Studio Command Prompt (vcvarsall.bat). Tell CMake where to find the compiler by setting either the environment variable "CXX" or the CMake cache entry CMAKE_CXX_COMPILER to the full path to the compiler, or to the compiler name if it is in the PATH.
    :-1: ошибка: Процесс CMake завершился с Решением 1.
    Decision:
        Панель управления -> visual studio 2022 -> Удаление программы -> my.visualstudio.com-> Build Tools for Visual Studio 2019 (version 16.9) -> Download
    C:\Users\...\Downloads\qt C++ installer> vs_buildtools.exe --layout offline --lang en-us --add Microsoft.VisualStudio.Workload.VCTools --includeRecommended
        ...\offline\vs_setup.exe
    Task:
        qrc:/main.qml:13:9: Unable to assign [undefined] to double
        qrc:/main.qml:12:9: Unable to assign [undefined] to QColor
        QQmlApplicationEngine failed to load component
        qrc:/main.qml:3 module "StyleSettings" is not installed
    Task:
    Подгрузим нашу папку StyleSettings в qml
    Decision:
        main.cpp
    ...
        QQmlApplicationEngine engine;
        engine.addImportPath(":/qml");
        const QUrl url(QStringLiteral("qrc:/main.qml")
    ...

        main.qml
    import QtQuick 2.12
    import QtQuick.Window 2.12
    import StyleSettings 1.0
    Window {
        width: 640
        height: 480
        visible: true
        title: qsTr("Hello World")
        Rectangle {
            id: _background
            z: -100
            anchors.fill: parent
            color: Style.backgroundColor
            opacity: Style.emphasisOpacity
        }
        /*Style {
            id: _style
        }*/
        Component.onCompleted: {
            console.log(Style)
        }
    }

        qmdir
    module StyleSettings
    singleton Style 1.0 Style.qml
        Addressbook.pro
    ...
        # Additional import path used to resolve QML modules in Qt Creators code model
        QML_IMPORT_PATH += $$PWD/qml
    ...
    Task:
    После того как написали програамму сервера на классическм процессоре, подключим CPU ядра
    Decision:
        https://developer.nvidia.com/opencl - OpenCL Multi Threads - Download - Windows (x64) - излечь - C:\Users\david\Downloads\NVIDIA GPU Computing SDK\OpenCL\common\inc\CL - Копируем CL - Вставляем в наш проект - C:\Users\david\Downloads\NVIDIA GPU Computing SDK\OpenCL\common\lib\x64\ - Копируем OpenCL.lib - вставляем в наш проект - Поиск - opencl.dll - C:\Windows\SysWOW64 - коипруем OpenCL.dll и вставляем в наш проект \build-main-Desktop_Qt_5_12_11_MSVC2017_32bit-Debug\debug\-
    ...
    //#pragma comment (lib, "Mswsock.lib")
    #pragma comment(lib, "OpenCL.lib")
    #include "CL\cl.h"
    struct TPot{
    ...
    Task:
    :-1: error: LNK1104: cannot open file 'OpenCL.lib'
    Decision:
        main.pro
    ...
    CONFIG -= app_bundle
    LIBS += C:\Users\...\Documents\Projects\Cpp\Git\CPP-WebServer0\main\OpenCL.lib
    # You can make your code fail to compile if it uses deprecated APIs
    Task:
    Web Server on CPU. To create a CPU-based web server. here I am learning how to create a web server on the CPU
    Decision:
    https://github.com/David138it/MyPortfolio/Skills/Engineer-Isu/Cpp/WebServerOnCpu/
    Decision:
    запустить QT creator - открыть проект с расширением .pro - указать правильный путь в библиотеку OpenCL в расширении .pro - запустить проект - после запуска запустить любой браузер - в адресную строку ввести адрес вашей локальной машины с портом 8080 - например так: IpAddr1:8080 - узнать ip адрес командой ipconfig
    Task:
    The matrix
    Decision:
    #include <GL/glut.h>
    #include <iostream>
    using namespace std;
    struct Ch{
        Ch(char ach=' ', int alive=0):
            ch(ach),
            live(alive)
        {}
        char ch;
        int live;
    };
    const int W=852/9;
    const int H=480/15;
    Ch screen[W][H];
    void display(){
        glClear(GL_COLOR_BUFFER_BIT);
        for(int y=0; y<H; ++y){
            for(int x=0; x<W; ++x){
                glRasterPos2f(x*9, (y+1)*15);
                glColor3f(0, screen[x][y].live/10000.0, 0);
                glutBitmapCharacter(GLUT_BITMAP_9_BY_15, screen[x][y].ch);
            }
        }
        glutSwapBuffers();
    }
    void timer(int=0){
            for(int y=0; y<H; ++y){
                for(int x=0; x<W; ++x){
                if(screen[x][y].live>0){
                    --screen[x][y].live;
                }
            }
        }
        int x=rand()%W;
        for(int y=0; y<H; ++y){
            if(screen[x][y].live<=0){
                screen[x][y].ch=rand()%256;
                screen[x][y].live=10000;
                break;
            }
        }
        glutPostRedisplay();
        glutTimerFunc(0, timer, 0);
    }
    int main(int argc, char **argv){
        glutInit(&argc, argv);
        glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
        glutInitWindowSize(852, 480);
        glutInitWindowPosition(0, 86);
        glutCreateWindow("Metrix Code");
        glClearColor(0, 0, 0, 1.0);
        glMatrixMode(GL_PROJECTION);
        glLoadIdentity();
        glOrtho(0, 852, 480, 0, -1, 1);
        glutDisplayFunc(display);
        timer();
        glutMainLoop();
        /*for(unsigned wchar i=' '; i<500; ++i){
            wcout<<(wchar)i;
        }*/
    }
    Task:
    Address Book. here I am learning how to create a program with a graphical application Address Book - a telephone directory using Model View Controller
    Decision:
    https://github.com/David138it/MyPortfolio/Skills/Engineer-Isu/Cpp/AddressBook/
    Task:
    Я заранее создал список имен c телефонными номерами в файле file.txt. Нужно создать такую программу, что бы при вводе имени на консоле выдавался номер нужного человека. Сделаю я это с помощью вектора.
    Decision:
    #include<iostream>
    #include<fstream>
    #include<vector>
    #include<string>
    using namespace std;
    class Number{
    public:
        string name;
        string number;
        Number (const Number &v):
            name(v.name),
            number(v.number){}
        Number(){}
        const Number &operator=(const Number &v){
            name=v.name;
            number=v.number;
            return v;
        }       
    };
    int main(){
        fstream f("file.txt");
        vector<Number> telBook;
        while(true){
            Number t;
            f>>t.name;
            if(f.eof()){
                break;
            }
            f>>t.number;
            if(f.eof()){
                break;
            }
            telBook.push_back(t);
        }
        while(true){
            cout<<"Введите имя (или стоп)";
            string name;
            cin>>name;
            if(name=="стоп"){
                break;
            }
            for(int i=0;i<telBook.size(); ++i){
                if(telBook[i].name==name){
                    cout<<name<<" "<<telBook[i].number<<endl;
                }
            }
        }
    }
    Task:
    работа с мышью
    Decision:
    #include <GL/glut.h>
    #include <cstdlib>
    #include <cmath>
    using namespace std;
    int x=0, y=0;
    bool down=false;
    const int N=100;
    struct P{
        float x, y, vx, vy, r, g, b;
    }p[N];
    void display(){
        glClear(GL_COLOR_BUFFER_BIT);
        glPointSize(5);
        glBegin(GL_POINTS);
        for(int i=0; i<N; ++i){
            glColor3f(p[i].r, p[i].g, p[i].b);
            glVertex2f(p[i].x, p[i].y);
        }
        glEnd();
        glutSwapBuffers();
    }
    void timer(int=0){
        display();
        for(int i=0; i<N; ++i){
            p[i].x+=p[i].vx;
            p[i].y+=p[i].vy;
            if (down){
                float d=sqrt((p[i].x-x)*(p[i].x-x)+(p[i].y-y)*(p[i].y-y));
                p[i].x+=5*(x-p[i].x)/d;
                p[i].y+=5*(y-p[i].y)/d;
            }
        }
        glutTimerFunc(10, timer, 0);
    }
    void mouse(int button, int state, int ax, int ay){
        x=ax;
        y=ay;
        down=state==GLUT_DOWN;
    }
    void motion(int ax, int ay){
        x=ax;
        y=ay;
    }
    int main(int argc, char **argv){
        for(int i=0; i<N; ++i){
            p[i].x=rand()%480;
            p[i].y=rand()%480;
            p[i].vx=rand()%480/100.0-2.4;
            p[i].vy=rand()%480/100.0-2.4;
            p[i].r=rand()%200/200.0;
            p[i].g=rand()%200/200.0;
            p[i].b=rand()%200/200.0;
        }
        glutInit(&argc, argv);
        glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
        glutInitWindowSize(480, 480);
        glutInitWindowPosition(20, 1050-480-20);
        glutCreateWindow("Knight tour");
        glClearColor(0, 0, 0, 1.0);
        glMatrixMode(GL_PROJECTION);
        glLoadIdentity();
        glOrtho(0, 480, 480, 0, -1, 1);
        glutDisplayFunc(display);
        timer();
        glutMouseFunc(mouse);
        glutMotionFunc(motion);
        glutMainLoop();
    }
    Task:
    Моделирование гравитации
    Decision:
    #include<GL/glut.h>
    #include<cmath>
    struct Particle{
        float x, y, vx, vy, m;
    };
    const int N=4;
    Particle particles[N];
    void display(){
            glClear(GL_COLOR_BUFFER_BIT);
            glBegin(GL_POINTS);
        for(int i=0; i<N; ++i){
            glVertex2f(particles[i].x, particles[i].y);
        }
            glEnd();
            glutSwapBuffers();
    }
    void timer(int=0){
        for(int i=0; i<N; ++i){
            Particle &p0=particles[i];
            for(int j=0; j<N; ++j){
                if(j==i){
                    continue;
                }
                const Particle &p=particles[j];
                float d=sqrt((p0.x-p.x)*(p0.x-p.x)+
                        (p0.y-p.y)*(p0.y-p.y));
                if(d>3){
                    p0.vx+=0.0007*p.m/d/d*(p.x-p0.x)/d;
                                    p0.vy+=0.0007*p.m/d/d*(p.y-p0.y)/d;
                }
            }
            p0.x+=p0.vx;
            p0.y+=p0.vy;

        }
            display();
            glutTimerFunc(1,timer,0);
    }
    int main(int argc, char **argv){
        particles[0].x=100;
        particles[0].y=100;
        particles[0].vx=0;
        particles[0].vy=0;
        particles[0].m=1000;
            particles[1].x=130;
            particles[1].y=100;
            particles[1].vx=0;
            particles[1].vy=-0.1;
            particles[1].m=7;
            particles[2].x=30;
            particles[2].y=100;
            particles[2].vx=0;
            particles[2].vy=0.1;
            particles[2].m=10;
            particles[3].x=25;
            particles[3].y=100;
            particles[3].vx=0;
            particles[3].vy=0.11;
            particles[3].m=0.1;
        glutInit(&argc, argv);
            glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
            glutInitWindowSize(200,200);
            glutInitWindowPosition(20,810);
            glutCreateWindow("Gravitation");
            glClearColor(0,0,0,1.0);
            glMatrixMode(GL_PROJECTION);
            glLoadIdentity();
            glOrtho(0,200,200,0,-1,1);
            glutDisplayFunc(display);
            timer();
            glutMainLoop();
    }
    Task:   
    Дан String с кучей символами, напиши код который вернет самый длинный substring без повторяющихся символов
    input: "aaaabbbbbvvvxvxxzzzzrgdsbbbdddvcc"
    output: "zrgdsb"
    Source:
    1. https://www.youtube.com/playlist?list=PLg5SS_4L6LYuu1RAT4l1tCkZrJzkIaNgL
    Task:
    определить длину строки
    Decision:
    #include<stdio.h>
    #include<string.h>
    void main()
    {
        char S[]="This is string";
        printf("%d",strlen(S));
    } 
    Task:
    Склонение слов
    Decision:
    #include <iostream>
    using namespace std;
    int main(){
        cout<<"Введите кoличество пирожков: ";
        int n;
        cin>>n;
        cout<<"Я собираюсь съесть "<<n;
            int o=n%100;
        if((o>10)&&(o<20)){
            cout<<" .";
        }
        else{
            switch(o%10){
                case 0:
                    cout<<" пирожков.";
                    break;
                case 1:
                    cout<<" пирожок.";
                    break;
                case 2:
                case 3:
                case 4:
                    cout<<" пирожка.";
                    break;
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                    cout<<" пирожков.";
                    break;
            }
        }
        cout<<endl; 
    }
    Task:
    Вращающийся куб
    Decision:
    #include <GL/glut.h>
    //#include <GL/freeglut.h>
    void display(){
        glClear(GL_COLOR_BUFFER_BIT);
        glRotatef(1,1,1,0);
        glBegin(GL_LINE_STRIP);
        glVertex3f(-50, -50, -50);
        glVertex3f(50, -50, -50);
        glVertex3f(50, 50, -50);
        glVertex3f(-50, 50, -50);   
        glVertex3f(-50, -50, -50);
        glEnd();
            glBegin(GL_LINE_STRIP);
            glVertex3f(-50, -50, 50);
            glVertex3f(50, -50, 50);
            glVertex3f(50, 50, 50);
            glVertex3f(-50, 50, 50); 
            glVertex3f(-50, -50, 50);
            glEnd();
            glBegin(GL_LINES);
            glVertex3f(-50, -50, 50);
            glVertex3f(-50, -50, -50);
            glVertex3f(50, -50, 50);
            glVertex3f(50, -50, -50); 
            glVertex3f(50, 50, 50);
        glVertex3f(50, 50, -50);
        glVertex3f(-50, 50, 50);
        glVertex3f(-50, 50, -50);
            glEnd();

        glutSwapBuffers();
    }
    void timer(int=0){
        display();
    glutTimerFunc(10, timer, 0);
    }
    int main(int argc, char **argv){
        glutInit(&argc, argv);
        glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
        glutInitWindowSize(200, 200);
        glutInitWindowPosition(20, 810);
        glutCreateWindow("Cube");
        glClearColor(0,0,0,1.0);
        glMatrixMode(GL_PROJECTION);
        glLoadIdentity();
        glOrtho(-100, 100, -100, 100, -100, 100);
        glutDisplayFunc(display);
        timer();
        glutMainLoop();
    }
    Task:
    Две функции, синус и косинус, должны отображаться на одном графике при изменении аргумента функции в диапазоне от 0 до 10 радиан. Графики должны представлять собой ломаные линии, проходящие через узловые точки. Шаг узлов должен быть задан с помощью графического интерфейса. Необходимо выполнить полную разметку осей (ординат и абсцисс). Каждая функция должна использовать свой собственный стиль строки. Необходимо организовать рисование подписи к графику.
    Decision:
    https://github.com/David138it/MyPortfolio/Skills/Engineer-Isu/Cpp/Graphics/
    Task:
    Составить программу, принимающую с клавиатуры декартовы координаты точки и печатающую сферические координаты. Преобразование координат должно быть выполнено функцией типа void по формулам
    Decision:
    #include<stdio.h>
    #include<math.h>
    /*void sphere(double x, double y, double z, double *r, double *q, double *fi)
    {
        int a;
        *r=sqrt(x*x+y*y+z*z);
        *q=acos(z/(*r));
        if (x!=0){
            *fi=atan(y/x);
        }
    }
    void main(void)
    {
        double x, y, z, r, q, fi;
        printf("x=");scanf("%lf",&x);
        printf("y=");scanf("%lf",&y);
        printf("z=");scanf("%lf",&z);
        sphere(x, y, z, &r, &q, &fi);
        printf("%lf\n%lf\n%lf\n",r,q,fi);
    }*/
    const double pi=3.1415927;
    void sphere(double x, double y, double z, double *r, double *q, double *fi)
    {
        int a;
        *r=sqrt(x*x+y*y+z*z);
        *q=acos(z/(*r))*180.0/pi;
        if (x!=0){
            *fi=atan(y/x)*180.0/pi;
        }
    }
    void main(void)
    {
        double x, y, z, r, q, fi;
        printf("x=");scanf("%lf",&x);
        printf("y=");scanf("%lf",&y);
        printf("z=");scanf("%lf",&z);
        sphere(x, y, z, &r, &q, &fi);
        printf("%lf\n%lf\n%lf\n",r,q,fi);
    }
    Task:
    нам нужно создать функцию, которая принимает в качестве аргументов полярные координаты точки p и ф и передает в вызывающую эту функцию программу декартовы координаты точки Х и У, вычисляемые по формулам: *X=p*Cos(ф), Y=p*Sin(ф)
    Decision:
    #include<stdio.h>
    #include<math.h>
    const double pi180=3.1415927/180;
    void DECART(double r, double f, double *x, double *y)
    {
        *x=r*sin(f*pi180);
        *y=r*cos(f*pi180);
    }
    void main()
    {
        double r,f,x,y;
        scanf("%lf %lf",&r,&f);
        DECART(r,f,&x,&y);
        printf("%lf %lf",x,y);
    }
    Task:
    Для вводимого с консоли значения вещественной переменной а, напечатать таблицу значений функций вида:
    sin(a)=...
    arccos(a)==...
    ехр(a).==...
    ln(a)=^...
    ceil(a)=...
    floor(a)=...
    sqrt(a)=…
    pow(2,a)=...
    На месте a должно отображаться число, введенное с клавиатуры, на месте ... - значение соответствующей функции. 
    Decision:
    #include<stdio.h>
    #include<curses.h>
    #include<math.h>
    const float Pi=3.1415927;
    void main()
    {
      float a;
      a=30.0;
      printf("Напишите число: "); scanf("%f",&a);
      printf("sin(a)=%4.2lf\n",sin(a*Pi/180.0));
      printf("arccos(a)=%4.2lf\n",acos(a*Pi/180.0));
      printf("exp(a)=%4.2lf\n",exp(a));
      printf("ln(a)=%4.2lf\n",log(a));
      printf("ceil(a)=%4.1lf\n",ceil(a));
      printf("floor(a)=%4.1lf\n",floor(a));
      printf("sqrt(a)=%4.2lf\n",sqrt(a));
      printf("pow(2,a)=%4.2lf\n",pow(2,a));
      getch();
    } 
    Task:
    Используя математическую функцию tan, напечатать таблицу тангенсов и котангенсов в виде:
    a      tg(a)   ctg(a)
    30.0  ...      ...
    45.0 ...       ...
    60.0 ...       ...
    На месте ... должны быть напечатаны соответствующие значения тригонометрических функций с тремя значащими цифрами в дробной части.
    Decision:
    #include<stdio.h>
    #include<curses.h>
    #include<math.h>
    const float Pi=3.1415927;
    void main()
    {
      float a;
      a=30.0;
      printf("a\ttg(a)\tctg(a)\n");
      printf("%4.1f\t%4.2lf\t%4.2lf\n",a,tan(a*Pi/180.0),1/tan(a*Pi/180.0));
      printf("%4.1f\t%4.2lf\t%4.2lf\n",a+15,tan((a+15)*Pi/180.0),1/tan((a+15)*Pi/180.0));
      printf("%4.1f\t%4.2lf\t%4.2lf\n",a+30,tan((a+30)*Pi/180.0),1/tan((a+30)*Pi/180.0));
      getch();
    } 
    Task:
    Puzzle 15
    Decision:
    https://github.com/David138it/MyPortfolio/Skills/Engineer-Isu/Cpp/15Puzzle/
    Task:
    Тетрис
    Decision:
    https://github.com/David138it/MyPortfolio/Skills/Engineer-Isu/Cpp/Tetris/Tetris
    Decision:
    $ g++ painter.cpp tetris.cpp -o main -lglut -lGLU -lGL
    $ ./main
    Task:
    Draw a red square in the window
    Decision:
    https://github.com/David138it/MyPortfolio/Skills/Engineer-Isu/Cpp/Tetris/Tetris1
    Decision:
    $ g++ painter.cpp tetris.cpp -o main -lglut -lGLU -lGL
    $ ./main
    Task:
    Draw figures for tetris
    Decision:
    https://github.com/David138it/MyPortfolio/Skills/Engineer-Isu/Cpp/Tetris/Tetris2
    Decision:
    $ g++ painter.cpp tetris.cpp tetromino.cpp -o main -lglut -lGLU -lGL
    $ ./main
    Task:
    Let's draw a figure now, so that you can turn it over
    Decision:
    https://github.com/David138it/MyPortfolio/Skills/Engineer-Isu/Cpp/Tetris/Tetris3
    Decision:
    $ g++ painter.cpp tetris.cpp tetromino.cpp -o main -lglut -lGLU -lGL
    $ ./main
    Task:
    We will also check other figures
    Decision:
    https://github.com/David138it/MyPortfolio/Skills/Engineer-Isu/Cpp/Tetris/Tetris4
    Decision:
    $ g++ painter.cpp tetris.cpp tetromino.cpp -o main -lglut -lGLU -lGL
    $ ./main
    Task:
    Change the color of the shapes
    Decision:
    https://github.com/David138it/MyPortfolio/Skills/Engineer-Isu/Cpp/Tetris/Tetris5
    Decision:
    $ g++ painter.cpp tetris.cpp tetromino.cpp well.cpp -o main -lglut -lGLU -lGL
    $ ./main
    Task:
    Let's create a movement for the figure
    Decision:
    https://github.com/David138it/MyPortfolio/Skills/Engineer-Isu/Cpp/Tetris/Tetris6
    Decision:
    $ g++ painter.cpp tetris.cpp tetromino.cpp well.cpp game.cpp -o main -lglut -lGLU -lGL
    $ ./main
    Task:
    Final stage
    Decision:
    $ g++ painter.cpp tetris.cpp tetromino.cpp well.cpp game.cpp -o main -lglut -lGLU -lGL
    $ ./main
    Decision:
    https://github.com/David138it/MyPortfolio/Skills/Engineer-Isu/Cpp/Tetris/Tetris7
    Task:
    chess rook
    The chess rook moves horizontally or vertically. Given two different cells of the chessboard, determine whether the rook can get from the first cell to the second one in one move. The program receives four numbers from 1 to 8 each, specifying the column number and row number first for the first cell, then for the second cell. The program should output YES if it is possible to get into the second cell from the first cell by the move of the rook, or NO otherwise.
    Task:
    Chess King
    The chess king moves horizontally, vertically and diagonally, but only by 1 square. Given two different squares of the chessboard, determine whether the king can get from the first square to the second one in one move. The program receives four numbers from 1 to 8 each, specifying the column number and row number first for the first cell, then for the second cell. The program should output YES if it is possible to get to the second square from the first square by the king's move, or NO otherwise.
    Task:
    Chess bishop
    Chess bishop moves diagonally. Given two different cells of the chessboard, determine whether the bishop can get from the first cell to the second one in one move. The program receives four numbers from 1 to 8 each, specifying the column number and row number first for the first cell, then for the second cell. The program should output YES if it is possible to get into the second cell from the first cell by the bishop's move, or NO otherwise.
    Task:
    Chess queen
    The chess queen moves diagonally, horizontally or vertically. Given two different cells of the chessboard, determine whether the queen can get from the first cell to the second one in one move. The program receives four numbers from 1 to 8 each, specifying the column number and row number first for the first cell, then for the second cell. The program should output YES if it is possible to get into the second cell from the first cell by the queen's move, or NO otherwise.
    Task:
    Chess knight
    The chess knight moves the letter "G" two squares vertically in any direction and one square horizontally, or vice versa. Given two different squares of the chessboard, determine whether the knight can get from the first square to the second one in one move. The program receives four numbers from 1 to 8 each, specifying the column number and row number first for the first cell, then for the second cell. The program should output YES if it is possible to get to the second square from the first square by the knight's move, or NO otherwise.
    Decision:
    https://github.com/David138it/MyPortfolio/Skills/Engineer-Isu/Cpp/Chess/
    Task:
    Шашки
    Decision:
    https://github.com/David138it/MyPortfolio/Skills/Engineer-Isu/Cpp/Checkers/
    Task:
    Крестики-нолики
    Decision:
    #include <iostream>
    using namespace std;
    int main() {
        char xo[3][3] = {
            {'.', '.','.'},
            {'.', '.','.'},
            {'.', '.','.'}
        };
        while(true) {
            int x, y;
            cin >> x >> y;
            xo[x][y] = 'x';
            for(int i=0;i<3; i++) {
                for(int j=0;j<3; j++) {
                    cout << xo[i][j] << " ";
                }
                cout << endl;
            }
        }
        return 0;
    }
    Decision:
    #include<iostream>
    using namespace std;
    //char d[9]={ '-', '-', '-', '-', '-', '-', '-', '-', '-'};
    char d[9]={};
    void clear(){
        for(int i=0; i<50; i++){
            cout<<endl;
        }
    }
    void clear_doska(){
        for(int i=0; i<9; i++){
            d[i]='-';
        }
    }
    void doska_player(){
        cout<<"ход игроков"<<endl;
        cout<<"-"<<d[6]<<"-|-"<<d[7]<<"-|-"<<d[8]<<"-"<<endl;
        cout<<"-"<<d[3]<<"-|-"<<d[4]<<"-|-"<<d[5]<<"-"<<endl;
        cout<<"-"<<d[0]<<"-|-"<<d[1]<<"-|-"<<d[2]<<"-"<<endl;
    }
    int doska(){
        cout<<"подсказка хода"<<endl;
        cout<<"-7-|-8-|-9-"<<endl;
        cout<<"-4-|-5-|-6-"<<endl;
        cout<<"-1-|-2-|-3-"<<endl;
        doska_player("");
        //cout<<"ход игроков"<<endl;
        //cout<<"-"<<d[6]<<"-|-"<<d[7]<<"-|-"<<d[8]<<"-"<<endl;
        //cout<<"-"<<d[3]<<"-|-"<<d[4]<<"-|-"<<d[5]<<"-"<<endl;
        //cout<<"-"<<d[0]<<"-|-"<<d[1]<<"-|-"<<d[2]<<"-"<<endl;
        int hod;
        cout<<"ваш ход: ";
        cin>>hod;
        while(hod>9 || hod<1 || d[hod-1]!='-'){
            cout<<"введите правильный ход: ";
            cin>>hod;
        }
        return hod;
    }
    int main(){
        clear_doska();
        int turn=0;
        for(int i=0; i<9; i++){
            clear();
            int hod=doska();
            cout<<"Вы ввели: "<<hod<<endl;
            if(i%2==0){
                d[hod-1]='x';
            }else{
                d[hod-1]='o';
            }
            turn++;
        }
        doska_player();
        return 0;
    }
    Decision:
    #include<iostream>
    #include<string>
    using namespace std;
    char d[9]={};
    void clear(){
        for(int i=0; i<50; i++){
            cout<<endl;
        }
    }
    void clear_doska(){
        for(int i=0; i<9; i++){
            d[i]='-';
        }
    }
    void doska_player(string indent){
        cout<<indent<<"-"<<d[6]<<"-|-"<<d[7]<<"-|-"<<d[8]<<"-"<<endl;
        cout<<indent<<"-"<<d[3]<<"-|-"<<d[4]<<"-|-"<<d[5]<<"-"<<endl;
        cout<<indent<<"-"<<d[0]<<"-|-"<<d[1]<<"-|-"<<d[2]<<"-"<<endl;
    }
    int doska(){
        cout<<"подсказка хода"<<endl;
        cout<<"-7-|-8-|-9-"<<endl;
        cout<<"-4-|-5-|-6-"<<endl;
        cout<<"-1-|-2-|-3-"<<endl;
        doska_player("");
        int hod;    
        cout<<"ваш ход: ";
        cin>>hod;
        while(hod>9 || hod<1 || d[hod-1]!='-'){
            cout<<"введите правильный ход: ";
            cin>>hod;
        }
        return hod;
    }
    bool finish_win(char player){
        int win[][3]={{0,1,2},{3,4,5},{6,7,8},{0,3,6},{1,4,7},{2,5,8},{6,4,2},{0,4,8}};
        for(int i=0; i<8; i++){
            int count=0;
            for(int j=0; j<3; j++){
                if(d[win[i][j]]==player){
                    count++;
                }
            }
            if(count==3){
                return true;
            }
        }
        return false;
    }
    char play_and_get_winner(){
        int turn=1;
        while(!finish_win('x') && !finish_win('o')){
            clear();
            int hod=doska();
            cout<<"Вы ввели: "<<hod<<endl;
            if(turn%2==1){
                d[hod-1]='x';
                if(finish_win('x')){
                    cout<<"player X: поздравляю, вы выйграли"<<endl;
                    return 'x';
                }
            }else{
                d[hod-1]='o';
                if(finish_win('o')){
                    cout<<"player O: поздравляю, вы выйграли"<<endl;
                    return 'o';
                }
            }
            turn++;
            if(turn==10){
                cout<<"Ничья"<<endl;
            }
        }
        return 'D';
    }
    int main(){
        cout<<"Welcome"<<endl;
        string reply="y";
        int x_wins=0, o_wins=0, ties=0;
        while(reply=="y"){
            clear_doska();
            char winner=play_and_get_winner();
            doska_player("\t");
            switch(winner){
                case 'x':
                    x_wins++;
                    break;
                case 'o':
                    o_wins++;
                    break;
                case 'D':
                    ties++;
                    break;
            }
            cout<<" Статистика Игрока Х: " <<x_wins<<", Игрока О: "<<o_wins<<" И нeчьи "<<ties<<endl;
            cout<<"Хотите продолжить?(y/n) ";
            cin>>reply;
            while(reply!="y" && reply!="n"){
                cout<<"Пожалуйста, введите правильный ответ(y/n) ";
                cin>>reply;
            }
        }
        return 0;
    }
    Task:
    Сапер
    Мальчику Васе очень нравится знаменитая игра "Сапер" ("Minesweeper").
    Один человек играет в "Сапера". Игра ведется на клетчатом поле (далее мы будем называть это картой) N×M (N строк, M столбцов). В K ячейках поля находятся мины, в остальных ячейках либо записывается число от 1 до 8 — количество мин в соседних ячейках, либо ничего не записывается, если в соседних ячейках нет мин. Ячейки являются смежными, если у них есть хотя бы одна общая точка, в одной ячейке не может быть более одной мины. Изначально все ячейки поля закрыты. Игрок может открыть ячейку за один ход. Если в открытой им ячейке есть мина, он проигрывает, в противном случае игроку показывается число, которое стоит в этой ячейке, и игра продолжается. Цель игры состоит в том, чтобы открыть все ячейки, в которых нет мин.
    У Васи есть эта игра на компьютере, но ему кажется, что все карточки, которые в ней есть, некрасивые и неинтересные. Поэтому он решил нарисовать свой собственный. Однако у него богатое воображение, а времени мало, и он хочет успеть нарисовать как можно больше карточек. Поэтому он просто выбирает N, M и K и расставляет мины на поле, после чего все остальные ячейки могут быть однозначно идентифицированы. Однако он не хочет тратить свое драгоценное время на определение оставшихся ячеек. Помогите ему!
    Decision:
    #include<iostream>
    #include<fstream>
    #include<ctime>
    #include<cstdlib>
    using namespace std;
    ifstream in("input.txt");
    ofstream out("output.txt");
    int main()
    {

        char massive[10][10]={
                {'.','.','.','.','.','.','.','.','.','.'},
                {'.','.','.','.','.','.','.','.','.','.'},
                {'.','.','.','.','.','.','.','.','.','.'},
                {'.','.','.','.','.','.','.','.','.','.'},
                {'.','.','.','.','.','.','.','.','.','.'},
                {'.','.','.','.','.','.','.','.','.','.'},
                {'.','.','.','.','.','.','.','.','.','.'},
                {'.','.','.','.','.','.','.','.','.','.'},
                {'.','.','.','.','.','.','.','.','.','.'},
                {'.','.','.','.','.','.','.','.','.','.'}
                };
        time_t now = time(NULL);
        srand(now);
        int x, y;
        for (int i=0; i<10; ){
            x = rand()%10;
            y = rand()%10;
            if (massive[x][y]=='*'){
                continue;
            }
            else {
                massive[x][y] ='*';
            }
           i++;
        }
        for (int i=0; i<10; i++){
            for (int j=0;j<10;j++)
            cout << massive[i][j] << " ";
            cout << endl;
        }

        return 0;
    }
    Task:
    Лабиринт с помощью двумерных массивов
    Decision:
    #include <iostream>
    #include <math.h>
    #include <clocale>
    using namespace std;
    int main()
    {
        setlocale(LC_CTYPE, "rus");
        int mas[33][20] = {
                            {1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,}, 
                            {1,2,1,0,0,1,0,1,2,2,2,1,1,1,1,0,0,0,0,1,},
                            {1,2,1,1,0,1,0,1,2,1,2,2,2,2,1,0,1,1,0,1,},
                            {1,2,2,2,2,2,2,1,2,1,1,1,1,2,1,0,0,1,0,1,},
                            {1,1,1,1,1,1,2,1,2,1,0,0,1,2,1,1,0,1,0,1,},
                            {1,0,0,1,0,0,2,2,2,1,1,0,0,2,0,0,0,1,0,1,},
                            {1,0,1,1,0,1,1,1,1,1,0,0,1,2,1,1,1,1,0,1,},
                            {1,0,0,0,0,0,0,0,0,1,1,1,1,2,1,0,0,0,0,1,},
                            {1,1,1,1,1,1,0,1,1,1,2,2,2,2,1,0,1,1,1,1,},
                            {1,1,0,0,0,1,0,0,1,1,2,1,1,1,1,0,0,0,0,1,},
                            {1,0,0,1,0,0,0,0,0,1,2,2,2,2,1,1,1,1,0,1,},
                            {1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,0,0,0,0,1,},
                            {1,2,2,2,2,2,2,2,2,2,2,2,2,2,1,0,1,1,1,1,},
                            {1,2,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,},
                            {1,2,1,0,0,0,1,2,2,2,1,0,0,0,0,0,1,1,0,1,},
                            {1,2,1,1,1,1,1,2,1,2,1,1,1,0,1,0,0,0,0,1,},
                            {1,2,1,2,2,2,1,2,1,2,2,2,1,1,1,1,1,1,1,1,},
                            {1,2,1,2,1,2,1,2,1,0,1,2,2,2,2,2,2,2,2,1,},
                            {1,2,1,2,1,2,1,2,1,0,1,1,1,1,1,1,1,1,2,1,},
                            {1,2,1,2,1,2,1,2,1,0,0,0,0,0,0,0,0,0,2,1,},
                            {1,2,1,2,1,2,2,2,1,0,1,1,1,1,1,1,0,1,2,1,},
                            {1,2,1,2,1,1,1,1,1,0,0,0,1,0,1,0,0,1,2,1,},
                            {1,2,1,2,2,1,0,0,1,1,1,0,0,0,1,0,1,1,2,1,},
                            {1,2,1,1,2,1,1,0,0,0,0,0,1,0,1,0,0,1,2,1,},
                            {1,2,1,1,2,1,0,0,1,1,1,1,1,1,1,1,1,1,2,1,},
                            {1,2,1,1,2,1,1,0,1,2,2,2,2,2,2,2,2,2,2,1,},
                            {1,2,1,1,2,1,0,0,1,2,1,1,1,1,1,1,1,1,1,1,},
                            {1,2,1,1,2,1,0,1,1,2,1,1,1,1,1,1,1,1,2,2,},
                            {1,2,1,1,2,1,0,0,1,2,1,1,2,2,2,2,2,2,2,1,},
                            {1,2,1,1,2,1,0,1,1,2,1,1,2,1,1,1,1,1,1,1,},
                            {1,2,1,1,2,1,0,0,1,2,1,1,2,1,0,0,0,1,0,1,},
                            {1,2,2,2,2,1,0,1,1,2,2,2,2,0,0,1,0,0,0,1,},
                            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,}
        };
        for (int i = 0; i < 33; i++)
        {
            for (int j = 0; j < 20; j++)
            {
                if (mas[i][j] == 1)
                {
                    cout <<"j";
                    cout <<"j";
                } else{
                     cout << "  ";
                }
            }
            cout << endl;
        }
        return 0;
    }    
    Task:
    Keyboard. For this letter of the English alphabet, you need to print the letter on the right on a standard keyboard. At the same time, the keyboard is closed, i.e. to the right of the letter «p» is the letter «a», from the letter «l» is the letter «z», and from the letter «m» — the letter
    Input: Первая строка входного файла INPUT.TXT содержит один символ — маленькую букву английского алфавита.
    Output: В выходной файл OUTPUT.TXT следует вывести букву стоящую справа от заданной буквы, с учетом замкнутости клавиатуры.
    Decision:
    #include<iostream>
    #include<fstream>
    #include<cmath>
    using namespace std;
    ifstream in("input.txt");
    ofstream out("output.txt");
    int main()
    {
        const char massive=26;
        char a[massive]={
            'q','w','e','r','t','y','u','i','o','p','a',
            's','d','f','g','h','j','k','l','z','x','c',
            'v','b','n','m'
        };
        char symbol;
        in>>symbol;
        if(symbol=='m'){
            out<<a[0];
        }
        else{
            for(int i=0; i<massive; i++){
                if(symbol==a[i]){
                    out<<a[i+1];
                }

            }
        }
        return 0;
    }
    Task:
    Поиск числа в отсортированном массиве
    Decision:
    $ cat Cpp-SearchingForANumberInASortedArray.cpp
    #include<iostream>
    #include<fstream>
    using namespace std;
    int main(){
        
        fstream f("Cpp-SearchingForANumberInASortedArray.txt");
        const int n=100;
        int a[n];
        for (int i=0; i<n; ++i){
            f>>a[i];
        }
        int x;
        cout<<"VVedite iskonoe chislo";
        cin>>x;
        for (int i=0; i<n; ++i){
            if (x==a[i]){
                cout<<"chislo" << x << " nahoditsia po indeksu "
                    <<i;
                break;
            }
        }
    }
    $ cat Cpp-SearchingForANumberInASortedArray.txt
    23
    3234
    45345
    34
    534
    5
    345
    34
    54
    35
    34
    5
    345
    34
    534
    5
    34
    55
    435
    4
    45
    34
    534
    5
    34
    5
    34
    43545
    34
    5345
    34
    5
    345
    34454323
    3
    2
    2
    3
    1
    34234
    23
    324
    23
    43
    4
    234
    23
    423
    4
    324
    23
    432
    4
    234
    23
    4
    234
    23
    423
    4
    23
    423
    4
    234
    23
    4
    234
    23
    4
    23
    423
    4
    23
    423
    4
    23
    423
    4
    23
    423
    465
    43
    4
    654
    6
    456
    45
    645
    6
    456
    5
    656
    4
    56
    46
    457
    6
    7
    454
    Task:
    Часы
    Decision:
    $ cat Clock.cpp
    #include<GL/glut.h>
    #include<cmath>
    #include<ctime>
    void display(){
            glClear(GL_COLOR_BUFFER_BIT);
            glBegin(GL_LINES);
        for(int i=0; i<12; ++i){
            float x=sin(2*M_PI/12*i);
            float y=cos(2*M_PI/12*i);
            glVertex2f(400*x, 400*y);
            glVertex2f(380*x, 380*y);
        }
        time_t t=time(0);
        tm *lt=localtime(&t);//kosiyak
        int h=lt -> tm_hour;
        int m=lt -> tm_min;
        int s=lt -> tm_sec;
        float x=sin(2*M_PI*(h*60+m)/12/60);
            float y=cos(2*M_PI*(h*60+m)/12/60);
            glVertex2f(0, 0);
            glVertex2f(250*x, 250*y);
        x=sin(2*M_PI*m/60);
            y=cos(2*M_PI*m/60);
            glVertex2f(0, 0);
            glVertex2f(350*x, 350*y);
        x=sin(2*M_PI*s/60);
            y=cos(2*M_PI*s/60);
            glVertex2f(0, 0);
            glVertex2f(370*x, 370*y);
        glEnd();
            glutSwapBuffers();
    }
    void timer(int=0){
            display();
            glutTimerFunc(10,timer,0);
    }
    int main(int argc, char **argv){
        glutInit(&argc, argv);
            glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
            glutInitWindowSize(400,400);
            glutInitWindowPosition(20,1050-400-20);
            glutCreateWindow("Clock");
            glClearColor(0,0,0,1.0);
            glMatrixMode(GL_PROJECTION);
            glLoadIdentity();
            glOrtho(-400,400,-400,400,-400,400);
            glutDisplayFunc(display);
            timer();
            glutMainLoop();
    }
    $ g++ Clock.cpp -o main -lglut -lGLU -lGL
    $ ./main
    Task:
    День программиста отмечается в 255-й день года (при этом 1 января считается нулевым днем). Требуется написать программу, которая определит дату (месяц и число григорианского календаря), на которую приходится День программиста в заданном году.
    В григорианском календаре високосным является:
    1. год, номер которого делится нацело на 400
    2. год, номер которого делится на 4, но не делится на 100
    В единственной строке входного файла INPUT.TXT записано целое число от 1 до 9999 включительно, которое обозначает номер года нашей эры. В единственную строку выходного файла OUTPUT.TXT нужно вывести дату Дня программиста в формате DD/MM/YYYY, где DD — число, MM — номер месяца (01 — январь, 02 — февраль, ..., 12 — декабрь), YYYY — год в десятичной записи.
    Примеры
    №    INPUT.TXT    OUTPUT.TXT
    1    2000        12/09/2000
    2    2009        13/09/2009     
    Decision:
    #include <iostream>
    #include <fstream>
    #include <cmath>
    #include <vector>
    #include <ctime>
    #include <cstdlib>
    using namespace std;
    ifstream in("Cpp-ProgrammesDay.txt");
    ofstream out("output.txt");
    int main() {
        int y;
            in>>y;
            if((y%400==0)||(y%100!=0&&y%4==0)) {
                if(y<10) {
                    out<<"12"<<"/"<<"09/000"<<y;
                }
                else if(y<100) {
                    out<<"12"<<"/"<<"09/00"<<y;
                }
                else if(y<1000) {
                    out<<"12"<<"/"<<"09/0"<<y;
                }
                else if(y<10000) {
                    out<<"12"<<"/"<<"09/"<<y;
                }
            }
            else{
                if(y<10){
                    out<<"13"<<"/"<<"09/000"<<y;
                }
                else if(y<100) {
                    out<<"13"<<"/"<<"09/00"<<y;
                }
                else if(y<1000) {
                        out<<"13"<<"/"<<"09/0"<<y;
                }
                else if(y<10000) {
                    out<<"13"<<"/"<<"09/"<<y;
                }
            }
        return 0;
    }
    Task:
    Доработаем класс CppStudio так, чтобы в нём можно было хранить дату в формате дд.мм.гг. Для изменения и просмотра даты реализуем соответственно set и get функции.
    Decision:
    #include <iostream>
    using namespace std;
    class CppStudio // имя класса
    {
    private: // спецификатор доступа private
        int day, // день
            month, // месяц
            year; // год
    public: // спецификатор доступа public
        void message() // функция (метод класса) выводящая сообщение на экран
        {
            cout << "\nwebsite: cppstudio.comntheme: Classes and Objects in C + +\n";
        }
        void setDate(int date_day, int date_month, int date_year) // установка даты в формате дд.мм.гг
        {
            day   = date_day; // инициализация день
            month = date_month; // инициализация месяц
            year  = date_year; // инициализация год
        }
        void getDate() // отобразить текущую дату
        {
            cout << "Date: " << day << "." << month << "." << year << endl;
        }
    }; // конец объявления класса CppStudio
    int main(int argc, char* argv[])
    {
        int day, month, year;
        cout << "Введите текущий день месяц и год!\n";
        cout << "день: ";     cin >> day;
        cout << "месяц: ";    cin >> month;
        cout << "год: ";  cin >> year;
        CppStudio objCppstudio; // объявление объекта
        objCppstudio.message(); // вызов функции класса message
        objCppstudio.setDate(day, month, year); // инициализация даты
        objCppstudio.getDate(); // отобразить дату
        return 0;
    }
    Task:
    Пример с классом Counter, который представляет секундомер и хранит количество секунд
    Decision:
    #include <iostream>
    using namespace std;
    class Counter{
    public:
        Counter(int sec)
        {
            seconds = sec;
        }
        void display()
        {
            cout << seconds << " seconds" << endl;
        }
        int seconds;
    };
    Counter operator + (Counter c1, Counter c2){
        return Counter(c1.seconds + c2.seconds);
    }
    int main(){
        Counter c1(20);
        Counter c2(10);
        Counter c3 = c1 + c2;
        c3.display();   // 30 seconds
        return 0;
    }
    Decision:
    #include <iostream>
    using namespace std;
    class Counter{
    public:
        Counter(int sec){
            seconds = sec;
        }
        void display(){
            cout << seconds << " seconds" << endl;
        }
        Counter operator + (Counter c2){
            return Counter(this->seconds + c2.seconds);
        }
        int operator + (int s){
            return this->seconds + s;
        }
        int seconds;
    };
    int main(){
        Counter c1(20);
        Counter c2(10);
        Counter c3 = c1 + c2;
        c3.display();           // 30 seconds
        int seconds = c1 + 25;  // 45
        cout << seconds << endl;
        return 0;
    }
    Task:
    Минимум и максимум. Вывести из массива минимум и еще минимум
    Decision:
    #include <iostream>
    #include <stdlib.h>
    using namespace std;
    int main()
    {
        system("chcp 1251>0");
        const int arraysize = 5;
        int a [arraysize] = {18, 3, 4, 7, 7};
        int min=a[0], k=0, min2=a[1], k2=1, q;
        if (min>min2){
            q=min;
            min=min2;
            min2=q;

            q=k;
            k=k2;
            k2=q;
        }

        for (int i = 2; i < arraysize; i++){
            if (a[i]<min){
                min2=min;
                k2=k;
                min=a[i];
                k=i;
            }
            else{
                if(a[i]<min2){
                    min2=a[i];
                    k2=i;
                }

            }
        }
         cout << "min2=" << min2 << endl;
         cout << "k2=" << k2 << endl;
         cout << "min=" << min << endl;
         cout << "k=" << k << endl;
        return 0;
    }
    Task:
    Генерация. пытаемся отгадать число у компа
    Decision:
    #include<iostream>
    #include<cstdlib>
    #include<ctime>
    using namespace std;
    int main (){
            srand(time(0));
            bool done;
            do{
                    int j, i=rand()%100;
                    while (true){
                            cout<<"Какое число вы загадали?";
                            cin>>j;
                            if(i>j){
                                    cout<<"Мое число больше"<<endl;
                            }
                            else{
                                    if(i<j){
                                            cout<<"Мое число меньше"<<endl;
                                    }
                                    else{
                                            cout<<"Ты угадал"<<endl;
                                            break;
                                    }
                            }
                    }
                    cout<<"Продолжить? (y/n) ";
                    char c;
                    done=(c!='y');
                    cin>>c;
            }while(!done);
    }
    Task:
    Теперь наоборот комп пытаеmся угадать у нас число
    Decision:
    #include<iostream>
    #include<cmath>
    using namespace std;
    float f(float x){
            cout<<(int)x<<endl;
            while (true){
                    cout<<"Правильно? (+/-/=) ";
                    char c;
                    cin>>c;
                    switch (c){
                            case '+': return +1;
                            case '-': return -1;
                            case '=': return 0;
                    }
                    cout<<"Вы ввели не правильный символ, повторите"<<endl;
            }
    }
    float n(float x1, float x2){
            float x=(x1+x2)/2;
            float y=f(x);
            while(abs(y)>0.001){
                    if(y>0){
                            x1=x;
                    }else{
                            x2=x;
                    }
                    x=(x1+x2)/2;
                    y=f(x);
            }
            return x;
    }
    int main(){
            cout<<"Вы загадали "<< (int)n(0,100);
    }
    Task:
    Заполнить матрицу 6*6 случайными целыми числами в диапазоне от 0 до 200. Вывести матрицу на экран в виде таблицы. После этого вывести матрицу в транспонированном виде. 
    Decision:
    #include<stdio.h>
    #include<stdlib.h>
    void main()
    {
        int i,j,m[6][6];
        for(i=0;i<6;i++)
        {
            for(j=0;j<6;j++)
            {
                m[i][j]=rand()%200;
                printf("%d\t",m[i][j]);
            }
            printf("\n");
        }
        printf("\n");
            for(i=0;i<6;i++)
            {
                    for(j=0;j<6;j++)
                    {
                printf("%d\t",m[j][i]);
                    }
                    printf("\n");
            }
    }
    Decision:
    #include<stdio.h>
    #include<stdlib.h>
    void main()
    {
        int i,j,m[6][6];
        for(i=0;i<6;i++)
        {
            for(j=0;j<6;j++)
            {
                m[i][j]=rand()%200;
                printf("%d\t",m[i][j]);
            }
            printf("\n");
        }
        /*printf("\n");
            for(j=0;j<6;j++)
            {
                    for(i=0;i<6;i++)
                    {
                printf("%d\t",m[i][j]);
                    }
                    printf("\n");
            }*/
    }
    Decision:
    #include<stdio.h>
    void main()
    {
        int i,j, matrix[6][6];
        for(i=0;i<6;i++)
        {
            for(j=0;j<6;j++)
            {
                printf("x");
            }
            printf("\n");
        }
    }
    Task:
    Заполнить вещественный массив из 20 элементов случайными вещественными числами в диапазoне от - 3.0 до +3.0. Вывести на экран пронумерованный столбец значений элементов массива. Определить и вывести номер и значение наибольшего элемента массива.
    Decision:
    #include<stdio.h>
    #include<stdlib.h>
    void main()
    {
        double arr[20];
        int i;
        srand(time(0));
        for(i=0;i<20;i++){
            arr[i]=-3.0+6.0*rand()/(float)RAND_MAX;
            printf("%d %5.2lf\n",i+1,arr[i]);
        }
        printf("\n");
        float max=arr[0];
        int number;
        for(i=0;i<20;i++){
            if (max<arr[i])
            {
                max=arr[i];
                number=i+1;
            }
        }
        printf("%5.2lf\t%d\n",max,number);
    }    
    Decision:
    #include<stdio.h>
    #include<stdlib.h>
    void main()
    {
        float arr[20];
        int i;
        for(i=0;i<20;i++){
            arr[i]=rand()%(3+3+1)-3;
            printf("%d %5.2lf\n",i+1,arr[i]);
        }
        printf("\n");
        float max=arr[0];
        for(i=0;i<20;i++){
            if (max<arr[i])
            {
                max=arr[i];
            }
        }
        printf("%lf\n",max);
    }    
    Decision:
    #include<stdio.h>
    #include<stdlib.h>
    void main()
    {
        float arr[20];
        int i;
        for(i=0;i<20;i++){
            arr[i]=rand()%(3+3+1)-3;
            printf("%d %5.2lf\n",i,arr[i]);
        }
    } 
    Decision:
    #include<stdio.h>
    #include<stdlib.h>
    void main()
    {
        float arr[20];
        int i;
        for(i=0;i<20;i++){
            arr[i]=rand()%(3+3+1)-3;
            printf("Array=%5.2lf\n",arr[i]);
        }
    } 
    Task:
    Пользуясь только указателями, заполнить массив десятью целыми случайными числами в диапазоне от 0 до 10. Вывести пронумерованный массив значений в столбец на экран. После этого напечатать номера, значения и адреса тех элементов, которые оказались четными. Использовать операцию %.
    Decision:
    #include<stdio.h>
    #include<stdlib.h>
    void main()
    {
        int i, arr[10];
        for(i=0; i<10; i++){
            arr[i]=rand()%11;
            printf("%d\t%d\n",i+1,*(arr+i));
        }
    }    
    Decision:
    #include<stdio.h>
    #include<stdlib.h>
    void main()
    {
        int i, arr[10];
        for(i=0; i<10; i++){
            arr[i]=rand()%11;
            if ((arr[i]%2)==0)
            {
                printf("%d\t%d\t%p\n",i+1,*(arr+i),arr+i);
            }
        }
    }    
    Decision:
    #include<stdio.h>
    #include<stdlib.h>
    void main()
    {
        int i, arr[10];
        for(i=0; i<10; i++){
            arr[i]=rand()%11;
            printf("%d\n",arr[i]);
        }
    }    
    Decision:
    #include<stdio.h>
    #include<stdlib.h>
    void main()
    {
        int i, arr[10];
        for(i=0; i<10; i++){
            arr[i]=rand()%11;
            printf("%d\t%d\t%p\n",i+1,*(arr+i),arr+i);
        }
    }    
    Task:
    Генерация псевдослучайных чисел
    Decision:
    #include <iostream>
    #include <fstream>
    #include <cmath>
    #include <vector>
    #include <ctime>
    #include <cstdlib>
    using namespace std;
    int main() {
           time_t now = time(NULL); // сколько секунд прошло с 01.01.1970 до текущего момента
            srand(now);
        cout << rand() << endl; // генерация и печать случайного числа от 0 до   RAND_MAX
        return 0;
    }
    Task:
    Разработаем программу, в которой создадим одномерный динамический массив, заполненный случайными числами.
    Decision:
    #include <iostream>
    #include <ctime>
    using namespace std;
    int main()
    {
        srand(time(0)); // генерация случайных чисел
            int *ptrarray = new int [10]; // создание динамического массива вещественных чисел на десять элементов
            for (int count = 0; count < 10; count++)
                    ptrarray[count] = (rand() % 10 + 1) / int((rand() % 10 + 1)); //заполнение массива случайными числами с масштабированием от 1 до 10
            cout << "array = ";
            for (int count = 0; count < 10; count++)
                    cout << ptrarray[count] << "    ";
            delete [] ptrarray; // высвобождение памяти
            cout << endl;
        return 0;
    }
    Task:
    Заполнить выделенную память случайными целыми числами двумя способами:
    1. работая с выделенной памятью как с обычным массивом (переменными с индексом),
    2. используя только указатели. В обоих случаях вывести результат на экран.
    Освободить выделенную память и снова вывести массив на экран.
    Decision:
    #include <iostream>
    using namespace std;
    int main()
    {
        //Распределить динамически память под N чисел целого типа, где N – значение, вводимое с клавиатуры.
        int N, *block, i;
        cin >> N;
        block = new int[N];
        cout << block << endl;
        /*Заполнить выделенную память случайными целыми числами двумя способами (В обоих случаях вывести результат на экран):
        а) работая с выделенной памятью как с обычным массивом (переменными с индексом)*/
        for (i=0; i<N; i++)
        {
            block[i]=rand();
            cout << block[i] << endl;
        }
        //б) используя только указатели.
        for (int i=0; i<N; i++)
        {
            *(block+i)=rand();
            cout << *(block+i) << endl;
        }
        //Освободить выделенную память
        delete block;
        // и снова вывести массив на экран
        for (int i=0; i<N; i++)
        {
            cout << block[i] << "   ";
        }
        return 0;
    }
    Task:
    Функция ввода пароля.
    Decision:
    #include <iostream>
    #include <string>
    using namespace std;
    void check_pass (string password){
        string valid_pass="qwerty123";
        if (password==valid_pass){
            cout<<"Доступ разрешен." << endl;
        } else {
            cout << "Неверный пароль!" << endl;
        }
    }
    int main()
    {
        setlocale(LC_CTYPE, "rus");
        string user_pass;
        cout<< "Введите пароль: ";
        getline(cin, user_pass);
        check_pass(user_pass);
        return 0;
    }
    Task:
    Шифрование ключевых фраз с помощью функции crypt    
    Decision:
    $ ./project hunter2 '$1$42'
    $1$42$7l6Y3xT5282XmZrtDOF9f0
    $ ./project hunter2 '$6$42' $6$42$OqFFAVnI3gTSYG0yI9TZWX9cpyQzwIop7HwpG1LLEsNBiMr4w6OvLX1KDa./UpwXfrFk1i...
    $ ./project hunter2 '$1$hunter2'
    $1$hunter2$YVxrxDmidq7Xf8Gdt6qM2.
    $ gcc C-EncryptionOfKeyPhrasesUsingCrypt.c -o project -lcrypt
    $ ./project
    $ cat C-EncryptionOfKeyPhrasesUsingCrypt.c
    #include <stdio.h>
    #define __USE_XOPEN
    #include <unistd.h>
    int main(int argc, char** argv)
    {
     if(argc==3)
       {
           printf("%s\n", crypt(argv[1],argv[2]));
       }
       else
       {
           printf("Использование: MyCrypt $пароль $salt\n" );
       }
      return 0;
    }
    Task:
    Добавление и удаление имен в списке
    Decision:
    #include <iostream>
    #include <cmath>
    #include <fstream>
    #include <cstring>
    #include <vector>
    using namespace std;
    int main() {
        int q;
        string w;
        vector <string> name;
        for (;true;){ // besconechni cikl
            cout<<"1-dobavit\n"<<"2-udalit\n"<<"3-pechay\n";
            cin>>q;
            if(q==1){
                cout<<"vvedite imya:";
                cin>>w;
                name.push_back(w);
            }
            else{
                if(q==2){
                    cout<<"vvedite imya:";
                    cin>>q;
                    name.erase(name.begin() + (q-1));
                }
                else{
                    if(q==3){
                        for(int i=0;i<name.size();i++){
                            cout<<i+1<<" "<<name[i]<<endl;
                        }
                    }
                }
            }
        }
        return 0;
    }
    Task:
    Преобразовать следующую программу:
    #include<stdio.h>
    #include<conio.h>
    void main()
    {
     int j; char k; double a;
     j=21; k=’m’; a=3.1415926;
     printf("PRINT INTEGER j =%d\n",j);
     printf("PRINT SYMBOL k=%c\n" ,k);
     printf("PRINT LONG FLOAT a=%lf \n",a);
     printf("PRINT STRING");
     getch();
    }
    так, чтобы в первой строке было напечатано:
    Value of symbol k = R, Value of integer j = -14,
     во второй строке:
    Value of float variable а is 1.652730E+02
    в экспоненциальной форме (по формату %е), а в третьей строке текст:
     END of PROGRAMM.
    Decision:
    #include<stdio.h>
    #include<curses.h>
    void main()
    {
      int j; char k; double a;
      j=21; k='R'; a=1.652730E+02;
      printf("Value of symbol k=%c\n",k);
      printf("Value of float variable a is %e\n",a);
      printf("End of programm\n");
      getch();
    } 
    Task:
    Составить программу, печатающую таблицу факториалов от 0 до 7. В программе должна быть создана и использована функция, вычисляющая факториал своего аргумента
    Decision:
    #include<stdio.h>
    /*void main()
    {
        int n;
        for (int i=1;i<=7;i++)
        {
            //printf("%d\n",i);
            f=f*i;
            printf("%d!\t%d\n",i,f);
        }
    }*/
    int fact(int n, int j)
    {
        /*n=n*j;
        return n;*/
        return n*j;
    }
    void main(void)
    {
        int f=1, i;
        for (i=1;i<=7;i++)
        {
            f=fact(f,i);
            printf("%d!\t%d\n",i,f);
        }
    }
    Task:
    Составить программу вычисления факториала n! = 1*2*3*...*n тремя способами - с использованием цикла while, цикла do-while и цикла for.
    Decision:
    #include<stdio.h>
    void main()
    {
      int n,j=1,i=1;
      printf("Введите число: ");scanf("%d",&n);
      while (i<=n)
      {
        j*=i;
        i++;
      }
      printf("%d!=%d\n",n,j);
    } 
    Decision:
    #include<stdio.h>
    void main()
    {
      int n,j,i;
      printf("Введите число: ");scanf("%d",&n);
      for (j=1,i=1; i<=n; i++)
      {       
        j*=i;
      }
      printf("%d!=%d\n",n,j);
    }
    Decision:
    #include<stdio.h>
    void main()
    {
      int n,j=1,i=1;
      printf("Введите число: ");scanf("%d",&n);
      do
      {
        j*=i; i++;
      }
      while (i<=n);
      printf("%d!=%d\n",n,j);
    } 
    Task:
    Написать программу, которая формирует единичную матрицу и выводит ее на экран
    Decision:
    #include<stdio.h>
    #include<string.h>
    void main()
    {
        int i,j,M[5][5];
        for(i=0;i<5;i++){
            for(j=0;j<5;j++){
                if(i==j){
                    M[i][j]=1;
                } else{
                    M[i][j]=0;
                }
            }
        }
        for(i=0;i<5;i++){
            for(j=0;j<5;j++){
                printf("%d",M[i][j]);
            }
            printf("\n");
        }
    }
    Task:
    Напишите программу, которая отсортирует числа формата double хранящихся в текстовом файле размером 1Гб (одно число в одной строке).
    Пример
    ●   8.33891e+307
    ●   1.26192e+308
    ●   
    ●   8.19572e+307    
    ●   ...
    ●   0
    1.64584e+304
    Программа должна использовать не более 100Мб оперативной памяти, и работать не дольше 25-30 минут (на 2Гц современном одноядерном процессоре).
    Обязательные параметры: <имя файла не отсортированного> <имя файла отсортированного> 
    Также должен быть написан генератор не отсортированного 1Гб файла с числами формата double
    Task:
    Написать собственную реализацию shared_mutex поддерживающий рекурсию. Не используя C14. 
    Использовать платформонезависимый код – средства stl и boost (но не использовать  shared_mutex).
    Task:
    Написать алгоритм поиска текста по маске с wildcards (можно просто функцию куда передается два параметра - строка поиска и строка с маской). Wildcards содержит символы * и ?
    Task:
    Представим что есть интерфейс к БД: 
    struct i_db
    {
        bool begin_transaction();
        bool commit_transaction();
        bool abort_transaction();
        std::string get(const std::string& key);
        std::string set(const std::string& key, const std::string& data);
        std::string delete(const std::string& key);
    }
    Написать реализацию кеша для БД, обратить внимание на многопоточность и на транзакционную модель работы с БД. 
    Source:
    https://www.youtube.com/playlist?list=PLlqeq-isbP97wcBzq4YhOfaEHY59gGyQx
    https://www.youtube.com/playlist?list=PLvItDmb0sZw_l5qKMLTjePXX485CWKVNe
    https://www.youtube.com/watch?v=2Scwa8KuNQU&t=79s
    https://acmp.ru/index.asp?main=tasks
    https://www.youtube.com/playlist?list=PL30625C8F5ADD5BB4
    https://linuxconfig.org/how-to-install-g-the-c-compiler-on-ubuntu-20-04-lts-focal-fossa-linux
    http://www.codebind.com/linux-tutorials/install-opengl-ubuntu-linux/
    https://prognote.ru/articles/how-to-install-qt-5-on-linux-ubuntu

Django
Разработка сайта
	Task:
	Для улучшения своего сайта, в котором публиковал все решенные мной интересные задачи, разработал еще один проект с разработкой сайта, в котором применялись следующие инструменты и библиотеки: python, django, pillow, html, css, sqlite3. Также поменял домен в timeweb.
	Decision:
	$ mkdir djsite
	$ cd djsite/
	$ python3 -m venv venv
	$ source venv/bin/activate
	$ pip install django
	$ django-admin startproject coolsite
	$ cd coolsite/
	$ python manage.py runserver
	$ python manage.py runserver 4000
	$ python manage.py startapp women
	$ vim coolsite/settings.py
	$ cat coolsite/settings.py
	...
	INSTALLED_APPS = [
	    'django.contrib.admin',
	    'django.contrib.auth',
	    'django.contrib.contenttypes',
	    'django.contrib.sessions',
	    'django.contrib.messages',
	    'django.contrib.staticfiles',
	    'women.apps.WomenConfig'
	]
	...
	$ vim women/views.py
	$ cat women/views.py
	from django.http import HttpResponse
	from django.shortcuts import render
	# Create your views here.
	def index(request): #HttpRequest
		return HttpResponse("Страница приложения Women")
	def categories(request): #HttpRequest
		return HttpResponse("<h1>Статьи по категориям</h1>")
	$ vim coolsite/urls.py
	$ cat coolsite/urls.py
	...
	from django.contrib import admin
	from django.urls import path, include
	#from women.views import index
	from women.views import *
	urlpatterns = [
	    path('admin/', admin.site.urls),
	    #path('women/', index), #http://127.0.0.1:8000/women/
	    #path('', index), #http://127.0.0.1:8000/
	    #path('cats/', categories), #http://127.0.0.1:8000/cats/
	    path('women/', include('women.urls')), #http://127.0.0.1:8000/women/
	]
	$ touch women/urls.py
	$ vim women/urls.py
	$ cat women/urls.py
	from django.urls import path
	from .views import *
	urlpatterns = [
		path('', index), #http://127.0.0.1:8000/women/
		path('cats/', categories), #http://127.0.0.1:8000/women/cats/
	]
	$ python manage.py runserver
	$ vim coolsite/urls.py
	$ cat coolsite/urls.py
	...
	urlpatterns = [
	    path('admin/', admin.site.urls),
	    #path('women/', index), #http://127.0.0.1:8000/women/
	    #path('', index), #http://127.0.0.1:8000/
	    #path('cats/', categories), #http://127.0.0.1:8000/cats/
	    #path('women/', include('women.urls')), #http://127.0.0.1:8000/women/
	    path('', include('women.urls')), #http://127.0.0.1:8000/women/
	]
	handler404 = pageNotFound
	$ vim women/urls.py
	$ cat women/urls.py
	from django.urls import path, re_path
	from .views import *
	urlpatterns = [
		#path('', index), #http://127.0.0.1:8000/women/
		#path('home/', index, name='home'), #http://127.0.0.1:8000/
		path('', index, name='home'), #http://127.0.0.1:8000/
		#path('cats/', categories), #http://127.0.0.1:8000/women/cats/
		#path('cats/', categories), #http://127.0.0.1:8000/cats/
		path('cats/<int:catid>/', categories), #http://127.0.0.1:8000/cats/1/
		re_path(r'^archive/(?P<year>[0-9]{4})/', archive), #http://127.0.0.1:8000/archive/2020/
	]
	$ vim women/views.py
	$ cat women/views.py
	from django.http import HttpResponse, HttpResponseNotFound, Http404
	from django.shortcuts import render, redirect
	# Create your views here.
	def index(request): #HttpRequest
		return HttpResponse("Страница приложения Women")
	#def categories(request):
		#return HttpResponse("<h1>Статьи по категориям</h1>")
	def categories(request, catid):
		#print(request.GET) #http://127.0.0.1:8000/cats/1/?name=Gagarina&type=pop
		#if(request.GET):
			#print(request.GET) #http://127.0.0.1:8000/cats/1
		if(request.POST):
			print(request.POST) 
		return HttpResponse(f"<h1>Статьи по категориям</h1><p>{catid}</p>")
	def archive(request, year):
		if int(year)>2020:
			#raise Http404() #http://127.0.0.1:8000/archive/2022/
			#return redirect('/', )
			return redirect('home', permanent=True)
		return HttpResponse(f"<h1>Архив по годам</h1><p>{year}</p>") #http://127.0.0.1:8000/archive/2020/
	def pageNotFound(request, exception):
		return HttpResponseNotFound("<h1>Страница не найдена</h1>")
	$ vim coolsite/settings.py
	$ cat coolsite/settings.py
	...
	#DEBUG = True
	DEBUG = False
	#ALLOWED_HOSTS = []
	ALLOWED_HOSTS = ['127.0.0.1']
	...
	$ python manage.py runserver
	$ vim women/models.py
	$ cat women/models.py
	from django.db import models
	# Create your models here.
	class Women(models.Model):
		"""docstring for Women"""
		title=models.CharField(max_length=255)
		content=models.TextField(blank=True)
		photo=models.ImageField(upload_to="photos/%Y/%m/%d/")
		time_create=models.DateTimeField(auto_now_add=True)
		time_update=models.DateTimeField(auto_now=True)
		is_published=models.BooleanField(default=True)
	$ vim coolsite/settings.py
	$ cat coolsite/settings.py
	import os
	from pathlib import Path
	...
	DEBUG = True
	#DEBUG = False
	#ALLOWED_HOSTS = []
	...
	DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
	MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
	MEDIA_URL = '/media/'
	$ vim coolsite/urls.py
	$ cat coolsite/urls.py
	from django.conf.urls.static import static
	from django.contrib import admin
	from coolsite import settings
	from django.urls import path, include
	#from women.views import index
	from women.views import *
	...
	if settings.DEBUG:
	    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
	handler404 = pageNotFound
	$ python manage.py makemigrations
	$ python manage.py sqlmigrate women 0001
	$ python manage.py migrate
	$ sqlite3 db.sqlite3
	sqlite> SELECT * FROM sqlite_master where type='table';
	$ python manage.py shell
	>>> from women.models import Women
	>>> Women(title='Anjeline Joli', content='Биография Anjeline Joli')
	>>> w1=_
	>>> w1
	>>> w1.save()
	>>> w1
	>>> w1.id
	>>> w1.title
	>>> w1.time_create
	>>> w1.pk
	>>> from django.db import connection
	>>> connection.queries
	>>> w2.save()
	>>> connection.queries
	>>> w3=Women()
	>>> w3.title='Juli Roberts'
	>>> w3.content='Биография Juli Roberts'
	>>> w3.save()
	>>> connection.queries
	>>> # objects
	>>> Women.objects
	>>> w4=Women.objects.create(title='Uma Turman', content='Биография Uma Turman')
	>>> w4
	>>> Women.objects.create(title='Kira Nightly', content='Биография Kira Nightly')
	>>> Women.objects.all()
	>>> exit()
	$ vim women/models.py
	$ cat women/models.py
	...
		def __str__(self):
			return self.title
	$ python manage.py shell
	>>> from women.models import Women
	>>> Women.objects.all()
	>>> w=_
	>>> w[0]
	>>> w[1]
	>>> w[0].title
	>>> len(w)
	>>> for wi in w:
	...     print(wi.title)
	>>> Women.objects.filter(title='Enn Hatay')
	>>> from django.db import connection
	>>> connection.queries
	>>> Women.objects.filter(pk=2)
	>>> Women.objects.filter(pk__gte=2)
	>>> Women.objects.exclude(pk=2)
	>>> Women.objects.get(pk=2)
	>>> Women.objects.filter(pk__lte=4).order_by('title')
	>>> Women.objects.order_by('title')
	>>> Women.objects.order_by('time_update')
	>>> Women.objects.order_by('-time_update')
	>>> wu=Women.objects.get(pk=2)
	>>> wu.title='Margo Robbi'
	>>> wu.content='Биография Margo Robbi'
	>>> wu.save()
	>>> connection.queries
	>>> wd=Women.objects.filter(pk__gte=4)
	>>> wd
	>>> wd.delete()
	>>> exit()
	$ mkdir women/templates
	$ mkdir women/templates/women
	$ touch women/templates/women/index.html
	$ vim women/templates/women/index.html
	$ cat women/templates/women/index.html
	{% extends 'women/base.html' %}
	{% block content %}
	<h1>{{title}}</h1>
	<!--<p>Содержимое главной страницы</p>-->
	<ul>
		{% for p in posts %}
		<li>
			<h2>{{p.title}}</h2>
			<p>{{p.content}}</p>
			<hr>
		</li>
		{% endfor %}
	</ul>
	{% endblock %}
	$ touch women/templates/women/about.html
	$ vim women/templates/women/about.html
	$ cat women/templates/women/about.html
	{% extends 'women/base.html' %}
	{% block content %}
	<h1>{{title}}</h1>
	<p>Содержимое главной страницы</p>
	{% endblock %}
	$ touch women/templates/women/base.html
	$ vim women/templates/women/base.html
	$ cat women/templates/women/base.html
	<!DOCTYPE html>
	<html lang="en"><head><meta charset="utf-8">
		<title>{{ title }}</title>
	</head><body>
	{% block mainmenu %}
	<ul>
		{% for m in menu %}
		<li>{{m}}</li>
		{% endfor %}
	</ul>
	{% endblock mainmenu %}
	{% block content %}
	{% endblock %}
	</ul>
	</body></html>
	$ vim women/views.py
	$ cat women/views.py
	from django.http import HttpResponse, HttpResponseNotFound, Http404
	from django.shortcuts import render, redirect
	from .models import *
	# Create your views here.
	#def index(request): #HttpRequest
	#	return HttpResponse("Страница приложения Women")
	menu=["О сайте", "Добавить статью", "Обратная связь", "Войти"]
	def index(request):
		#return render(request, 'women/index.html', {'title':'Главная страница'})
		posts=Women.objects.all()
		return render(request, 'women/index.html', {'posts':posts, 'menu':menu, 'title':'Главная страница'})
	def about(request):
		return render(request, 'women/about.html', {'menu':menu, 'title':'О сайте'})
	...
	$ vim women/urls.py
	$ cat women/urls.py
	...
	urlpatterns = [
		#path('', index), #http://127.0.0.1:8000/women/
		#path('home/', index, name='home'), #http://127.0.0.1:8000/
		path('', index, name='home'), #http://127.0.0.1:8000/
		#path('cats/', categories), #http://127.0.0.1:8000/women/cats/
		#path('cats/', categories), #http://127.0.0.1:8000/cats/
		#path('cats/<int:catid>/', categories), #http://127.0.0.1:8000/cats/1/
		#re_path(r'^archive/(?P<year>[0-9]{4})/', archive), #http://127.0.0.1:8000/archive/2020/
		path('about/', about, name='about'), #http://127.0.0.1:8000/
	]
	$ python manage.py runserver	
	$ mkdir women/static
	$ mkdir women/static/women
	$ mkdir women/static/women/css
	$ touch women/static/women/css/style.css
	html, body {
		font-family: 'Arial';
		margin: 0;
		padding: 0;
		height: 100%;
		width: 100%;
		color: #444;
	}
	a {
		color: #0059b2;
		text-decoration: none;
	}
	a:hover {
		color: #CC0000;
		text-decoration: underline;
	}
	img {max-width: 600px; height: auto;}
	img.img-article-left {
		max-width: 300px;
		height: auto;
		float: left;
		padding: 0 10px 10px 0;
	}
	img.img-article-left.thumb {
		max-width: 150px;
		height: auto;
	}
	p.link-read-post {
		text-align: right;
	}
	p.link-read-post a {
		padding: 10px;
		min-width: 100px;
		background: #333671;
		color: #fff;
		text-decoration: none;
	}
	div.article-panel {
	    background: #eee;
	    padding: 5px 10px 5px 10px;
	    box-sizing: border-box;
	    overflow: hidden;
	    color: #555;
	}
	div.article-panel p.first {
	    margin: 0;
	    float: left;
	}
	div.article-panel p.last {
	    margin: 0;
	    float: right;
	}
	ul.list-articles {
		list-style: none;
		margin: 0;
		padding: 0;
	}
	ul.list-articles li {
		border-bottom: 1px solid #ccc;
	}
	.table-page {
		width: 100%;
		height: 100%;
		vertical-align: top;
	}
	.table-page tr {height: 100%;}
	.clear {clear: both;}
	.header {
		background: #3F4137;
		height: 60px;
	}
	.logo {
		background: url('../images/logo.png') no-repeat 10px 5px;
		width: 70px;
		height: 60px;
	}
	ul.mainmenu {
		list-style: none;
		margin: 0;
		padding: 0;
		height: 60px;
		color: #fdc073;
		font-size: 20px;
		overflow: hidden;
	}
	ul.mainmenu li {
		float: left;
		margin: 18px 40px 0 30px;
	}
	ul.mainmenu li.logo {margin: 0;}
	ul.mainmenu li.last {float: right;}
	ul.mainmenu li a {
		color: #fdc073;
		text-decoration: none;
	}
	ul.mainmenu li a:hover {
		color: #FDA83D;
	}
	.panelitems {
		text-align: center;
	}
	ul.langitem {
		list-style: none;
		display: inline-block;
		margin: 30px;
		padding: 0;
		max-width: 300px
	}
	ul.langitem li {
		margin: 10px 0 0 0;
		width: 100%;
	}
	ul.langitem li.image {
		margin: 0;
		text-align: center;
		width: 100%;
		height: 250px;
		overflow: hidden;
	}
	ul.langitem li.descr {
		color: #777;
		height: 170px;
		overflow: hidden;
	}
	ul.langitem li a {
		color: #fdc073;
		text-decoration: none;
		font-size: 20px;
	}
	ul.langitem li a:hover {
		color: #FDA83D;
	}
	div.button {
		background: #3F4137;
		max-width: 200px;
		margin: 0 auto;
		padding: 5px 20px 5px 20px;
		border-radius: 10px;
		font-size: 20px;
	}
	.table-content {
		width: 100%;
		min-height: 100%;
		height: 100%;
	}
	.left-chapters {
		margin: 0;
		background: #eee;
		border-right: 1px solid #ccc;
		min-height: 100%;
	}
	.left-chapters ul {
		width: 230px;
		min-height: 100%;
		margin: 0;
		padding: 20px 10px 10px 20px;
		list-style: none;
		font-size: 20px;
	}
	.left-chapters ul li {
		margin: 30px 0 0 0;
		color: #999;
	}
	.left-chapters ul li.selected {color: #0059b2; }
	.left-chapters ul li a {
		color: #444;
		text-decoration: none;
	}
	.left-chapters ul li a:hover { color: #CC0000; }
	.left-chapters ul li.share {margin: 60px 0 0 0;}
	.left-chapters ul li.share p {margin: 30px 0 30px 0;}
	.left-chapters ul li.share a {
		display: inline-block;
		width: 40px;
		height: 40px;
		margin: 0 20px 0 0;
	}
	.left-chapters ul li.share a.share-yt {
		width: 100%;
		height: 30px;
		background: url('../images/share_yt.png') no-repeat 0 0
	}
	.left-chapters ul li.share a.share-yt:hover {
		width: 100%;
		height: 30px;
		background: url('../images/share_yt.png') no-repeat 0 -30px
	}
	.content {
		padding: 40px 20px 20px 40px;
		width: 100%;
		box-sizing: border-box;
	}
	ul.breadcrumbs {
		margin: 0;
		padding: 0;
		list-style: none;
		font-size: 20px;
		font-family: Sans-serif, Arial, Tahoma;
	}
	ul.breadcrumbs li {
		display: inline-block;
	}
	ul.breadcrumbs li a {
		color: #0059b2;
		text-decoration: none;
	}
	ul.breadcrumbs li a:hover { color: #CC0000; }
	ul.breadcrumbs li:after{
		padding: 0 10px 0 10px;
		content: "\2192";
	}
	ul.breadcrumbs li.last:after {content: "";}
	ul.control {
		margin: 0;
		padding: 60px 0 0 0;
		list-style: none;
		font-family: Sans-serif, Arial, Tahoma;
		font-size: 18px;
		width: 100%;
	}
	ul.control li {	float: left; padding: 0 0 0 10px;}
	ul.control li.first:before {content: "\2190"; padding: 0 10px 0 0;}
	ul.control li.last {float: right; padding: 0 40px 0 0;}
	ul.control li.last:after {content: "\2192"; padding: 0 0 0 10px;}
	ul.control li a { color: #0059b2; text-decoration: none; }
	ul.control li a:hover { color: #CC0000; }
	ul.content-table {
		margin: 0;
		padding: 60px 0 0 30px;
		list-style: none;
		font-family: Sans-serif, Arial, Tahoma;
		font-size: 28px;
	}
	ul.content-table li {
		margin: 0 0 40px 0;
	}
	ul.content-table li a {
		color: #BB5715;
		text-decoration: none;
	}
	ul.content-table li a:hover {color: #F0711C;}
	.content-text {
		margin: 60px 0 0 30px;
		color: #000;
		font-size: 20px;
		font-family: Yandex Sans Display Light;
	}
	.content-text h1 {font-size: 32px;}
	ul.lang-list {
		list-style: none;
		margin: 0;
		padding: 14px 0 0 0;
		background: #3F4137;
		width: 100%;
		height: 50px;
		border-top: 1px solid #959A82;
		box-sizing: border-box;
		font-size: 18px;
		font-family: Sans-serif, Arial, Tahoma;
	}
	ul.lang-list li {
		display: inline-block;
		margin-left: 40px;
	}
	ul.lang-list li.selected {color: #fdc073; border-bottom: 1px solid #fdc073;}
	ul.lang-list li a {
		color: #eee;
		text-decoration: none;
	}
	ul.lang-list li a:hover {color: #fdc073;}
	.topic-subject .topic-line {
		border-bottom: 1px solid #CC0000;
		margin-top: -16px;
	}
	.topic-subject .topic-text {
		display: inline-block;
		font-size: 28px;
		color: #777;
		padding: 0 10px 0 10px;
		margin-left: 30px;
		background: #fff;
		font-family: Sans-serif, Arial, Tahoma;
	}
	.list-topic {
		margin: 40px 0 60px 0;
		font-family: Sans-serif, Arial, Tahoma;
	}
	.list-topic p {
		margin: 0;
		font-size: 28px;
	}
	.list-topic ol {
		columns: 2;
		-webkit-columns: 2;
		column-gap: 40px;
	}
	.list-topic ol li {
		display: list-item;
		margin: 10px 10px 0 0px;
		padding: 0 0 0 10px;
	}
	.list-topic ol li a {
		color: #0059b2;
		text-decoration: none;
	}
	.list-topic ol li a:hover {color: #CC0000;}
	.highlight {
		max-width: 350px;
		padding: 0 10px 0 10px;
		margin: 0;
		overflow: auto;
		overflow-y: hidden;
		background: #f0f0f0;
	}
	.highlight p { margin: 0; }
	.highlight .block {
		width: 100%;
		margin: 0;
	}
	.highlight .block p { margin: 0; }
	.quote {
		background: url('../images/blockquote.png') no-repeat 0 10px;
		padding: 5px 5px 5px 70px;
		font-family: Sans-serif, Arial, Tahoma;
		font-style: italic;
	}
	#footer {
		box-sizing: border-box;
		background: #3F4137;
		padding: 5px;
		color: #aaa;
		font-size: 14px;
		font-family: Verdana, Geneva, Arial, Helvetica;
		text-align: left;
		overflow: hidden;
	}
	#footer a {
		text-decoration: underline;
		color: #aaa;
	}
	.form-input {
	    width: 300px;
	    font-size: 16px;
	}
	.form-label {
	    display: inline-block;
	    min-width: 150px;
	    vertical-align: top;
	}
	.form-error ul {
	    list-style: none;
	    padding: 0;
	    color: #CC0000;
	}
	.form-button {
	    min-width: 200px;
	    font-size: 16px;
	}
	$ mkdir women/static/women/js
	$ mkdir women/static/women/images
	$ ls women/static/women/images
	blockquote.png  btn_yt.png  logo.png  main.ico  share_yt.png  smallmenu.png
	$ vim coolsite/settings.py
	$ cat coolsite/settings.py
	...
	# Static files (CSS, JavaScript, Images)
	# https://docs.djangoproject.com/en/4.2/howto/static-files/
	STATIC_URL = '/static/'
	STATIC_ROOT = os.path.join(BASE_DIR, 'static')
	STATICFILES_DIRS=[]
	# Default primary key field type
	...
	$ vim women/templates/women/base.html
	$ cat women/templates/women/base.html
	{% load static %}
	<!DOCTYPE html>
	<html>
	<head>
		<title>{{title}}</title>
		<link type="text/css" href="{% static 'women/css/style.css' %}" rel="stylesheet" />
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
		<link rel="shortcut icon" href="{% static 'women/images/main.ico' %}" type="image/x-icon"/>
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
	</head>
	<body>
	<table class="table-page" border=0 cellpadding="0" cellspacing="0">
	<tr><td valign=top>
	{% block mainmenu %}
			<div class="header">
				<ul id="mainmenu" class="mainmenu">
				<li class="logo"><a href="#"><div class="logo"></div></a></li>
	{% for m in menu %}
		{% if not forloop.last %}
				<li><a href="#">{{m.title}}</a></li>
		{% else %}
				<li class="last"><a href="#">{{m.title}}</a></li>
		{% endif %}
	{% endfor %}
				</ul>
				<div class="clear"></div>
			</div>
	{% endblock mainmenu %}
	<table class="table-content" border=0 cellpadding="0" cellspacing="0">
	<tr>
	<!-- Sidebar слева -->
		<td valign="top" class="left-chapters">
		<ul id="leftchapters">
			<li class="selected">Все категории</li>
			<li><a href="#">Актрисы</a></li>
			<li><a href="#">Певицы</a></li>
			<li><a href="#">Спортсменки</a></li>
			<li class="share">
			<p>Наш канал</p>
			<a class="share-yt" href="https://www.youtube.com/channel/UClJzWfGWuGJL2t-3dYKcHTA/playlists" target="_blank" rel="nofollow"></a>
			</li>
		</ul>
	</td>
	<!-- Конец Sidebar'а -->
	<td valign="top" class="content">
		<!-- Хлебные крошки -->
		{% block breadcrumbs %}
		{% endblock %}
	<!-- Блок контента -->
		<div class="content-text">
	{% block content %}
	{% endblock %}
		</div>
	<!-- Конец блока контента -->
	</td></tr></table>
	</td></tr>
	<!-- Footer -->
	<tr><td valign=top>
		<div id="footer">
			<p>&copy; 2021 Частичное или полное копирование информации с данного сайта для распространения на других ресурсах, в том числе и бумажных, строго запрещено.</p>
		</div>
	</td></tr></table>
	<!-- Конец footer'а и страницы -->
	</body>
	</html>
	$ vim women/templates/women/index.html
	$ cat women/templates/women/index.html
	{% extends 'women/base.html' %}
	{% block content %}
	<ul class="list-articles">
		{% for p in posts %}
				<li><h2>{{p.title}}</h2>
		{% autoescape on %}
		{{p.content|linebreaks|truncatewords:50}}
		{% endautoescape %}
				<div class="clear"></div>
				<p class="link-read-post"><a href="#">Читать пост</a></p>
				</li>
		{% endfor %}
	</ul>
	{% endblock %}
	$ python manage.py runserver
	$ vim women/templates/women/index.html
	$ cat women/templates/women/index.html
	...
		{% for p in posts %}
				<li><h2>{{p.title}}</h2>
		{% autoescape on %}
		{{p.content|linebreaks|truncatewords:50}}
		{% endautoescape %}
				<div class="clear"></div>
				<p class="link-read-post">
					<!--<a href="#">-->
					<!--<a href="{% url 'post' p.pk %}">-->
					<a href="{{ p.get_absolute_url }}">
						Читать пост
					</a>
				</p>
				</li>
		{% endfor %}
	...
	$ vim women/templates/women/base.html
	$ cat women/templates/women/base.html
	...
	{% block mainmenu %}
			<div class="header">
				<ul id="mainmenu" class="mainmenu">
				<li class="logo">
					<!--<a href="#">-->
					<a href="{% url 'home' %}">
						<div class="logo"></div>
					</a>
				</li>
	{% for m in menu %}
		{% if not forloop.last %}
				<li><a href="{% url m.url_name %}">{{m.title}}</a></li>
		{% else %}
				<li class="last"><a href="{% url m.url_name %}">{{m.title}}</a></li>
		{% endif %}
	{% endfor %}
				</ul>
				<div class="clear"></div>
			</div>
	{% endblock mainmenu %}
	...
	$ vim women/views.py
	$ cat women/views.py
	from django.http import HttpResponse, HttpResponseNotFound, Http404
	from django.shortcuts import render, redirect
	from .models import *
	# Create your views here.
	#def index(request): #HttpRequest
	#	return HttpResponse("Страница приложения Women")
	#menu=["О сайте", "Добавить статью", "Обратная связь", "Войти"]
	menu=[{'title':"О сайте", 'url_name':'about'}, 
		{'title':"Добавить статью", 'url_name':'add_page'},
		{'title':"Обратная связь", 'url_name':'contact'},
		{'title':"Войти", 'url_name':'login'}]
	def index(request):
		#return render(request, 'women/index.html', {'title':'Главная страница'})
		posts=Women.objects.all()
		context={'posts':posts, 
			'menu':menu, 
			'title':'Главная страница'}
		return render(request, 'women/index.html', context=context)
	def about(request):
		return render(request, 'women/about.html', {'menu':menu, 'title':'О сайте'})
	#def categories(request):
		#return HttpResponse("<h1>Статьи по категориям</h1>")
	#def categories(request, catid):
		#print(request.GET) #http://127.0.0.1:8000/cats/1/?name=Gagarina&type=pop
		#if(request.GET):
			#print(request.GET) #http://127.0.0.1:8000/cats/1
		#if(request.POST):
			#print(request.POST) 
		#return HttpResponse(f"<h1>Статьи по категориям</h1><p>{catid}</p>")
	#def archive(request, year):
		#if int(year)>2020:
			#raise Http404() #http://127.0.0.1:8000/archive/2022/
			#return redirect('/', )
			#return redirect('home', permanent=True)
		#return HttpResponse(f"<h1>Архив по годам</h1><p>{year}</p>") #http://127.0.0.1:8000/archive/2020/
	def pageNotFound(request, exception):
		return HttpResponseNotFound("<h1>Страница не найдена</h1>")
	def addpage(request):
		return HttpResponse("Добавление статьи")
	def contact(request):
		return HttpResponse("Обратная связь")
	def login(request):
		return HttpResponse("Авторизация")
	def show_post(request, post_id):
		return HttpResponse(f"Отображение статьи с id = {post_id}")
	$ vim women/urls.py
	$ cat women/urls.py
	...
	urlpatterns = [
		#path('', index), #http://127.0.0.1:8000/women/
		#path('home/', index, name='home'), #http://127.0.0.1:8000/
		path('', index, name='home'), #http://127.0.0.1:8000/
		#path('cats/', categories), #http://127.0.0.1:8000/women/cats/
		#path('cats/', categories), #http://127.0.0.1:8000/cats/
		#path('cats/<int:catid>/', categories), #http://127.0.0.1:8000/cats/1/
		#re_path(r'^archive/(?P<year>[0-9]{4})/', archive), #http://127.0.0.1:8000/archive/2020/
		path('about/', about, name='about'), #http://127.0.0.1:8000/
		path('addpage/', addpage, name='add_page'),
		path('contact/', contact, name='contact'),
		path('login/', login, name='login'),
		path('post/<int:post_id>/', show_post, name='post'),
	]
	$ vim women/models.py
	$ cat women/models.py
	from django.db import models
	from django.urls import reverse
	...
		def get_absolute_url(self):
			return reverse('post', kwargs={'post_id':self.pk})
	$ python manage.py runserver
	$ vim women/models.py
	$ cat women/models.py
	...
	class Women(models.Model):
		"""docstring for Women"""
		title=models.CharField(max_length=255)
		content=models.TextField(blank=True)
		photo=models.ImageField(upload_to="photos/%Y/%m/%d/")
		time_create=models.DateTimeField(auto_now_add=True)
		time_update=models.DateTimeField(auto_now=True)
		is_published=models.BooleanField(default=True)
		cat=models.ForeignKey('Category', on_delete=models.PROTECT, null=True)
		def __str__(self):
			return self.title
		def get_absolute_url(self):
			return reverse('post', kwargs={'post_id':self.pk})
	class Category(models.Model):
		name=models.CharField(max_length=100, db_index=True)
		def __str__(self):
			return self.name	
	$ python manage.py makemigrations
	$ python manage.py migrate
	$ sqlite3 db.sqlite3
	sqlite> SELECT * FROM sqlite_master where type='table';
	$ python manage.py shell
	>>> from women.models import *
	>>> Category.objects.create(name='Актрисы')
	>>> Category.objects.create(name='Певицы')
	>>> w_list=Women.objects.all()
	>>> w_list.update(cat_id=1)
	>>> exit()
	$ sqlite3 db.sqlite3
	sqlite> select * from women_women;
	sqlite> select * from women_category;
	$ python manage.py shell
	>>> from women.models import *
	>>> Women.title
	>>> w1=Women(title='t1',content='c1',cat_id=1)
	>>> type(w1.title)
	>>> type(Women.title)
	>>> type(w1.cat)
	>>> w1.pk
	>>> print(w1.id,w1.time_create,w1.time_update)
	>>> from django.db import connection
	>>> connection.queries
	>>> exit()
	$ python manage.py shell
	>>> from women.models import *
	>>> w1=Women(title='t1',content='c1',cat_id=1)
	>>> from django.db import connection
	>>> connection.queries
	>>> w1.cat
	>>> connection.queries
	>>> w2=Women.objects.get(pk=2)
	>>> connection.queries
	>>> w2.title
	>>> w2.cat
	>>> connection.queries
	>>> w2.cat.name
	>>> exit()
	$ vim women/models.py
	$ cat women/models.py
	from django.db import models
	from django.urls import reverse
	# Create your models here.
	class Women(models.Model):
		"""docstring for Women"""
		title=models.CharField(max_length=255)
		content=models.TextField(blank=True)
		photo=models.ImageField(upload_to="photos/%Y/%m/%d/")
		time_create=models.DateTimeField(auto_now_add=True)
		time_update=models.DateTimeField(auto_now=True)
		is_published=models.BooleanField(default=True)
		cat=models.ForeignKey('Category', on_delete=models.PROTECT, null=True)
		def __str__(self):
			return self.title
		def get_absolute_url(self):
			return reverse('post', kwargs={'post_id':self.pk})
	class Category(models.Model):
		name=models.CharField(max_length=100, db_index=True)
		def __str__(self):
			return self.name
		def get_absolute_url(self):
			return reverse('category', kwargs={'cat_id':self.pk})
	$ vim women/urls.py
	$ cat women/urls.py
	from django.urls import path, re_path
	from .views import *
	urlpatterns = [
		#path('', index), #http://127.0.0.1:8000/women/
		#path('home/', index, name='home'), #http://127.0.0.1:8000/
		path('', index, name='home'), #http://127.0.0.1:8000/
		#path('cats/', categories), #http://127.0.0.1:8000/women/cats/
		#path('cats/', categories), #http://127.0.0.1:8000/cats/
		#path('cats/<int:catid>/', categories), #http://127.0.0.1:8000/cats/1/
		#re_path(r'^archive/(?P<year>[0-9]{4})/', archive), #http://127.0.0.1:8000/archive/2020/
		path('about/', about, name='about'), #http://127.0.0.1:8000/
		path('addpage/', addpage, name='add_page'),
		path('contact/', contact, name='contact'),
		path('login/', login, name='login'),
		path('post/<int:post_id>/', show_post, name='post'),
		path('category/<int:cat_id>/', show_category, name='category'),
	]
	$ vim women/views.py
	$ cat women/views.py
	from django.http import HttpResponse, HttpResponseNotFound, Http404
	from django.shortcuts import render, redirect
	from .models import *
	# Create your views here.
	#def index(request): #HttpRequest
	#	return HttpResponse("Страница приложения Women")
	#menu=["О сайте", "Добавить статью", "Обратная связь", "Войти"]
	menu=[{'title':"О сайте", 'url_name':'about'}, 
		{'title':"Добавить статью", 'url_name':'add_page'},
		{'title':"Обратная связь", 'url_name':'contact'},
		{'title':"Войти", 'url_name':'login'}]
	def index(request):
		#return render(request, 'women/index.html', {'title':'Главная страница'})
		posts=Women.objects.all()
		cats=Category.objects.all()
		context={'posts':posts, 
			'cats':cats,
			'menu':menu, 
			'title':'Главная страница',
			'cat_selected':0}
		return render(request, 'women/index.html', context=context)
	def about(request):
		return render(request, 'women/about.html', {'menu':menu, 'title':'О сайте'})
	#def categories(request):
		#return HttpResponse("<h1>Статьи по категориям</h1>")
	#def categories(request, catid):
		#print(request.GET) #http://127.0.0.1:8000/cats/1/?name=Gagarina&type=pop
		#if(request.GET):
			#print(request.GET) #http://127.0.0.1:8000/cats/1
		#if(request.POST):
			#print(request.POST) 
		#return HttpResponse(f"<h1>Статьи по категориям</h1><p>{catid}</p>")
	#def archive(request, year):
		#if int(year)>2020:
			#raise Http404() #http://127.0.0.1:8000/archive/2022/
			#return redirect('/', )
			#return redirect('home', permanent=True)
		#return HttpResponse(f"<h1>Архив по годам</h1><p>{year}</p>") #http://127.0.0.1:8000/archive/2020/
	def pageNotFound(request, exception):
		return HttpResponseNotFound("<h1>Страница не найдена</h1>")
	def addpage(request):
		return HttpResponse("Добавление статьи")
	def contact(request):
		return HttpResponse("Обратная связь")
	def login(request):
		return HttpResponse("Авторизация")
	def show_post(request, post_id):
		return HttpResponse(f"Отображение статьи с id = {post_id}")
	#def show_category(request, cat_id):
		#return HttpResponse(f"Отображение категории с id = {cat_id}")
	def show_category(request, cat_id):
		posts=Women.objects.filter(cat_id=cat_id)
		cats=Category.objects.all()
		if len(posts)==0:
			raise Http404()
		context={'posts':posts,
			'cats':cats,
			'menu':menu,
			'title':'Главная страница',
			'cat_selected':cat_id,}
		return render(request, 'women/index.html', context=context)
	$ vim women/templates/women/base.html
	$ cat women/templates/women/base.html
	{% load static %}
	<!DOCTYPE html>
	<html>
	<head>
		<title>{{title}}</title>
		<link type="text/css" href="{% static 'women/css/style.css' %}" rel="stylesheet" />
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
		<link rel="shortcut icon" href="{% static 'women/images/main.ico' %}" type="image/x-icon"/>
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
	</head>
	<body>
	<table class="table-page" border=0 cellpadding="0" cellspacing="0">
	<tr><td valign=top>
	{% block mainmenu %}
			<div class="header">
				<ul id="mainmenu" class="mainmenu">
				<li class="logo">
					<!--<a href="#">-->
					<a href="{% url 'home' %}">
						<div class="logo"></div>
					</a>
				</li>
	{% for m in menu %}
		{% if not forloop.last %}
				<li><a href="{% url m.url_name %}">{{m.title}}</a></li>
		{% else %}
				<li class="last"><a href="{% url m.url_name %}">{{m.title}}</a></li>
		{% endif %}
	{% endfor %}
				</ul>
				<div class="clear"></div>
			</div>
	{% endblock mainmenu %}
	<table class="table-content" border=0 cellpadding="0" cellspacing="0">
	<tr>
	<!-- Sidebar слева -->
		<td valign="top" class="left-chapters">
		<ul id="leftchapters">
	{% if cat_selected == 0 %}
			<li class="selected">Все категории</li>
	{% else %}
			<li><a href="{% url 'home' %}">Все категории</a></li>
	{% endif %}
	{% for c in cats %}
		{% if c.pk == cat_selected %}
			<li class="selected">{{c.name}}</li>
		{% else %}
			<li><a href="{{ c.get_absolute_url }}">{{c.name}}</a></li>
		{% endif %}
	{% endfor %}
			<li class="share">
			<p>Наш канал</p>
			<a class="share-yt" href="https://www.youtube.com/channel/UClJzWfGWuGJL2t-3dYKcHTA/playlists" target="_blank" rel="nofollow"></a>
			</li>
		</ul>
	</td>
	<!-- Конец Sidebar'а -->
	<td valign="top" class="content">
		<!-- Хлебные крошки -->
		{% block breadcrumbs %}
		{% endblock %}
	<!-- Блок контента -->
		<div class="content-text">
	{% block content %}
	{% endblock %}
		</div>
	<!-- Конец блока контента -->
	</td></tr></table>
	</td></tr>
	<!-- Footer -->
	<tr><td valign=top>
		<div id="footer">
			<p>&copy; 2021 Частичное или полное копирование информации с данного сайта для распространения на других ресурсах, в том числе и бумажных, строго запрещено.</p>
		</div>
	</td></tr></table>
	<!-- Конец footer'а и страницы -->
	</body>
	</html>
	$ vim women/templates/women/index.html
	$ cat women/templates/women/index.html
	{% extends 'women/base.html' %}
	{% block content %}
	<ul class="list-articles">
		{% for p in posts %}
				<li>
					<div class="article_panel">
						<p class="first">Категория: {{p.cat}}</p>
						<p class="last">Дата: {{p.time_update|date:"d-m-Y H:i:s"}}</p>
					</div>
					<h2>{{p.title}}</h2>
		{% autoescape on %}
		{{p.content|linebreaks|truncatewords:50}}
		{% endautoescape %}
					<div class="clear"></div>
					<p class="link-read-post">
						<!--<a href="#">-->
						<!--<a href="{% url 'post' p.pk %}">-->
						<a href="{{ p.get_absolute_url }}">
							Читать пост
						</a>
					</p>
				</li>
		{% endfor %}
	</ul>
	{% endblock %}
	$ python manage.py runserver
	$ vim coolsite/settings.py
	$ cat coolsite/settings.py
	...
	# Internationalization
	# https://docs.djangoproject.com/en/4.2/topics/i18n/
	#LANGUAGE_CODE = 'en-us'
	LANGUAGE_CODE = 'ru'
	TIME_ZONE = 'UTC'
	USE_I18N = True
	USE_TZ = True
	...
	$ python manage.py createsuperuser
	$ vim women/admin.py
	$ cat women/admin.py
	from django.contrib import admin
	from .models import *
	# Register your models here.
	class WomenAdmin(admin.ModelAdmin):
	    list_display = ('id', 'title', 'time_create', 'photo', 'is_published')
	    list_display_links = ('id', 'title')
	    search_fields = ('title', 'content')
	class CategoryAdmin(admin.ModelAdmin):
	    list_display = ('id', 'name')
	    list_display_links = ('id', 'name')
	    search_fields = ('name',)
	admin.site.register(Women, WomenAdmin)
	admin.site.register(Category, CategoryAdmin)
	$ vim women/models.py
	$ cat women/models.py
	from django.db import models
	from django.urls import reverse
	# Create your models here.
	class Women(models.Model):
		"""docstring for Women"""
		title=models.CharField(max_length=255, verbose_name="Заголовок")
		content=models.TextField(blank=True, verbose_name="Текст статьи")
		photo=models.ImageField(upload_to="photos/%Y/%m/%d/", verbose_name="Фото")
		time_create=models.DateTimeField(auto_now_add=True, verbose_name="Время создания")
		time_update=models.DateTimeField(auto_now=True, verbose_name="Время изменения")
		is_published=models.BooleanField(default=True, verbose_name="Публикация")
		cat=models.ForeignKey('Category', on_delete=models.PROTECT, null=True, verbose_name="Категории")
		def __str__(self):
			return self.title
		def get_absolute_url(self):
			return reverse('post', kwargs={'post_id':self.pk})
		class Meta:
			verbose_name='Известные женщины'
			verbose_name_plural='Известные женщины'
			#ordering=['time_create','title']
			ordering=['-time_create','title']
	class Category(models.Model):
		name=models.CharField(max_length=100, db_index=True, verbose_name="Категория")
		def __str__(self):
			return self.name
		def get_absolute_url(self):
			return reverse('category', kwargs={'cat_id':self.pk})
		class Meta:
			verbose_name='Категория'
			verbose_name_plural='Категории'
			ordering=['id']
	$ vim women/apps.py
	$ cat women/apps.py
	from django.apps import AppConfig
	class WomenConfig(AppConfig):
	    default_auto_field = 'django.db.models.BigAutoField'
	    name = 'women'
	    verbose_name='Женщины мира'
	$ python manage.py makemigrations
	$ python manage.py migrate
	$ vim women/templates/women/index.html
	$ cat women/templates/women/index.html
	{% extends 'women/base.html' %}
	{% block content %}
	<ul class="list-articles">
		{% for p in posts %}
				<li>
					<div class="article_panel">
						<p class="first">Категория: {{p.cat}}</p>
						<p class="last">Дата: {{p.time_update|date:"d-m-Y H:i:s"}}</p>
					</div>
	{% if p.photo %}
					<p><img class="img-article-left thumb" src="{{p.photo.url}}"></p>
	{% endif %}
					<h2>{{p.title}}</h2>
		{% autoescape on %}
		{{p.content|linebreaks|truncatewords:50}}
		{% endautoescape %}
					<div class="clear"></div>
					<p class="link-read-post">
						<!--<a href="#">-->
						<!--<a href="{% url 'post' p.pk %}">-->
						<a href="{{ p.get_absolute_url }}">
							Читать пост
						</a>
					</p>
				</li>
		{% endfor %}
	</ul>
	{% endblock %}
	$ vim women/admin.py
	$ cat women/admin.py
	from django.contrib import admin
	from .models import *
	# Register your models here.
	class WomenAdmin(admin.ModelAdmin):
	    list_display = ('id', 'title', 'time_create', 'photo', 'is_published')
	    list_display_links = ('id', 'title')
	    search_fields = ('title', 'content')
	    list_editable = ('is_published',)
	    list_filter = ('is_published', 'time_create')
	class CategoryAdmin(admin.ModelAdmin):
	    list_display = ('id', 'name')
	    list_display_links = ('id', 'name')
	    search_fields = ('name',)
	admin.site.register(Women, WomenAdmin)
	admin.site.register(Category, CategoryAdmin)
	$ python manage.py runserver
	$ vim women/views.py
	$ cat women/views.py
	...
	def index(request):
		#return render(request, 'women/index.html', {'title':'Главная страница'})
		posts=Women.objects.all()
		#cats=Category.objects.all()
		context={'posts':posts, 
			#'cats':cats,
			'menu':menu, 
			'title':'Главная страница',
			'cat_selected':0}
		return render(request, 'women/index.html', context=context)
	...
	def show_category(request, cat_id):
		posts=Women.objects.filter(cat_id=cat_id)
		#cats=Category.objects.all()
		if len(posts)==0:
			raise Http404()
		context={'posts':posts,
			#'cats':cats,
			'menu':menu,
			'title':'Главная страница',
			'cat_selected':cat_id,}
		return render(request, 'women/index.html', context=context)
	$ mkdir women/templatetags
	$ touch women/templatetags/__init__.py
	$ touch women/templatetags/women_tags.py
	$ vim women/templatetags/women_tags.py
	$ cat women/templatetags/women_tags.py
	from django import template
	from women.models import *
	register=template.Library()
	@register.simple_tag(name='getcats')
	def get_categories(filter=None):
		#return Category.objects.all()
		if not filter:
			return Category.objects.all()
		else:
			return Category.objects.filter(pk=filter)
	@register.inclusion_tag('women/list_categories.html')
	#def show_categories():
	def show_categories(sort=None, cat_selected=0):
		#cats=Category.objects.all()
		#return {"cats": cats}
		if not sort:
			cats = Category.objects.all()
		else:
			cats = Category.objects.order_by(sort)
		return {"cats":cats, "cat_selected":cat_selected}
	$ vim women/templates/women/base.html
	$ cat women/templates/women/base.html
	...
	<!-- Sidebar слева -->
		<td valign="top" class="left-chapters">
			<ul id="leftchapters">
	{% if cat_selected == 0 %}
				<li class="selected">Все категории</li>
	{% else %}
				<li><a href="{% url 'home' %}">Все категории</a></li>
	{% endif %}
	{% show_categories cat_selected=cat_selected %}
				<li class="share"><p>Наш канал</p><a class="share-yt" href="https://www.youtube.com/channel/UClJzWfGWuGJL2t-3dYKcHTA/playlists" target="_blank" rel="nofollow"></a></li>
			</ul>
		</td>
	...
	$ touch women/templates/women/list_categories.html
	$ vim women/templates/women/list_categories.html
	$ cat women/templates/women/list_categories.html
	{% for c in cats %}
		{% if c.pk == cat_selected %}
			<li class="selected">{{c.name}}</li>
		{% else %}
			<li><a href="{{ c.get_absolute_url }}">{{c.name}}</a></li>
		{% endif %}
	{% endfor %}
	$ python manage.py runserver
	$ vim women/views.py
	$ cat women/views.py
	from django.http import HttpResponse, HttpResponseNotFound, Http404
	from django.shortcuts import render, redirect, get_object_or_404
	from .models import *
	...
	#def show_post(request, post_id):
	def show_post(request, post_slug):
		#return HttpResponse(f"Отображение статьи с id = {post_id}")
		#post=get_object_or_404(Women, pk=post_id)
		post=get_object_or_404(Women, slug=post_slug)
		context={'post':post,
			'menu':menu,
			'title':post.title,
			'cat_selected':post.cat_id,}
		return render(request, 'women/post.html', context=context)
	...
	$ touch women/templates/women/post.html
	$ vim women/templates/women/post.html
	$ cat women/templates/women/post.html
	{% extends 'women/base.html' %}
	{% block content %}
	<h1>{{post.title}}</h1>
	{% if post.photo %}
	<p><img class="img-article-left thumb" src="{{post.photo.url}}"></p>
	{% endif %}
	{{post.content|linebreaks}}
	{% endblock %}
	$ vim women/models.py
	$ cat women/models.py
	...
	class Women(models.Model):
		"""docstring for Women"""
		title=models.CharField(max_length=255, verbose_name="Заголовок")
		slug=models.SlugField(max_length=255, unique=True, db_index=True, verbose_name="URL")
		content=models.TextField(blank=True, verbose_name="Текст статьи")
		photo=models.ImageField(upload_to="photos/%Y/%m/%d/", verbose_name="Фото")
		time_create=models.DateTimeField(auto_now_add=True, verbose_name="Время создания")
		time_update=models.DateTimeField(auto_now=True, verbose_name="Время изменения")
		is_published=models.BooleanField(default=True, verbose_name="Публикация")
		#cat=models.ForeignKey('Category', on_delete=models.PROTECT, null=True, verbose_name="Категории")
		cat=models.ForeignKey('Category', on_delete=models.PROTECT, verbose_name="Категории")
		def __str__(self):
			return self.title
		def get_absolute_url(self):
			return reverse('post', kwargs={'post_slug':self.slug})
		...
	class Category(models.Model):
		name=models.CharField(max_length=100, db_index=True, verbose_name="Категория")
		slug=models.SlugField(max_length=255, unique=True, db_index=True, verbose_name="URL")
		...
	$ vim women/admin.py
	$ cat women/admin.py
	...
	class WomenAdmin(admin.ModelAdmin):
	    list_display = ('id', 'title', 'time_create', 'photo', 'is_published')
	    list_display_links = ('id', 'title')
	    search_fields = ('title', 'content')
	    list_editable = ('is_published',)
	    list_filter = ('is_published', 'time_create')
	    prepopulated_fields = {"slug": ("title",)}
	class CategoryAdmin(admin.ModelAdmin):
	    list_display = ('id', 'name')
	    list_display_links = ('id', 'name')
	    search_fields = ('name',)
	    prepopulated_fields = {"slug": ("name",)}
	...
	$ vim women/urls.py
	$ cat women/urls.py
	...
	urlpatterns = [
		#path('', index), #http://127.0.0.1:8000/women/
		#path('home/', index, name='home'), #http://127.0.0.1:8000/
		path('', index, name='home'), #http://127.0.0.1:8000/
		#path('cats/', categories), #http://127.0.0.1:8000/women/cats/
		#path('cats/', categories), #http://127.0.0.1:8000/cats/
		#path('cats/<int:catid>/', categories), #http://127.0.0.1:8000/cats/1/
		#re_path(r'^archive/(?P<year>[0-9]{4})/', archive), #http://127.0.0.1:8000/archive/2020/
		path('about/', about, name='about'), #http://127.0.0.1:8000/
		path('addpage/', addpage, name='add_page'),
		path('contact/', contact, name='contact'),
		path('login/', login, name='login'),
		#path('post/<int:post_id>/', show_post, name='post'),
		path('post/<slug:post_slug>/', show_post, name='post'),
		path('category/<int:cat_id>/', show_category, name='category'),
	]
	$ rm -rf women/migrations/000*.py
	$ rm -rf db.sqlite3
	$ python manage.py makemigrations
	$ python manage.py migrate
	$ python manage.py createsuperuser
	$ python manage.py runserver
	Decision:
	$ vim women/views.py
	$ cat women/views.py
	from django.http import HttpResponse, HttpResponseNotFound, Http404
	from django.shortcuts import render, redirect, get_object_or_404
	from .forms import *
	from .models import *
	...
		return HttpResponseNotFound("<h1>Страница не найдена</h1>")
	def addpage(request):
		#return HttpResponse("Добавление статьи")
		#return render(request, 'women/addpage.html', {'menu':menu, 'title':'Добавление статьи'})
		#form=AddPostForm()
		if request.method=='POST':
			form=AddPostForm(request.POST)
			if form.is_valid():
				#print(form.cleaned_data)
				try:
					Women.objects.create(**form.cleaned_data)
					return redirect('home')
				except:
					form.add_error(None,'Ошибка добавления поста')
		else:
			form=AddPostForm()
		return render(request, 'women/addpage.html', {'form':form,'menu':menu, 'title':'Добавление статьи'})
	def contact(request):
		...
	$ touch women/templates/women/addpage.html
	$ vim women/templates/women/addpage.html
	$ cat women/templates/women/addpage.html
	{% extends 'women/base.html' %}
	{% block content %}
	<h1>{{title}}</h1>
	<form action="{% url 'add_page' %}" method="post">
		{% csrf_token %}
		<div class="form-error">{{ form.non_field_errors }}</div>
		{% for f in form %}
		<p><label class="form-label" for="{{ f.id_for_label }}">{{f.label}}:</label>{{ f }}</p>
		<div class="form-error">{{ f.errors }}</div>
		{% endfor %}
		<button type="submit">Добавить</button>
	</form>
	{% endblock %}
	$ touch women/forms.py
	$ vim women/forms.py
	$ cat women/forms.py
	from django import forms
	from .models import *
	class AddPostForm(forms.Form):
	    title=forms.CharField(max_length=255, label="Заголовок", widget=forms.TextInput(attrs={'class':'form-input'}))
	    slug=forms.SlugField(max_length=255, label="URL")
	    content=forms.CharField(widget=forms.Textarea(attrs={'cols':60, 'rows':10}), label="Контент")
	    is_published=forms.BooleanField(label="Публикация", required=False, initial=True)
	    cat=forms.ModelChoiceField(queryset=Category.objects.all(), label="Категория", empty_label="Категория не выбрана")
	$ python manage.py runserver
	Decision:
	$ vim women/forms.py
	$ cat women/forms.py
	from django import forms
	from django.core.exceptions import ValidationError
	from .models import *
	#class AddPostForm(forms.Form):
	    #title=forms.CharField(max_length=255, label="Заголовок", widget=forms.TextInput(attrs={'class':'form-input'}))
	    #slug=forms.SlugField(max_length=255, label="URL")
	    #content=forms.CharField(widget=forms.Textarea(attrs={'cols':60, 'rows':10}), label="Контент")
	    #is_published=forms.BooleanField(label="Публикация", required=False, initial=True)
	    #cat=forms.ModelChoiceField(queryset=Category.objects.all(), label="Категория", empty_label="Категория не выбрана")
	class AddPostForm(forms.ModelForm):
	    def __init__(self, *args, **kwargs):
	        super().__init__(*args, **kwargs)
	        self.fields['cat'].empty_label="Категория не выбрана"
	    class Meta:
	        model=Women
	        #fields='__all__'
	        fields=['title', 'slug', 'content', 'photo', 'is_published', 'cat']
	        widgets={
	            'title':forms.TextInput(attrs={'class':'form-input'}),
	            'content':forms.Textarea(attrs={'cols':60,'rows':10}),
	        }
	    def clean_title(self):
	        title=self.cleaned_data['title']
	        if len(title)>200:
	            raise ValidationError('Длина превышает 200 символов')
	        return title
	$ vim women/views.py
	$ cat women/views.py
	...
	def addpage(request):
		#return HttpResponse("Добавление статьи")
		#return render(request, 'women/addpage.html', {'menu':menu, 'title':'Добавление статьи'})
		#form=AddPostForm()
		if request.method=='POST':
			#form=AddPostForm(request.POST)
			form=AddPostForm(request.POST, request.FILES)
			if form.is_valid():
				#print(form.cleaned_data)
				#try:
					#Women.objects.create(**form.cleaned_data)
				form.save()
				return redirect('home')
				#except:
				#	form.add_error(None,'Ошибка добавления поста')
		else:
			form=AddPostForm()
		return render(request, 'women/addpage.html', {'form':form,'menu':menu, 'title':'Добавление статьи'})
	...
	$ vim women/templates/women/addpage.html
	$ cat women/templates/women/addpage.html
	...
	<h1>{{title}}</h1>
	<form action="{% url 'add_page' %}" method="post" enctype="multipart/form-data">
		{% csrf_token %}
		...
	$ python manage.py runserver
	Decision:
	$ vim women/views.py
	$ cat women/views.py
	from django.http import HttpResponse, HttpResponseNotFound, Http404
	from django.shortcuts import render, redirect, get_object_or_404
	from django.urls import reverse_lazy
	from django.views.generic import ListView, DetailView, CreateView
	from .forms import *
	from .models import *
	...
	#def index(request):
		#return render(request, 'women/index.html', {'title':'Главная страница'})
		#posts=Women.objects.all()
		#cats=Category.objects.all()
		#context={'posts':posts, 
			#'cats':cats,
			#'menu':menu, 
			#'title':'Главная страница',
			#'cat_selected':0}
		#return render(request, 'women/index.html', context=context)
	class WomenHome(ListView):
		model=Women
		template_name='women/index.html'
		context_object_name='posts'
		#extra_context={'title':'Главная страница'}
		def get_context_data(self, *, object_list=None, **kwargs):
			context=super().get_context_data(**kwargs)
			context['menu']=menu
			context['title']='Главная страница'
			context['cat_selected']=0
			return context
		def get_queryset(self):
			return Women.objects.filter(is_published=True)
	...
	#def addpage(request):
		#return HttpResponse("Добавление статьи")
		#return render(request, 'women/addpage.html', {'menu':menu, 'title':'Добавление статьи'})
		#form=AddPostForm()
		#if request.method=='POST':
			#form=AddPostForm(request.POST)
			#form=AddPostForm(request.POST, request.FILES)
			#if form.is_valid():
				#print(form.cleaned_data)
				#try:
					#Women.objects.create(**form.cleaned_data)
				#form.save()
				#return redirect('home')
				#except:
				#	form.add_error(None,'Ошибка добавления поста')
		#else:
			#form=AddPostForm()
		#return render(request, 'women/addpage.html', {'form':form,'menu':menu, 'title':'Добавление статьи'})
	class AddPage(CreateView):
		form_class=AddPostForm
		template_name='women/addpage.html'
		success_url=reverse_lazy('home')
		def get_context_data(self, *, object_list=None, **kwargs):
			context=super().get_context_data(**kwargs)
			context['title']='Добав статьи'
			context['menu']=menu
			return context
	...
	#def show_post(request, post_slug):
		#return HttpResponse(f"Отображение статьи с id = {post_id}")
		#post=get_object_or_404(Women, pk=post_id)
		#post=get_object_or_404(Women, slug=post_slug)
		#context={'post':post,
			#'menu':menu,
			#'title':post.title,
			#'cat_selected':post.cat_id,}
		#return render(request, 'women/post.html', context=context)
	class ShowPost(DetailView):
		model=Women
		template_name='women/post.html'
		slug_url_kwarg='post_slug'
		context_object_name='post'
		def get_context_data(self, *, object_list=None, **kwargs):
			context=super().get_context_data(**kwargs)
			context['title']=context['post']
			context['menu']=menu
			return context
	...
	#def show_category(request, cat_id):
		#posts=Women.objects.filter(cat_id=cat_id)
		#cats=Category.objects.all()
		#if len(posts)==0:
			#raise Http404()
		#context={'posts':posts,
			#'cats':cats,
			#'menu':menu,
			#'title':'Главная страница',
			#'cat_selected':cat_id,}
		#return render(request, 'women/index.html', context=context)
	class WomenCategory(ListView):
		model=Women
		template_name='women/index.html'
		context_object_name='posts'
		allow_empty=False
		def get_queryset(self):
			return Women.objects.filter(cat__slug=self.kwargs['cat_slug'], is_published=True)
		def get_context_data(self, *, object_list=None, **kwargs):
			context=super().get_context_data(**kwargs)
			context['title']='Категория - ' + str(context['posts'][0].cat)
			context['menu']=menu
			context['cat_selected']=context['posts'][0].cat_id
			return context
	$ vim women/urls.py
	$ cat women/urls.py
	...
	urlpatterns = [
		#path('', index), #http://127.0.0.1:8000/women/
		#path('home/', index, name='home'), #http://127.0.0.1:8000/
		#path('', index, name='home'), #http://127.0.0.1:8000/
		path('', WomenHome.as_view(), name='home'), #http://127.0.0.1:8000/
		#path('cats/', categories), #http://127.0.0.1:8000/women/cats/
		#path('cats/', categories), #http://127.0.0.1:8000/cats/
		#path('cats/<int:catid>/', categories), #http://127.0.0.1:8000/cats/1/
		#re_path(r'^archive/(?P<year>[0-9]{4})/', archive), #http://127.0.0.1:8000/archive/2020/
		path('about/', about, name='about'), #http://127.0.0.1:8000/
		#path('addpage/', addpage, name='add_page'),
		path('addpage/', AddPage.as_view(), name='add_page'),
		path('contact/', contact, name='contact'),
		path('login/', login, name='login'),
		#path('post/<int:post_id>/', show_post, name='post'),
		#path('post/<slug:post_slug>/', show_post, name='post'),
		path('post/<slug:post_slug>/', ShowPost.as_view(), name='post'),
		#path('category/<int:cat_id>/', show_category, name='category'),
		path('category/<slug:cat_slug>/', WomenCategory.as_view(), name='category'),
	]
	$ vim women/models.py
	$ cat women/models.py
	...
		def get_absolute_url(self):
			#return reverse('category', kwargs={'cat_id':self.pk})
			return reverse('category', kwargs={'cat_slug':self.slug})
	...
	$ python manage.py runserver
	Decision:
	$ vim women/views.py
	$ cat women/views.py
	from django.http import HttpResponse, HttpResponseNotFound, Http404
	from django.shortcuts import render, redirect, get_object_or_404
	from django.urls import reverse_lazy
	from django.views.generic import ListView, DetailView, CreateView
	from django.contrib.auth.mixins import LoginRequiredMixin
	#from django.contrib.auth.decorators import login_required
	from .forms import *
	from .models import *
	from .utils import *
	...
	#menu=[{'title':"О сайте", 'url_name':'about'}, 
		#{'title':"Добавить статью", 'url_name':'add_page'},
		#{'title':"Обратная связь", 'url_name':'contact'},
		#{'title':"Войти", 'url_name':'login'}]
	...
	#class WomenHome(ListView):
	class WomenHome(DataMixin, ListView):
		model=Women
		template_name='women/index.html'
		context_object_name='posts'
		#extra_context={'title':'Главная страница'}
		def get_context_data(self, *, object_list=None, **kwargs):
			context=super().get_context_data(**kwargs)
			#context['menu']=menu
			#context['title']='Главная страница'
			#context['cat_selected']=0
			c_def = self.get_user_context(title="Главная страница")
			return dict(list(context.items())+list(c_def.items()))
		def get_queryset(self):
			return Women.objects.filter(is_published=True)
	...
	#@login_required
	def about(request):
		return render(request, 'women/about.html', {'menu':menu, 'title':'О сайте'})
	...
	#class AddPage(CreateView):
	class AddPage(LoginRequiredMixin, DataMixin, CreateView):
		form_class=AddPostForm
		template_name='women/addpage.html'
		success_url=reverse_lazy('home')
		login_url = reverse_lazy('home')
		raise_exception = True
		def get_context_data(self, *, object_list=None, **kwargs):
			context=super().get_context_data(**kwargs)
			c_def = self.get_user_context(title="Добавление статьи")
			return dict(list(context.items())+list(c_def.items()))
	...
	class ShowPost(DataMixin, DetailView):
		model=Women
		template_name='women/post.html'
		slug_url_kwarg='post_slug'
		context_object_name='post'
		def get_context_data(self, *, object_list=None, **kwargs):
			context=super().get_context_data(**kwargs)
			c_def = self.get_user_context(title=context['post'])
			return dict(list(context.items())+list(c_def.items()))
	...
	class WomenCategory(DataMixin, ListView):
		model=Women
		template_name='women/index.html'
		context_object_name='posts'
		allow_empty=False
		def get_queryset(self):
			return Women.objects.filter(cat__slug=self.kwargs['cat_slug'], is_published=True)
		def get_context_data(self, *, objecft_list=None, **kwargs):
			context=super().get_context_data(**kwargs)
			c_def = self.get_user_context(title='Категория - ' + str(context['posts'][0].cat), cat_selected=context['posts'][0].cat_id)
			return dict(list(context.items())+list(c_def.items()))
	$ touch women/utils.py
	$ vim women/utils.py
	$ cat women/utils.py
	from .models import *
	from django.db.models import Count
	menu=[{'title':"О сайте", 'url_name':'about'}, 
		{'title':"Добавить статью", 'url_name':'add_page'},
		{'title':"Обратная связь", 'url_name':'contact'},
		{'title':"Войти", 'url_name':'login'}]
	class DataMixin:
		def get_user_context(self, **kwargs):
			context = kwargs
			#cats = Category.objects.all()
			cats = Category.objects.annotate(Count('women'))
			#context['menu']=menu
			user_menu = menu.copy()
			if not self.request.user.is_authenticated:
				user_menu.pop(1)
			context['menu']=user_menu
			context['cats']=cats
			if 'cat_selected' not in context:
				context['cat_selected'] = 0
			return context
	$ vim women/templates/women/base.html
	$ cat women/templates/women/base.html
	...
	{% if cat_selected == 0 %}
				<li class="selected">Все категории</li>
	{% else %}
				<li><a href="{% url 'home' %}">Все категории</a></li>
	{% endif %}
	{% for c in cats %}
	{% if c.women__count > 0 %}
		{% if c.pk == cat_selected %}
				<li class="selected">{{c.name}}</li>
		{% else %}
				<li class=""><a href="{{ c.get_absolute_url }}">{{c.name}}</a></li>
		{% endif %}
	{% endif %}
	{% endfor %}
				<li class="share"><p>Наш канал</p><a class="share-yt" href="https://www.youtube.com/channel/UClJzWfGWuGJL2t-3dYKcHTA/playlists" target="_blank" rel="nofollow"></a></li>
	...
	$ python manage.py runserver
	Decision:
	$ python manage.py shell
	>>> from django.core.paginator import Paginator
	>>> women=['Nicol Kidman', 'Марго Робби', '']
	>>> women=['Nicol Kidman', 'Марго Робби', 'Анжелика Джоли']
	>>> p= Paginator(women, 3)
	>>> p.count
	3
	>>> p.num.pages
	>>> p.num_pages
	1
	>>> p.page_range
	range(1, 2)
	>>> p1=p.page(1)
	>>> p1.object_list
	['Nicol Kidman', 'Марго Робби', 'Анжелика Джоли']
	>>> p1.has_next()
	>>> p1.has_previous()
	>>> p1.has_other_pages()
	>>> p1.next_page_number()
	>>> p1.previous_page_number()
	>>> quit()
	$ vim women/views.py
	$ cat women/views.py
	from django.http import HttpResponse, HttpResponseNotFound, Http404
	from django.shortcuts import render, redirect, get_object_or_404
	from django.urls import reverse_lazy
	from django.views.generic import ListView, DetailView, CreateView
	from django.contrib.auth.mixins import LoginRequiredMixin
	#from django.contrib.auth.decorators import login_required
	from django.core.paginator import Paginator
	from .forms import *
	from .models import *
	from .utils import *
	...
	class WomenHome(DataMixin, ListView):
		#paginate_by = 2
		model=Women
		template_name='women/index.html'
		context_object_name='posts'
		#extra_context={'title':'Главная страница'}
		def get_context_data(self, *, object_list=None, **kwargs):
			context=super().get_context_data(**kwargs)
			#context['menu']=menu
			#context['title']='Главная страница'
			#context['cat_selected']=0
			c_def = self.get_user_context(title="Главная страница")
			return dict(list(context.items())+list(c_def.items()))
		def get_queryset(self):
			return Women.objects.filter(is_published=True)
	#@login_required
	def about(request):
		#return render(request, 'women/about.html', {'menu':menu, 'title':'О сайте'})
		contact_list=Women.objects.all()
		paginator=Paginator(contact_list,2)
		page_number=request.GET.get('page')
		page_obj=paginator.get_page(page_number)
		return render(request, 'women/about.html', {'page_obj':page_obj, 'menu':menu, 'title':'О сайте'})
	...
	class WomenCategory(DataMixin, ListView):
		#paginate_by=2
		model=Women
	...
	$ vim women/templates/women/about.html
	$ cat women/templates/women/about.html
	{% extends 'women/base.html' %}
	{% block content %}
	<h1>{{title}}</h1>
	{% endblock %}
	$ vim women/static/women/css/style.css
	$ cat women/static/women/css/style.css
	...
	.form-button {
		min-width: 200px;
		font-size: 16px;
	}
	.list-pages {
		text-align: center;
		margin: 0 0 20px 0;
	}
	.list-pages ul {
		margin: 20px 0 0 0;
		padding: 0;
		list-style: none;
	}
	.list-pages ul li {
		display: inline-block;
		margin: 0 20px 0 0;
	}
	.list-pages a {
		color: #000;
		font-size: 24px;
		text-decoration: none;
	}
	.list-pages .page-num, .page-num-selected {
		display: inline-block;
		width: 60px;
		height: 44px;
		padding: 16px 0 0 0;
		border: 1px solid #d0d0d0;
		border-radius: 30px;
	}
	.list-pages .page-num:hover {
		box-shadow: 3px 3px 1px #d0d0d0; 
	}
	.list-pages .page-num-selected {
		border: none;
		color: #000;
		font-size: 20px;
	}
	.list-pages .page-num-selected:hover {
		box-shadow: none; 
	}
	$ vim women/templates/women/base.html
	$ cat women/templates/women/base.html
	...
	{% endblock %}
			{% if page_obj.has_other_pages %}
			<nav class="list-pages">
				<ul>
					{% if page_obj.has_previous %}
					<li class="page-num"><a href="?page={{ page_obj.previous_page_number }}">&lt;</a></li>
					{% endif %}
					{% for p in paginator.page_range %}
					{% if page_obj.number == p %}
					<li class="page-num page-num-selected">{{ p }}</li>
					{% elif p >= page_obj.number|add:-2 and p <= page_obj.number|add:2 %}
					<li class="page-num"><a href="?page={{ p }}">{{ p }}</a></li>
					{% endif %}
					{% endfor %}
					{% if page_obj.has_next %}
					<li class="page-num"><a href="?page={{ page_obj.next_page_number }}">&gt;</a></li>
					{% endif %}
				</ul>
			</nav>
			{% endif %}
		</div>
	...
	$ vim women/utils.py
	$ cat women/utils.py
	...
	class DataMixin:
		#paginate_by=30
		paginate_by=2
		def get_user_context(self, **kwargs):
	...
	$ vim women/models.py
	$ cat women/models.py
	...
		class Meta:
			verbose_name='Известные женщины'
			verbose_name_plural='Известные женщины'
			#ordering=['time_create','title']
			#ordering=['-time_create','title']
			ordering=['id']
	class Category(models.Model):
	...
	$ python manage.py runserver
	Decision:
	$ vim women/templates/women/base.html
	$ cat women/templates/women/base.html
	...
	{% block mainmenu %}
			<div class="header">
				<ul id="mainmenu" class="mainmenu">
					<li class="logo"><a href="{% url 'home' %}"><div class="logo"></div></a></li>
					{% for m in menu %}
					<li><a href="{% url m.url_name %}">{{m.title}}</a></li>
					{% endfor %}
					<li class="last"><a href="{% url 'register' %}">Регистрация</a>|<a href="{% url 'login' %}">Войти</a></li>
				</ul>
				<div class="clear"></div>
			</div>
	{% endblock mainmenu %}
	...
	$ vim women/utils.py
	$ cat women/utils.py
	...
	menu=[{'title':"О сайте", 'url_name':'about'}, 
		{'title':"Добавить статью", 'url_name':'add_page'},
		{'title':"Обратная связь", 'url_name':'contact'}
		#{'title':"Войти", 'url_name':'login'}
		]
	...
	$ vim women/urls.py
	$ cat women/urls.py
	...
	[
		path('category/<slug:cat_slug>/', WomenCategory.as_view(), name='category'),
		#path('register/', login, name='register'),
		path('register/', RegisterUser.as_view(), name='register'),
	]
	$ vim women/views.py
	$ cat women/views.py
	...
	class RegisterUser(DataMixin, CreateView):
		form_class=UserCreationForm
		template_name='women/register.html'
		success_url=reverse_lazy('login')
		def get_context_data(self, *, object_list=None, **kwargs):
			context=super().get_context_data(**kwargs)
			c_def=self.get_user_context(title="Регистрация")
			return dict(list(context.items())+list(c_def.items()))
	$ touch women/templates/women/register.html
	$ vim women/templates/women/register.html
	$ cat women/templates/women/register.html
	{% extends 'women/base.html' %}
	{% block content %}
	<h1>{{title}}</h1>
	<form method="post">
		{% csrf_token %}
		{% for f in form %}
		<p><label class="form-label" for="{{ f.id_for_label }}">{{f.label}}:</label>{{ f }}</p>
		<div class="form-error">{{ f.errors }}</div>
		{% endfor %}
		<button type="submit">Регистрация</button>
	</form>
	{% endblock %}
	$ vim women/forms.py
	$ cat women/forms.py
	from django import forms
	from django.core.exceptions import ValidationError
	from django.contrib.auth.forms import UserCreationForm
	from django.contrib.auth.models import User
	from .models import *
	...
	class RegisterUserForm(UserCreationForm):
		username=forms.CharField(label='Логин', widget=forms.TextInput(attrs={'class':'form-input'}))
		email=forms.EmailField(label='Email', widget=forms.EmailInput(attrs={'class':'form-input'}))
		password1=forms.CharField(label='Пароль', widget=forms.PasswordInput(attrs={'class':'form-input'}))
		password2=forms.CharField(label='Повтор пароля', widget=forms.PasswordInput(attrs={'class':'form-input'}))
		class Meta:
			model=User
			fields=('username','email','password1','password2')
			#widgets={
			#    'username':forms.TextInput(attrs={'class':'form-input'}),
			#    'password1':forms.PasswordInput(attrs={'class':'form-input'}),
			#    'password2':forms.PasswordInput(attrs={'class':'form-input'}),
			#}
	$ python manage.py runserver
	Decision:
	$ vim women/views.py
	$ cat women/views.py
	from typing import Any
	from django.forms.models import BaseModelForm
	from django.http import HttpResponse, HttpResponseNotFound, Http404
	from django.shortcuts import render, redirect, get_object_or_404
	from django.urls import reverse_lazy
	from django.views.generic import ListView, DetailView, CreateView
	from django.contrib.auth.mixins import LoginRequiredMixin
	#from django.contrib.auth.decorators import login_required
	from django.core.paginator import Paginator
	#from django.contrib.auth.forms import UserCreationForm
	from django.contrib.auth.views import LoginView
	#from django.contrib.auth.forms import AuthenticationForm
	from django.contrib.auth import logout, login
	...
	#def login(request):
	#	return HttpResponse("Авторизация")
	...
			return dict(list(context.items())+list(c_def.items()))
		def form_valid(self, form):
			user=form.save()
			login(self.request, user)
			return redirect('home')
	class LoginUser(DataMixin, LoginView):
		form_class=AuthenticationForm
		template_name='women/login.html'
		def get_context_data(self, *, object_list=None, **kwargs):
			context=super().get_context_data(**kwargs)
			c_def=self.get_user_context(title="Авторизация")
			return dict(list(context.items())+list(c_def.items()))
		def get_success_url(self):
			return reverse_lazy('home')	
	def logout_user(request):
		logout(request)
		return redirect('login')
	$ vim women/forms.py
	$ cat women/forms.py
	from django import forms
	from django.core.exceptions import ValidationError
	from django.contrib.auth.forms import UserCreationForm
	from django.contrib.auth.models import User
	from django.contrib.auth.forms import AuthenticationForm
	...
	class LoginUserForm(AuthenticationForm):
		username=forms.CharField(label='Логин', widget=forms.TextInput(attrs={'class':'form-input'}))
		password=forms.CharField(label='Пароль', widget=forms.PasswordInput(attrs={'class':'form-input'}))
	$ touch women/templates/women/login.html
	$ vim women/templates/women/login.html
	$ cat women/templates/women/login.html
	{% extends 'women/base.html' %}
	{% block content %}
	<h1>{{title}}</h1>
	<form method="post">
		{% csrf_token %}
		<div class="form-error">{{ form.non_field_errors }}</div>
		{% for f in form %}
		<p><label class="form-label" for="{{ f.id_for_label }}">{{f.label}}:</label>{{ f }}</p>
		<div class="form-error">{{ f.errors }}</div>
		{% endfor %}
		<button type="submit">Войти</button>
	</form>
	{% endblock %}
	$ vim women/urls.py
	$ cat women/urls.py
	...
	urlpatterns = [
		#path('', index), #http://127.0.0.1:8000/women/
		#path('home/', index, name='home'), #http://127.0.0.1:8000/
		#path('', index, name='home'), #http://127.0.0.1:8000/
		path('', WomenHome.as_view(), name='home'), #http://127.0.0.1:8000/
		#path('cats/', categories), #http://127.0.0.1:8000/women/cats/
		#path('cats/', categories), #http://127.0.0.1:8000/cats/
		#path('cats/<int:catid>/', categories), #http://127.0.0.1:8000/cats/1/
		#re_path(r'^archive/(?P<year>[0-9]{4})/', archive), #http://127.0.0.1:8000/archive/2020/
		path('about/', about, name='about'), #http://127.0.0.1:8000/
		#path('addpage/', addpage, name='add_page'),
		path('addpage/', AddPage.as_view(), name='add_page'),
		path('contact/', contact, name='contact'),
		#path('login/', login, name='login'),
		#path('post/<int:post_id>/', show_post, name='post'),
		#path('post/<slug:post_slug>/', show_post, name='post'),
		path('post/<slug:post_slug>/', ShowPost.as_view(), name='post'),
		#path('category/<int:cat_id>/', show_category, name='category'),
		path('category/<slug:cat_slug>/', WomenCategory.as_view(), name='category'),
		#path('register/', login, name='register'),
		path('register/', RegisterUser.as_view(), name='register'),
		path('login/', LoginUser.as_view(), name='login'),
		path('logout/', logout_user, name='logout'),
	]
	$ vim coolsite/settings.py
	$ cat coolsite/settings.py
	...
	MEDIA_URL = '/media/'
	#LOGIN_REDIRECT_URL = '/'
	$ vim women/templates/women/base.html
	$ cat women/templates/women/base.html
	...
				<ul id="mainmenu" class="mainmenu">
					<li class="logo"><a href="{% url 'home' %}"><div class="logo"></div></a></li>
					{% for m in menu %}
					<li><a href="{% url m.url_name %}">{{m.title}}</a></li>
					{% endfor %}
					{% if request.user.is_authenticated %}
					<li class="last">{{user.username}} | <a href="{% url 'logout' %}">Выйти</a></li>
					{% else %}
					<li class="last"><a href="{% url 'register' %}">Регистрация</a>|<a href="{% url 'login' %}">Войти</a></li>
					{% endif %}
				</ul>
	...
	$ python manage.py runserver
	Decision:
	$ pip install django-debug-toolbar
	$ vim coolsite/settings.py
	$ cat coolsite/settings.py
	...
	INSTALLED_APPS = [
		'django.contrib.admin',
		'django.contrib.auth',
		'django.contrib.contenttypes',
		'django.contrib.sessions',
		'django.contrib.messages',
		'django.contrib.staticfiles',
		'debug_toolbar',
		'women.apps.WomenConfig'
	]
	MIDDLEWARE = [
		'django.middleware.security.SecurityMiddleware',
		'django.contrib.sessions.middleware.SessionMiddleware',
		'django.middleware.common.CommonMiddleware',
		'django.middleware.csrf.CsrfViewMiddleware',
		'django.contrib.auth.middleware.AuthenticationMiddleware',
		'django.contrib.messages.middleware.MessageMiddleware',
		'django.middleware.clickjacking.XFrameOptionsMiddleware',
		'debug_toolbar.middleware.DebugToolbarMiddleware',
	]
	...
	INTERNAL_IPS=[
		'127.0.0.1',
	]
	$ vim coolsite/urls.py
	$ cat coolsite/urls.py
	...
	if settings.DEBUG:
		import debug_toolbar
		urlpatterns = [
			path('__debug__/', include(debug_toolbar.urls)),
		] + urlpatterns
		urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
	handler404 = pageNotFound
	$ vim women/views.py
	$ cat women/views.py
	...
		def get_queryset(self):
			return Women.objects.filter(is_published=True).select_related('cat')
	#@login_required
	...
	class WomenCategory(DataMixin, ListView):
		#paginate_by=2
		model=Women
		template_name='women/index.html'
		context_object_name='posts'
		allow_empty=False
		def get_queryset(self):
			return Women.objects.filter(cat__slug=self.kwargs['cat_slug'], is_published=True).select_related('cat')
		def get_context_data(self, *, object_list=None, **kwargs):
			context=super().get_context_data(**kwargs)
			c = Category.objects.get(slug=self.kwargs['cat_slug'])
			#c_def = self.get_user_context(title='Категория - ' + str(context['posts'][0].cat), cat_selected=context['posts'][0].cat_id)
			c_def = self.get_user_context(title='Категория - ' + str(c.name), cat_selected=c.pk)
			return dict(list(context.items())+list(c_def.items()))
	...
	$ python manage.py runserver
	Decision:
	$ mkdir coolsite_cache
	$ vim coolsite/settings.py
	$ cat coolsite/settings.py
	...
	CACHES = {
		'default':{
			'BACKEND':'django.core.cache.backends.filebased.FileBasedCache',
			'LOCATION':os.path.join(BASE_DIR, 'coolsite_cache'),
		}
	}
	$ vim women/urls.py
	$ cat women/urls.py
	from django.urls import path, re_path
	from .views import *
	from django.views.decorators.cache import cache_page
	...
		path('', WomenHome.as_view(), name='home'), #http://127.0.0.1:8000/
		#path('', cache_page(60)(WomenHome.as_view()), name='home'),
	...
	$ vim women/utils.py
	$ cat women/utils.py
	from .models import *
	from django.db.models import Count
	from django.core.cache import cache
	...
			context = kwargs
			#cats = Category.objects.all()
			#cats = Category.objects.annotate(Count('women'))
			#context['menu']=menu
			cats = cache.get('cats')
			if not cats:
				cats = Category.objects.annotate(Count('women'))
				cache.set('cats', cats, 60)
			user_menu = menu.copy()
	...
	$ python manage.py runserver
	Decision:
	$ pip install django-simple-captcha
	$ vim women/views.py
	$ cat women/views.py
	...
	from django.views.generic import ListView, DetailView, CreateView, FormView
	...
	class ContactFormView(DataMixin, FormView):
		form_class = ContactForm
		template_name = 'women/contact.html'
		success_url = reverse_lazy('home')
		def get_context_data(self, *, object_list=None, **kwargs):
			context = super().get_context_data(**kwargs)
			c_def = self.get_user_context(title="Обратная связь")
			return dict(list(context.items()) + list(c_def.items()))
		def form_valid(self, form):
			print(form.cleaned_data)
			return redirect('home')
	$ vim women/forms.py
	$ cat women/forms.py
	...
	from django.contrib.auth.forms import AuthenticationForm
	from captcha.fields import CaptchaField
	...
	class ContactForm(forms.Form):
		name = forms.CharField(label='Имя', max_length=255)
		email = forms.EmailField(label='Email')
		content = forms.CharField(widget=forms.Textarea(attrs={'cols': 60, 'rows': 10}))
		capatcha = CaptchaField()
	$ vim women/urls.py
	$ cat women/urls.py
	from django.urls import path, re_path
	from .views import *
	from django.views.decorators.cache import cache_page
	...
		#path('contact/', contact, name='contact'),
		path('contact/', ContactFormView.as_view(), name='contact'),
	...
	$ touch women/templates/women/contact.html
	$ vim women/templates/women/contact.html
	$ cat women/templates/women/contact.html
	{% extends 'women/base.html' %}
	{% block content %}
	<h1>{{title}}</h1>
	<form method="post">
		{% csrf_token %}
		<div class="form-error">{{ form.non_field_errors }}</div>
		{% for f in form %}
		<p><label class="form-label" for="{{ f.id_for_label }}">{{f.label}}:</label>{{ f }}</p>
		<div class="form-error">{{ f.errors }}</div>
		{% endfor %}
		<button type="submit">Отправить</button>
	</form>
	{% endblock %}
	$ vim coolsite/settings.py
	$ cat coolsite/settings.py
	...
	INSTALLED_APPS = [
		'django.contrib.admin',
		'django.contrib.auth',
		'django.contrib.contenttypes',
		'django.contrib.sessions',
		'django.contrib.messages',
		'django.contrib.staticfiles',
		'debug_toolbar',
		'captcha',
		'women.apps.WomenConfig'
	]
	...
	$ vim coolsite/urls.py
	$ cat coolsite/urls.py
	...
		path('captcha/', include('captcha.urls')),
	]
	...
	$ python manage.py migrate
	$ python manage.py runserver
	Decision:
	$ mkdir templates
	$ mkdir templates/admin
	$ touch templates/admin/base_site.html
	$ vim templates/admin/base_site.html
	$ cat templates/admin/base_site.html
	{% extends "admin/base.html" %}
	{% load static %}
	{% block extrastyle %}
	<link rel="stylesheet" href="{% static 'css/admin.css' %}">
	{% endblock %}
	{% block title %}{% if subtitle %}{{ subtitle }} | {% endif %}{{ title }} | {{ site_title|default:_('Django site admin') }}{% endblock %}
	{% block branding %}
	<h1 id="site-name"><a href="{% url 'admin:index' %}">{{ site_header|default:_('Django administration') }}</a></h1>
	{% if user.is_anonymous %}
		{% include "admin/color_theme_toggle.html" %}
	{% endif %}
	{% endblock %}
	{% block nav-global %}{% endblock %}
	$ mkdir women/static/css
	$ touch women/static/css/admin.css
	$ vim women/static/css/admin.css
	$ cat women/static/css/admin.css
	#header, .module caption  {
		background: #5e3a00;
	}
	$ vim women/admin.py
	$ cat women/admin.py
	from django.contrib import admin
	from .models import *
	from django.utils.safestring import mark_safe
	...
	class WomenAdmin(admin.ModelAdmin):
		#list_display = ('id', 'title', 'time_create', 'photo', 'is_published')
		list_display = ('id', 'title', 'time_create', 'get_html_photo', 'is_published')
		list_display_links = ('id', 'title')
		search_fields = ('title', 'content')
		list_editable = ('is_published',)
		list_filter = ('is_published', 'time_create')
		prepopulated_fields = {"slug": ("title",)}
		fields = ('title', 'slug', 'cat', 'content', 'photo', 'get_html_photo', 'is_published', 'time_create', 'time_update')
		readonly_fields = ('time_create', 'time_update', 'get_html_photo')
		save_on_top = True
		def get_html_photo(self, object):
			if object.photo:
				return mark_safe(f"<img src='{object.photo.url}' width=50>")
		get_html_photo.short_description="Миниатюра"
	...
	admin.site.site_title='Админ-панель сайта о женщинах'
	admin.site.site_header='Админ-панель сайта о женщинах 2'
	$ vim coolsite/settings.py
	$ cat coolsite/settings.py
	...
	TEMPLATES = [
		{
			'BACKEND': 'django.template.backends.django.DjangoTemplates',
			'DIRS': [os.path.join(BASE_DIR, 'templates')],
			'APP_DIRS': True,
			'OPTIONS': {
				'context_processors': [
					'django.template.context_processors.debug',
					'django.template.context_processors.request',
					'django.contrib.auth.context_processors.auth',
					'django.contrib.messages.context_processors.messages',
				],
			},
		},
	]
	...
	$ python manage.py runserver
	Decision:
	$ deactivate
	Source:
	1. https://docs.python.org/3/tutorial/venv.html
	2. https://translated.turbopages.org/proxy_u/en-ru.ru.6b298518-64cb356b-c3e4f7d2-74722d776562/https/stackoverflow.com/questions/5334882/how-to-get-list-of-all-the-tables-in-sqlite-programmatically
	3. https://django-debug-toolbar.readthedocs.io/en/latest/
	4. https://pypi.org/project/django-recaptcha/#installation

Task:
Необходимо собрать с помощью bootstrap 5 и запустить новую страницу по макету 
https://www.figma.com/file/csU67B0SQVZO1AkwvMZa3D/Тестовое-задание-N2?type=design&node-id=1-1012&mode=design&t=wz2qpqpXo6RochwT-0
- сборку проекта осуществить с помощью python 3.9, Django 4.1 и MySQL
- проект разместить в git репозитории
- для сборки клиентской части страницы необходимо использовать bootstrap 5
- для запуска слайдера необходимо использовать slick slider http://kenwheeler.github.io/slick/ (см. Slider Syncing)
- по клику на большую фотографию на слайдере фотки должны открываться на весь экран и листаться галереей
- необходимо чтобы slider заполнялся через админку django. Необходимо настроить визуально понятный admin.py, чтобы выводилась картинка и название в списке записей элементов слайдера.
- для картинок модели слайдера необходимо использовать пакет django-filer и через него грузить картинки в слайдер
- записи слайдера в админке должны сортироваться при помощи drag&drop, для этого необходимо использовать пакет django-admin-sortable2
- все зависимости для запуска проекта расположить в файле req.pip в корне проекта.
Тестовое задание проверяет поверхностно основные навыки кандидата необходимые для текущей вакансии:
- умение работать с bootstrap 5;
- базовые знания HTML, CSS, JavaScript;
- умение запустить и собрать новый проект на Django, с подключением дополнительных пакетов;
- базовые навыки работы с GIT;
- базовые навыки работы с Figma.
Decision:
tuser@kvm-ubuntu:~$ mkdir Python-SpaceAgency
tuser@kvm-ubuntu:~$ cd Python-SpaceAgency/
tuser@kvm-ubuntu:~/Projects/Python-SpaceAgency$ sudo apt update
tuser@kvm-ubuntu:~/Projects/Python-SpaceAgency$ sudo apt upgrade -y
E: dpkg was interrupted, you must manually run 'sudo dpkg --configure -a' to correct the problem. 
tuser@kvm-ubuntu:~/Projects/Python-SpaceAgency$ sudo dpkg --configure -a
tuser@kvm-ubuntu:~/Projects/Python-SpaceAgency$ sudo apt upgrade -y
Task:
Check Mysql
Decision:
tuser@kvm-ubuntu:~/Projects/Python-SpaceAgency$ systemctl status mysql
● mysql.service - MySQL Community Server
     Loaded: loaded (/lib/systemd/system/mysql.service; enabled; vendor preset: enabled)
     Active: active (running) since Thu 2023-11-16 20:58:56 CST; 29min ago
    Process: 622 ExecStartPre=/usr/share/mysql/mysql-systemd-start pre (code=exited, status=0/SUCCESS)
   Main PID: 814 (mysqld)
     Status: "Server is operational"
      Tasks: 37 (limit: 2261)
     Memory: 382.8M
        CPU: 21.760s
     CGroup: /system.slice/mysql.service
             └─814 /usr/sbin/mysqld
Nov 16 20:57:38 kvm-ubuntu systemd[1]: Starting MySQL Community Server...
Nov 16 20:58:56 kvm-ubuntu systemd[1]: Started MySQL Community Server.
tuser@kvm-ubuntu:~/Projects/Python-SpaceAgency$ mysql -u tuser -p
mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| performance_schema |
| tbase              |
+--------------------+
3 rows in set (0.00 sec)
Task:
Install Figma
Decision:
tuser@kvm-ubuntu:~/Projects/Python-SpaceAgency$ wget https://github.com/Figma-Linux/figma-linux/releases/download/v0.11.0/figma-linux_0.11.0_linux_amd64.deb
tuser@kvm-ubuntu:~/Projects/Python-SpaceAgency$ sudo dpkg -i figma-linux_0.11.0_linux_amd64.deb
tuser@kvm-ubuntu:~/Projects/Python-SpaceAgency$ figma-linux &
tuser@kvm-ubuntu:~/Projects/Python-SpaceAgency$ google-chrome https://www.figma.com/file/csU67B0SQVZO1AkwvMZa3D/%D0%A2%D0%B5%D1%81%D1%82%D0%BE%D0%B2%D0%BE%D0%B5-%D0%B7%D0%B0%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5-N2?type=design&node-id=1-1012&mode=design &
Task:
Figma to Bootstrap 5
Decision:
tuser@kvm-ubuntu:~/Projects/Python-SpaceAgency$ mkdir bootstrap
tuser@kvm-ubuntu:~/Projects/Python-SpaceAgency$ cd bootstrap/
tuser@kvm-ubuntu:~/Projects/Python-SpaceAgency/bootstrap$ wget https://github.com/twbs/bootstrap/releases/download/v5.3.2/bootstrap-5.3.2-dist.zip
tuser@kvm-ubuntu:~/Projects/Python-SpaceAgency/bootstrap$ unzip bootstrap-5.3.2-dist.zip
tuser@kvm-ubuntu:~/Projects/Python-SpaceAgency/bootstrap$ mkdir space/static/space/css
tuser@kvm-ubuntu:~/Projects/Python-SpaceAgency/bootstrap$ mkdir js
tuser@kvm-ubuntu:~/Projects/Python-SpaceAgency/bootstrap$ mkdir space/static/space/image
tuser@kvm-ubuntu:~/Projects/Python-SpaceAgency/bootstrap$ cp bootstrap-5.3.2-dist/css/bootstrap.min.css space/static/space/css/
tuser@kvm-ubuntu:~/Projects/Python-SpaceAgency/bootstrap$ cp bootstrap-5.3.2-dist/js/bootstrap.min.js js/
tuser@kvm-ubuntu:~/Projects/Python-SpaceAgency/bootstrap$ touch index.html
tuser@kvm-ubuntu:~/Projects/Python-SpaceAgency/bootstrap$ touch space/static/space/css/style.css
tuser@kvm-ubuntu:~/Projects/Python-SpaceAgency/bootstrap$ wget https://github.com/kenwheeler/slick/archive/v1.8.1.zip
tuser@kvm-ubuntu:~/Projects/Python-SpaceAgency/bootstrap$ unzip v1.8.1.zip 
tuser@kvm-ubuntu:~/Projects/Python-SpaceAgency/bootstrap$ ls slick-1.8.1/slick
ajax-loader.gif  config.rb  fonts  slick.css  slick.js  slick.less  slick.min.js  slick.scss  slick-theme.css  slick-theme.less  slick-theme.scss
tuser@kvm-ubuntu:~/Projects/Python-SpaceAgency/bootstrap$ cp slick-1.8.1/slick/slick.min.js js/
tuser@kvm-ubuntu:~/Projects/Python-SpaceAgency/bootstrap$ cp slick-1.8.1/slick/slick.css space/static/space/css/
tuser@kvm-ubuntu:~/Projects/Python-SpaceAgency/bootstrap$ cp slick-1.8.1/slick/slick-theme.css space/static/space/css/

Task:
Install python 3.9
Decision:
tuser@kvm-ubuntu:~/Projects/Python-SpaceAgency/bootstrap$ cd ..
tuser@kvm-ubuntu:~/Projects/Python-SpaceAgency$ python3 -V
Python 3.10.12
tuser@kvm-ubuntu:~/Projects/Python-SpaceAgency$ sudo apt install software-properties-common
tuser@kvm-ubuntu:~/Projects/Python-SpaceAgency$ sudo add-apt-repository ppa:deadsnakes/ppa
tuser@kvm-ubuntu:~/Projects/Python-SpaceAgency$ sudo apt install python3.9
tuser@kvm-ubuntu:~/Projects/Python-SpaceAgency$ python3.9 -m venv venv
Error: Command '['/home/tuser/Projects/Python-SpaceAgency/venv/bin/python3.9', '-Im', 'ensurepip', '--upgrade', '--default-pip']' returned non-zero exit status 1.
tuser@kvm-ubuntu:~/Projects/Python-SpaceAgency$ sudo apt install python3.9-venv
tuser@kvm-ubuntu:~/Projects/Python-SpaceAgency$ python3.9 -m venv venv
tuser@kvm-ubuntu:~/Projects/Python-SpaceAgency$ source venv/bin/activate
(venv) tuser@kvm-ubuntu:~/Projects/Python-SpaceAgency$ python3 -V
Python 3.9.18
Task:
requirements.txt — это список внешних зависимостей
Decision:
(venv) tuser@kvm-ubuntu:~/Projects/Python-SpaceAgency$ vim req.pip
(venv) tuser@kvm-ubuntu:~/Projects/Python-SpaceAgency$ cat req.pip
Django==4.1.13
django-filter
django-admin-sortable2
django-debug-toolbar
django-simple-captcha
mysqlclient
(venv) tuser@kvm-ubuntu:~/Projects/Python-SpaceAgency$ pip install -r req.pip
...
  Getting requirements to build wheel ... error
  error: subprocess-exited-with-error
  × Getting requirements to build wheel did not run successfully.
  │ exit code: 1
  ╰─> [24 lines of output]
      /bin/sh: 1: pkg-config: not found
      /bin/sh: 1: pkg-config: not found
      Trying pkg-config --exists mysqlclient
      Command 'pkg-config --exists mysqlclient' returned non-zero exit status 127.
      Trying pkg-config --exists mariadb
      Command 'pkg-config --exists mariadb' returned non-zero exit status 127.
      Traceback (most recent call last):
        File "/home/tuser/Projects/Python-SpaceAgency/venv/lib/python3.9/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py", line 353, in <module>
          main()
        File "/home/tuser/Projects/Python-SpaceAgency/venv/lib/python3.9/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py", line 335, in main
          json_out['return_val'] = hook(**hook_input['kwargs'])
        File "/home/tuser/Projects/Python-SpaceAgency/venv/lib/python3.9/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py", line 118, in get_requires_for_build_wheel
          return hook(config_settings)
        File "/tmp/pip-build-env-7j30p2fh/overlay/lib/python3.9/site-packages/setuptools/build_meta.py", line 355, in get_requires_for_build_wheel
          return self._get_build_requires(config_settings, requirements=['wheel'])
        File "/tmp/pip-build-env-7j30p2fh/overlay/lib/python3.9/site-packages/setuptools/build_meta.py", line 325, in _get_build_requires
          self.run_setup()
        File "/tmp/pip-build-env-7j30p2fh/overlay/lib/python3.9/site-packages/setuptools/build_meta.py", line 341, in run_setup
          exec(code, locals())
        File "<string>", line 154, in <module>
        File "<string>", line 48, in get_config_posix
        File "<string>", line 27, in find_package_name
      Exception: Can not find valid pkg-config name.
      Specify MYSQLCLIENT_CFLAGS and MYSQLCLIENT_LDFLAGS env vars manually
      [end of output]
  note: This error originates from a subprocess, and is likely not a problem with pip.
error: subprocess-exited-with-error
× Getting requirements to build wheel did not run successfully.
│ exit code: 1
╰─> See above for output.
note: This error originates from a subprocess, and is likely not a problem with pip.
(venv) tuser@kvm-ubuntu:~/Projects/Python-SpaceAgency$ sudo apt-get install pkg-config build-essential libmysqlclient-dev
(venv) tuser@kvm-ubuntu:~/Projects/Python-SpaceAgency$ pip install -r req.pip
...
Building wheels for collected packages: mysqlclient
  Building wheel for mysqlclient (pyproject.toml) ... error
  error: subprocess-exited-with-error
  × Building wheel for mysqlclient (pyproject.toml) did not run successfully.
  │ exit code: 1
  ╰─> [45 lines of output]
      Trying pkg-config --exists mysqlclient
      # Options for building extention module:
        extra_compile_args: ['-I/usr/include/mysql', '-std=c99']
        extra_link_args: ['-lmysqlclient']
        define_macros: [('version_info', (2, 2, 0, 'final', 0)), ('__version__', '2.2.0')]
      running bdist_wheel
      running build
      running build_py
      creating build
      creating build/lib.linux-x86_64-cpython-39
      creating build/lib.linux-x86_64-cpython-39/MySQLdb
      copying src/MySQLdb/_exceptions.py -> build/lib.linux-x86_64-cpython-39/MySQLdb
      copying src/MySQLdb/__init__.py -> build/lib.linux-x86_64-cpython-39/MySQLdb
      copying src/MySQLdb/connections.py -> build/lib.linux-x86_64-cpython-39/MySQLdb
      copying src/MySQLdb/cursors.py -> build/lib.linux-x86_64-cpython-39/MySQLdb
      copying src/MySQLdb/converters.py -> build/lib.linux-x86_64-cpython-39/MySQLdb
      copying src/MySQLdb/times.py -> build/lib.linux-x86_64-cpython-39/MySQLdb
      copying src/MySQLdb/release.py -> build/lib.linux-x86_64-cpython-39/MySQLdb
      creating build/lib.linux-x86_64-cpython-39/MySQLdb/constants
      copying src/MySQLdb/constants/CLIENT.py -> build/lib.linux-x86_64-cpython-39/MySQLdb/constants
      copying src/MySQLdb/constants/ER.py -> build/lib.linux-x86_64-cpython-39/MySQLdb/constants
      copying src/MySQLdb/constants/FIELD_TYPE.py -> build/lib.linux-x86_64-cpython-39/MySQLdb/constants
      copying src/MySQLdb/constants/__init__.py -> build/lib.linux-x86_64-cpython-39/MySQLdb/constants
      copying src/MySQLdb/constants/FLAG.py -> build/lib.linux-x86_64-cpython-39/MySQLdb/constants
      copying src/MySQLdb/constants/CR.py -> build/lib.linux-x86_64-cpython-39/MySQLdb/constants
      running egg_info
      writing src/mysqlclient.egg-info/PKG-INFO
      writing dependency_links to src/mysqlclient.egg-info/dependency_links.txt
      writing top-level names to src/mysqlclient.egg-info/top_level.txt
      reading manifest file 'src/mysqlclient.egg-info/SOURCES.txt'
      reading manifest template 'MANIFEST.in'
      adding license file 'LICENSE'
      writing manifest file 'src/mysqlclient.egg-info/SOURCES.txt'
      copying src/MySQLdb/_mysql.c -> build/lib.linux-x86_64-cpython-39/MySQLdb
      running build_ext
      building 'MySQLdb._mysql' extension
      creating build/temp.linux-x86_64-cpython-39
      creating build/temp.linux-x86_64-cpython-39/src
      creating build/temp.linux-x86_64-cpython-39/src/MySQLdb
      x86_64-linux-gnu-gcc -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -fstack-protector-strong -Wformat -Werror=format-security -g -fwrapv -O2 -fPIC "-Dversion_info=(2, 2, 0, 'final', 0)" -D__version__=2.2.0 -I/home/tuser/Projects/Python-SpaceAgency/venv/include -I/usr/include/python3.9 -c src/MySQLdb/_mysql.c -o build/temp.linux-x86_64-cpython-39/src/MySQLdb/_mysql.o -I/usr/include/mysql -std=c99
      src/MySQLdb/_mysql.c:46:10: fatal error: Python.h: No such file or directory
         46 | #include "Python.h"
            |          ^~~~~~~~~~
      compilation terminated.
      error: command '/usr/bin/x86_64-linux-gnu-gcc' failed with exit code 1
      [end of output]
  note: This error originates from a subprocess, and is likely not a problem with pip.
  ERROR: Failed building wheel for mysqlclient
Failed to build mysqlclient
ERROR: Could not build wheels for mysqlclient, which is required to install pyproject.toml-based projects
(venv) tuser@kvm-ubuntu:~/Projects/Python-SpaceAgency$ sudo apt-get install python3.9-dev
(venv) tuser@kvm-ubuntu:~/Projects/Python-SpaceAgency$ pip install -r req.pip

Task:
Развернуть django проект
Decision:
(venv) tuser@kvm-ubuntu:~/Projects/Python-SpaceAgency$ django-admin startproject spaceagency
(venv) tuser@kvm-ubuntu:~/Projects/Python-SpaceAgency$ cd spaceagency/
(venv) tuser@kvm-ubuntu:~/Projects/Python-SpaceAgency/spaceagency$ python manage.py startapp space
(venv) tuser@kvm-ubuntu:~/Projects/Python-SpaceAgency/spaceagency$ python manage.py migrate
(venv) tuser@kvm-ubuntu:~/Projects/Python-SpaceAgency/spaceagency$ mysql -u tuser -p
mysql> use tbase;
mysql> show tables;
+----------------------------+
| Tables_in_tbase            |
+----------------------------+
| auth_group                 |
| auth_group_permissions     |
| auth_permission            |
| auth_user                  |
| auth_user_groups           |
| auth_user_user_permissions |
| captcha_captchastore       |
| django_admin_log           |
| django_content_type        |
| django_migrations          |
| django_session             |
| ttable1                    |
| ttable2                    |
+----------------------------+
13 rows in set (0.01 sec)
(venv) tuser@kvm-ubuntu:~/Projects/Python-SpaceAgency/spaceagency$ python manage.py runserver
(venv) tuser@kvm-ubuntu:~/Projects/Python-SpaceAgency/spaceagency$ google-chrome http://127.0.0.1:8000/ &



Source:
https://itslinuxfoss.com/install-python-3-9-ubuntu-22-04/
https://pypi.org/project/Django/4.1.13/#history
https://sky.pro/media/udalenie-vseh-paketov-ustanovlennyh-cherez-pip/
https://semakin.dev/2020/04/requirements_txt/?ysclid=lp2q25vn81790283417
https://unixcop.com/install-figma-ubuntu-different-methods/
https://github.com/Figma-Linux/figma-linux/releases/tag/v0.11.0
https://www.youtube.com/watch?v=7EKg_IgTztU&t=160s
https://www.youtube.com/playlist?list=PLgT76xw3dCIWO5WnLzhbrmwO6t85G68_b
https://getbootstrap.com/docs/5.3/getting-started/download/
http://kenwheeler.github.io/slick/
https://pythonpip.ru/django/kak-podklyuchit-mysql-k-django-za-5-shagov?ysclid=lp2re296g690922035
https://www.8host.com/blog/kak-xranit-izobrazheniya-v-mysql-s-pomoshhyu-blob/?ysclid=lp4zs7pdrh496783742
https://stackoverflow.com/questions/51117503/python-3-7-failed-building-wheel-for-mysql-python
https://stackoverflow.com/questions/76875507/can-not-install-apache-airflow-providers-mysql-pkg-config-error
https://www.youtube.com/playlist?list=PLxjLT04EBKpN_8aiP0PzKUZYnNYANUekx
https://github.com/luketamang/Dynamic-image-slider-in-django/blob/master/core/models.py


Добавил виртуальные машины, настроил виртуальные сети, распределил нагрузку между компонентами своей облачной системы и настроил автоматическое масштабирование веб-сервиса при неравномерной нагрузке
  Task:
  Set up SSH connection and file transfer using SCP.
  Decision:
  $ ls .ssh
  $ ssh-keygen -t rsa
  Generating publi-c/private rsa key pair.
  Enter file in whi-ch to save the key (/home/u/.ssh/id_rsa): ubalt
  Enter passphrase (empty for no passphrase):
  Enter same passphrase again:
  Your identifi-cation has been saved in ubalt
  Your publi-c key has been saved in ubalt.pub
  The key fingerprint is:
  SHA256:H tuser@thost1
  The key's randomart image is:
  +---[RSA 3072]----+
  |  .==..+.=*++ .o |
  ...
  |   .o            |
  +----[SHA256]-----+
  $ ls
   snap       'VirtualBox VMs'   Загрузки      Общедоступные
   ubalt       Видео             Изображения  'Рабочий стол'
   ubalt.pub   Документы         Музыка        Шаблоны
  $ ssh-copy-id -i ubalt.pub tuser@taddress
  /usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: "ubalt.pub"
  The authenti-city of host '1.-.9 (1.-.9)' can't be established.
  ED25519 key fingerprint is SHA256:v.
  This key is not known by any other names
  Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
  /usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed
  /usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys
  tuser@taddress's password:
  Number of key(s) added: 1
  Now try logging into the machine, with:   "ssh 'tuser@taddress'"
  and check to make sure that only the key(s) you wanted were added.
  $ cat ubalt.pub
  ssh-rsa A0/l/E/l/J= tuser@thost1
  $ ssh-agent bash
  $ ssh-add ubalt
  Enter passphrase for ubalt:
  Identity added: ubalt (tuser@thost1)
  $ ssh tuser@taddress
  $ cat .ssh/authorized_keys
  # OpenSSH authorized_keys file for-tat is described in sshd(8) manual page.
  ssh-rsa A0/l/E/l/J= tuser@thost1
  Decision:
  $ sudo ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key
  Generating publi-c/private dsa key pair.
  Enter passphrase (empty for no passphrase):
  Enter same passphrase again:
  Your identifi-cation has been saved in /etc/ssh/ssh_host_dsa_key
  Your publi-c key has been saved in /etc/ssh/ssh_host_dsa_key.pub
  The key fingerprint is:
  SHA256:lu4Mlc9dcmKNPriYzDMyGQsaG0/+c5+iyN9aEPL+/RQ root@i
  The key's randomart image is:
  +---[DSA 1024]----+
  |                 |
  ...
  |    oo=BX==..    |
  +----[SHA256]-----+
  $ ls -l /etc/ssh/ssh_host_dsa*
  -rw------- 1 root root 1434 авг  9 13:14 /etc/ssh/ssh_host_dsa_key
  -rw-r--r-- 1 root root  607 авг  9 13:14 /etc/ssh/ssh_host_dsa_key.pub
  $ ssh tuser@taddress
  $ exit
  Decision:
  $ ssh -X tuser@taddress
  $ nautilus
  -bash: nautilus: команда не найдена
  $ firefox
  Decision:
  $ touch test.txt
  $ scp test.txt tuser@taddress:/home/u
  test.txt                                      100%    0     0.0KB/s   00:00    
  $ ssh tuser@taddress
  $ ls -l te*
  -rw-r--r-- 1 user user 0 авг  9 13:26 test.txt
  $ exit
  Decision:
  $ ping ya.ru
  PING ya.ru (87.250.250.242) 56(84) bytes of data.
  64 bytes from ya.ru (87.250.250.242): i-cmp_seq=1 ttl=245 time=61.6 ms
  64 bytes from ya.ru (87.250.250.242): i-cmp_seq=2 ttl=245 time=61.5 ms
  64 bytes from ya.ru (87.250.250.242): i-cmp_seq=3 ttl=245 time=61.3 ms
  ^C
  --- ya.ru ping statisti-cs ---
  3 packets transmitted, 3 received, 0% packet loss, time 2002ms
  rtt min/avg/max/mdev = 61.325/61.461/61.602/0.113 ms
  $ ssh tuser@taddress -N -L 12345:87.250.250.242:80

  web - http://localhost:12345/
  Source:
  1.https://www.youtube.com/playlist?list=PLmxB7JSpraieH3aScuPs7h77cSEQvPi2A

Решение проблемы с резким переполнением базы в Firebird
  Task:
  Резкое переполнение базы в Firebird
  Ошибка после ввода пароля в ПИ СДП у всех пользователей - "Не отвечает программа"
     ВНЕШНЯЯБАЗА2.exe не работает
  На одном из объектов автоматизации второй раз за месяц происходит процесс переполнения внешней базы документооборота C:\ПУТЬКБАЗЕ\ВНЕШНЯЯБАЗА1.GDB. База данных увеличивается в размерах с 1.8 Гб до 115Гб за три дня. После проведения инженером филиала процедуры Бэкап/Рестор внешняя база возвращается к прежнему размеру. Данная проблема наблюдается второй раз за месяц с периодичностью в две недели.
  Task:
  Отключить службы Firebird, Сделать backup/restore базы ВНЕШНЯЯБАЗА1.GDB, запустив скрипты 
  1. backup.bat 
  2. restore.bat
  после чего сохранится файл ВНЕШНЯЯБАЗА1.GDB в КУДАСОХРАНЯТЬИЗМЕНЕНИЯ. Файл заменить на файл в сервере, который занимал 120 гб. Посмотреть лог файлы:
  1. retranslator.log
  2. retranslator_2022-01-11_15-23-40-694.log
  3. retranslator_2022-01-24_16-36-09-627.log
  4. retranslator_2022-01-24_16-36-16-806.log
  Decision:
  $ cat backup.bat
  @ echo on
  SET ISC_USER=ИМЯПОЛЬЗОВАТЕЛЯБАЗЫ
  SET ISC_PASSWORD=ПАРОЛЬКБАЗЕ
  SET dbpath=localhost:C:\ПУТЬКБАЗЕ\ВНЕШНЯЯБАЗА1.GDB
  SET fbpath=C:\ПУТЬFIREBIRD\Firebird_1_5\bin\
  SET bbpath=C:\КУДАСОХРАНЯТЬИЗМЕНЕНИЯ\
  "%fbpath%gfix" -shut -force 5 "%dbpath%"
  "%fbpath%gbak" -b -v -g -y "%bbpath%%date%.log" "%dbpath%" "%bbpath%ВНЕШНЯЯБАЗА1_%date%.gbk"
  @ pause
  $ cat restore.bat
  @ echo on
  SET ISC_USER=ИМЯПОЛЬЗОВАТЕЛЯБАЗЫ
  SET ISC_PASSWORD=ПАРОЛЬКБАЗЕ
  SET fbpath=C:\ПУТЬFIREBIRD\Firebird_1_5\bin\
  SET bbpath=localhost:C:\КУДАСОХРАНЯТЬИЗМЕНЕНИЯ\
  "%fbpath%gbak.exe" -c -v -r -y "c:\КУДАСОХРАНЯТЬИЗМЕНЕНИЯ\%date%_fix.log" "c:\КУДАСОХРАНЯТЬИЗМЕНЕНИЯ\ВНЕШНЯЯБАЗА1_backup.gbk" "%bbpath%ВНЕШНЯЯБАЗА1_fix.GDB" 
  @ pause
  $ cat retranslator.log
  ...
  INF|09.12.2022 16:27:36 Сообщения в очереди "viv.client.КОДОА.1" отсутствуют
  INF|09.12.2022 16:32:39 Отправка запроса id="ИДЕНТИФИКАТОРПРОЦЕССА1", type_id=ИДЕНТИФИКАТОРТИП ...
  ERR|09.12.2022 16:33:37 Out of memory.
      E.ClassName=EOutOfMemory
      Sender.ClassName=TWorkThread
  ...
  INF|11.12.2022 22:28:27 Отправка запроса id="ИДЕНТИФИКАТОРПРОЦЕССА2", type_id=ИДЕНТИФИКАТОРТИП ...
  ERR|11.12.2022 22:28:53 При отправке запроса id="ИДЕНТИФИКАТОРПРОЦЕССА2" произошла неустранимая ошибка чтения из БД, запрос отклонён. Текст ошибки:
      Unsuccessful execution caused by a system error that precludes
      successful execution of subsequent statements.
      I/O error for file "C:\ПУТЬКБАЗЕ\ВНЕШНЯЯБАЗА1.GDB".
      Error while trying to write to file.
      Недостаточно места на диске.
  ...
  Task:
  при обработке одного запроса id="ИДЕНТИФИКАТОРПРОЦЕССА1", type_id=ИДЕНТИФИКАТОРТИП происходит нехватка памяти, что далее приводит к сбою функционирования. Вероятно в запросе большое вложение. Для дальнейшего анализа смотрим БД ВНЕШНЯЯБАЗА2.gdb, в которой покажет технические ошибки состояния базы ВНЕШНЯЯБАЗА2.gdb.
  Для их устранения также сделать бэкап/ресторе БД ВНЕШНЯЯБАЗА2.gdb. Далее понаблюдать за ситуацией с размером БД ВНЕШНЯЯБАЗА2.GDB, чтобы он весил не больше 19 Гб.

