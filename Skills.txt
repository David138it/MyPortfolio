Mail for feedback: David138it@gmail.com

Sql
  Task:
  В таблицах "Командировки", "Нарушения правил дорожного движения" рассмотреть основные понятия реляционной модели, а также различные виды SQL запросов к одной таблице базы данных. В базе данных "Книжный интернет-магазин" рассмотреть связи между таблицами реляционной базы данных, а также различные виды запросов, построенных на связанных таблица. В базе данных "Тестирование", "Абитуриент", "Аналитика образовательных курсов" рассмотреть несколько предметных областей, для каждой строится логическая модель базы данных. К каждой предметной области формулируются задания, которые можно выполнить запросами SQL.
  Task:
  Создать таблицу командировки, в которой представлена информация о командировках сотрудников какой-либо организации (фамилия сотрудника, город, куда он ездил, размер суточных, даты первого и последнего дня командировки)
  Decision:
  mysql> CREATE TABLE trip (
  trip_id INT PRIMARY KEY AUTO_INCREMENT,
  name VARCHAR(30),
  city VARCHAR(25),
  per_diem DECIMAL(8, 2),
  date_first DATE,
  date_last DATE
  );
      Query OK, 0 rows affected (0.26 sec)
  mysql> INSERT INTO trip VALUES
  ("1", "Баранов П.Е.", "Москва", "700", "2020-01-12", "2020-01-17"),
  ("2", "Абрамова К.А.", "Владивосток", "450", "2020-01-14", "2020-01-27"),
  ("3", "Семенов И.В.", "Москва", "700", "2020-01-23", "2020-01-31"),
  ("4", "Ильиных Г.Р.", "Владивосток", "450", "2020-01-12", "2020-02-02"),
  ("5", "Колесов С.П.", "Москва", "700", "2020-02-01", "2020-02-06"),
  ("6", "Баранов П.Е.", "Москва", "700", "2020-02-14", "2020-02-22"),
  ("7", "Абрамова К.А.", "Москва", "700", "2020-02-23", "2020-03-01"),
  ("8", "Лебедев Т.К.", "Москва", "700", "2020-03-03", "2020-03-06"),
  ("9", "Колесов С.П.", "Новосибирск", "450", "2020-02-27", "2020-03-12"),
  ("10", "Семенов И.В.", "Санкт-Петербург", "700", "2020-03-29", "2020-04-05"),
  ("11", "Абрамова К.А.", "Москва", "700", "2020-04-06", "2020-04-14"),
  ("12", "Баранов П.Е.", "Новосибирск", "450", "2020-04-18", "2020-05-04"),
  ("13", "Лебедев Т.К.", "Томск", "450", "2020-05-20", "2020-05-31"),
  ("14", "Семенов И.В.", "Санкт-Петербург", "700", "2020-06-01", "2020-06-03"),
  ("15", "Абрамова К.А.", "Санкт-Петербург", "700", "2020-05-28", "2020-06-04"),
  ("16", "Федорова А.Ю.", "Новосибирск", "450", "2020-05-25", "2020-06-04"),
  ("17", "Колесов С.П.", "Новосибирск", "450", "2020-06-03", "2020-06-12"),
  ("18", "Федорова А.Ю.", "Томск", "450", "2020-06-20", "2020-06-26"),
  ("19", "Абрамова К.А.", "Владивосток", "450", "2020-07-02", "2020-07-13"),
  ("20", "Баранов П.Е.", "Воронеж", "450", "2020-07-19", "2020-07-25");
  mysql> SELECT * FROM trip;
      +---------+-------------------------+-------------------------------+----------+------------+------------+
      | trip_id | name                    | city                          | per_diem | date_first | date_last  |
      +---------+-------------------------+-------------------------------+----------+------------+------------+
      |       1 | Баранов П.Е.            | Москва                        |   700.00 | 2020-01-12 | 2020-01-17 |
      |       2 | Абрамова К.А.           | Владивосток                   |   450.00 | 2020-01-14 | 2020-01-27 |
      |       3 | Семенов И.В.            | Москва                        |   700.00 | 2020-01-23 | 2020-01-31 |
      |       4 | Ильиных Г.Р.            | Владивосток                   |   450.00 | 2020-01-12 | 2020-02-02 |
      |       5 | Колесов С.П.            | Москва                        |   700.00 | 2020-02-01 | 2020-02-06 |
      |       6 | Баранов П.Е.            | Москва                        |   700.00 | 2020-02-14 | 2020-02-22 |
      |       7 | Абрамова К.А.           | Москва                        |   700.00 | 2020-02-23 | 2020-03-01 |
      |       8 | Лебедев Т.К.            | Москва                        |   700.00 | 2020-03-03 | 2020-03-06 |
      |       9 | Колесов С.П.            | Новосибирск                   |   450.00 | 2020-02-27 | 2020-03-12 |
      |      10 | Семенов И.В.            | Санкт-Петербург               |   700.00 | 2020-03-29 | 2020-04-05 |
      |      11 | Абрамова К.А.           | Москва                        |   700.00 | 2020-04-06 | 2020-04-14 |
      |      12 | Баранов П.Е.            | Новосибирск                   |   450.00 | 2020-04-18 | 2020-05-04 |
      |      13 | Лебедев Т.К.            | Томск                         |   450.00 | 2020-05-20 | 2020-05-31 |
      |      14 | Семенов И.В.            | Санкт-Петербург               |   700.00 | 2020-06-01 | 2020-06-03 |
      |      15 | Абрамова К.А.           | Санкт-Петербург               |   700.00 | 2020-05-28 | 2020-06-04 |
      |      16 | Федорова А.Ю.           | Новосибирск                   |   450.00 | 2020-05-25 | 2020-06-04 |
      |      17 | Колесов С.П.            | Новосибирск                   |   450.00 | 2020-06-03 | 2020-06-12 |
      |      18 | Федорова А.Ю.           | Томск                         |   450.00 | 2020-06-20 | 2020-06-26 |
      |      19 | Абрамова К.А.           | Владивосток                   |   450.00 | 2020-07-02 | 2020-07-13 |
      |      20 | Баранов П.Е.            | Воронеж                       |   450.00 | 2020-07-19 | 2020-07-25 |
      +---------+-------------------------+-------------------------------+----------+------------+------------+
      20 rows in set (0.00 sec)
  Task:
  Вывести из таблицы trip информацию о командировках тех сотрудников, фамилия которых заканчивается на букву «а», в отсортированном по убыванию даты последнего дня командировки виде. В результат включить столбцы name, city, per_diem, date_first, date_last.
  Decision:
  mysql> SELECT name, city, per_diem, date_first, date_last
  FROM trip
  WHERE name LtuserE '%а %'
  ORDER BY date_last DESC;
      +-------------------------+-------------------------------+----------+------------+------------+
      | name                    | city                          | per_diem | date_first | date_last  |
      +-------------------------+-------------------------------+----------+------------+------------+
      | Абрамова К.А.           | Владивосток                   |   450.00 | 2020-07-02 | 2020-07-13 |
      | Федорова А.Ю.           | Томск                         |   450.00 | 2020-06-20 | 2020-06-26 |
      | Абрамова К.А.           | Санкт-Петербург               |   700.00 | 2020-05-28 | 2020-06-04 |
      | Федорова А.Ю.           | Новосибирск                   |   450.00 | 2020-05-25 | 2020-06-04 |
      | Абрамова К.А.           | Москва                        |   700.00 | 2020-04-06 | 2020-04-14 |
      | Абрамова К.А.           | Москва                        |   700.00 | 2020-02-23 | 2020-03-01 |
      | Абрамова К.А.           | Владивосток                   |   450.00 | 2020-01-14 | 2020-01-27 |
      +-------------------------+-------------------------------+----------+------------+------------+
      7 rows in set (0.01 sec)
  Task:
  Вывести в алфавитном порядке фамилии и инициалы тех сотрудников, которые были в командировке в Москве.
  Decision:
  mysql> SELECT DISTINCT name
  FROM trip
  WHERE city = 'Москва'
  ORDER BY name ASC;
      +-------------------------+
      | name                    |
      +-------------------------+
      | Абрамова К.А.           |
      | Баранов П.Е.            |
      | Колесов С.П.            |
      | Лебедев Т.К.            |
      | Семенов И.В.            |
      +-------------------------+
      5 rows in set (0.00 sec)
  Task:
  Для каждого города посчитать, сколько раз сотрудники в нем были.  Информацию вывести в отсортированном в алфавитном порядке по названию городов. Вычисляемый столбец назвать Количество.
  Decision:
  mysql> SELECT city, COUNT(name) AS Количество
  FROM trip
  GROUP BY city
  ORDER BY city ASC;
      +-------------------------------+----------------------+
      | city                          | Количество           |
      +-------------------------------+----------------------+
      | Владивосток                   |                    3 |
      | Воронеж                       |                    1 |
      | Москва                        |                    7 |
      | Новосибирск                   |                    4 |
      | Санкт-Петербург               |                    3 |
      | Томск                         |                    2 |
      +-------------------------------+----------------------+
      6 rows in set (0.01 sec)
  Task:
  Вывести два города, в которых чаще всего были в командировках сотрудники. Вычисляемый столбец назвать Количество.
  Decision:
  mysql> SELECT city, COUNT(name) AS Количество
  FROM trip
  GROUP BY city
  ORDER BY Количество DESC
  LIMIT 2;
      +------------------------+----------------------+
      | city                   | Количество           |
      +------------------------+----------------------+
      | Москва                 |                    7 |
      | Новосибирск            |                    4 |
      +------------------------+----------------------+
      2 rows in set (0.01 sec)
  Task:
  Вывести информацию о командировках во все города кроме Москвы и Санкт-Петербурга (фамилии и инициалы сотрудников, город ,  длительность командировки в днях, при этом первый и последний день относится к периоду командировки). Последний столбец назвать Длительность. Информацию вывести в упорядоченном по убыванию длительности поездки, а потом по убыванию названий городов (в обратном алфавитном порядке).
  Decision:
  mysql> SELECT name, city, (DATEDIFF(date_last, date_first)+1) AS Длительность
  FROM trip
  WHERE city <> 'Москва' AND city <> 'Санкт-Петербург'
  ORDER BY Длительность DESC;
      +-------------------------+------------------------+--------------------------+
      | name                    | city                   | Длительность             |
      +-------------------------+------------------------+--------------------------+
      | Ильиных Г.Р.            | Владивосток            |                       22 |
      | Баранов П.Е.            | Новосибирск            |                       17 |
      | Колесов С.П.            | Новосибирск            |                       15 |
      | Абрамова К.А.           | Владивосток            |                       14 |
      | Абрамова К.А.           | Владивосток            |                       12 |
      | Лебедев Т.К.            | Томск                  |                       12 |
      | Федорова А.Ю.           | Новосибирск            |                       11 |
      | Колесов С.П.            | Новосибирск            |                       10 |
      | Баранов П.Е.            | Воронеж                |                        7 |
      | Федорова А.Ю.           | Томск                  |                        7 |
      +-------------------------+------------------------+--------------------------+
      10 rows in set (0.00 sec)
  Task:
  Вывести информацию о командировках сотрудника(ов), которые были самыми короткими по времени. В результат включить столбцы name, city, date_first, date_last.
  Decision:
  mysql> SELECT name, city, date_first, date_last
  FROM trip
  WHERE DATEDIFF(date_last,date_first)=(
  SELECT MIN(DATEDIFF(date_last,date_first))
  FROM trip);
      +-----------------------+-------------------------------+------------+------------+
      | name                  | city                          | date_first | date_last  |
      +-----------------------+-------------------------------+------------+------------+
      | Семенов И.В.          | Санкт-Петербург               | 2020-06-01 | 2020-06-03 |
      +-----------------------+-------------------------------+------------+------------+
      1 row in set (0.03 sec)
  Task:
  Вывести информацию о командировках, начало и конец которых относятся к одному месяцу (год может быть любой). В результат включить столбцы name, city, date_first, date_last. Строки отсортировать сначала  в алфавитном порядке по названию города, а затем по фамилии сотрудника .
  Decision:
  mysql> SELECT name, city, date_first, date_last
  FROM trip  
  WHERE MONTH(date_first)=MONTH(date_last)
  ORDER BY city, name ASC;
      +-------------------------+-------------------------------+------------+------------+
      | name                    | city                          | date_first | date_last  |
      +-------------------------+-------------------------------+------------+------------+
      | Абрамова К.А.           | Владивосток                   | 2020-01-14 | 2020-01-27 |
      | Абрамова К.А.           | Владивосток                   | 2020-07-02 | 2020-07-13 |
      | Баранов П.Е.            | Воронеж                       | 2020-07-19 | 2020-07-25 |
      | Абрамова К.А.           | Москва                        | 2020-04-06 | 2020-04-14 |
      | Баранов П.Е.            | Москва                        | 2020-01-12 | 2020-01-17 |
      | Баранов П.Е.            | Москва                        | 2020-02-14 | 2020-02-22 |
      | Колесов С.П.            | Москва                        | 2020-02-01 | 2020-02-06 |
      | Лебедев Т.К.            | Москва                        | 2020-03-03 | 2020-03-06 |
      | Семенов И.В.            | Москва                        | 2020-01-23 | 2020-01-31 |
      | Колесов С.П.            | Новосибирск                   | 2020-06-03 | 2020-06-12 |
      | Семенов И.В.            | Санкт-Петербург               | 2020-06-01 | 2020-06-03 |
      | Лебедев Т.К.            | Томск                         | 2020-05-20 | 2020-05-31 |
      | Федорова А.Ю.           | Томск                         | 2020-06-20 | 2020-06-26 |
      +-------------------------+-------------------------------+------------+------------+
      13 rows in set (0.00 sec)
  Task:
  Вывести название месяца и количество командировок для каждого месяца. Считаем, что командировка относится к некоторому месяцу, если она началась в этом месяце. Информацию вывести сначала в отсортированном по убыванию количества, а потом в алфавитном порядке по названию месяца виде. Название столбцов – Месяц и Количество.
  Decision:
  mysql> SELECT MONTHNAME(date_first) AS Месяц, COUNT(name) AS Количество
  FROM trip
  GROUP BY Месяц
  ORDER BY Количество DESC, Месяц ASC;
      +------------+----------------------+
      | Месяц      | Количество           |
      +------------+----------------------+
      | February   |                    4 |
      | January    |                    4 |
      | June       |                    3 |
      | May        |                    3 |
      | April      |                    2 |
      | July       |                    2 |
      | March      |                    2 |
      +------------+----------------------+
      7 rows in set (0.01 sec)
  Task:
  Вывести сумму суточных (произведение количества дней командировки и размера суточных) для командировок, первый день которых пришелся на февраль или март 2020 года. Значение суточных для каждой командировки занесено в столбец per_diem. Вывести фамилию и инициалы сотрудника, город, первый день командировки и сумму суточных. Последний столбец назвать Сумма. Информацию отсортировать сначала  в алфавитном порядке по фамилиям сотрудников, а затем по убыванию суммы суточных.
  Decision:
  mysql> SELECT name, city, date_first, (DATEDIFF(date_last, date_first)+1)*per_diem AS Сумма
  FROM trip
  WHERE YEAR(date_first)=2020 AND MONTH(date_first)=3 OR MONTH(date_first)=2
  ORDER BY name,Сумма DESC;
      +-------------------------+-------------------------------+------------+------------+
      | name                    | city                          | date_first | Сумма      |
      +-------------------------+-------------------------------+------------+------------+
      | Абрамова К.А.           | Москва                        | 2020-02-23 |    5600.00 |
      | Баранов П.Е.            | Москва                        | 2020-02-14 |    6300.00 |
      | Колесов С.П.            | Новосибирск                   | 2020-02-27 |    6750.00 |
      | Колесов С.П.            | Москва                        | 2020-02-01 |    4200.00 |
      | Лебедев Т.К.            | Москва                        | 2020-03-03 |    2800.00 |
      | Семенов И.В.            | Санкт-Петербург               | 2020-03-29 |    5600.00 |
      +-------------------------+-------------------------------+------------+------------+
      6 rows in set (0.01 sec)
  Task:
  Вывести фамилию с инициалами и общую сумму суточных, полученных за все командировки для тех сотрудников, которые были в командировках больше чем 3 раза, в отсортированном по убыванию сумм суточных виде. Последний столбец назвать Сумма.
  Decision:
  mysql> SELECT name, SUM((DATEDIFF(date_last, date_first)+1)*per_diem) AS Сумма
  FROM trip
  GROUP BY name
  HAVING COUNT(name)>3
  ORDER BY Сумма DESC;
      +-------------------------+------------+
      | name                    | Сумма      |
      +-------------------------+------------+
      | Абрамова К.А.           |   29200.00 |
      | Баранов П.Е.            |   21300.00 |
      +-------------------------+------------+
      2 rows in set (0.00 sec)
  Task:
  Создать таблицу штрафов содержит информацию о штрафах, начисленных водителям за нарушения правил дорожного движения (имя водителя, номер автомобиля, описание нарушения, сумма штрафа, дата нарушения и дата оплаты штрафа).
  Создать таблицу fine следующей структуры:
  fine_id - ключевой столбец целого типа с автоматическим увеличением значения ключа на 1
  name - строка длиной 30
  number_plate - строка длиной 6
  violation - строка длиной 50
  sum_fine - вещественное число, максимальная длина 8, количество знаков после запятой 2
  date_violation - дата
  date_payment - дата
  Decision:
  mysql> CREATE TABLE fine(fine_id INT PRIMARY KEY AUTO_INCREMENT, name VARCHAR(30), number_plate VARCHAR(6), violation VARCHAR(50), sum_fine DECIMAL(8,2), date_violation DATE, date_payment DATE);
      Query OK, 0 rows affected (0.33 sec)
  Task:
  В таблицу fine первые 5 строк уже занесены. Добавить в таблицу записи с ключевыми значениями 6, 7, 8.
  fine_id     name    number_plate    violation   sum_fine    date_violation  date_payment
  1   Баранов П.Е.    Р523ВТ  Превышение скорости (от 40 до 60)   500.00  2020-01-12  2020-01-17
  2   Абрамова К.А.   О111АВ  Проезд на запрещающий сигнал  1000.00     2020-01-14  2020-02-27
  3   Яковлев Г.Р.    Т330ТТ  Превышение скорости (от 20 до 40)   500.00  2020-01-23  2020-02-23
  4   Яковлев Г.Р.    М701АА  Превышение скорости (от 20 до 40)       2020-01-12   
  5   Колесов С.П.    К892АХ  Превышение скорости (от 20 до 40)       2020-02-01   
  6   Баранов П.Е.    Р523ВТ  Превышение скорости (от 40 до 60)       2020-02-14   
  7   Абрамова К.А.   О111АВ  Проезд на запрещающий сигнал      2020-02-23   
  8   Яковлев Г.Р.    Т330ТТ  Проезд на запрещающий сигнал      2020-03-03   
  Decision:
  mysql> INSERT INTO fine (name, number_plate, violation, sum_fine, date_violation, date_payment) VALUES
  ('Баранов П.Е.', 'Р523ВТ', 'Превышение скорости(от 40 до 60)', 500.00, '2020-01-12', '2020-01-17'),
  ('Абрамова К.А.', 'О111АВ', 'Проезд на запрещающий сигнал', 1000.00, '2020-01-14', '2020-02-27'),
  ('Яковлев Г.Р.', 'Т330ТТ', 'Превышение скорости(от 20 до 40)', 500.00, '2020-01-23', '2020-02-23'),
  ('Яковлев Г.Р.', 'М701АА', 'Превышение скорости(от 20 до 40)', Null, '2020-01-12', Null),
  ('Колесов С.П.', 'К892АХ', 'Превышение скорости(от 20 до 40)', Null, '2020-02-01', Null);
      Query OK, 5 rows affected (0.19 sec)
      Records: 5  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM fine;
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      | fine_id | name                    | number_plate | violation                                              | sum_fine | date_violation | date_payment |
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      |       1 | Баранов П.Е.            | Р523ВТ       | Превышение скорости(от 40 до 60)                       |   500.00 | 2020-01-12     | 2020-01-17   |
      |       2 | Абрамова К.А.           | О111АВ       | Проезд на запрещающий сигнал                           |  1000.00 | 2020-01-14     | 2020-02-27   |
      |       3 | Яковлев Г.Р.            | Т330ТТ       | Превышение скорости(от 20 до 40)                       |   500.00 | 2020-01-23     | 2020-02-23   |
      |       4 | Яковлев Г.Р.            | М701АА       | Превышение скорости(от 20 до 40)                       |     NULL | 2020-01-12     | NULL         |
      |       5 | Колесов С.П.            | К892АХ       | Превышение скорости(от 20 до 40)                       |     NULL | 2020-02-01     | NULL         |
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      5 rows in set (0.00 sec)
  mysql> INSERT INTO fine (name, number_plate, violation, sum_fine, date_violation, date_payment) VALUES
  ('Баранов П.Е.', 'Р523ВТ', 'Превышение скорости(от 40 до 60)', Null, '2020-02-14', Null),
  ('Абрамова К.А.', 'О111АВ', 'Проезд на запрещающий сигнал', Null, '2020-02-23', Null),
  ('Яковлев Г.Р.', 'Т330ТТ', 'Проезд на запрещающий сигнал', Null, '2020-03-03', Null);
      Query OK, 3 rows affected (0.03 sec)
      Records: 3  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM fine;
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      | fine_id | name                    | number_plate | violation                                              | sum_fine | date_violation | date_payment |
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      |       1 | Баранов П.Е.            | Р523ВТ       | Превышение скорости(от 40 до 60)                       |   500.00 | 2020-01-12     | 2020-01-17   |
      |       2 | Абрамова К.А.           | О111АВ       | Проезд на запрещающий сигнал                           |  1000.00 | 2020-01-14     | 2020-02-27   |
      |       3 | Яковлев Г.Р.            | Т330ТТ       | Превышение скорости(от 20 до 40)                       |   500.00 | 2020-01-23     | 2020-02-23   |
      |       4 | Яковлев Г.Р.            | М701АА       | Превышение скорости(от 20 до 40)                       |     NULL | 2020-01-12     | NULL         |
      |       5 | Колесов С.П.            | К892АХ       | Превышение скорости(от 20 до 40)                       |     NULL | 2020-02-01     | NULL         |
      |       6 | Баранов П.Е.            | Р523ВТ       | Превышение скорости(от 40 до 60)                       |     NULL | 2020-02-14     | NULL         |
      |       7 | Абрамова К.А.           | О111АВ       | Проезд на запрещающий сигнал                           |     NULL | 2020-02-23     | NULL         |
      |       8 | Яковлев Г.Р.            | Т330ТТ       | Проезд на запрещающий сигнал                           |     NULL | 2020-03-03     | NULL         |
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      8 rows in set (0.00 sec)
  Task:
  Занести в таблицу fine суммы штрафов, которые должен оплатить водитель, в соответствии с данными из таблицы traffic_violation. При этом суммы заносить только в пустые поля столбца  sum_fine.
      Таблица traffic_violationсоздана и заполнена.
  Важно! Сравнение значения столбца с пустым значением осуществляется с помощью оператора IS NULL.
  Decision:
  mysql> CREATE TABLE traffic_violation(violation_id INT PRIMARY KEY AUTO_INCREMENT, violation VARCHAR(50), sum_fine DECIMAL(8,2));
      Query OK, 0 rows affected (0.20 sec)
  mysql> INSERT INTO traffic_violation (violation, sum_fine) VALUES ('Превышение скорости(от 20 до 40)', 500.00 ), ('Превышение скорости(от 40 до 60)', 1000.00), ('Проезд на запрещающий сигнал', 1000.00);
      Query OK, 3 rows affected (0.12 sec)
      Records: 3  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM traffic_violation;
      +--------------+--------------------------------------------------------+----------+
      | violation_id | violation                                              | sum_fine |
      +--------------+--------------------------------------------------------+----------+
      |            1 | Превышение скорости(от 20 до 40)                       |   500.00 |
      |            2 | Превышение скорости(от 40 до 60)                       |  1000.00 |
      |            3 | Проезд на запрещающий сигнал                           |  1000.00 |
      +--------------+--------------------------------------------------------+----------+
      3 rows in set (0.00 sec)
  mysql> SELECT * FROM fine;
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      | fine_id | name                    | number_plate | violation                                              | sum_fine | date_violation | date_payment |
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      |       1 | Баранов П.Е.            | Р523ВТ       | Превышение скорости(от 40 до 60)                       |   500.00 | 2020-01-12     | 2020-01-17   |
      |       2 | Абрамова К.А.           | О111АВ       | Проезд на запрещающий сигнал                           |  1000.00 | 2020-01-14     | 2020-02-27   |
      |       3 | Яковлев Г.Р.            | Т330ТТ       | Превышение скорости(от 20 до 40)                       |   500.00 | 2020-01-23     | 2020-02-23   |
      |       4 | Яковлев Г.Р.            | М701АА       | Превышение скорости(от 20 до 40)                       |     NULL | 2020-01-12     | NULL         |
      |       5 | Колесов С.П.            | К892АХ       | Превышение скорости(от 20 до 40)                       |     NULL | 2020-02-01     | NULL         |
      |       6 | Баранов П.Е.            | Р523ВТ       | Превышение скорости(от 40 до 60)                       |     NULL | 2020-02-14     | NULL         |
      |       7 | Абрамова К.А.           | О111АВ       | Проезд на запрещающий сигнал                           |     NULL | 2020-02-23     | NULL         |
      |       8 | Яковлев Г.Р.            | Т330ТТ       | Проезд на запрещающий сигнал                           |     NULL | 2020-03-03     | NULL         |
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      8 rows in set (0.00 sec)
  mysql> UPDATE fine, traffic_violation
  SET fine.sum_fine=traffic_violation.sum_fine
  WHERE (fine.sum_fine IS NULL) AND (fine.violation=traffic_violation.violation);
      Query OK, 5 rows affected (0.02 sec)
      Rows matched: 5  Changed: 5  Warnings: 0
  mysql> SELECT * FROM fine;
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      | fine_id | name                    | number_plate | violation                                              | sum_fine | date_violation | date_payment |
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      |       1 | Баранов П.Е.            | Р523ВТ       | Превышение скорости(от 40 до 60)                       |   500.00 | 2020-01-12     | 2020-01-17   |
      |       2 | Абрамова К.А.           | О111АВ       | Проезд на запрещающий сигнал                           |  1000.00 | 2020-01-14     | 2020-02-27   |
      |       3 | Яковлев Г.Р.            | Т330ТТ       | Превышение скорости(от 20 до 40)                       |   500.00 | 2020-01-23     | 2020-02-23   |
      |       4 | Яковлев Г.Р.            | М701АА       | Превышение скорости(от 20 до 40)                       |   500.00 | 2020-01-12     | NULL         |
      |       5 | Колесов С.П.            | К892АХ       | Превышение скорости(от 20 до 40)                       |   500.00 | 2020-02-01     | NULL         |
      |       6 | Баранов П.Е.            | Р523ВТ       | Превышение скорости(от 40 до 60)                       |  1000.00 | 2020-02-14     | NULL         |
      |       7 | Абрамова К.А.           | О111АВ       | Проезд на запрещающий сигнал                           |  1000.00 | 2020-02-23     | NULL         |
      |       8 | Яковлев Г.Р.            | Т330ТТ       | Проезд на запрещающий сигнал                           |  1000.00 | 2020-03-03     | NULL         |
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      8 rows in set (0.01 sec)
  Task:
  Вывести фамилию, номер машины и нарушение только для тех водителей, которые на одной машине нарушили одно и то же правило   два и более раз. При этом учитывать все нарушения, независимо от того оплачены они или нет. Информацию отсортировать в алфавитном порядке, сначала по фамилии водителя, потом по номеру машины и, наконец, по нарушению.
  Decision:
  mysql> SELECT * FROM fine;
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      | fine_id | name                    | number_plate | violation                                              | sum_fine | date_violation | date_payment |
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      |       1 | Баранов П.Е.            | Р523ВТ       | Превышение скорости(от 40 до 60)                       |   500.00 | 2020-01-12     | 2020-01-17   |
      |       2 | Абрамова К.А.           | О111АВ       | Проезд на запрещающий сигнал                           |  1000.00 | 2020-01-14     | 2020-02-27   |
      |       3 | Яковлев Г.Р.            | Т330ТТ       | Превышение скорости(от 20 до 40)                       |   500.00 | 2020-01-23     | 2020-02-23   |
      |       4 | Яковлев Г.Р.            | М701АА       | Превышение скорости(от 20 до 40)                       |   500.00 | 2020-01-12     | NULL         |
      |       5 | Колесов С.П.            | К892АХ       | Превышение скорости(от 20 до 40)                       |   500.00 | 2020-02-01     | NULL         |
      |       6 | Баранов П.Е.            | Р523ВТ       | Превышение скорости(от 40 до 60)                       |  1000.00 | 2020-02-14     | NULL         |
      |       7 | Абрамова К.А.           | О111АВ       | Проезд на запрещающий сигнал                           |  1000.00 | 2020-02-23     | NULL         |
      |       8 | Яковлев Г.Р.            | Т330ТТ       | Проезд на запрещающий сигнал                           |  1000.00 | 2020-03-03     | NULL         |
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      8 rows in set (0.01 sec)
  mysql> SELECT name, number_plate, violation, count(*)
  FROM fine
  GROUP BY name, number_plate, violation;
      +-------------------------+--------------+--------------------------------------------------------+----------+
      | name                    | number_plate | violation                                              | count(*) |
      +-------------------------+--------------+--------------------------------------------------------+----------+
      | Баранов П.Е.            | Р523ВТ       | Превышение скорости(от 40 до 60)                       |        2 |
      | Абрамова К.А.           | О111АВ       | Проезд на запрещающий сигнал                           |        2 |
      | Яковлев Г.Р.            | Т330ТТ       | Превышение скорости(от 20 до 40)                       |        1 |
      | Яковлев Г.Р.            | М701АА       | Превышение скорости(от 20 до 40)                       |        1 |
      | Колесов С.П.            | К892АХ       | Превышение скорости(от 20 до 40)                       |        1 |
      | Яковлев Г.Р.            | Т330ТТ       | Проезд на запрещающий сигнал                           |        1 |
      +-------------------------+--------------+--------------------------------------------------------+----------+
      6 rows in set (0.00 sec)
  mysql> SELECT name, number_plate, violation, count(*)
  FROM fine
  GROUP BY name, number_plate, violation
  HAVING count(*) >= 2;
      +-------------------------+--------------+--------------------------------------------------------+----------+
      | name                    | number_plate | violation                                              | count(*) |
      +-------------------------+--------------+--------------------------------------------------------+----------+
      | Баранов П.Е.            | Р523ВТ       | Превышение скорости(от 40 до 60)                       |        2 |
      | Абрамова К.А.           | О111АВ       | Проезд на запрещающий сигнал                           |        2 |
      +-------------------------+--------------+--------------------------------------------------------+----------+
      2 rows in set (0.00 sec)
  mysql> SELECT name, number_plate, violation
  FROM fine
  GROUP BY name, number_plate, violation
  HAVING count(violation)>1
  ORDER BY name,violation,number_plate desc;
      +-------------------------+--------------+--------------------------------------------------------+----------+
      | name                    | number_plate | violation                                              | count(*) |
      +-------------------------+--------------+--------------------------------------------------------+----------+
      | Абрамова К.А.           | О111АВ       | Проезд на запрещающий сигнал                           |        2 |
      | Баранов П.Е.            | Р523ВТ       | Превышение скорости(от 40 до 60)                       |        2 |
      +-------------------------+--------------+--------------------------------------------------------+----------+
      2 rows in set (0.00 sec)
  Task:
  В таблице fine увеличить в два раза сумму неоплаченных штрафов для отобранных на предыдущем шаге записей.
  Для всех нарушений, по которым штраф еще не оплачен, (тех, у которых date_payment имеет пустое значение Null), необходимо проверить, является ли данное нарушение для водителя и машины повторным, если да –  увеличить штраф в два раза.
  Если водитель совершил нарушение на другой машине, ему увеличивать штраф не нужно.
  Если несколько повторных нарушений не оплачены, то штраф увеличить для всех.
  Decision:
  mysql> SELECT * FROM fine;
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      | fine_id | name                    | number_plate | violation                                              | sum_fine | date_violation | date_payment |
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      |       1 | Баранов П.Е.            | Р523ВТ       | Превышение скорости(от 40 до 60)                       |   500.00 | 2020-01-12     | 2020-01-17   |
      |       2 | Абрамова К.А.           | О111АВ       | Проезд на запрещающий сигнал                           |  1000.00 | 2020-01-14     | 2020-02-27   |
      |       3 | Яковлев Г.Р.            | Т330ТТ       | Превышение скорости(от 20 до 40)                       |   500.00 | 2020-01-23     | 2020-02-23   |
      |       4 | Яковлев Г.Р.            | М701АА       | Превышение скорости(от 20 до 40)                       |   500.00 | 2020-01-12     | NULL         |
      |       5 | Колесов С.П.            | К892АХ       | Превышение скорости(от 20 до 40)                       |   500.00 | 2020-02-01     | NULL         |
      |       6 | Баранов П.Е.            | Р523ВТ       | Превышение скорости(от 40 до 60)                       |  1000.00 | 2020-02-14     | NULL         |
      |       7 | Абрамова К.А.           | О111АВ       | Проезд на запрещающий сигнал                           |  1000.00 | 2020-02-23     | NULL         |
      |       8 | Яковлев Г.Р.            | Т330ТТ       | Проезд на запрещающий сигнал                           |  1000.00 | 2020-03-03     | NULL         |
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      8 rows in set (0.01 sec)
  mysql> UPDATE fine, (
      SELECT name, number_plate, violation
      FROM fine
      GROUP BY name, number_plate, violation
      HAVING count(violation)>1
      ORDER BY name,violation,number_plate desc) AS query_in
  SET sum_fine = IF(date_payment IS NULL,sum_fine*2,sum_fine)
  WHERE fine.name = query_in.name;
      Query OK, 2 rows affected (0.02 sec)
      Rows matched: 4  Changed: 2  Warnings: 0
  mysql> SElECT * FROM fine;
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      | fine_id | name                    | number_plate | violation                                              | sum_fine | date_violation | date_payment |
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      |       1 | Баранов П.Е.            | Р523ВТ       | Превышение скорости(от 40 до 60)                       |   500.00 | 2020-01-12     | 2020-01-17   |
      |       2 | Абрамова К.А.           | О111АВ       | Проезд на запрещающий сигнал                           |  1000.00 | 2020-01-14     | 2020-02-27   |
      |       3 | Яковлев Г.Р.            | Т330ТТ       | Превышение скорости(от 20 до 40)                       |   500.00 | 2020-01-23     | 2020-02-23   |
      |       4 | Яковлев Г.Р.            | М701АА       | Превышение скорости(от 20 до 40)                       |   500.00 | 2020-01-12     | NULL         |
      |       5 | Колесов С.П.            | К892АХ       | Превышение скорости(от 20 до 40)                       |   500.00 | 2020-02-01     | NULL         |
      |       6 | Баранов П.Е.            | Р523ВТ       | Превышение скорости(от 40 до 60)                       |  2000.00 | 2020-02-14     | NULL         |
      |       7 | Абрамова К.А.           | О111АВ       | Проезд на запрещающий сигнал                           |  2000.00 | 2020-02-23     | NULL         |
      |       8 | Яковлев Г.Р.            | Т330ТТ       | Проезд на запрещающий сигнал                           |  1000.00 | 2020-03-03     | NULL         |
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      8 rows in set (0.01 sec)
  Task:
  Водители оплачивают свои штрафы. В таблице payment занесены даты их оплаты:
  payment_id  name    number_plate    violation   date_violation  date_payment
  1   Яковлев Г.Р.    М701АА  Превышение скорости(от 20 до 40)   2020-01-12  2020-01-22
  2   Баранов П.Е.    Р523ВТ  Превышение скорости(от 40 до 60)   2020-02-14  2020-03-06
  3   Яковлев Г.Р.    Т330ТТ  Проезд на запрещающий сигнал  2020-03-03  2020-03-23
  Необходимо:
      в таблицу fine занести дату оплаты соответствующего штрафа из таблицы payment;
      уменьшить начисленный штраф в таблице fine в два раза  (только для тех штрафов, информация о которых занесена в таблицу payment) , если оплата произведена не позднее 20 дней со дня нарушения.
  Decision:
  mysql> CREATE TABLE payment(payment_id INT PRIMARY KEY AUTO_INCREMENT, name VARCHAR(30), number_plate VARCHAR(6), violation VARCHAR(50), date_violation DATE, date_payment DATE);
      Query OK, 0 rows affected (0.24 sec)
  mysql> INSERT INTO fine (name, number_plate, violation, date_violation, date_payment) VALUES
  ('Яковлев Г.Р.', 'М701АА', 'Превышение скорости(от 20 до 40)', '2020-01-12', '2020-01-22'),
  ('Баранов П.Е.', 'Р523ВТ', 'Превышение скорости(от 40 до 60)', '2020-02-14', '2020-03-06'),
  ('Яковлев Г.Р.', 'Т330ТТ', 'Проезд на запрещающий сигнал', '2020-03-03', '2020-03-23');
      Query OK, 3 rows affected (0.03 sec)
      Records: 3  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM payment;
      Empty set (0.00 sec)
  mysql> INSERT INTO payment (name, number_plate, violation, date_violation, date_payment) VALUES ('Яковлев Г.Р.', 'М701АА', 'Превышение скорости(от 20 до 40)', '2020-01-
  12', '2020-01-22'), ('Баранов П.Е.', 'Р523ВТ', 'Превышение скорости(от 40 до 60)', '2020-02-14', '2020-03-06'), ('Яковлев Г.Р.', 'Т330ТТ', 'Проезд на запрещающий сигнал
  ', '2020-03-03', '2020-03-23');
      Query OK, 3 rows affected (0.11 sec)
      Records: 3  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM payment;
      +------------+-----------------------+--------------+--------------------------------------------------------+----------------+--------------+
      | payment_id | name                  | number_plate | violation                                              | date_violation | date_payment |
      +------------+-----------------------+--------------+--------------------------------------------------------+----------------+--------------+
      |          1 | Яковлев Г.Р.          | М701АА       | Превышение скорости(от 20 до 40)                       | 2020-01-12     | 2020-01-22   |
      |          2 | Баранов П.Е.          | Р523ВТ       | Превышение скорости(от 40 до 60)                       | 2020-02-14     | 2020-03-06   |
      |          3 | Яковлев Г.Р.          | Т330ТТ       | Проезд на запрещающий сигнал                           | 2020-03-03     | 2020-03-23   |
      +------------+-----------------------+--------------+--------------------------------------------------------+----------------+--------------+
      3 rows in set (0.00 sec)
  mysql> SELECT * FROM fine;
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      | fine_id | name                    | number_plate | violation                                              | sum_fine | date_violation | date_payment |
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      |       1 | Баранов П.Е.            | Р523ВТ       | Превышение скорости(от 40 до 60)                       |   500.00 | 2020-01-12     | 2020-01-17   |
      |       2 | Абрамова К.А.           | О111АВ       | Проезд на запрещающий сигнал                           |  1000.00 | 2020-01-14     | 2020-02-27   |
      |       3 | Яковлев Г.Р.            | Т330ТТ       | Превышение скорости(от 20 до 40)                       |   500.00 | 2020-01-23     | 2020-02-23   |
      |       4 | Яковлев Г.Р.            | М701АА       | Превышение скорости(от 20 до 40)                       |   500.00 | 2020-01-12     | NULL         |
      |       5 | Колесов С.П.            | К892АХ       | Превышение скорости(от 20 до 40)                       |   500.00 | 2020-02-01     | NULL         |
      |       6 | Баранов П.Е.            | Р523ВТ       | Превышение скорости(от 40 до 60)                       |  2000.00 | 2020-02-14     | NULL         |
      |       7 | Абрамова К.А.           | О111АВ       | Проезд на запрещающий сигнал                           |  2000.00 | 2020-02-23     | NULL         |
      |       8 | Яковлев Г.Р.            | Т330ТТ       | Проезд на запрещающий сигнал                           |  1000.00 | 2020-03-03     | NULL         |
      |       9 | Яковлев Г.Р.            | М701АА       | Превышение скорости(от 20 до 40)                       |     NULL | 2020-01-12     | 2020-01-22   |
      |      10 | Баранов П.Е.            | Р523ВТ       | Превышение скорости(от 40 до 60)                       |     NULL | 2020-02-14     | 2020-03-06   |
      |      11 | Яковлев Г.Р.            | Т330ТТ       | Проезд на запрещающий сигнал                           |     NULL | 2020-03-03     | 2020-03-23   |
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      11 rows in set (0.00 sec)
  mysql> DELETE FROM fine WHERE sum_fine IS Null;
      Query OK, 3 rows affected (0.03 sec)
  mysql> SELECT * FROM fine;
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      | fine_id | name                    | number_plate | violation                                              | sum_fine | date_violation | date_payment |
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      |       1 | Баранов П.Е.            | Р523ВТ       | Превышение скорости(от 40 до 60)                       |   500.00 | 2020-01-12     | 2020-01-17   |
      |       2 | Абрамова К.А.           | О111АВ       | Проезд на запрещающий сигнал                           |  1000.00 | 2020-01-14     | 2020-02-27   |
      |       3 | Яковлев Г.Р.            | Т330ТТ       | Превышение скорости(от 20 до 40)                       |   500.00 | 2020-01-23     | 2020-02-23   |
      |       4 | Яковлев Г.Р.            | М701АА       | Превышение скорости(от 20 до 40)                       |   500.00 | 2020-01-12     | NULL         |
      |       5 | Колесов С.П.            | К892АХ       | Превышение скорости(от 20 до 40)                       |   500.00 | 2020-02-01     | NULL         |
      |       6 | Баранов П.Е.            | Р523ВТ       | Превышение скорости(от 40 до 60)                       |  2000.00 | 2020-02-14     | NULL         |
      |       7 | Абрамова К.А.           | О111АВ       | Проезд на запрещающий сигнал                           |  2000.00 | 2020-02-23     | NULL         |
      |       8 | Яковлев Г.Р.            | Т330ТТ       | Проезд на запрещающий сигнал                           |  1000.00 | 2020-03-03     | NULL         |
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      8 rows in set (0.01 sec)
      Query OK, 3 rows affected (0.07 sec)
      Rows matched: 3  Changed: 3  Warnings: 0
  mysql> SELECT * FROM fine;
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      | fine_id | name                    | number_plate | violation                                              | sum_fine | date_violation | date_payment |
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      |       1 | Баранов П.Е.            | Р523ВТ       | Превышение скорости(от 40 до 60)                       |   500.00 | 2020-01-12     | 2020-01-17   |
      |       2 | Абрамова К.А.           | О111АВ       | Проезд на запрещающий сигнал                           |  1000.00 | 2020-01-14     | 2020-02-27   |
      |       3 | Яковлев Г.Р.            | Т330ТТ       | Превышение скорости(от 20 до 40)                       |   500.00 | 2020-01-23     | 2020-02-23   |
      |       4 | Яковлев Г.Р.            | М701АА       | Превышение скорости(от 20 до 40)                       |   250.00 | 2020-01-12     | 2020-01-22   |
      |       5 | Колесов С.П.            | К892АХ       | Превышение скорости(от 20 до 40)                       |   500.00 | 2020-02-01     | NULL         |
      |       6 | Баранов П.Е.            | Р523ВТ       | Превышение скорости(от 40 до 60)                       |  2000.00 | 2020-02-14     | 2020-03-06   |
      |       7 | Абрамова К.А.           | О111АВ       | Проезд на запрещающий сигнал                           |  2000.00 | 2020-02-23     | NULL         |
      |       8 | Яковлев Г.Р.            | Т330ТТ       | Проезд на запрещающий сигнал                           |   500.00 | 2020-03-03     | 2020-03-23   |
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      8 rows in set (0.00 sec)
  Task:
  Создать новую таблицу back_payment, куда внести информацию о неоплаченных штрафах (Фамилию и инициалы водителя, номер машины, нарушение, сумму штрафа  и  дату нарушения) из таблицы fine.
  Decision:
  mysql> CREATE TABLE back_payment AS
  SELECT name, number_plate, violation, sum_fine, date_violation
  FROM fine
  WHERE date_payment IS NULL;
      Query OK, 2 rows affected (0.43 sec)
      Records: 2  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM back_payment;
      +-------------------------+--------------+--------------------------------------------------------+----------+----------------+
      | name                    | number_plate | violation                                              | sum_fine | date_violation |
      +-------------------------+--------------+--------------------------------------------------------+----------+----------------+
      | Колесов С.П.            | К892АХ       | Превышение скорости(от 20 до 40)                       |   500.00 | 2020-02-01     |
      | Абрамова К.А.           | О111АВ       | Проезд на запрещающий сигнал                           |  2000.00 | 2020-02-23     |
      +-------------------------+--------------+--------------------------------------------------------+----------+----------------+
      2 rows in set (0.00 sec)
  Task:
  Удалить из таблицы fine информацию о нарушениях, совершенных раньше 1 февраля 2020 года.
  Decision:
  mysql> SELECT * FROM fine;
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      | fine_id | name                    | number_plate | violation                                              | sum_fine | date_violation | date_payment |
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      |       1 | Баранов П.Е.            | Р523ВТ       | Превышение скорости(от 40 до 60)                       |   500.00 | 2020-01-12     | 2020-01-17   |
      |       2 | Абрамова К.А.           | О111АВ       | Проезд на запрещающий сигнал                           |  1000.00 | 2020-01-14     | 2020-02-27   |
      |       3 | Яковлев Г.Р.            | Т330ТТ       | Превышение скорости(от 20 до 40)                       |   500.00 | 2020-01-23     | 2020-02-23   |
      |       4 | Яковлев Г.Р.            | М701АА       | Превышение скорости(от 20 до 40)                       |   250.00 | 2020-01-12     | 2020-01-22   |
      |       5 | Колесов С.П.            | К892АХ       | Превышение скорости(от 20 до 40)                       |   500.00 | 2020-02-01     | NULL         |
      |       6 | Баранов П.Е.            | Р523ВТ       | Превышение скорости(от 40 до 60)                       |  2000.00 | 2020-02-14     | 2020-03-06   |
      |       7 | Абрамова К.А.           | О111АВ       | Проезд на запрещающий сигнал                           |  2000.00 | 2020-02-23     | NULL         |
      |       8 | Яковлев Г.Р.            | Т330ТТ       | Проезд на запрещающий сигнал                           |   500.00 | 2020-03-03     | 2020-03-23   |
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      8 rows in set (0.00 sec)
  mysql> DELETE FROM fine
  WHERE date_violation < '2020-02-01';
      Query OK, 4 rows affected (0.13 sec)
  mysql> SELECT * FROM fine;
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      | fine_id | name                    | number_plate | violation                                              | sum_fine | date_violation | date_payment |
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      |       5 | Колесов С.П.            | К892АХ       | Превышение скорости(от 20 до 40)                       |   500.00 | 2020-02-01     | NULL         |
      |       6 | Баранов П.Е.            | Р523ВТ       | Превышение скорости(от 40 до 60)                       |  2000.00 | 2020-02-14     | 2020-03-06   |
      |       7 | Абрамова К.А.           | О111АВ       | Проезд на запрещающий сигнал                           |  2000.00 | 2020-02-23     | NULL         |
      |       8 | Яковлев Г.Р.            | Т330ТТ       | Проезд на запрещающий сигнал                           |   500.00 | 2020-03-03     | 2020-03-23   |
      +---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
      4 rows in set (0.00 sec)
  Task:
  В интернет-магазине продаются книги. Каждая книга имеет название, написана одним автором, относится к одному жанру, имеет определенную цену. В магазине доступно по нескольку экземпляров каждой книги.
  Покупатель регистрируется на сайте интернет-магазина, указывает свои имя и фамилию, адрес электронной почты и город проживания. Он может сформировать один или несколько заказов, написать несколько пожеланий к каждому заказу. Каждый заказ включает в себя одну или несколько книг, каждую книгу можно заказать в нескольких экземплярах. Затем заказ проходит ряд последовательных этапов (операций): он оплачивается, упаковывается, передается курьеру или транспортной компании для транспортировки и, наконец, доставляется покупателю. Дата каждой операции фиксирована. Среднее время доставки книг известно для каждого города.
  В то же время магазин ведет учет книг, их количество уменьшается при покупке, увеличивается при поступлении товара, когда количество исчерпано, размещен заказ и т.д. Разработать базу данных Книжный интернет-магазин
  Decision:
  mysql> CREATE DATABASE OnlineBookStore;
      Query OK, 1 row affected (0.32 sec)
  mysql> show databases;
      +--------------------+
      | Database           |
      +--------------------+
      | OnlineBookStore    |
      | information_schema |
      | mysql              |
      | performance_schema |
      | sys                |
      | testbdserver       |
      +--------------------+
      6 rows in set (0.01 sec)
  mysql> USE OnlineBookStore;
      Database changed
  Task:
  Установите связи между информационными объектами Жанр и Книга, Город и Клиент, Заказ и Этапы. Выберите верную концептуальную схему.
  Наполнить таблицы информацией.
  Структура и наполнение таблиц базы данных Интернет-магазин книг»
  Таблица author (создание, заполнение):
      author_id     name_author
      1     Булгаков М.А.
      2     Достоевский Ф.М.
      3     Есенин С.А.
      4     Пастернак Б.Л.
      5     Лермонтов М.Ю.
  Таблица genre (создание, заполнение, рассмотрено в качестве примеров):
      genre_id     name_genre
      1     Роман
      2     Поэзия
      3     Приключения
  Таблица book (создание, заполнение):
      book_id     title     author_id     genre_id     price     amount
      1     Мастер и Маргарита     1     1     670.99     3
      2     Белая гвардия     1     1     540.50     5
      3     Идиот     2     1     460.00     10
      4     Братья Карамазовы     2     1     799.01     2
      5     Игрок     2     1     480.50     10
      6     Стихотворения и поэмы     3     2     650.00     15
      7     Черный человек     3     2     570.20     6
      8     Лирика     4     2     518.99     2
  Таблица city (в последнем столбце указано примерное количество дней, необходимое для доставки товара в каждый город):
      city_id     name_city     days_delivery
      INT PRIMARY KEY
      AUTO_INCREMENT     VARCHAR(30)     INT
      1     Москва     5
      2     Санкт-Петербург     3
      3     Владивосток     12
  Таблица client:
      client_id     name_client     city_id     email
      INT PRIMARY KEY
      AUTO_INCREMENT     VARCHAR(50)     INT     VARCHAR(30)
      1     Баранов Павел     3     baranov@test
      2     Абрамова Катя     1     abramova@test
      3     Семенонов Иван     2     semenov@test
      4     Яковлева Галина     1     yakovleva@test
  Таблица buy (столбец buy_description предназначен для пожеланий покупателя, которые он хочет добавить в свой заказ, если пожеланий нет - поле остается пустым):
      buy_id     buy_description     client_id
      INT PRIMARY KEY
      AUTO_INCREMENT     VARCHAR(100)     INT
      1     Доставка только вечером     1
      2           3
      3     Упаковать каждую книгу по отдельности     2
      4           1
  Таблица buy_book:
      buy_book_id     buy_id     book_id     amount
      INT PRIMARY KEY
      AUTO_INCREMENT     INT     INT     INT
      1     1     1     1
      2     1     7     2
      3     1     3     1
      4     2     8     2
      5     3     3     2
      6     3     2     1
      7     3     1     1
      8     4     5     1
  Таблица step:
      step_id     name_step
      INT PRIMARY KEY
      AUTO_INCREMENT     VARCHAR(30)
      1     Оплата
      2     Упаковка
      3     Транспортировка
      4     Доставка
  Таблица buy_step ( если столбец date_step_end не заполнен (имеет значение Null), это означает что операция еще не выполнена, например для заказа с id 2, книги переданы для доставки 2020-03-02, но еще не доставлены):
      buy_step_id     buy_id     step_id     date_step_beg     date_step_end
      INT PRIMARY KEY
      AUTO_INCREMENT     INT     INT     DATE     DATE
      1      1     1     2020-02-20     2020-02-20
      2     1     2     2020-02-20     2020-02-21
      3     1     3     2020-02-22     2020-03-07
      4     1     4     2020-03-08     2020-03-08
      5     2     1     2020-02-28     2020-02-28
      6     2     2     2020-02-29     2020-03-01
      7     2     3     2020-03-02     
      8     2     4           
      9     3     1     2020-03-05     2020-03-05
      10     3     2     2020-03-05     2020-03-06
      11     3     3     2020-03-06     2020-03-10
      12     3     4     2020-03-11     
      13     4     1     2020-03-20     
      14     4     2           
      15     4     3           
      16     4     4     
  Decision:
  mysql> CREATE TABLE author( author_id INT PRIMARY KEY AUTO_INCREMENT, name_author VARCHAR(30));
      Query OK, 0 rows affected (0.14 sec)
  mysql> INSERT INTO author (name_author) VALUES  ('Булгаков М.А.'), ('Достоевский Ф.М.'), ('Есенин С.А.'), ('Пастернак Б.Л.'), ('Лермонтов М.Ю.');
      Query OK, 5 rows affected (0.04 sec)
      Records: 5  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM author;
      +-----------+-------------------------------+
      | author_id | name_author                   |
      +-----------+-------------------------------+
      |         1 | Булгаков М.А.                 |
      |         2 | Достоевский Ф.М.              |
      |         3 | Есенин С.А.                   |
      |         4 | Пастернак Б.Л.                |
      |         5 | Лермонтов М.Ю.                |
      +-----------+-------------------------------+
      5 rows in set (0.00 sec)
  mysql> CREATE TABLE genre(genre_id INT PRIMARY KEY AUTO_INCREMENT, name_genre VARCHAR(30));
  mysql> INSERT INTO genre(name_genre) VALUES  ('Роман'), ('Поэзия'), ('Приключения');
      Query OK, 3 rows affected (0.14 sec)
      Records: 3  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM genre;
      +----------+------------------------+
      | genre_id | name_genre             |
      +----------+------------------------+
      |        1 | Роман                  |
      |        2 | Поэзия                 |
      |        3 | Приключения            |
      +----------+------------------------+
      3 rows in set (0.00 sec)
  mysql> CREATE TABLE book
  (
  book_id INT PRIMARY KEY AUTO_INCREMENT,
      title VARCHAR(50),
      author_id INT NOT NULL,
      genre_id INT,
      price DECIMAL(8, 2),
      amount INT,
      FOREIGN KEY (author_id)
          REFERENCES author (author_id)
          ON DELETE CASCADE,
      FOREIGN KEY (genre_id)
          REFERENCES genre (genre_id)
          ON DELETE SET NULL
  );
      Query OK, 0 rows affected (0.24 sec)
  mysql> INSERT INTO book (title, author_id, genre_id, price, amount)
  VALUES
  ('Мастер и Маргарита', 1, 1, 670.99, 3),
  ('Белая гвардия ', 1, 1, 540.50, 5),
  ('Идиот', 2, 1, 460.00, 10),
  ('Братья Карамазовы', 2, 1, 799.01, 2),
  ('Игрок', 2, 1, 480.50, 10),
  ('Стихотворения и поэмы', 3, 2, 650.00, 15),
  ('Черный человек', 3, 2, 570.20, 6),
  ('Лирика', 4, 2, 518.99, 2);
      Query OK, 8 rows affected (0.06 sec)
      Records: 8  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM book;
      +---------+------------------------------------------+-----------+----------+--------+--------+
      | book_id | title                                    | author_id | genre_id | price  | amount |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      |       1 | Мастер и Маргарита                       |         1 |        1 | 670.99 |      3 |
      |       2 | Белая гвардия                            |         1 |        1 | 540.50 |      5 |
      |       3 | Идиот                                    |         2 |        1 | 460.00 |     10 |
      |       4 | Братья Карамазовы                        |         2 |        1 | 799.01 |      2 |
      |       5 | Игрок                                    |         2 |        1 | 480.50 |     10 |
      |       6 | Стихотворения и поэмы                    |         3 |        2 | 650.00 |     15 |
      |       7 | Черный человек                           |         3 |        2 | 570.20 |      6 |
      |       8 | Лирика                                   |         4 |        2 | 518.99 |      2 |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      8 rows in set (0.00 sec)
  mysql> CREATE TABLE city(
      city_id INT PRIMARY KEY AUTO_INCREMENT,
      name_city VARCHAR(30),
      days_delivery INT
  );
      Query OK, 0 rows affected (0.25 sec)
  mysql> INSERT INTO city(name_city, days_delivery)
  VALUES
  ('Москва', 5),
  ('Санкт-Петербург', 3),
  ('Владивосток', 12);
      Query OK, 3 rows affected (0.06 sec)
      Records: 3  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM city;
      +---------+-------------------------------+---------------+
      | city_id | name_city                     | days_delivery |
      +---------+-------------------------------+---------------+
      |       1 | Москва                        |             5 |
      |       2 | Санкт-Петербург               |             3 |
      |       3 | Владивосток                   |            12 |
      +---------+-------------------------------+---------------+
      3 rows in set (0.00 sec)
  mysql> CREATE TABLE client (
      client_id INT PRIMARY KEY AUTO_INCREMENT,
      name_client VARCHAR(50),
      city_id INT,
      email VARCHAR(30),
      FOREIGN KEY (city_id) REFERENCES city (city_id)
  );
      Query OK, 0 rows affected (0.24 sec)
  mysql> INSERT INTO client(name_client, city_id, email)
  VALUES
  ('Баранов Павел', 3, 'baranov@test'),
  ('Абрамова Катя', 1, 'abramova@test'),
  ('Семенонов Иван', 2, 'semenov@test'),
  ('Яковлева Галина', 1, 'yakovleva@test');
      Query OK, 4 rows affected (0.12 sec)
      Records: 4  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM client;
      +-----------+-------------------------------+---------+----------------+
      | client_id | name_client                   | city_id | email          |
      +-----------+-------------------------------+---------+----------------+
      |         1 | Баранов Павел                 |       3 | baranov@test   |
      |         2 | Абрамова Катя                 |       1 | abramova@test  |
      |         3 | Семенонов Иван                |       2 | semenov@test   |
      |         4 | Яковлева Галина               |       1 | yakovleva@test |
      +-----------+-------------------------------+---------+----------------+
      4 rows in set (0.01 sec)
  mysql> CREATE TABLE buy(
      buy_id INT PRIMARY KEY AUTO_INCREMENT,
      buy_description VARCHAR(100),
      client_id INT,
      FOREIGN KEY (client_id) REFERENCES client (client_id)
  );
      Query OK, 0 rows affected (0.24 sec)
  mysql> INSERT INTO buy (buy_description, client_id)
  VALUES
  ('Доставка только вечером', 1),
  (NULL, 3),
  ('Упаковать каждую книгу по отдельности', 2),
  (NULL, 1);
      Query OK, 4 rows affected (0.04 sec)
      Records: 4  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM buy;
      +--------+------------------------------------------------------------------------+-----------+
      | buy_id | buy_description                                                        | client_id |
      +--------+------------------------------------------------------------------------+-----------+
      |      1 | Доставка только вечером                                                |         1 |
      |      2 | NULL                                                                   |         3 |
      |      3 | Упаковать каждую книгу по отдельности                                  |         2 |
      |      4 | NULL                                                                   |         1 |
      +--------+------------------------------------------------------------------------+-----------+
      4 rows in set (0.00 sec)
  mysql> CREATE TABLE buy_book (
      buy_book_id INT PRIMARY KEY AUTO_INCREMENT,
      buy_id INT,
      book_id INT,
      amount INT,
      FOREIGN KEY (buy_id) REFERENCES buy (buy_id),
      FOREIGN KEY (book_id) REFERENCES book (book_id)
  );
      Query OK, 0 rows affected (0.24 sec)
  mysql> INSERT INTO buy_book(buy_id, book_id, amount)
  VALUES
  (1, 1, 1),
  (1, 7, 2),
  (1, 3, 1),
  (2, 8, 2),
  (3, 3, 2),
  (3, 2, 1),
  (3, 1, 1),
  (4, 5, 1);
      Query OK, 8 rows affected (0.03 sec)
      Records: 8  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM buy_book;
      +-------------+--------+---------+--------+
      | buy_book_id | buy_id | book_id | amount |
      +-------------+--------+---------+--------+
      |           1 |      1 |       1 |      1 |
      |           2 |      1 |       7 |      2 |
      |           3 |      1 |       3 |      1 |
      |           4 |      2 |       8 |      2 |
      |           5 |      3 |       3 |      2 |
      |           6 |      3 |       2 |      1 |
      |           7 |      3 |       1 |      1 |
      |           8 |      4 |       5 |      1 |
      +-------------+--------+---------+--------+
      8 rows in set (0.00 sec)
  mysql> CREATE TABLE step (
      step_id INT PRIMARY KEY AUTO_INCREMENT,
      name_step VARCHAR(30)
  );
      Query OK, 0 rows affected (0.18 sec)
  mysql> INSERT INTO step(name_step)
  VALUES
  ('Оплата'),
  ('Упаковка'),
  ('Транспортировка'),
  ('Доставка');
      Query OK, 4 rows affected (0.03 sec)
      Records: 4  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM step;
      +---------+--------------------------------+
      | step_id | name_step                      |
      +---------+--------------------------------+
      |       1 | Оплата                         |
      |       2 | Упаковка                       |
      |       3 | Транспортировка                |
      |       4 | Доставка                       |
      +---------+--------------------------------+
      4 rows in set (0.00 sec)
  mysql> CREATE TABLE buy_step (
      buy_step_id INT PRIMARY KEY AUTO_INCREMENT,
      buy_id INT,
      step_id INT,
      date_step_beg DATE,
      date_step_end DATE,
      FOREIGN KEY (buy_id) REFERENCES buy (buy_id),
      FOREIGN KEY (step_id) REFERENCES step (step_id)
  );
      Query OK, 0 rows affected (0.26 sec)
  mysql> INSERT INTO buy_step(buy_id, step_id, date_step_beg, date_step_end)
  VALUES (1, 1, '2020-02-20', '2020-02-20'),
  (1, 2, '2020-02-20', '2020-02-21'),
  (1, 3, '2020-02-22', '2020-03-07'),
  (1, 4, '2020-03-08', '2020-03-08'),
  (2, 1, '2020-02-28', '2020-02-28'),
  (2, 2, '2020-02-29', '2020-03-01'),
  (2, 3, '2020-03-02', NULL),
  (2, 4, NULL, NULL),
  (3, 1, '2020-03-05', '2020-03-05'),
  (3, 2, '2020-03-05', '2020-03-06'),
  (3, 3, '2020-03-06', '2020-03-10'),
  (3, 4, '2020-03-11', NULL),
  (4, 1, '2020-03-20', NULL),
  (4, 2, NULL, NULL),
  (4, 3, NULL, NULL),
  (4, 4, NULL, NULL);
      Query OK, 16 rows affected (0.14 sec)
      Records: 16  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM buy_step;
      +-------------+--------+---------+---------------+---------------+
      | buy_step_id | buy_id | step_id | date_step_beg | date_step_end |
      +-------------+--------+---------+---------------+---------------+
      |           1 |      1 |       1 | 2020-02-20    | 2020-02-20    |
      |           2 |      1 |       2 | 2020-02-20    | 2020-02-21    |
      |           3 |      1 |       3 | 2020-02-22    | 2020-03-07    |
      |           4 |      1 |       4 | 2020-03-08    | 2020-03-08    |
      |           5 |      2 |       1 | 2020-02-28    | 2020-02-28    |
      |           6 |      2 |       2 | 2020-02-29    | 2020-03-01    |
      |           7 |      2 |       3 | 2020-03-02    | NULL          |
      |           8 |      2 |       4 | NULL          | NULL          |
      |           9 |      3 |       1 | 2020-03-05    | 2020-03-05    |
      |          10 |      3 |       2 | 2020-03-05    | 2020-03-06    |
      |          11 |      3 |       3 | 2020-03-06    | 2020-03-10    |
      |          12 |      3 |       4 | 2020-03-11    | NULL          |
      |          13 |      4 |       1 | 2020-03-20    | NULL          |
      |          14 |      4 |       2 | NULL          | NULL          |
      |          15 |      4 |       3 | NULL          | NULL          |
      |          16 |      4 |       4 | NULL          | NULL          |
      +-------------+--------+---------+---------------+---------------+
      16 rows in set (0.00 sec)
  Task:
  Вывести все заказы Баранова Павла (id заказа, какие книги, по какой цене и в каком количестве он заказал) в отсортированном по номеру заказа и названиям книг виде.
  Decision:
  mysql> SELECT client_id, name_client FROM client;
      +-----------+-------------------------------+
      | client_id | name_client                   |
      +-----------+-------------------------------+
      |         1 | Баранов Павел                 |
      |         2 | Абрамова Катя                 |
      |         3 | Семенонов Иван                |
      |         4 | Яковлева Галина               |
      +-----------+-------------------------------+
      4 rows in set (0.01 sec)
  mysql> SELECT buy_id, client_id FROM buy;
      +--------+-----------+
      | buy_id | client_id |
      +--------+-----------+
      |      1 |         1 |
      |      4 |         1 |
      |      3 |         2 |
      |      2 |         3 |
      +--------+-----------+
      4 rows in set (0.00 sec)
  mysql> SELECT buy_book_id, buy_id, book_id, amount FROM buy_book;
      +-------------+--------+---------+--------+
      | buy_book_id | buy_id | book_id | amount |
      +-------------+--------+---------+--------+
      |           1 |      1 |       1 |      1 |
      |           2 |      1 |       7 |      2 |
      |           3 |      1 |       3 |      1 |
      |           4 |      2 |       8 |      2 |
      |           5 |      3 |       3 |      2 |
      |           6 |      3 |       2 |      1 |
      |           7 |      3 |       1 |      1 |
      |           8 |      4 |       5 |      1 |
      +-------------+--------+---------+--------+
      8 rows in set (0.00 sec)
  mysql> SELECT book_id, title, price, amount FROM book;
      +---------+------------------------------------------+--------+--------+
      | book_id | title                                    | price  | amount |
      +---------+------------------------------------------+--------+--------+
      |       1 | Мастер и Маргарита                       | 670.99 |      3 |
      |       2 | Белая гвардия                            | 540.50 |      5 |
      |       3 | Идиот                                    | 460.00 |     10 |
      |       4 | Братья Карамазовы                        | 799.01 |      2 |
      |       5 | Игрок                                    | 480.50 |     10 |
      |       6 | Стихотворения и поэмы                    | 650.00 |     15 |
      |       7 | Черный человек                           | 570.20 |      6 |
      |       8 | Лирика                                   | 518.99 |      2 |
      +---------+------------------------------------------+--------+--------+
      8 rows in set (0.00 sec)
  mysql> SELECT buy_book.buy_id, book.title, book.price, buy_book.amount
  FROM
      client
      INNER JOIN buy ON client.client_id=buy.client_id
      INNER JOIN buy_book ON buy_book.buy_id = buy.buy_id
      INNER JOIN book ON buy_book.book_id=book.book_id
  WHERE name_client = 'Баранов Павел'
  ORDER BY buy.buy_id, title;
      +--------+------------------------------------+--------+--------+
      | buy_id | title                              | price  | amount |
      +--------+------------------------------------+--------+--------+
      |      1 | Идиот                              | 460.00 |      1 |
      |      1 | Мастер и Маргарита                 | 670.99 |      1 |
      |      1 | Черный человек                     | 570.20 |      2 |
      |      4 | Игрок                              | 480.50 |      1 |
      +--------+------------------------------------+--------+--------+
      4 rows in set (0.01 sec)
  Task:
  Посчитать, сколько раз была заказана каждая книга, для книги вывести ее автора (нужно посчитать, в каком количестве заказов фигурирует каждая книга).  Вывести фамилию и инициалы автора, название книги, последний столбец назвать Количество. Результат отсортировать сначала  по фамилиям авторов, а потом по названиям книг
  Decision:
  mysql> SELECT book_id, title, author_id FROM book;
      +---------+------------------------------------------+-----------+
      | book_id | title                                    | author_id |
      +---------+------------------------------------------+-----------+
      |       1 | Мастер и Маргарита                       |         1 |
      |       2 | Белая гвардия                            |         1 |
      |       3 | Идиот                                    |         2 |
      |       4 | Братья Карамазовы                        |         2 |
      |       5 | Игрок                                    |         2 |
      |       6 | Стихотворения и поэмы                    |         3 |
      |       7 | Черный человек                           |         3 |
      |       8 | Лирика                                   |         4 |
      +---------+------------------------------------------+-----------+
      8 rows in set (0.00 sec)
  mysql> SELECT author_id, name_author FROM author;
      +-----------+-------------------------------+
      | author_id | name_author                   |
      +-----------+-------------------------------+
      |         1 | Булгаков М.А.                 |
      |         2 | Достоевский Ф.М.              |
      |         3 | Есенин С.А.                   |
      |         4 | Пастернак Б.Л.                |
      |         5 | Лермонтов М.Ю.                |
      +-----------+-------------------------------+
      5 rows in set (0.00 sec)
  mysql> SELECT book_id, amount FROM buy_book;
      +---------+--------+
      | book_id | amount |
      +---------+--------+
      |       1 |      1 |
      |       7 |      2 |
      |       3 |      1 |
      |       8 |      2 |
      |       3 |      2 |
      |       2 |      1 |
      |       1 |      1 |
      |       5 |      1 |
      +---------+--------+
      8 rows in set (0.00 sec)
  mysql> SELECT author.name_author,book.title,SUM(buy_book.amount) AS Количество
  FROM
      book
      INNER JOIN buy_book ON book.book_id=buy_book.book_id
      INNER JOIN author ON book.author_id=author.author_id
  GROUP BY author.name_author, book.title
  ORDER BY author.name_author, book.title;
      +-------------------------------+------------------------------------+----------------------+
      | name_author                   | title                              | Количество           |
      +-------------------------------+------------------------------------+----------------------+
      | Булгаков М.А.                 | Белая гвардия                      |                    1 |
      | Булгаков М.А.                 | Мастер и Маргарита                 |                    2 |
      | Достоевский Ф.М.              | Игрок                              |                    1 |
      | Достоевский Ф.М.              | Идиот                              |                    3 |
      | Есенин С.А.                   | Черный человек                     |                    2 |
      | Пастернак Б.Л.                | Лирика                             |                    2 |
      +-------------------------------+------------------------------------+----------------------+
      6 rows in set (0.01 sec)
  mysql> SELECT author.name_author,book.title,SUM(buy_book.amount) AS Количество
  FROM
      book
      LEFT JOIN buy_book ON book.book_id=buy_book.book_id
      LEFT JOIN author ON book.author_id=author.author_id
  GROUP BY author.name_author,book.title
  ORDER BY author.name_author,book.title;
      +-------------------------------+------------------------------------------+----------------------+
      | name_author                   | title                                    | Количество           |
      +-------------------------------+------------------------------------------+----------------------+
      | Булгаков М.А.                 | Белая гвардия                            |                    1 |
      | Булгаков М.А.                 | Мастер и Маргарита                       |                    2 |
      | Достоевский Ф.М.              | Братья Карамазовы                        |                 NULL |
      | Достоевский Ф.М.              | Игрок                                    |                    1 |
      | Достоевский Ф.М.              | Идиот                                    |                    3 |
      | Есенин С.А.                   | Стихотворения и поэмы                    |                 NULL |
      | Есенин С.А.                   | Черный человек                           |                    2 |
      | Пастернак Б.Л.                | Лирика                                   |                    2 |
      +-------------------------------+------------------------------------------+----------------------+
      8 rows in set (0.00 sec)
  mysql> SELECT author.name_author,book.title,COUNT(buy_book.amount) AS Количество
  FROM
      book
      LEFT JOIN buy_book USING(book_id)
      LEFT JOIN author USING(author_id)
  GROUP BY author.name_author,book.title
  ORDER BY author.name_author,book.title;
      +-------------------------------+------------------------------------------+----------------------+
      | name_author                   | title                                    | Количество           |
      +-------------------------------+------------------------------------------+----------------------+
      | Булгаков М.А.                 | Белая гвардия                            |                    1 |
      | Булгаков М.А.                 | Мастер и Маргарита                       |                    2 |
      | Достоевский Ф.М.              | Братья Карамазовы                        |                    0 |
      | Достоевский Ф.М.              | Игрок                                    |                    1 |
      | Достоевский Ф.М.              | Идиот                                    |                    2 |
      | Есенин С.А.                   | Стихотворения и поэмы                    |                    0 |
      | Есенин С.А.                   | Черный человек                           |                    1 |
      | Пастернак Б.Л.                | Лирика                                   |                    1 |
      +-------------------------------+------------------------------------------+----------------------+
      8 rows in set (0.00 sec)
  Task:
  Вывести города, в которых живут клиенты, оформлявшие заказы в интернет-магазине. Указать количество заказов в каждый город, этот столбец назвать Количество. Информацию вывести по убыванию количества заказов, а затем в алфавитном порядке по названию городов.
  Decision:
  mysql> SELECT client_id, city_id FROM client;
      +-----------+---------+
      | client_id | city_id |
      +-----------+---------+
      |         2 |       1 |
      |         4 |       1 |
      |         3 |       2 |
      |         1 |       3 |
      +-----------+---------+
      4 rows in set (0.04 sec)
  mysql> SELECT name_city, city_id FROM city;
      +-------------------------------+---------+
      | name_city                     | city_id |
      +-------------------------------+---------+
      | Москва                        |       1 |
      | Санкт-Петербург               |       2 |
      | Владивосток                   |       3 |
      +-------------------------------+---------+
      3 rows in set (0.01 sec)
  mysql> SELECT client_id, buy_id FROM buy;
      +-----------+--------+
      | client_id | buy_id |
      +-----------+--------+
      |         1 |      1 |
      |         1 |      4 |
      |         2 |      3 |
      |         3 |      2 |
      +-----------+--------+
      4 rows in set (0.10 sec)
  mysql> SELECT name_city, COUNT(buy_id) AS 'Количество'
  FROM client
      INNER JOIN city
      ON client.city_id = city.city_id
      INNER JOIN buy
      ON client.client_id = buy.client_id
      GROUP BY name_city
      ORDER BY name_city;
      +-------------------------------+----------------------+
      | name_city                     | Количество           |
      +-------------------------------+----------------------+
      | Владивосток                   |                    2 |
      | Москва                        |                    1 |
      | Санкт-Петербург               |                    1 |
      +-------------------------------+----------------------+
      3 rows in set (0.11 sec)
  Task:
  Вывести номера всех оплаченных заказов и даты, когда они были оплачены.
  Decision:
  mysql> SELECT buy_id, step_id, date_step_beg, date_step_end FROM buy_step;
      +--------+---------+---------------+---------------+
      | buy_id | step_id | date_step_beg | date_step_end |
      +--------+---------+---------------+---------------+
      |      1 |       1 | 2020-02-20    | 2020-02-20    |
      |      1 |       2 | 2020-02-20    | 2020-02-21    |
      |      1 |       3 | 2020-02-22    | 2020-03-07    |
      |      1 |       4 | 2020-03-08    | 2020-03-08    |
      |      2 |       1 | 2020-02-28    | 2020-02-28    |
      |      2 |       2 | 2020-02-29    | 2020-03-01    |
      |      2 |       3 | 2020-03-02    | NULL          |
      |      2 |       4 | NULL          | NULL          |
      |      3 |       1 | 2020-03-05    | 2020-03-05    |
      |      3 |       2 | 2020-03-05    | 2020-03-06    |
      |      3 |       3 | 2020-03-06    | 2020-03-10    |
      |      3 |       4 | 2020-03-11    | NULL          |
      |      4 |       1 | 2020-03-20    | NULL          |
      |      4 |       2 | NULL          | NULL          |
      |      4 |       3 | NULL          | NULL          |
      |      4 |       4 | NULL          | NULL          |
      +--------+---------+---------------+---------------+
      16 rows in set (0.03 sec)
  mysql> SELECT step_id, name_step FROM step;
      +---------+--------------------------------+
      | step_id | name_step                      |
      +---------+--------------------------------+
      |       1 | Оплата                         |
      |       2 | Упаковка                       |
      |       3 | Транспортировка                |
      |       4 | Доставка                       |
      +---------+--------------------------------+
      4 rows in set (0.01 sec)
  mysql> SELECT buy_id, date_step_end
  FROM buy_step
      INNER JOIN step
      ON step.step_id = buy_step.step_id
      WHERE name_step LtuserE 'Оплата' AND date_step_end IS NOT NULL;
      +--------+---------------+
      | buy_id | date_step_end |
      +--------+---------------+
      |      1 | 2020-02-20    |
      |      2 | 2020-02-28    |
      |      3 | 2020-03-05    |
      +--------+---------------+
      3 rows in set (0.00 sec)
  Task:
  Вывести информацию о каждом заказе: его номер, кто его сформировал (фамилия пользователя) и его стоимость (сумма произведений количества заказанных книг и их цены), в отсортированном по номеру заказа виде. Последний столбец назвать Стоимость.
  Decision:
  mysql> SELECT buy_id, client_id FROM buy;
      +--------+-----------+
      | buy_id | client_id |
      +--------+-----------+
      |      1 |         1 |
      |      4 |         1 |
      |      3 |         2 |
      |      2 |         3 |
      +--------+-----------+
      4 rows in set (0.00 sec)
  mysql> SELECT client_id, name_client FROM client;
      +-----------+-------------------------------+
      | client_id | name_client                   |
      +-----------+-------------------------------+
      |         1 | Баранов Павел                 |
      |         2 | Абрамова Катя                 |
      |         3 | Семенонов Иван                |
      |         4 | Яковлева Галина               |
      +-----------+-------------------------------+
      4 rows in set (0.00 sec)
  mysql> SELECT buy_book_id, amount, buy_id, book_id FROM buy_book;
      +-------------+--------+--------+---------+
      | buy_book_id | amount | buy_id | book_id |
      +-------------+--------+--------+---------+
      |           1 |      1 |      1 |       1 |
      |           2 |      2 |      1 |       7 |
      |           3 |      1 |      1 |       3 |
      |           4 |      2 |      2 |       8 |
      |           5 |      2 |      3 |       3 |
      |           6 |      1 |      3 |       2 |
      |           7 |      1 |      3 |       1 |
      |           8 |      1 |      4 |       5 |
      +-------------+--------+--------+---------+
      8 rows in set (0.11 sec)
  mysql> SELECT book_id, price FROM book;
      +---------+--------+
      | book_id | price  |
      +---------+--------+
      |       1 | 670.99 |
      |       2 | 540.50 |
      |       3 | 460.00 |
      |       4 | 799.01 |
      |       5 | 480.50 |
      |       6 | 650.00 |
      |       7 | 570.20 |
      |       8 | 518.99 |
      +---------+--------+
      8 rows in set (0.01 sec)
  mysql> SELECT buy_id, name_client, /*buy_book.amount, price,*/ SUM(buy_book.amount*price) AS 'Стоимость'
  FROM buy
  INNER JOIN client USING(client_id)
  INNER JOIN buy_book USING(buy_id)
  INNER JOIN book USING(book_id)
  GROUP BY buy_id, name_client
  ORDER BY buy_id;
      +--------+-----------------------------+--------------------+
      | buy_id | name_client                 | Стоимость          |
      +--------+-----------------------------+--------------------+
      |      1 | Баранов Павел               |            2271.39 |
      |      2 | Семенонов Иван              |            1037.98 |
      |      3 | Абрамова Катя               |            2131.49 |
      |      4 | Баранов Павел               |             480.50 |
      +--------+-----------------------------+--------------------+
      4 rows in set (0.00 sec)
  Task:
  Вывести номера заказов (buy_id) и названия этапов, на которых они в данный момент находятся. Если заказ доставлен –  информацию о нем не выводить. Информацию отсортировать по возрастанию buy_id.
  Decision:
  mysql> SELECT step_id, name_step FROM step;
      +---------+--------------------------------+
      | step_id | name_step                      |
      +---------+--------------------------------+
      |       1 | Оплата                         |
      |       2 | Упаковка                       |
      |       3 | Транспортировка                |
      |       4 | Доставка                       |
      +---------+--------------------------------+
      4 rows in set (0.00 sec)
  mysql> SELECT step_id, buy_id, date_step_beg, date_step_end FROM buy_step;
      +---------+--------+---------------+---------------+
      | step_id | buy_id | date_step_beg | date_step_end |
      +---------+--------+---------------+---------------+
      |       1 |      1 | 2020-02-20    | 2020-02-20    |
      |       2 |      1 | 2020-02-20    | 2020-02-21    |
      |       3 |      1 | 2020-02-22    | 2020-03-07    |
      |       4 |      1 | 2020-03-08    | 2020-03-08    |
      |       1 |      2 | 2020-02-28    | 2020-02-28    |
      |       2 |      2 | 2020-02-29    | 2020-03-01    |
      |       3 |      2 | 2020-03-02    | NULL          |
      |       4 |      2 | NULL          | NULL          |
      |       1 |      3 | 2020-03-05    | 2020-03-05    |
      |       2 |      3 | 2020-03-05    | 2020-03-06    |
      |       3 |      3 | 2020-03-06    | 2020-03-10    |
      |       4 |      3 | 2020-03-11    | NULL          |
      |       1 |      4 | 2020-03-20    | NULL          |
      |       2 |      4 | NULL          | NULL          |
      |       3 |      4 | NULL          | NULL          |
      |       4 |      4 | NULL          | NULL          |
      +---------+--------+---------------+---------------+
      16 rows in set (0.00 sec)
  mysql> SELECT buy_step.buy_id, name_step
  FROM step
  INNER JOIN buy_step USING(step_id)
  WHERE date_step_beg IS NOT NULL
  AND date_step_end IS NULL;
      +--------+--------------------------------+
      | buy_id | name_step                      |
      +--------+--------------------------------+
      |      2 | Транспортировка                |
      |      3 | Доставка                       |
      |      4 | Оплата                         |
      +--------+--------------------------------+
      3 rows in set (0.00 sec)
  Task:
  В таблице city для каждого города указано количество дней, за которые заказ может быть доставлен в этот город (рассматривается только этап Транспортировка). Для тех заказов, которые прошли этап транспортировки, вывести количество дней за которое заказ реально доставлен в город. А также, если заказ доставлен с опозданием, указать количество дней задержки, в противном случае вывести 0. В результат включить номер заказа (buy_id), а также вычисляемые столбцы Количество_дней и Опоздание. Информацию вывести в отсортированном по номеру заказа виде.
  Decision:
  mysql> SELECT * FROM city;
      +---------+-------------------------------+---------------+
      | city_id | name_city                     | days_delivery |
      +---------+-------------------------------+---------------+
      |       1 | Москва                        |             5 |
      |       2 | Санкт-Петербург               |             3 |
      |       3 | Владивосток                   |            12 |
      +---------+-------------------------------+---------------+
      3 rows in set (0.01 sec)
  mysql> SELECT * FROM client;
      +-----------+-------------------------------+---------+----------------+
      | client_id | name_client                   | city_id | email          |
      +-----------+-------------------------------+---------+----------------+
      |         1 | Баранов Павел                 |       3 | baranov@test   |
      |         2 | Абрамова Катя                 |       1 | abramova@test  |
      |         3 | Семенонов Иван                |       2 | semenov@test   |
      |         4 | Яковлева Галина               |       1 | yakovleva@test |
      +-----------+-------------------------------+---------+----------------+
      4 rows in set (0.00 sec)
  mysql> SELECT * FROM buy;
      +--------+------------------------------------------------------------------------+-----------+
      | buy_id | buy_description                                                        | client_id |
      +--------+------------------------------------------------------------------------+-----------+
      |      1 | Доставка только вечером                                                |         1 |
      |      2 | NULL                                                                   |         3 |
      |      3 | Упаковать каждую книгу по отдельности                                  |         2 |
      |      4 | NULL                                                                   |         1 |
      +--------+------------------------------------------------------------------------+-----------+
      4 rows in set (0.00 sec)
  mysql> SELECT * FROM buy_step;
      +-------------+--------+---------+---------------+---------------+
      | buy_step_id | buy_id | step_id | date_step_beg | date_step_end |
      +-------------+--------+---------+---------------+---------------+
      |           1 |      1 |       1 | 2020-02-20    | 2020-02-20    |
      |           2 |      1 |       2 | 2020-02-20    | 2020-02-21    |
      |           3 |      1 |       3 | 2020-02-22    | 2020-03-07    |
      |           4 |      1 |       4 | 2020-03-08    | 2020-03-08    |
      |           5 |      2 |       1 | 2020-02-28    | 2020-02-28    |
      |           6 |      2 |       2 | 2020-02-29    | 2020-03-01    |
      |           7 |      2 |       3 | 2020-03-02    | NULL          |
      |           8 |      2 |       4 | NULL          | NULL          |
      |           9 |      3 |       1 | 2020-03-05    | 2020-03-05    |
      |          10 |      3 |       2 | 2020-03-05    | 2020-03-06    |
      |          11 |      3 |       3 | 2020-03-06    | 2020-03-10    |
      |          12 |      3 |       4 | 2020-03-11    | NULL          |
      |          13 |      4 |       1 | 2020-03-20    | NULL          |
      |          14 |      4 |       2 | NULL          | NULL          |
      |          15 |      4 |       3 | NULL          | NULL          |
      |          16 |      4 |       4 | NULL          | NULL          |
      +-------------+--------+---------+---------------+---------------+
  16 rows in set (0.00 sec)
  mysql> SELECT * FROM step;
      +---------+--------------------------------+
      | step_id | name_step                      |
      +---------+--------------------------------+
      |       1 | Оплата                         |
      |       2 | Упаковка                       |
      |       3 | Транспортировка                |
      |       4 | Доставка                       |
      +---------+--------------------------------+
      4 rows in set (0.00 sec)
  mysql> SELECT buy_id,
  DATEDIFF(date_step_end, date_step_beg) AS Количество_дней,
  IF(days_delivery<DATEDIFF(date_step_end, date_step_beg), DATEDIFF(date_step_end, date_step_beg)-days_delivery, 0) AS Опоздание
  FROM city
  INNER JOIN client ON city.city_id=client.city_id
  INNER JOIN buy USING(client_id)
  INNER JOIN buy_step USING(buy_id)
  INNER JOIN step USING(step_id)
  WHERE step.name_step='Транспортировка' AND (date_step_beg IS NOT NULL AND date_step_end IS NOT NULL);
      +--------+-------------------------------+--------------------+
      | buy_id | Количество_дней               | Опоздание          |
      +--------+-------------------------------+--------------------+
      |      1 |                            14 |                  2 |
      |      3 |                             4 |                  0 |
      +--------+-------------------------------+--------------------+
      2 rows in set (0.00 sec)
  Task:
  Выбрать всех клиентов, которые заказывали книги Достоевского, информацию вывести в отсортированном по алфавиту виде. В решении используйте фамилию автора, а не его id.
  Decision:
  mysql> SELECT * FROM client;
      +-----------+-------------------------------+---------+----------------+
      | client_id | name_client                   | city_id | email          |
      +-----------+-------------------------------+---------+----------------+
      |         1 | Баранов Павел                 |       3 | baranov@test   |
      |         2 | Абрамова Катя                 |       1 | abramova@test  |
      |         3 | Семенонов Иван                |       2 | semenov@test   |
      |         4 | Яковлева Галина               |       1 | yakovleva@test |
      +-----------+-------------------------------+---------+----------------+
      4 rows in set (0.00 sec)
  mysql> SELECT * FROM buy;
      +--------+------------------------------------------------------------------------+-----------+
      | buy_id | buy_description                                                        | client_id |
      +--------+------------------------------------------------------------------------+-----------+
      |      1 | Доставка только вечером                                                |         1 |
      |      2 | NULL                                                                   |         3 |
      |      3 | Упаковать каждую книгу по отдельности                                  |         2 |
      |      4 | NULL                                                                   |         1 |
      +--------+------------------------------------------------------------------------+-----------+
      4 rows in set (0.00 sec)
  mysql> SELECT * FROM buy_book;
      +-------------+--------+---------+--------+
      | buy_book_id | buy_id | book_id | amount |
      +-------------+--------+---------+--------+
      |           1 |      1 |       1 |      1 |
      |           2 |      1 |       7 |      2 |
      |           3 |      1 |       3 |      1 |
      |           4 |      2 |       8 |      2 |
      |           5 |      3 |       3 |      2 |
      |           6 |      3 |       2 |      1 |
      |           7 |      3 |       1 |      1 |
      |           8 |      4 |       5 |      1 |
      +-------------+--------+---------+--------+
      8 rows in set (0.00 sec)
  mysql> SELECT * FROM book;
      +---------+------------------------------------------+-----------+----------+--------+--------+
      | book_id | title                                    | author_id | genre_id | price  | amount |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      |       1 | Мастер и Маргарита                       |         1 |        1 | 670.99 |      3 |
      |       2 | Белая гвардия                            |         1 |        1 | 540.50 |      5 |
      |       3 | Идиот                                    |         2 |        1 | 460.00 |     10 |
      |       4 | Братья Карамазовы                        |         2 |        1 | 799.01 |      2 |
      |       5 | Игрок                                    |         2 |        1 | 480.50 |     10 |
      |       6 | Стихотворения и поэмы                    |         3 |        2 | 650.00 |     15 |
      |       7 | Черный человек                           |         3 |        2 | 570.20 |      6 |
      |       8 | Лирика                                   |         4 |        2 | 518.99 |      2 |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      8 rows in set (0.00 sec)
  mysql> SELECT * FROM author;
      +-----------+-------------------------------+
      | author_id | name_author                   |
      +-----------+-------------------------------+
      |         1 | Булгаков М.А.                 |
      |         2 | Достоевский Ф.М.              |
      |         3 | Есенин С.А.                   |
      |         4 | Пастернак Б.Л.                |
      |         5 | Лермонтов М.Ю.                |
      +-----------+-------------------------------+
      5 rows in set (0.00 sec)
  mysql> SELECT name_client
  FROM client
  INNER JOIN buy ON client.client_id=buy.client_id
  INNER JOIN buy_book USING(buy_id)
  INNER JOIN book USING(book_id)
  INNER JOIN author USING(author_id)
  WHERE name_author='Достоевский Ф.М.'
  GROUP BY name_client
  ORDER BY name_client;
      +---------------------------+
      | name_client               |
      +---------------------------+
      | Абрамова Катя             |
      | Баранов Павел             |
      +---------------------------+
      2 rows in set (0.00 sec)
  Task:
  Вывести жанр (или жанры), в котором было заказано больше всего экземпляров книг, указать это количество. Последний столбец назвать Количество.
  Decision:
  mysql> SELECT * FROM genre;
      +----------+------------------------+
      | genre_id | name_genre             |
      +----------+------------------------+
      |        1 | Роман                  |
      |        2 | Поэзия                 |
      |        3 | Приключения            |
      +----------+------------------------+
      3 rows in set (0.00 sec)
  mysql> SELECT * FROM book;
      +---------+------------------------------------------+-----------+----------+--------+--------+
      | book_id | title                                    | author_id | genre_id | price  | amount |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      |       1 | Мастер и Маргарита                       |         1 |        1 | 670.99 |      3 |
      |       2 | Белая гвардия                            |         1 |        1 | 540.50 |      5 |
      |       3 | Идиот                                    |         2 |        1 | 460.00 |     10 |
      |       4 | Братья Карамазовы                        |         2 |        1 | 799.01 |      2 |
      |       5 | Игрок                                    |         2 |        1 | 480.50 |     10 |
      |       6 | Стихотворения и поэмы                    |         3 |        2 | 650.00 |     15 |
      |       7 | Черный человек                           |         3 |        2 | 570.20 |      6 |
      |       8 | Лирика                                   |         4 |        2 | 518.99 |      2 |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      8 rows in set (0.00 sec)
  mysql> SELECT * FROM buy_book;
      +-------------+--------+---------+--------+
      | buy_book_id | buy_id | book_id | amount |
      +-------------+--------+---------+--------+
      |           1 |      1 |       1 |      1 |
      |           2 |      1 |       7 |      2 |
      |           3 |      1 |       3 |      1 |
      |           4 |      2 |       8 |      2 |
      |           5 |      3 |       3 |      2 |
      |           6 |      3 |       2 |      1 |
      |           7 |      3 |       1 |      1 |
      |           8 |      4 |       5 |      1 |
      +-------------+--------+---------+--------+
      8 rows in set (0.00 sec)
  mysql> SELECT name_genre, SUM(buy_book.amount) AS Количество
  FROM genre
  INNER JOIN book ON genre.genre_id=book.genre_id
  INNER JOIN buy_book USING(book_id)
  WHERE name_genre='Роман';
      +------------+----------------------+
      | name_genre | Количество           |
      +------------+----------------------+
      | Роман      |                    7 |
      +------------+----------------------+
      1 row in set (0.02 sec)
  Task:
  Сравнить ежемесячную выручку от продажи книг за текущий и предыдущий годы. Для этого вывести год, месяц, сумму выручки в отсортированном сначала по возрастанию месяцев, затем по возрастанию лет виде. Название столбцов: Год, Месяц, Сумма.
  Информация о продажах предыдущего года хранится в архивной таблице buy_archive, которая создается в конце года на основе информации из таблиц базы данных и имеет следующую структуру:
    Название столбца    Описание
      buy_archive_id - ключевой столбец
      buy_id - id заказов, выбирается из таблицы buy
      client_id - id клиентов, выбирается из из таблицы client
      book_id - id книги, выбирается из таблицы book
      date_payment - дата оплаты заказа, выбирается из столбца date_step_end таблицы buy_step этапа Оплата» соответствующего заказа
      price - цена книги в текущем заказе из таблицы book
      (хранится, так как цена может измениться )
      amount - количество купленных книг в текущем заказе, из таблицы buy_book
  Decision:
  mysql> CREATE TABLE buy_archive
  (
      buy_    buy_archive_id INT PRIMARY KEY AUTO_INCREMENT,
      buy_    buy_id         INT,
      client_id      INT,
      book_id        INT,
      date_payment   DATE,
      price          DECIMAL(8, 2),
      amount         INT
  );
      Query OK, 0 rows affected (1.34 sec)
  mysql> INSERT INTO buy_archive (buy_id, client_id, book_id, date_payment, amount, price)
  VALUES (2, 1, 1, '2019-02-21', 2, 670.60),
  (2, 1, 3, '2019-02-21', 1, 450.90),
  (1, 2, 2, '2019-02-10', 2, 520.30),
  (1, 2, 4, '2019-02-10', 3, 780.90),
  (1, 2, 3, '2019-02-10', 1, 450.90),
  (3, 4, 4, '2019-03-05', 4, 780.90),
  (3, 4, 5, '2019-03-05', 2, 480.90),
  (4, 1, 6, '2019-03-12', 1, 650.00),
  (5, 2, 1, '2019-03-18', 2, 670.60),
  (5, 2, 4, '2019-03-18', 1, 780.90);
      Query OK, 10 rows affected (0.15 sec)
      Records: 10  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM buy_archive;
      +----------------+--------+-----------+---------+--------------+--------+--------+
      | buy_archive_id | buy_id | client_id | book_id | date_payment | price  | amount |
      +----------------+--------+-----------+---------+--------------+--------+--------+
      |              1 |      2 |         1 |       1 | 2019-02-21   | 670.60 |      2 |
      |              2 |      2 |         1 |       3 | 2019-02-21   | 450.90 |      1 |
      |              3 |      1 |         2 |       2 | 2019-02-10   | 520.30 |      2 |
      |              4 |      1 |         2 |       4 | 2019-02-10   | 780.90 |      3 |
      |              5 |      1 |         2 |       3 | 2019-02-10   | 450.90 |      1 |
      |              6 |      3 |         4 |       4 | 2019-03-05   | 780.90 |      4 |
      |              7 |      3 |         4 |       5 | 2019-03-05   | 480.90 |      2 |
      |              8 |      4 |         1 |       6 | 2019-03-12   | 650.00 |      1 |
      |              9 |      5 |         2 |       1 | 2019-03-18   | 670.60 |      2 |
      |             10 |      5 |         2 |       4 | 2019-03-18   | 780.90 |      1 |
      +----------------+--------+-----------+---------+--------------+--------+--------+
      10 rows in set (0.00 sec)
  mysql> SELECT * FROM book;
      +---------+------------------------------------------+-----------+----------+--------+--------+
      | book_id | title                                    | author_id | genre_id | price  | amount |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      |       1 | Мастер и Маргарита                       |         1 |        1 | 670.99 |      3 |
      |       2 | Белая гвардия                            |         1 |        1 | 540.50 |      5 |
      |       3 | Идиот                                    |         2 |        1 | 460.00 |     10 |
      |       4 | Братья Карамазовы                        |         2 |        1 | 799.01 |      2 |
      |       5 | Игрок                                    |         2 |        1 | 480.50 |     10 |
      |       6 | Стихотворения и поэмы                    |         3 |        2 | 650.00 |     15 |
      |       7 | Черный человек                           |         3 |        2 | 570.20 |      6 |
      |       8 | Лирика                                   |         4 |        2 | 518.99 |      2 |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      8 rows in set (0.00 sec)
  mysql> SELECT * FROM buy_book;
      +-------------+--------+---------+--------+
      | buy_book_id | buy_id | book_id | amount |
      +-------------+--------+---------+--------+
      |           1 |      1 |       1 |      1 |
      |           2 |      1 |       7 |      2 |
      |           3 |      1 |       3 |      1 |
      |           4 |      2 |       8 |      2 |
      |           5 |      3 |       3 |      2 |
      |           6 |      3 |       2 |      1 |
      |           7 |      3 |       1 |      1 |
      |           8 |      4 |       5 |      1 |
      +-------------+--------+---------+--------+
      8 rows in set (0.01 sec)
  mysql> SELECT * FROM buy;
      +--------+------------------------------------------------------------------------+-----------+
      | buy_id | buy_description                                                        | client_id |
      +--------+------------------------------------------------------------------------+-----------+
      |      1 | Доставка только вечером                                                |         1 |
      |      2 | NULL                                                                   |         3 |
      |      3 | Упаковать каждую книгу по отдельности                                  |         2 |
      |      4 | NULL                                                                   |         1 |
      +--------+------------------------------------------------------------------------+-----------+
      4 rows in set (0.00 sec)
  mysql> SELECT * FROM buy_step;
      +-------------+--------+---------+---------------+---------------+
      | buy_step_id | buy_id | step_id | date_step_beg | date_step_end |
      +-------------+--------+---------+---------------+---------------+
      |           1 |      1 |       1 | 2020-02-20    | 2020-02-20    |
      |           2 |      1 |       2 | 2020-02-20    | 2020-02-21    |
      |           3 |      1 |       3 | 2020-02-22    | 2020-03-07    |
      |           4 |      1 |       4 | 2020-03-08    | 2020-03-08    |
      |           5 |      2 |       1 | 2020-02-28    | 2020-02-28    |
      |           6 |      2 |       2 | 2020-02-29    | 2020-03-01    |
      |           7 |      2 |       3 | 2020-03-02    | NULL          |
      |           8 |      2 |       4 | NULL          | NULL          |
      |           9 |      3 |       1 | 2020-03-05    | 2020-03-05    |
      |          10 |      3 |       2 | 2020-03-05    | 2020-03-06    |
      |          11 |      3 |       3 | 2020-03-06    | 2020-03-10    |
      |          12 |      3 |       4 | 2020-03-11    | NULL          |
      |          13 |      4 |       1 | 2020-03-20    | NULL          |
      |          14 |      4 |       2 | NULL          | NULL          |
      |          15 |      4 |       3 | NULL          | NULL          |
      |          16 |      4 |       4 | NULL          | NULL          |
      +-------------+--------+---------+---------------+---------------+
      16 rows in set (0.00 sec)
  mysql> SELECT * FROM step;
      +---------+--------------------------------+
      | step_id | name_step                      |
      +---------+--------------------------------+
      |       1 | Оплата                         |
      |       2 | Упаковка                       |
      |       3 | Транспортировка                |
      |       4 | Доставка                       |
      +---------+--------------------------------+
      4 rows in set (0.00 sec)
  mysql> SELECT YEAR(date_payment) AS Год,
  MONTHNAME(date_payment) AS Месяц,
  SUM(ROUND(buy_archive.amount * buy_archive.price,2)) AS Сумма
  FROM buy_archive
  GROUP BY 1, 2
  UNION ALL
  SELECT YEAR(buy_step.date_step_end) AS Год,
  MONTHNAME(buy_step.date_step_end) AS Месяц,
  SUM(round(buy_book.amount*book.price,2)) AS Сумма
  FROM book
  INNER JOIN buy_book USING(book_id)
  INNER JOIN buy USING(buy_id)
  INNER JOIN buy_step USING(buy_id)
  INNER JOIN step USING(step_id)
  WHERE date_step_end IS NOT NULL AND name_step = "Оплата"
  GROUP BY 1, 2
  ORDER BY 2, 1;
      +--------+------------+------------+
      | Год    | Месяц      | Сумма      |
      +--------+------------+------------+
      |   2019 | February   |    5626.30 |
      |   2020 | February   |    3309.37 |
      |   2019 | March      |    6857.50 |
      |   2020 | March      |    2131.49 |
      +--------+------------+------------+
      4 rows in set (0.01 sec)
  Task:
  Для каждой отдельной книги необходимо вывести информацию о количестве проданных экземпляров и их стоимости за текущий и предыдущий год . Вычисляемые столбцы назвать Количество и Сумма. Информацию отсортировать по убыванию стоимости.
  Информация о продажах прошлого года хранится в таблице buy_archive
  Decision:
  mysql> SELECT title, SUM(Количество) AS Количество, SUM(Сумма) AS Сумма
  FROM (
      SELECT book.title, SUM(buy_book.amount) AS Количество, SUM(book.price*buy_book.amount) AS Сумма
      FROM buy_book
      INNER JOIN book USING (book_id)
      INNER JOIN buy USING(buy_id)
      INNER JOIN buy_step USING(buy_id)
      INNER JOIN step USING(step_id)
      WHERE name_step ='Оплата' AND date_step_end IS NOT NULL
      GROUP BY book.title
      UNION ALL
      SELECT book.title, SUM(buy_archive.amount) AS Количество, SUM(buy_archive.price*buy_archive.amount) AS Сумма
      FROM buy_archive
      INNER JOIN book USING (book_id)
      GROUP BY book.title
  ) AS qwert
  GROUP BY title
  ORDER BY Сумма DESC;
      +------------------------------------------+----------------------+------------+
      | title                                    | Количество           | Сумма      |
      +------------------------------------------+----------------------+------------+
      | Братья Карамазовы                        |                    8 |    6247.20 |
      | Мастер и Маргарита                       |                    6 |    4024.38 |
      | Идиот                                    |                    5 |    2281.80 |
      | Белая гвардия                            |                    3 |    1581.10 |
      | Черный человек                           |                    2 |    1140.40 |
      | Лирика                                   |                    2 |    1037.98 |
      | Игрок                                    |                    2 |     961.80 |
      | Стихотворения и поэмы                    |                    1 |     650.00 |
      +------------------------------------------+----------------------+------------+
      8 rows in set (0.01 sec)
  Task:
  Включить нового человека в таблицу с клиентами. Его имя Попов Илья, его email popov@test, проживает он в Москве.
  Decision:
  mysql> SELECT * FROM client;
      +-----------+-------------------------------+---------+----------------+
      | client_id | name_client                   | city_id | email          |
      +-----------+-------------------------------+---------+----------------+
      |         1 | Баранов Павел                 |       3 | baranov@test   |
      |         2 | Абрамова Катя                 |       1 | abramova@test  |
      |         3 | Семенонов Иван                |       2 | semenov@test   |
      |         4 | Яковлева Галина               |       1 | yakovleva@test |
      +-----------+-------------------------------+---------+----------------+
      4 rows in set (0.00 sec)
  mysql> SELECT * FROM city;
      +---------+-------------------------------+---------------+
      | city_id | name_city                     | days_delivery |
      +---------+-------------------------------+---------------+
      |       1 | Москва                        |             5 |
      |       2 | Санкт-Петербург               |             3 |
      |       3 | Владивосток                   |            12 |
      +---------+-------------------------------+---------------+
      3 rows in set (0.00 sec)
  mysql> INSERT INTO client (name_client, city_id, email)
  SELECT 'Попов Илья', city_id, 'popov@test'
  FROM city
  WHERE name_city='Москва';
      Query OK, 1 row affected (0.30 sec)
      Records: 1  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM client;
      +-----------+-------------------------------+---------+----------------+
      | client_id | name_client                   | city_id | email          |
      +-----------+-------------------------------+---------+----------------+
      |         1 | Баранов Павел                 |       3 | baranov@test   |
      |         2 | Абрамова Катя                 |       1 | abramova@test  |
      |         3 | Семенонов Иван                |       2 | semenov@test   |
      |         4 | Яковлева Галина               |       1 | yakovleva@test |
      |         5 | Попов Илья                    |       1 | popov@test     |
      +-----------+-------------------------------+---------+----------------+
      5 rows in set (0.00 sec)
  Task:
  Создать новый заказ для Попова Ильи. Его комментарий для заказа: Связаться со мной по вопросу доставки».
  Decision:
  mysql> SELECT * FROM buy;
      +--------+------------------------------------------------------------------------+-----------+
      | buy_id | buy_description                                                        | client_id |
      +--------+------------------------------------------------------------------------+-----------+
      |      1 | Доставка только вечером                                                |         1 |
      |      2 | NULL                                                                   |         3 |
      |      3 | Упаковать каждую книгу по отдельности                                  |         2 |
      |      4 | NULL                                                                   |         1 |
      +--------+------------------------------------------------------------------------+-----------+
      4 rows in set (0.01 sec)
  mysql> SELECT * FROM client;
      +-----------+-------------------------------+---------+----------------+
      | client_id | name_client                   | city_id | email          |
      +-----------+-------------------------------+---------+----------------+
      |         1 | Баранов Павел                 |       3 | baranov@test   |
      |         2 | Абрамова Катя                 |       1 | abramova@test  |
      |         3 | Семенонов Иван                |       2 | semenov@test   |
      |         4 | Яковлева Галина               |       1 | yakovleva@test |
      |         5 | Попов Илья                    |       1 | popov@test     |
      +-----------+-------------------------------+---------+----------------+
      5 rows in set (0.00 sec)
  mysql> INSERT INTO buy (buy_description, client_id)
  SELECT 'Связаться со мной по вопросу доставки', client_id
  FROM client
  WHERE name_client='Попов Илья';
      Query OK, 1 row affected (0.14 sec)
      Records: 1  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM buy;
  +--------+------------------------------------------------------------------------+-----------+
      | buy_id | buy_description                                                        | client_id |
      +--------+------------------------------------------------------------------------+-----------+
      |      1 | Доставка только вечером                                                |         1 |
      |      2 | NULL                                                                   |         3 |
      |      3 | Упаковать каждую книгу по отдельности                                  |         2 |
      |      4 | NULL                                                                   |         1 |
      |      5 | Связаться со мной по вопросу доставки                                  |         5 |
      +--------+------------------------------------------------------------------------+-----------+
      5 rows in set (0.00 sec)
  Task:
  В таблицу buy_book добавить заказ с номером 5. Этот заказ должен содержать книгу Пастернака Лирика» в количестве двух экземпляров и книгу Булгакова Белая гвардия» в одном экземпляре.
  Decision:
  mysql> SELECT * FROM buy_book;
  LECT * FROM book;
  SELECT * FROM author;
      +-------------+--------+---------+--------+
      | buy_book_id | buy_id | book_id | amount |
      +-------------+--------+---------+--------+
      |           1 |      1 |       1 |      1 |
      |           2 |      1 |       7 |      2 |
      |           3 |      1 |       3 |      1 |
      |           4 |      2 |       8 |      2 |
      |           5 |      3 |       3 |      2 |
      |           6 |      3 |       2 |      1 |
      |           7 |      3 |       1 |      1 |
      |           8 |      4 |       5 |      1 |
      +-------------+--------+---------+--------+
      8 rows in set (0.01 sec)
  mysql> SELECT * FROM book;
      +---------+------------------------------------------+-----------+----------+--------+--------+
      | book_id | title                                    | author_id | genre_id | price  | amount |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      |       1 | Мастер и Маргарита                       |         1 |        1 | 670.99 |      3 |
      |       2 | Белая гвардия                            |         1 |        1 | 540.50 |      5 |
      |       3 | Идиот                                    |         2 |        1 | 460.00 |     10 |
      |       4 | Братья Карамазовы                        |         2 |        1 | 799.01 |      2 |
      |       5 | Игрок                                    |         2 |        1 | 480.50 |     10 |
      |       6 | Стихотворения и поэмы                    |         3 |        2 | 650.00 |     15 |
      |       7 | Черный человек                           |         3 |        2 | 570.20 |      6 |
      |       8 | Лирика                                   |         4 |        2 | 518.99 |      2 |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      8 rows in set (0.01 sec)
  mysql> SELECT * FROM author;
      +-----------+-------------------------------+
      | author_id | name_author                   |
      +-----------+-------------------------------+
      |         1 | Булгаков М.А.                 |
      |         2 | Достоевский Ф.М.              |
      |         3 | Есенин С.А.                   |
      |         4 | Пастернак Б.Л.                |
      |         5 | Лермонтов М.Ю.                |
      +-----------+-------------------------------+
      5 rows in set (0.01 sec)
  mysql> SELECT * FROM buy;
      +--------+------------------------------------------------------------------------+-----------+
      | buy_id | buy_description                                                        | client_id |
      +--------+------------------------------------------------------------------------+-----------+
      |      1 | Доставка только вечером                                                |         1 |
      |      2 | NULL                                                                   |         3 |
      |      3 | Упаковать каждую книгу по отдельности                                  |         2 |
      |      4 | NULL                                                                   |         1 |
      |      5 | Связаться со мной по вопросу доставки                                  |         5 |
      +--------+------------------------------------------------------------------------+-----------+
      5 rows in set (0.00 sec)
  mysql> INSERT INTO buy_book(buy_id, book_id, amount)
  SELECT 5, book_id, 2
  FROM book
  WHERE title='Лирика' AND author_id=(
      SELECT author_id
      FROM author
      WHERE name_author='Пастернак Б.Л.')
  UNION
  SELECT 5, book_id, 1
  FROM book
  WHERE title='Белая гвардия' AND author_id=(
      SELECT author_id
      FROM author
      WHERE name_author='Булгаков М.А.');
      Query OK, 1 row affected (0.18 sec)
      Records: 1  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM buy_book;
      +-------------+--------+---------+--------+
      | buy_book_id | buy_id | book_id | amount |
      +-------------+--------+---------+--------+
      |           1 |      1 |       1 |      1 |
      |           2 |      1 |       7 |      2 |
      |           3 |      1 |       3 |      1 |
      |           4 |      2 |       8 |      2 |
      |           5 |      3 |       3 |      2 |
      |           6 |      3 |       2 |      1 |
      |           7 |      3 |       1 |      1 |
      |           8 |      4 |       5 |      1 |
      |           9 |      5 |       8 |      2 |
      +-------------+--------+---------+--------+
      9 rows in set (0.01 sec)
  mysql> INSERT INTO buy_book(buy_id, book_id, amount)
  VALUES (5, 2, 1);
      Query OK, 1 row affected (0.15 sec)
  mysql> SELECT * FROM buy_book;
      +-------------+--------+---------+--------+
      | buy_book_id | buy_id | book_id | amount |
      +-------------+--------+---------+--------+
      |           1 |      1 |       1 |      1 |
      |           2 |      1 |       7 |      2 |
      |           3 |      1 |       3 |      1 |
      |           4 |      2 |       8 |      2 |
      |           5 |      3 |       3 |      2 |
      |           6 |      3 |       2 |      1 |
      |           7 |      3 |       1 |      1 |
      |           8 |      4 |       5 |      1 |
      |           9 |      5 |       8 |      2 |
      |          10 |      5 |       2 |      1 |
      +-------------+--------+---------+--------+
      10 rows in set (0.00 sec)
  Task:
  Количество тех книг на складе, которые были включены в заказ с номером 5, уменьшить на то количество, которое в заказе с номером 5  указано.
  Decision:
  mysql> SELECT * FROM buy_book;
      +-------------+--------+---------+--------+
      | buy_book_id | buy_id | book_id | amount |
      +-------------+--------+---------+--------+
      |           1 |      1 |       1 |      1 |
      |           2 |      1 |       7 |      2 |
      |           3 |      1 |       3 |      1 |
      |           4 |      2 |       8 |      2 |
      |           5 |      3 |       3 |      2 |
      |           6 |      3 |       2 |      1 |
      |           7 |      3 |       1 |      1 |
      |           8 |      4 |       5 |      1 |
      |           9 |      5 |       8 |      2 |
      |          10 |      5 |       2 |      1 |
      +-------------+--------+---------+--------+
      10 rows in set (0.00 sec)
  mysql> SELECT book_id, amount FROM book;
      +---------+--------+
      | book_id | amount |
      +---------+--------+
      |       1 |      3 |
      |       2 |      5 |
      |       3 |     10 |
      |       4 |      2 |
      |       5 |     10 |
      |       6 |     15 |
      |       7 |      6 |
      |       8 |      2 |
      +---------+--------+
      8 rows in set (0.00 sec)
  mysql> UPDATE book,buy_book
  SET book.amount = book.amount - buy_book.amount
  WHERE buy_book.buy_id=5 AND book.book_id = buy_book.book_id;
      Query OK, 2 rows affected (0.19 sec)
      Rows matched: 2  Changed: 2  Warnings: 0
  mysql> SELECT book_id, amount FROM book;
      +---------+--------+
      | book_id | amount |
      +---------+--------+
      |       1 |      3 |
      |       2 |      4 |
      |       3 |     10 |
      |       4 |      2 |
      |       5 |     10 |
      |       6 |     15 |
      |       7 |      6 |
      |       8 |      0 |
      +---------+--------+
      8 rows in set (0.00 sec)
  Task:
  Создать счет (таблицу buy_pay) на оплату заказа с номером 5, в который включить название книг, их автора, цену, количество заказанных книг и  стоимость. Последний столбец назвать Стоимость. Информацию в таблицу занести в отсортированном по названиям книг виде.
  Decision:
  mysql> SELECT book_id, title, author_id, price FROM book;
      +---------+------------------------------------------+-----------+--------+
      | book_id | title                                    | author_id | price  |
      +---------+------------------------------------------+-----------+--------+
      |       1 | Мастер и Маргарита                       |         1 | 670.99 |
      |       2 | Белая гвардия                            |         1 | 540.50 |
      |       3 | Идиот                                    |         2 | 460.00 |
      |       4 | Братья Карамазовы                        |         2 | 799.01 |
      |       5 | Игрок                                    |         2 | 480.50 |
      |       6 | Стихотворения и поэмы                    |         3 | 650.00 |
      |       7 | Черный человек                           |         3 | 570.20 |
      |       8 | Лирика                                   |         4 | 518.99 |
      +---------+------------------------------------------+-----------+--------+
      8 rows in set (0.00 sec)
  mysql> SELECT * FROM author;
      +-----------+-------------------------------+
      | author_id | name_author                   |
      +-----------+-------------------------------+
      |         1 | Булгаков М.А.                 |
      |         2 | Достоевский Ф.М.              |
      |         3 | Есенин С.А.                   |
      |         4 | Пастернак Б.Л.                |
      |         5 | Лермонтов М.Ю.                |
      +-----------+-------------------------------+
      5 rows in set (0.00 sec)
  mysql> SELECT * FROM buy_book;
      +-------------+--------+---------+--------+
      | buy_book_id | buy_id | book_id | amount |
      +-------------+--------+---------+--------+
      |           1 |      1 |       1 |      1 |
      |           2 |      1 |       7 |      2 |
      |           3 |      1 |       3 |      1 |
      |           4 |      2 |       8 |      2 |
      |           5 |      3 |       3 |      2 |
      |           6 |      3 |       2 |      1 |
      |           7 |      3 |       1 |      1 |
      |           8 |      4 |       5 |      1 |
      |           9 |      5 |       8 |      2 |
      |          10 |      5 |       2 |      1 |
      +-------------+--------+---------+--------+
      10 rows in set (0.00 sec)
  mysql> CREATE TABLE buy_pay AS
  SELECT book.title, author.name_author, price, buy_book.amount, ROUND(buy_book.amount*price,2) AS 'Стоимость'
  FROM book
  INNER JOIN author
  ON book.author_id=author.author_id
  INNER JOIN buy_book
  ON book.book_id =buy_book.book_id
  WHERE buy_book.buy_id=5
  ORDER BY book.title;
      Query OK, 2 rows affected (2.35 sec)
      Records: 2  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM buy_pay;
      +----------------------------+---------------------------+--------+--------+--------------------+
      | title                      | name_author               | price  | amount | Стоимость          |
      +----------------------------+---------------------------+--------+--------+--------------------+
      | Белая гвардия              | Булгаков М.А.             | 540.50 |      1 |             540.50 |
      | Лирика                     | Пастернак Б.Л.            | 518.99 |      2 |            1037.98 |
      +----------------------------+---------------------------+--------+--------+--------------------+
      2 rows in set (0.00 sec)
  Task:
  Создать общий счет (таблицу buy_pay) на оплату заказа с номером 5. Куда включить номер заказа, количество книг в заказе (название столбца Количество) и его общую стоимость (название столбца Итого). Для решения используйте ОДИН запрос.
  Decision:
  mysql> SELECT * FROM buy_book;
      +-------------+--------+---------+--------+
      | buy_book_id | buy_id | book_id | amount |
      +-------------+--------+---------+--------+
      |           1 |      1 |       1 |      1 |
      |           2 |      1 |       7 |      2 |
      |           3 |      1 |       3 |      1 |
      |           4 |      2 |       8 |      2 |
      |           5 |      3 |       3 |      2 |
      |           6 |      3 |       2 |      1 |
      |           7 |      3 |       1 |      1 |
      |           8 |      4 |       5 |      1 |
      |           9 |      5 |       8 |      2 |
      |          10 |      5 |       2 |      1 |
      +-------------+--------+---------+--------+
      10 rows in set (0.00 sec)
  mysql> SELECT book_id, price FROM book;
      +---------+--------+
      | book_id | price  |
      +---------+--------+
      |       1 | 670.99 |
      |       2 | 540.50 |
      |       3 | 460.00 |
      |       4 | 799.01 |
      |       5 | 480.50 |
      |       6 | 650.00 |
      |       7 | 570.20 |
      |       8 | 518.99 |
      +---------+--------+
      8 rows in set (0.00 sec)
  mysql> CREATE TABLE buy_pay1 AS SELECT buy_book.buy_id, SUM(buy_book.amount) AS Количество, SUM(book.price*buy_book.amou
  nt) AS Итого FROM buy_book INNER JOIN book  USING(book_id) WHERE buy_id=5;
      Query OK, 1 row affected (1.63 sec)
      Records: 1  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM buy_pay1;
      +--------+----------------------+------------+
      | buy_id | Количество           | Итого      |
      +--------+----------------------+------------+
      |      5 |                    3 |    1578.48 |
      +--------+----------------------+------------+
      1 row in set (0.00 sec)
  Task:
  В таблицу buy_step для заказа с номером 5 включить все этапы из таблицы step, которые должен пройти этот заказ. В столбцы date_step_beg и date_step_end всех записей занести Null.
  Decision:
  mysql> SELECT * FROM buy_step;
      +-------------+--------+---------+---------------+---------------+
      | buy_step_id | buy_id | step_id | date_step_beg | date_step_end |
      +-------------+--------+---------+---------------+---------------+
      |           1 |      1 |       1 | 2020-02-20    | 2020-02-20    |
      |           2 |      1 |       2 | 2020-02-20    | 2020-02-21    |
      |           3 |      1 |       3 | 2020-02-22    | 2020-03-07    |
      |           4 |      1 |       4 | 2020-03-08    | 2020-03-08    |
      |           5 |      2 |       1 | 2020-02-28    | 2020-02-28    |
      |           6 |      2 |       2 | 2020-02-29    | 2020-03-01    |
      |           7 |      2 |       3 | 2020-03-02    | NULL          |
      |           8 |      2 |       4 | NULL          | NULL          |
      |           9 |      3 |       1 | 2020-03-05    | 2020-03-05    |
      |          10 |      3 |       2 | 2020-03-05    | 2020-03-06    |
      |          11 |      3 |       3 | 2020-03-06    | 2020-03-10    |
      |          12 |      3 |       4 | 2020-03-11    | NULL          |
      |          13 |      4 |       1 | 2020-03-20    | NULL          |
      |          14 |      4 |       2 | NULL          | NULL          |
      |          15 |      4 |       3 | NULL          | NULL          |
      |          16 |      4 |       4 | NULL          | NULL          |
      +-------------+--------+---------+---------------+---------------+
      16 rows in set (0.02 sec)
  mysql> SELECT * FROM step;
      +---------+--------------------------------+
      | step_id | name_step                      |
      +---------+--------------------------------+
      |       1 | Оплата                         |
      |       2 | Упаковка                       |
      |       3 | Транспортировка                |
      |       4 | Доставка                       |
      +---------+--------------------------------+
      4 rows in set (0.01 sec)
  mysql> SELECT * FROM buy;
      +--------+------------------------------------------------------------------------+-----------+
      | buy_id | buy_description                                                        | client_id |
      +--------+------------------------------------------------------------------------+-----------+
      |      1 | Доставка только вечером                                                |         1 |
      |      2 | NULL                                                                   |         3 |
      |      3 | Упаковать каждую книгу по отдельности                                  |         2 |
      |      4 | NULL                                                                   |         1 |
      |      5 | Связаться со мной по вопросу доставки                                  |         5 |
      +--------+------------------------------------------------------------------------+-----------+
      5 rows in set (0.00 sec)
  mysql> INSERT INTO buy_step(buy_id, step_id)
  SELECT buy_id, step_id
  FROM buy
  CROSS JOIN step
  WHERE buy_id=5;
      Query OK, 4 rows affected (0.21 sec)
      Records: 4  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM buy_step;
      +-------------+--------+---------+---------------+---------------+
      | buy_step_id | buy_id | step_id | date_step_beg | date_step_end |
      +-------------+--------+---------+---------------+---------------+
      |           1 |      1 |       1 | 2020-02-20    | 2020-02-20    |
      |           2 |      1 |       2 | 2020-02-20    | 2020-02-21    |
      |           3 |      1 |       3 | 2020-02-22    | 2020-03-07    |
      |           4 |      1 |       4 | 2020-03-08    | 2020-03-08    |
      |           5 |      2 |       1 | 2020-02-28    | 2020-02-28    |
      |           6 |      2 |       2 | 2020-02-29    | 2020-03-01    |
      |           7 |      2 |       3 | 2020-03-02    | NULL          |
      |           8 |      2 |       4 | NULL          | NULL          |
      |           9 |      3 |       1 | 2020-03-05    | 2020-03-05    |
      |          10 |      3 |       2 | 2020-03-05    | 2020-03-06    |
      |          11 |      3 |       3 | 2020-03-06    | 2020-03-10    |
      |          12 |      3 |       4 | 2020-03-11    | NULL          |
      |          13 |      4 |       1 | 2020-03-20    | NULL          |
      |          14 |      4 |       2 | NULL          | NULL          |
      |          15 |      4 |       3 | NULL          | NULL          |
      |          16 |      4 |       4 | NULL          | NULL          |
      |          17 |      5 |       1 | NULL          | NULL          |
      |          18 |      5 |       2 | NULL          | NULL          |
      |          19 |      5 |       3 | NULL          | NULL          |
      |          20 |      5 |       4 | NULL          | NULL          |
      +-------------+--------+---------+---------------+---------------+
      20 rows in set (0.00 sec)
  Task:
  В таблицу buy_step занести дату 12.04.2020 выставления счета на оплату заказа с номером 5.
  Правильнее было бы занести не конкретную, а текущую дату. Это можно сделать с помощью функции Now(). Но при этом в разные дни будут вставляться разная дата, и задание нельзя будет проверить, поэтому  вставим дату 12.04.2020.
  Decision:
  mysql> SELECT * FROM buy_step;
      +-------------+--------+---------+---------------+---------------+
      | buy_step_id | buy_id | step_id | date_step_beg | date_step_end |
      +-------------+--------+---------+---------------+---------------+
      |           1 |      1 |       1 | 2020-02-20    | 2020-02-20    |
      |           2 |      1 |       2 | 2020-02-20    | 2020-02-21    |
      |           3 |      1 |       3 | 2020-02-22    | 2020-03-07    |
      |           4 |      1 |       4 | 2020-03-08    | 2020-03-08    |
      |           5 |      2 |       1 | 2020-02-28    | 2020-02-28    |
      |           6 |      2 |       2 | 2020-02-29    | 2020-03-01    |
      |           7 |      2 |       3 | 2020-03-02    | NULL          |
      |           8 |      2 |       4 | NULL          | NULL          |
      |           9 |      3 |       1 | 2020-03-05    | 2020-03-05    |
      |          10 |      3 |       2 | 2020-03-05    | 2020-03-06    |
      |          11 |      3 |       3 | 2020-03-06    | 2020-03-10    |
      |          12 |      3 |       4 | 2020-03-11    | NULL          |
      |          13 |      4 |       1 | 2020-03-20    | NULL          |
      |          14 |      4 |       2 | NULL          | NULL          |
      |          15 |      4 |       3 | NULL          | NULL          |
      |          16 |      4 |       4 | NULL          | NULL          |
      |          17 |      5 |       1 | NULL          | NULL          |
      |          18 |      5 |       2 | NULL          | NULL          |
      |          19 |      5 |       3 | NULL          | NULL          |
      |          20 |      5 |       4 | NULL          | NULL          |
      +-------------+--------+---------+---------------+---------------+
      20 rows in set (0.01 sec)
  mysql> SELECT * FROM step;
      +---------+--------------------------------+
      | step_id | name_step                      |
      +---------+--------------------------------+
      |       1 | Оплата                         |
      |       2 | Упаковка                       |
      |       3 | Транспортировка                |
      |       4 | Доставка                       |
      +---------+--------------------------------+
      4 rows in set (0.00 sec)
  mysql> UPDATE buy_step
  INNER JOIN step
  USING(step_id)
  SET date_step_beg = '2020-04-12'
  WHERE buy_step.buy_id=5 AND step.name_step='Оплата';
      Query OK, 1 row affected (0.30 sec)
      Rows matched: 1  Changed: 1  Warnings: 0
  mysql> SELECT * FROM buy_step;
      +-------------+--------+---------+---------------+---------------+
      | buy_step_id | buy_id | step_id | date_step_beg | date_step_end |
      +-------------+--------+---------+---------------+---------------+
      |           1 |      1 |       1 | 2020-02-20    | 2020-02-20    |
      |           2 |      1 |       2 | 2020-02-20    | 2020-02-21    |
      |           3 |      1 |       3 | 2020-02-22    | 2020-03-07    |
      |           4 |      1 |       4 | 2020-03-08    | 2020-03-08    |
      |           5 |      2 |       1 | 2020-02-28    | 2020-02-28    |
      |           6 |      2 |       2 | 2020-02-29    | 2020-03-01    |
      |           7 |      2 |       3 | 2020-03-02    | NULL          |
      |           8 |      2 |       4 | NULL          | NULL          |
      |           9 |      3 |       1 | 2020-03-05    | 2020-03-05    |
      |          10 |      3 |       2 | 2020-03-05    | 2020-03-06    |
      |          11 |      3 |       3 | 2020-03-06    | 2020-03-10    |
      |          12 |      3 |       4 | 2020-03-11    | NULL          |
      |          13 |      4 |       1 | 2020-03-20    | NULL          |
      |          14 |      4 |       2 | NULL          | NULL          |
      |          15 |      4 |       3 | NULL          | NULL          |
      |          16 |      4 |       4 | NULL          | NULL          |
      |          17 |      5 |       1 | 2020-04-12    | NULL          |
      |          18 |      5 |       2 | NULL          | NULL          |
      |          19 |      5 |       3 | NULL          | NULL          |
      |          20 |      5 |       4 | NULL          | NULL          |
      +-------------+--------+---------+---------------+---------------+
      20 rows in set (0.01 sec)
  Task:
  Завершить этап Оплата» для заказа с номером 5, вставив в столбец date_step_end дату 13.04.2020, и начать следующий этап (Упаковка»), задав в столбце date_step_beg для этого этапа ту же дату.
  Реализовать два запроса для завершения этапа и начала следующего. Они должны быть записаны в общем виде, чтобы его можно было применять для любых этапов, изменив только текущий этап. Для примера пусть это будет этап Оплата».
  Decision:
  mysql> SELECT * FROM buy_step;
      +-------------+--------+---------+---------------+---------------+
      | buy_step_id | buy_id | step_id | date_step_beg | date_step_end |
      +-------------+--------+---------+---------------+---------------+
      |           1 |      1 |       1 | 2020-02-20    | 2020-02-20    |
      |           2 |      1 |       2 | 2020-02-20    | 2020-02-21    |
      |           3 |      1 |       3 | 2020-02-22    | 2020-03-07    |
      |           4 |      1 |       4 | 2020-03-08    | 2020-03-08    |
      |           5 |      2 |       1 | 2020-02-28    | 2020-02-28    |
      |           6 |      2 |       2 | 2020-02-29    | 2020-03-01    |
      |           7 |      2 |       3 | 2020-03-02    | NULL          |
      |           8 |      2 |       4 | NULL          | NULL          |
      |           9 |      3 |       1 | 2020-03-05    | 2020-03-05    |
      |          10 |      3 |       2 | 2020-03-05    | 2020-03-06    |
      |          11 |      3 |       3 | 2020-03-06    | 2020-03-10    |
      |          12 |      3 |       4 | 2020-03-11    | NULL          |
      |          13 |      4 |       1 | 2020-03-20    | NULL          |
      |          14 |      4 |       2 | NULL          | NULL          |
      |          15 |      4 |       3 | NULL          | NULL          |
      |          16 |      4 |       4 | NULL          | NULL          |
      |          17 |      5 |       1 | 2020-04-12    | NULL          |
      |          18 |      5 |       2 | NULL          | NULL          |
      |          19 |      5 |       3 | NULL          | NULL          |
      |          20 |      5 |       4 | NULL          | NULL          |
      +-------------+--------+---------+---------------+---------------+
      20 rows in set (0.00 sec)
  mysql> SELECT * FROM step;
      +---------+--------------------------------+
      | step_id | name_step                      |
      +---------+--------------------------------+
      |       1 | Оплата                         |
      |       2 | Упаковка                       |
      |       3 | Транспортировка                |
      |       4 | Доставка                       |
      +---------+--------------------------------+
      4 rows in set (0.00 sec)
  mysql> UPDATE buy_step
  NNERINNER JOIN step
  G(stepUSING(step_id)
  SET date_step_end='2020-04-13'
  WHERE step.name_step='Оплата' AND buy_step.buy_id=5;
      Query OK, 1 row affected (0.26 sec)
      Rows matched: 1  Changed: 1  Warnings: 0
  mysql> UPDATE buy_step
  INNER JOIN step
  USING(step_id)
  SET date_step_beg='2020-04-13'
  WHERE step.name_step='Упаковка' AND buy_step.buy_id=5;
      Query OK, 1 row affected (0.22 sec)
      Rows matched: 1  Changed: 1  Warnings: 0
  mysql> SELECT * FROM buy_step;
      +-------------+--------+---------+---------------+---------------+
      | buy_step_id | buy_id | step_id | date_step_beg | date_step_end |
      +-------------+--------+---------+---------------+---------------+
      |           1 |      1 |       1 | 2020-02-20    | 2020-02-20    |
      |           2 |      1 |       2 | 2020-02-20    | 2020-02-21    |
      |           3 |      1 |       3 | 2020-02-22    | 2020-03-07    |
      |           4 |      1 |       4 | 2020-03-08    | 2020-03-08    |
      |           5 |      2 |       1 | 2020-02-28    | 2020-02-28    |
      |           6 |      2 |       2 | 2020-02-29    | 2020-03-01    |
      |           7 |      2 |       3 | 2020-03-02    | NULL          |
      |           8 |      2 |       4 | NULL          | NULL          |
      |           9 |      3 |       1 | 2020-03-05    | 2020-03-05    |
      |          10 |      3 |       2 | 2020-03-05    | 2020-03-06    |
      |          11 |      3 |       3 | 2020-03-06    | 2020-03-10    |
      |          12 |      3 |       4 | 2020-03-11    | NULL          |
      |          13 |      4 |       1 | 2020-03-20    | NULL          |
      |          14 |      4 |       2 | NULL          | NULL          |
      |          15 |      4 |       3 | NULL          | NULL          |
      |          16 |      4 |       4 | NULL          | NULL          |
      |          17 |      5 |       1 | 2020-04-12    | 2020-04-13    |
      |          18 |      5 |       2 | 2020-04-13    | NULL          |
      |          19 |      5 |       3 | NULL          | NULL          |
      |          20 |      5 |       4 | NULL          | NULL          |
      +-------------+--------+---------+---------------+---------------+
      20 rows in set (0.00 sec)
  Task:
  Провести аналитику по трем ценовым категориям (до 600 руб, от 600 руб до 700 руб, свыше 700 руб) и вывести среднюю цену  книги, общую стоимость остатков книг  в этой ценовой позиции и количество позиций. Среднюю цену и стоимость округлить до двух знаков после запятой. Информацию отсортировать по возрастанию нижней границы ценовой категории.
  Для реализации этого запроса создадим вспомогательную таблицу stat, в которой будут храниться ценовые категории (первая ценовая категория - цены  больше или равны 0 и меньше 600, вторая - больше или равны 600 и меньше 700 и т.д.):
  beg_range    end_range
  int            int
  0            600
  600            700
  700            10000
  Decision:
  MariaDB [OnlineBookStore]> CREATE TABLE stat (beg_range INT, end_range INT);
      Query OK, 0 rows affected (0.010 sec)
  MariaDB [OnlineBookStore]> INSERT INTO stat (beg_range, end_range)
      -> VALUES (0, 600),(600,700),(700,10000);
  Query OK, 3 rows affected (0.003 sec)
  Records: 3  Duplicates: 0  Warnings: 0
  MariaDB [OnlineBookStore]> SELECT * FROM stat;
      +-----------+-----------+
      | beg_range | end_range |
      +-----------+-----------+
      |         0 |       600 |
      |       600 |       700 |
      |       700 |     10000 |
      +-----------+-----------+
      3 rows in set (0.001 sec)
  MariaDB [OnlineBookStore]> SELECT beg_range,
      ->     end_range,
      ->     ROUND(AVG(price), 2) AS Средняя_цена,
      ->     SUM(price * amount) AS Стоимость,
      ->     COUNT(amount) AS Количество
      -> FROM( SELECT beg_range,
      ->     end_range,
      ->     price,
      ->     amount
      ->     FROM stat
      ->     JOIN book ON beg_range<price AND end_range>price
      ->     ) table1    
      -> GROUP BY beg_range, end_range
      -> ORDER BY beg_range;
  +-----------+-----------+-------------------------+--------------------+----------------------+
  | beg_range | end_range | Средняя_цена            | Стоимость          | Количество           |
  +-----------+-----------+-------------------------+--------------------+----------------------+
  |         0 |       600 |                  514.04 |           14988.20 |                    5 |
  |       600 |       700 |                  660.50 |           11762.97 |                    2 |
  |       700 |     10000 |                  799.01 |            1598.02 |                    1 |
  +-----------+-----------+-------------------------+--------------------+----------------------+
  3 rows in set (0.003 sec)
  Task:
  Вывести всю информацию из таблицы book, упорядоченную по возрастанию длины названия книги.
  Decision:
  MariaDB [OnlineBookStore]> SELECT * FROM book
      -> ORDER BY LENGTH(title);
  +---------+------------------------------------------+-----------+----------+--------+--------+
  | book_id | title                                    | author_id | genre_id | price  | amount |
  +---------+------------------------------------------+-----------+----------+--------+--------+
  |       3 | Идиот                                    |         2 |        1 | 460.00 |     10 |
  |       5 | Игрок                                    |         2 |        1 | 480.50 |     10 |
  |       8 | Лирика                                   |         4 |        2 | 518.99 |      0 |
  |       2 | Белая гвардия                            |         1 |        1 | 540.50 |      4 |
  |       7 | Черный человек                           |         3 |        2 | 570.20 |      6 |
  |       4 | Братья Карамазовы                        |         2 |        1 | 799.01 |      2 |
  |       1 | Мастер и Маргарита                       |         1 |        1 | 670.99 |      3 |
  |       6 | Стихотворения и поэмы                    |         3 |        2 | 650.00 |     15 |
  +---------+------------------------------------------+-----------+----------+--------+--------+
  8 rows in set (0.001 sec)
  Task:
  Удалить из таблиц book и supplyкниги, цены которых заканчиваются на 99 копеек. Например, книга с ценой 670.99 должна быть удалена.
  Decision:
  MariaDB [OnlineBookStore]> CREATE TABLE supply (
      -> supply_id INT PRIMARY KEY AUTO_INCREMENT,
      -> title VARCHAR(50),
      -> author VARCHAR(30),
      -> price DECIMAL(8,2),
      -> amount INT)
      -> ENGINE=MyISAM CHARACTER SET=utf8mb4;
  Query OK, 0 rows affected (0.023 sec)
  MariaDB [OnlineBookStore]> INSERT INTO supply (title, author, price, amount)  
      -> VALUES ('Лирика', 'Пастернак Б.Л.', 518.99, 2),
      -> ('Черный человек', 'Есенин С.А.', 570.20, 6),
      -> ('Белая гвардия', 'Булгаков М.А.', 540.50, 7),
      -> ('Идиот', 'Достоевский Ф.М.', 360.80, 3);
  Query OK, 4 rows affected (0.002 sec)
  Records: 4  Duplicates: 0  Warnings: 0
  MariaDB [OnlineBookStore]> SELECT * FROM supply;
      +-----------+-----------------------------+-------------------------------+--------+--------+
      | supply_id | title                       | author                        | price  | amount |
      +-----------+-----------------------------+-------------------------------+--------+--------+
      |         1 | Лирика                      | Пастернак Б.Л.                | 518.99 |      2 |
      |         2 | Черный человек              | Есенин С.А.                   | 570.20 |      6 |
      |         3 | Белая гвардия               | Булгаков М.А.                 | 540.50 |      7 |
      |         4 | Идиот                       | Достоевский Ф.М.              | 360.80 |      3 |
      +-----------+-----------------------------+-------------------------------+--------+--------+
      4 rows in set (0.001 sec)
  MariaDB [OnlineBookStore]> SELECT * FROM book;
      +---------+------------------------------------------+-----------+----------+--------+--------+
      | book_id | title                                    | author_id | genre_id | price  | amount |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      |       1 | Мастер и Маргарита                       |         1 |        1 | 670.99 |      3 |
      |       2 | Белая гвардия                            |         1 |        1 | 540.50 |      4 |
      |       3 | Идиот                                    |         2 |        1 | 460.00 |     10 |
      |       4 | Братья Карамазовы                        |         2 |        1 | 799.01 |      2 |
      |       5 | Игрок                                    |         2 |        1 | 480.50 |     10 |
      |       6 | Стихотворения и поэмы                    |         3 |        2 | 650.00 |     15 |
      |       7 | Черный человек                           |         3 |        2 | 570.20 |      6 |
      |       8 | Лирика                                   |         4 |        2 | 518.99 |      0 |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      8 rows in set (0.001 sec)
  MariaDB [OnlineBookStore]> DELETE FROM supply
      -> WHERE price % 1 = 0.99;
  Query OK, 0 rows affected (0.001 sec)
  MariaDB [OnlineBookStore]> DELETE FROM book
      -> WHERE price % 1 = 0.99;
  Query OK, 0 rows affected (0.001 sec)
  Task:
  Снизить цены книг, цена которых больше 600 рублей, на 20%. Вывести информацию о книгах, скидку (столбец sale_20) и цену книги со скидкой (price_sale).  Результаты округлить до двух знаков после запятой. Для тех книг, на которые скидка не действует, в последних двух столбцах вывести символ  "-".  Отсортировать информацию сначала по фамилии автора, а потом по названию книги.
  Decision:
  MariaDB [OnlineBookStore]> SELECT * FROM book;
      +---------+-----------------------+------------------+--------+--------+
      | book_id | title                 | author           | price  | amount |
      +---------+-----------------------+------------------+--------+--------+
      | 1       | Мастер и Маргарита    | Булгаков М.А.    | 670.99 | 3      |
      | 2       | Белая гвардия         | Булгаков М.А.    | 540.50 | 5      |
      | 3       | Идиот                 | Достоевский Ф.М. | 460.00 | 10     |
      | 4       | Братья Карамазовы     | Достоевский Ф.М. | 799.01 | 3      |
      | 5       | Игрок                 | Достоевский Ф.М. | 480.50 | 10     |
      | 6       | Стихотворения и поэмы | Есенин С.А.      | 650.00 | 15     |
      +---------+-----------------------+------------------+--------+--------+
  MariaDB [OnlineBookStore]> SELECT author, title, price, amount,
      -> IF(price > 600, ROUND(price * 0.2, 2), '-') AS sale_20,
      -> IF(price > 600, ROUND(price * 0.8, 2),  '-') AS price_sale
      -> FROM book
      -> ORDER BY author, title;
  +------------------+-----------------------+--------+--------+---------+------------+
  | author           | title                 | price  | amount | sale_20 | price_sale |
  +------------------+-----------------------+--------+--------+---------+------------+
  | Булгаков М.А.    | Белая гвардия         | 540.50 | 5      | -       | -          |
  | Булгаков М.А.    | Мастер и Маргарита    | 670.99 | 3      | 134.20  | 536.79     |
  | Достоевский Ф.М. | Братья Карамазовы     | 799.01 | 3      | 159.80  | 639.21     |
  | Достоевский Ф.М. | Игрок                 | 480.50 | 10     | -       | -          |
  | Достоевский Ф.М. | Идиот                 | 460.00 | 10     | -       | -          |
  | Есенин С.А.      | Стихотворения и поэмы | 650.00 | 15     | 130.00  | 520.00     |
  +------------------+-----------------------+--------+--------+---------+------------+
  Task:
  Вывести авторов и суммарную стоимость их книг, если хотя бы одна их книга имеет цену выше средней по складу. Средняя цена рассчитывается как простое среднее, с помощью avg(). Информацию отсортировать по убыванию суммарной стоимости.
  Decision:
  MariaDB [OnlineBookStore]> SELECT * FROM book;
      +---------+-----------------------+------------------+--------+--------+
      | book_id | title                 | author           | price  | amount |
      +---------+-----------------------+------------------+--------+--------+
      | 1       | Мастер и Маргарита    | Булгаков М.А.    | 670.99 | 3      |
      | 2       | Белая гвардия         | Булгаков М.А.    | 540.50 | 5      |
      | 3       | Идиот                 | Достоевский Ф.М. | 460.00 | 10     |
      | 4       | Братья Карамазовы     | Достоевский Ф.М. | 799.01 | 3      |
      | 5       | Игрок                 | Достоевский Ф.М. | 480.50 | 10     |
      | 6       | Стихотворения и поэмы | Есенин С.А.      | 650.00 | 15     |
      +---------+-----------------------+------------------+--------+--------+
  MariaDB [OnlineBookStore]> SET @avg_price := (SELECT AVG(price)
      ->     FROM book);
      -> SELECT author,  
      ->     SUM(price * amount) AS Стоимость
      -> FROM book
      -> WHERE author
      -> IN (SELECT author
      ->     FROM book
      ->     WHERE price > @avg_price)
      -> GROUP BY author
      -> ORDER BY Стоимость DESC;
  +------------------+-----------+
  | author           | Стоимость |
  +------------------+-----------+
  | Достоевский Ф.М. | 11802.03  |
  | Есенин С.А.      | 9750.00   |
  | Булгаков М.А.    | 4715.47   |
  +------------------+-----------+
  Task:
  Вывести автора, название, количество, цену (Розничная_цена). Для тех книг количество которых больше или равно 10, отобразить оптовую скидку 15% (Скидка), округлить до двух знаков после запятой и вывести оптовую цену с учетом скидки -15% (Оптовая_цена). Все атрибуты перевести на русский язык. Отсортировать по автору и названию книги.
  Decision:
  MariaDB [OnlineBookStore]> SELECT * FROM book;
      +---------+-----------------------+------------------+--------+--------+
      | book_id | title                 | author           | price  | amount |
      +---------+-----------------------+------------------+--------+--------+
      | 1       | Мастер и Маргарита    | Булгаков М.А.    | 670.99 | 3      |
      | 2       | Белая гвардия         | Булгаков М.А.    | 540.50 | 5      |
      | 3       | Идиот                 | Достоевский Ф.М. | 460.00 | 10     |
      | 4       | Братья Карамазовы     | Достоевский Ф.М. | 799.01 | 3      |
      | 5       | Игрок                 | Достоевский Ф.М. | 480.50 | 10     |
      | 6       | Стихотворения и поэмы | Есенин С.А.      | 650.00 | 15     |
      +---------+-----------------------+------------------+--------+--------+
  MariaDB [OnlineBookStore]> SELECT author AS "Автор",
      ->     title AS "Название_книги",
      ->     amount AS "Количество",
      ->     price AS "Розничная_цена",
      ->     IF (amount >= 10, 15, 0) AS "Скидка",  round (IF (amount >= 10, price * 0.85, price), 2) AS "Оптовая_цена"    
      -> FROM book
      -> ORDER BY author, title;
  +------------------+-----------------------+------------+----------------+--------+--------------+
  | Автор            | Название_книги        | Количество | Розничная_цена | Скидка | Оптовая_цена |
  +------------------+-----------------------+------------+----------------+--------+--------------+
  | Булгаков М.А.    | Белая гвардия         | 5          | 540.50         | 0      | 540.50       |
  | Булгаков М.А.    | Мастер и Маргарита    | 3          | 670.99         | 0      | 670.99       |
  | Достоевский Ф.М. | Братья Карамазовы     | 3          | 799.01         | 0      | 799.01       |
  | Достоевский Ф.М. | Игрок                 | 10         | 480.50         | 15     | 408.43       |
  | Достоевский Ф.М. | Идиот                 | 10         | 460.00         | 15     | 391.00       |
  | Есенин С.А.      | Стихотворения и поэмы | 15         | 650.00         | 15     | 552.50       |
  +------------------+-----------------------+------------+----------------+--------+--------------+
  Task:
  Вывести авторов, у которых есть книги со стоимостью более 500 и количеством более 1 шт на складе. Учитывать книги только тех авторов, у которых не менее 2-х произведений на складе. Вывести автора, количество различных произведений автора, минимальную цену и количество книг на складе. Информацию отсортировать по фамилии автора в алфавитном порядке.
  Decision:
  MariaDB [OnlineBookStore]> SELECT * FROM book;
      +---------+-----------------------+------------------+--------+--------+
      | book_id | title                 | author           | price  | amount |
      +---------+-----------------------+------------------+--------+--------+
      | 1       | Мастер и Маргарита    | Булгаков М.А.    | 670.99 | 3      |
      | 2       | Белая гвардия         | Булгаков М.А.    | 540.50 | 5      |
      | 3       | Идиот                 | Достоевский Ф.М. | 460.00 | 10     |
      | 4       | Братья Карамазовы     | Достоевский Ф.М. | 799.01 | 3      |
      | 5       | Игрок                 | Достоевский Ф.М. | 480.50 | 10     |
      | 6       | Стихотворения и поэмы | Есенин С.А.      | 650.00 | 15     |
      +---------+-----------------------+------------------+--------+--------+
  MariaDB [OnlineBookStore]> SELECT author,
      ->     COUNT(author) AS Количество_произведений,
      ->     MIN(price) AS Минимальная_цена,
      ->     SUM(amount) AS Число_книг
      -> FROM book
      -> WHERE amount > 1
      -> GROUP BY author
      -> HAVING COUNT(author) > 1
      -> ORDER BY author;
  Task:
  Вывести жанр(ы), в котором было заказано меньше всего экземпляров книг, указать это количество. Учитывать только жанры, в которых была заказана хотя бы одна книга.
  При реализации в основном запросе не используйте LIMIT, поскольку жанров с минимальным количеством заказанных книг может быть несколько.
  Decision:
  MariaDB [OnlineBookStore]> SELECT * FROM genre;
      +----------+------------------------+
      | genre_id | name_genre             |
      +----------+------------------------+
      |        1 | Роман                  |
      |        2 | Поэзия                 |
      |        3 | Приключения            |
      +----------+------------------------+
      3 rows in set (0.001 sec)
  MariaDB [OnlineBookStore]> SELECT * FROM book;
      +---------+------------------------------------------+-----------+----------+--------+--------+
      | book_id | title                                    | author_id | genre_id | price  | amount |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      |       1 | Мастер и Маргарита                       |         1 |        1 | 670.99 |      3 |
      |       2 | Белая гвардия                            |         1 |        1 | 540.50 |      4 |
      |       3 | Идиот                                    |         2 |        1 | 460.00 |     10 |
      |       4 | Братья Карамазовы                        |         2 |        1 | 799.01 |      2 |
      |       5 | Игрок                                    |         2 |        1 | 480.50 |     10 |
      |       6 | Стихотворения и поэмы                    |         3 |        2 | 650.00 |     15 |
      |       7 | Черный человек                           |         3 |        2 | 570.20 |      6 |
      |       8 | Лирика                                   |         4 |        2 | 518.99 |      0 |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      8 rows in set (0.001 sec)
  MariaDB [OnlineBookStore]> SELECT * FROM buy_book;
      +-------------+--------+---------+--------+
      | buy_book_id | buy_id | book_id | amount |
      +-------------+--------+---------+--------+
      |           1 |      1 |       1 |      1 |
      |           2 |      1 |       7 |      2 |
      |           3 |      1 |       3 |      1 |
      |           4 |      2 |       8 |      2 |
      |           5 |      3 |       3 |      2 |
      |           6 |      3 |       2 |      1 |
      |           7 |      3 |       1 |      1 |
      |           8 |      4 |       5 |      1 |
      |           9 |      5 |       8 |      2 |
      |          10 |      5 |       2 |      1 |
      +-------------+--------+---------+--------+
      10 rows in set (0.001 sec)
  MariaDB [OnlineBookStore]> WITH genre_total
      ->     AS (SELECT name_genre, SUM(bb.amount) AS Количество
      ->         FROM genre JOIN book b USING (genre_id)
      ->                    JOIN buy_book bb USING (book_id)
      ->         WHERE bb.amount > 0
      ->         GROUP BY name_genre),
      ->     min_quantity (min_qty)
      ->     AS (SELECT MIN(Количество) FROM genre_total)
      -> SELECT name_genre, Количество
      -> FROM genre_total, min_quantity
      -> WHERE Количество = min_qty;
  +--------------+----------------------+
  | name_genre   | Количество           |
  +--------------+----------------------+
  | Поэзия       |                    6 |
  +--------------+----------------------+
  1 row in set (0.003 sec)
  Task:
  Создать новую таблицу store, в которую занести данные из таблиц book и supply, при условии, что количество книг будет больше среднего количества книг по двум таблицам; если книга есть в обеих таблицах, то стоимость выбрать большую из двух. Отсортировать данные из таблицы их по имени автора в алфавитном порядке и по убыванию цены. Вывести данные из полученной таблицы.
  Decision:
  MariaDB [OnlineBookStore]> SELECT * FROM book;
      +---------+-----------------------+------------------+--------+--------+
      | book_id | title                 | author           | price  | amount |
      +---------+-----------------------+------------------+--------+--------+
      | 1       | Мастер и Маргарита    | Булгаков М.А.    | 670.99 | 3      |
      | 2       | Белая гвардия         | Булгаков М.А.    | 540.50 | 5      |
      | 3       | Идиот                 | Достоевский Ф.М. | 460.00 | 10     |
      | 4       | Братья Карамазовы     | Достоевский Ф.М. | 799.01 | 3      |
      | 5       | Игрок                 | Достоевский Ф.М. | 480.50 | 10     |
      | 6       | Стихотворения и поэмы | Есенин С.А.      | 650.00 | 15     |
      +---------+-----------------------+------------------+--------+--------+
  MariaDB [OnlineBookStore]> SELECT * FROM supply;
      +-----------+----------------+------------------+--------+--------+
      | supply_id | title          | author           | price  | amount |
      +-----------+----------------+------------------+--------+--------+
      | 1         | Лирика         | Пастернак Б.Л.   | 518.99 | 2      |
      | 2         | Черный человек | Есенин С.А.      | 570.20 | 6      |
      | 3         | Белая гвардия  | Булгаков М.А.    | 540.50 | 7      |
      | 4         | Идиот          | Достоевский Ф.М. | 360.80 | 3      |
      +-----------+----------------+------------------+--------+--------+
  MariaDB [OnlineBookStore]> SET @cou := (SELECT ROUND(SUM(amount) / COUNT(amount), 2)
      FROM (SELECT price, amount
          FROM book
          UNION
          SELECT price, amount
          FROM supply) test);            
  CREATE TABLE store AS
  WITH test(title, author, price, amount) AS (SELECT title, author, price, amount
      FROM book
      UNION ALL
      SELECT title, author, price, amount
      FROM supply)
  SELECT title,
      author,
      MAX(price) AS price,
      SUM(amount) AS amount
  FROM test
  GROUP BY author, title
  HAVING SUM(amount) > @cou
  ORDER BY author, price DESC;
  SELECT * FROM store;
      +-----------------------+------------------+--------+--------+
      | title                 | author           | price  | amount |
      +-----------------------+------------------+--------+--------+
      | Белая гвардия         | Булгаков М.А.    | 540.50 | 12     |
      | Игрок                 | Достоевский Ф.М. | 480.50 | 10     |
      | Идиот                 | Достоевский Ф.М. | 460.00 | 13     |
      | Стихотворения и поэмы | Есенин С.А.      | 650.00 | 15     |
      +-----------------------+------------------+--------+--------+
  Task:
  Объявить столбец "категории цены" (price_category): <500 - "низкая", 500 - 700 - "средняя", более 700 - "высокая"
  Вывести автора, название, категорию, стоимость (цена * количество), исключив из авторов Есенина, из названий "Белую гвардию". Отсортировать по убыванию стоимости и названию (по возрастанию)
  Decision:
  MariaDB [OnlineBookStore]> SELECT * FROM book;
      +---------+-----------------------+------------------+--------+--------+
      | book_id | title                 | author           | price  | amount |
      +---------+-----------------------+------------------+--------+--------+
      | 1       | Мастер и Маргарита    | Булгаков М.А.    | 670.99 | 3      |
      | 2       | Белая гвардия         | Булгаков М.А.    | 540.50 | 5      |
      | 3       | Идиот                 | Достоевский Ф.М. | 460.00 | 10     |
      | 4       | Братья Карамазовы     | Достоевский Ф.М. | 799.01 | 3      |
      | 5       | Игрок                 | Достоевский Ф.М. | 480.50 | 10     |
      | 6       | Стихотворения и поэмы | Есенин С.А.      | 650.00 | 15     |
      +---------+-----------------------+------------------+--------+--------+
  MariaDB [OnlineBookStore]> SELECT author,
      title,
      CASE WHEN price < 500 THEN 'низкая'
          WHEN price BETWEEN 500 AND 700 THEN 'средняя'
      ELSE 'высокая'
      END AS price_category,
      price * amount AS cost
  FROM book
  WHERE author <> 'Есенин С.А.' AND title <> 'Белая гвардия'
  ORDER BY cost DESC, title;
      +------------------+--------------------+----------------+---------+
      | author           | title              | price_category | cost    |
      +------------------+--------------------+----------------+---------+
      | Достоевский Ф.М. | Игрок              | низкая         | 4805.00 |
      | Достоевский Ф.М. | Идиот              | низкая         | 4600.00 |
      | Достоевский Ф.М. | Братья Карамазовы  | высокая        | 2397.03 |
      | Булгаков М.А.    | Мастер и Маргарита | средняя        | 2012.97 |
      +------------------+--------------------+----------------+---------+
  Task:
  Для нечетного количества книг посчитать разницу максимальной стоимости (цена * количество) и стоимостью всех экземпляров конкретной книги. Отсортировать по этой разнице по убыванию. Вывести название, автора, количество, разницу с максимальной стоимостью.
  Decision:
  MariaDB [OnlineBookStore]> SELECT * FROM book;
      +---------+-----------------------+------------------+--------+--------+
      | book_id | title                 | author           | price  | amount |
      +---------+-----------------------+------------------+--------+--------+
      | 1       | Мастер и Маргарита    | Булгаков М.А.    | 670.99 | 3      |
      | 2       | Белая гвардия         | Булгаков М.А.    | 540.50 | 5      |
      | 3       | Идиот                 | Достоевский Ф.М. | 460.00 | 10     |
      | 4       | Братья Карамазовы     | Достоевский Ф.М. | 799.01 | 3      |
      | 5       | Игрок                 | Достоевский Ф.М. | 480.50 | 10     |
      | 6       | Стихотворения и поэмы | Есенин С.А.      | 650.00 | 15     |
      +---------+-----------------------+------------------+--------+--------+
  MariaDB [OnlineBookStore]> SELECT title,
      author,
      amount,
      (SELECT price * amount
          FROM book
          WHERE amount % 2 = 1
          ORDER BY price * amount DESC
          LIMIT 1) - amount * price AS Разница_с_макс_стоимостью
  FROM book
  WHERE amount % 2 = 1
  ORDER BY Разница_с_макс_стоимостью DESC;
      +-----------------------+------------------+--------+---------------------------+
      | title                 | author           | amount | Разница_с_макс_стоимостью |
      +-----------------------+------------------+--------+---------------------------+
      | Мастер и Маргарита    | Булгаков М.А.    | 3      | 7737.03                   |
      | Братья Карамазовы     | Достоевский Ф.М. | 3      | 7352.97                   |
      | Белая гвардия         | Булгаков М.А.    | 5      | 7047.50                   |
      | Стихотворения и поэмы | Есенин С.А.      | 15     | 0.00                      |
      +-----------------------+------------------+--------+---------------------------+
  Task:
  На распродаже размер скидки устанавливается в зависимости от количества экземпляров книги в магазине и от цены книги: для книг в остатке не менее 5 шт скидка 50%, тогда как для книг в остатке менее 5 шт скидка устанавливается в зависимости от цены (на книги не дешевле 700 руб скидка 20%, на остальные 10%). Два последних столбца назвать Скидка и Цена_со_скидкой.  Последний столбец округлить до двух знаков после запятой.
  Decision:
  MariaDB [OnlineBookStore]> SELECT * FROM book;
      +---------+-----------------------+------------------+--------+--------+
      | book_id | title                 | author           | price  | amount |
      +---------+-----------------------+------------------+--------+--------+
      | 1       | Мастер и Маргарита    | Булгаков М.А.    | 670.99 | 3      |
      | 2       | Белая гвардия         | Булгаков М.А.    | 540.50 | 5      |
      | 3       | Идиот                 | Достоевский Ф.М. | 460.00 | 10     |
      | 4       | Братья Карамазовы     | Достоевский Ф.М. | 799.01 | 3      |
      | 5       | Игрок                 | Достоевский Ф.М. | 480.50 | 10     |
      | 6       | Стихотворения и поэмы | Есенин С.А.      | 650.00 | 15     |
      +---------+-----------------------+------------------+--------+--------+
  MariaDB [OnlineBookStore]> SELECT author,
      title,
      amount,
      price,
      CASE WHEN amount >= 5 THEN '50%'
          WHEN price >= 700 THEN '20%'
          ELSE '10%'
          END AS Скидка,
      CASE WHEN amount >= 5 THEN ROUND(price * 0.5, 2)
          WHEN price >= 700 THEN ROUND(price * 0.8, 2)
          ELSE ROUND(price * 0.9, 2)
          END AS Цена_со_скидкой
  FROM book;
      +------------------+-----------------------+--------+--------+--------+-----------------+
      | author           | title                 | amount | price  | Скидка | Цена_со_скидкой |
      +------------------+-----------------------+--------+--------+--------+-----------------+
      | Булгаков М.А.    | Мастер и Маргарита    | 3      | 670.99 | 10%    | 603.89          |
      | Булгаков М.А.    | Белая гвардия         | 5      | 540.50 | 50%    | 270.25          |
      | Достоевский Ф.М. | Идиот                 | 10     | 460.00 | 50%    | 230.00          |
      | Достоевский Ф.М. | Братья Карамазовы     | 3      | 799.01 | 20%    | 639.21          |
      | Достоевский Ф.М. | Игрок                 | 10     | 480.50 | 50%    | 240.25          |
      | Есенин С.А.      | Стихотворения и поэмы | 15     | 650.00 | 50%    | 325.00          |
      | Есенин С.А.      | Черный человек        | 5      | 670.99 | 50%    | 335.50          |
      +------------------+-----------------------+--------+--------+--------+-----------------+
  Task:
  Магазин счёл, что классика уже не пользуется популярностью, поэтому необходимо в выборке:
          Сменить всех авторов на "Донцова Дарья".
          К названию каждой книги в начале дописать "Евлампия Романова и " ( пробел в конце).
          Цену поднять на 42% (округлить её до двух знаков после запятой).
          Отсортировать по убыванию цены.
  Decision:
  SELECT * FROM book;
      +---------+-----------------------+------------------+--------+--------+
      | book_id | title                 | author           | price  | amount |
      +---------+-----------------------+------------------+--------+--------+
      | 1       | Мастер и Маргарита    | Булгаков М.А.    | 670.99 | 3      |
      | 2       | Белая гвардия         | Булгаков М.А.    | 540.50 | 5      |
      | 3       | Идиот                 | Достоевский Ф.М. | 460.00 | 10     |
      | 4       | Братья Карамазовы     | Достоевский Ф.М. | 799.01 | 3      |
      | 5       | Игрок                 | Достоевский Ф.М. | 480.50 | 10     |
      | 6       | Стихотворения и поэмы | Есенин С.А.      | 650.00 | 15     |
      +---------+-----------------------+------------------+--------+--------+
  SELECT 'Донцова Дарья' AS author,
      CONCAT('Евлампия Романова и ', title) AS title,
      ROUND(price*1.42,2) AS price
  FROM book
  ORDER BY price DESC;
      +---------------+-------------------------------------------+---------+
      | author        | title                                     | price   |
      +---------------+-------------------------------------------+---------+
      | Донцова Дарья | Евлампия Романова и Братья Карамазовы     | 1134.59 |
      | Донцова Дарья | Евлампия Романова и Мастер и Маргарита    | 952.81  |
      | Донцова Дарья | Евлампия Романова и Стихотворения и поэмы | 923.00  |
      | Донцова Дарья | Евлампия Романова и Белая гвардия         | 767.51  |
      | Донцова Дарья | Евлампия Романова и Игрок                 | 682.31  |
      | Донцова Дарья | Евлампия Романова и Идиот                 | 653.20  |
      +---------------+-------------------------------------------+---------+
  Task:
  Магазин решил быстрее распродать остатки книг, цена которых выше 600, а также прописать условия доставки. Создать запрос на выборку, в котором:
          Столбцы назовите Наименование, Цена и  Стоимость доставки.
          Отберите все книги, цена которых выше 600.
          Если остаток по отдельной книге меньше или равен 5, то стоимость доставки будет 500 рублей, если больше 5, то доставка будет бесплатной (вместо стоимости доставки вставить Бесплатно).
          Отсортируйте значения по убыванию цены книг.
  Decision:
  SELECT * FROM book;
      +---------+-----------------------+------------------+--------+--------+
      | book_id | title                 | author           | price  | amount |
      +---------+-----------------------+------------------+--------+--------+
      | 1       | Мастер и Маргарита    | Булгаков М.А.    | 670.99 | 3      |
      | 2       | Белая гвардия         | Булгаков М.А.    | 540.50 | 5      |
      | 3       | Идиот                 | Достоевский Ф.М. | 460.00 | 10     |
      | 4       | Братья Карамазовы     | Достоевский Ф.М. | 799.01 | 3      |
      | 5       | Игрок                 | Достоевский Ф.М. | 480.50 | 10     |
      | 6       | Стихотворения и поэмы | Есенин С.А.      | 650.00 | 15     |
      | 7       | Черный человек        | Есенин С.А.      | 670.99 | 5      |
      +---------+-----------------------+------------------+--------+--------+
  SELECT title AS Наименование,
      price AS Цена,
      IF (amount<=5, 500, 'Бесплатно') AS 'Стоимость_доставки'
  FROM book
  WHERE price>600
  ORDER BY price DESC;
      +-----------------------+--------+--------------------+
      | Наименование          | Цена   | Стоимость_доставки |
      +-----------------------+--------+--------------------+
      | Братья Карамазовы     | 799.01 | 500                |
      | Мастер и Маргарита    | 670.99 | 500                |
      | Черный человек        | 670.99 | 500                |
      | Стихотворения и поэмы | 650.00 | Бесплатно          |
      +-----------------------+--------+--------------------+
  Task:
  Определить стоимость доставки:
          для книг стоимостью 500 и менее, установить в размере 99.99
          при количестве книг на складе менее 5, установить в размере 149.99
          для остальных случаев доставка должна быть бесплатной
  Определить новую стоимость для книг:
          для книг, совокупной стоимостью более 5000, добавить 20% к стоимости за экземпляр
          для остальных случаев снизить стоимость одного экземпляра на 20%
  Настроить фильтр при выборке: только позиции творчества авторов: Булгаков и Есенин, при количестве экземпляров на складе: от 3 до 14 включительно.
  Сортировку выполнить:
          по имени автора в порядке возрастания
          затем по названию в порядке убывания
          по стоимости доставки (от меньшей к большей)
  В таблице должны быть отображены данные:
          автора
          название
          количество
          цену, как real_price
          новую цену, как new_price (округлить до двух знаков после запятой)
          стоимость доставки, как delivery_price
  Decision:
  SELECT * FROM book;
      +---------+-----------------------+------------------+--------+--------+
      | book_id | title                 | author           | price  | amount |
      +---------+-----------------------+------------------+--------+--------+
      | 1       | Мастер и Маргарита    | Булгаков М.А.    | 670.99 | 3      |
      | 2       | Белая гвардия         | Булгаков М.А.    | 540.50 | 5      |
      | 3       | Идиот                 | Достоевский Ф.М. | 460.00 | 10     |
      | 4       | Братья Карамазовы     | Достоевский Ф.М. | 799.01 | 3      |
      | 5       | Игрок                 | Достоевский Ф.М. | 480.50 | 10     |
      | 6       | Стихотворения и поэмы | Есенин С.А.      | 650.00 | 15     |
      | 7       | Черный человек        | Есенин С.А.      | 670.99 | 5      |
      +---------+-----------------------+------------------+--------+--------+
  SELECT author,
      title,
      amount,
      price AS real_price,
      ROUND(IF(price * amount > 5000, price * 1.2, price * 0.8), 2) AS new_price,
      ROUND(IF(price <= 500, 99.99, IF(amount < 5, 149.99, 0.00)), 2) AS delivery_price
  FROM book
  WHERE author IN ('Булгаков М.А.', 'Есенин С.А.')
      AND amount BETWEEN 3
      AND 14
  ORDER BY author, title DESC, delivery_price;
      +---------------+--------------------+--------+------------+-----------+----------------+
      | author        | title              | amount | real_price | new_price | delivery_price |
      +---------------+--------------------+--------+------------+-----------+----------------+
      | Булгаков М.А. | Мастер и Маргарита | 3      | 670.99     | 536.79    | 149.99         |
      | Булгаков М.А. | Белая гвардия      | 5      | 540.50     | 432.40    | 0.00           |
      | Есенин С.А.   | Черный человек     | 5      | 670.99     | 536.79    | 0.00           |
      +---------------+--------------------+--------+------------+-----------+----------------+
  Task:
  Вывести авторов и названия книг и их цену в двух столбцах - рубли и копейки.  Информацию отсортировать по убыванию копеек.
  Decision:
  SELECT * FROM book;
      +---------+-----------------------+------------------+--------+--------+
      | book_id | title                 | author           | price  | amount |
      +---------+-----------------------+------------------+--------+--------+
      | 1       | Мастер и Маргарита    | Булгаков М.А.    | 670.99 | 3      |
      | 2       | Белая гвардия         | Булгаков М.А.    | 540.50 | 5      |
      | 3       | Идиот                 | Достоевский Ф.М. | 460.00 | 10     |
      | 4       | Братья Карамазовы     | Достоевский Ф.М. | 799.01 | 3      |
      | 5       | Игрок                 | Достоевский Ф.М. | 480.50 | 10     |
      | 6       | Стихотворения и поэмы | Есенин С.А.      | 650.00 | 15     |
      | 7       | Черный человек        | Есенин С.А.      | 670.99 | 5      |
      +---------+-----------------------+------------------+--------+--------+
  SELECT author,
      title,
      TRUNCATE(price, 0) AS Рубли,
      ROUND((price - TRUNCATE(price, 0))*100) AS Копейки
  FROM book
  ORDER BY  ROUND((price - TRUNCATE(price, 0))*100) DESC;
      +------------------+-----------------------+-------+---------+
      | author           | title                 | Рубли | Копейки |
      +------------------+-----------------------+-------+---------+
      | Булгаков М.А.    | Мастер и Маргарита    | 670   | 99      |
      | Есенин С.А.      | Черный человек        | 670   | 99      |
      | Булгаков М.А.    | Белая гвардия         | 540   | 50      |
      | Достоевский Ф.М. | Игрок                 | 480   | 50      |
      | Достоевский Ф.М. | Братья Карамазовы     | 798   | 1       |
      | Достоевский Ф.М. | Идиот                 | 459   | 0       |
      | Есенин С.А.      | Стихотворения и поэмы | 649   | 0       |
      +------------------+-----------------------+-------+---------+
  Task:
  В связи с повышенным спросом на классическую литературу школьниками в формате "А есть то же самое, но покороче, чтобы читать поменьше?" была выпущена серия "Графоман и. Краткое содержание".
  В выборке:
          к имени автора добавить "Графоман и ";
          к названию книги дописать ". Краткое содержание.";
          цену на новый опус установить 40% от цены оригинала, но не более 250. (Если 40% больше 250, то цена должна быть 250);
          в зависимости от остатка на складе вывести "Спрос": до 3 (включительно) - высокий, до 10 (включительно) - средний, иначе низкий;
          добавить колонку "Наличие" в зависимости от количества: 1-2 шт - очень мало, 3-14 - в наличии, 15 и больше - много;
          отсортировать по цене по возрастанию, затем по Спросу от высокого к низкому, а затем по названию книги в алфавитном порядке
  Decision:
  SELECT * FROM book;
      +---------+-----------------------+------------------+--------+--------+
      | book_id | title                 | author           | price  | amount |
      +---------+-----------------------+------------------+--------+--------+
      | 1       | Мастер и Маргарита    | Булгаков М.А.    | 670.99 | 3      |
      | 2       | Белая гвардия         | Булгаков М.А.    | 540.50 | 5      |
      | 3       | Идиот                 | Достоевский Ф.М. | 460.00 | 10     |
      | 4       | Братья Карамазовы     | Достоевский Ф.М. | 799.01 | 2      |
      | 5       | Игрок                 | Достоевский Ф.М. | 480.50 | 10     |
      | 6       | Стихотворения и поэмы | Есенин С.А.      | 650.00 | 15     |
      | 7       | Черный человек        | Есенин С.А.      | 670.99 | 5      |
      +---------+-----------------------+------------------+--------+--------+
  SELECT CONCAT('Графоман и ', author) AS Автор,
      CONCAT(title, '. Краткое содержание.') AS Название,
      IF(price*0.4>=250, 250*1, price*0.4) AS Цена,
      (CASE WHEN amount<=3 THEN 'высокий'
          WHEN amount<=10 THEN 'средний'
          ELSE 'низкий'
      END) AS Спрос,
      (CASE WHEN amount>=1 AND amount<=2 THEN 'очень мало'
          WHEN amount>=3 AND amount<=14 THEN 'в наличии'
          WHEN amount>=15 THEN 'много'
      END) AS Наличие
  FROM book
  ORDER BY Цена, amount, title ASC;
      +-----------------------------+--------------------------------------------+---------+---------+------------+
      | Автор                       | Название                                   | Цена    | Спрос   | Наличие    |
      +-----------------------------+--------------------------------------------+---------+---------+------------+
      | Графоман и Достоевский Ф.М. | Идиот. Краткое содержание.                 | 184.000 | средний | в наличии  |
      | Графоман и Достоевский Ф.М. | Игрок. Краткое содержание.                 | 192.200 | средний | в наличии  |
      | Графоман и Булгаков М.А.    | Белая гвардия. Краткое содержание.         | 216.200 | средний | в наличии  |
      | Графоман и Достоевский Ф.М. | Братья Карамазовы. Краткое содержание.     | 250     | высокий | очень мало |
      | Графоман и Булгаков М.А.    | Мастер и Маргарита. Краткое содержание.    | 250     | высокий | в наличии  |
      | Графоман и Есенин С.А.      | Черный человек. Краткое содержание.        | 250     | средний | в наличии  |
      | Графоман и Есенин С.А.      | Стихотворения и поэмы. Краткое содержание. | 250     | низкий  | много      |
      +-----------------------------+--------------------------------------------+---------+---------+------------+
  Task:
  Акция "Купи книгу от 500 руб. и получи подарок".
  Вывести автора, название книги и цену. Выбрать книги с ценой 500 рублей и выше, отсортировать информацию в алфавитном порядке по автору и названию книги. Добавить столбец Подарок,  в котором вывести, какой подарок получает покупатель: если куплена книга от 500 рублей до 600 рублей (включительно), то подарок - ручка, от 600 до 700 (включительно) - детская раскраска, выше 700 - гороскоп.
  Decision:
  SELECT * FROM book;
      +---------+-----------------------+------------------+--------+--------+
      | book_id | title                 | author           | price  | amount |
      +---------+-----------------------+------------------+--------+--------+
      | 1       | Мастер и Маргарита    | Булгаков М.А.    | 670.99 | 3      |
      | 2       | Белая гвардия         | Булгаков М.А.    | 540.50 | 5      |
      | 3       | Идиот                 | Достоевский Ф.М. | 460.00 | 10     |
      | 4       | Братья Карамазовы     | Достоевский Ф.М. | 799.01 | 2      |
      | 5       | Игрок                 | Достоевский Ф.М. | 480.50 | 10     |
      | 6       | Стихотворения и поэмы | Есенин С.А.      | 650.00 | 15     |
      | 7       | Черный человек        | Есенин С.А.      | 670.99 | 5      |
      +---------+-----------------------+------------------+--------+--------+
  SELECT author AS Автор,
      title AS Название_книги,
      price AS Цена,
      (CASE WHEN price>=500 AND price<=600 THEN 'ручка'
          WHEN price>600 AND price<=700 THEN 'детская раскраска'
          WHEN price>700 THEN 'гороскоп'
      END) AS Подарок
  FROM book
  WHERE price >= 500
  ORDER BY Автор, Название_книги;
      +------------------+-----------------------+--------+-------------------+
      | Автор            | Название_книги        | Цена   | Подарок           |
      +------------------+-----------------------+--------+-------------------+
      | Булгаков М.А.    | Белая гвардия         | 540.50 | ручка             |
      | Булгаков М.А.    | Мастер и Маргарита    | 670.99 | детская раскраска |
      | Достоевский Ф.М. | Братья Карамазовы     | 799.01 | гороскоп          |
      | Есенин С.А.      | Стихотворения и поэмы | 650.00 | детская раскраска |
      | Есенин С.А.      | Черный человек        | 670.99 | детская раскраска |
      +------------------+-----------------------+--------+-------------------+
  Task:
  При анализе остатков книг на складе было решено дополнительно заказать книги авторов, у которых суммарное число экземпляров книг меньше 10. В таблице должны быть отображены авторы, наименьшее и наибольшее количество их книг.
  Decision:
  SELECT * FROM book;
      +---------+-----------------------+------------------+--------+--------+
      | book_id | title                 | author           | price  | amount |
      +---------+-----------------------+------------------+--------+--------+
      | 1       | Мастер и Маргарита    | Булгаков М.А.    | 670.99 | 3      |
      | 2       | Белая гвардия         | Булгаков М.А.    | 540.50 | 5      |
      | 3       | Идиот                 | Достоевский Ф.М. | 460.00 | 10     |
      | 4       | Братья Карамазовы     | Достоевский Ф.М. | 799.01 | 2      |
      | 5       | Игрок                 | Достоевский Ф.М. | 480.50 | 10     |
      | 6       | Стихотворения и поэмы | Есенин С.А.      | 650.00 | 15     |
      | 7       | Черный человек        | Есенин С.А.      | 670.99 | 5      |
      +---------+-----------------------+------------------+--------+--------+
  Task:
  В последний заказ (таблица buy_book) клиента Баранов Павел добавить по одному экземпляру всех книг Достоевского, которые есть в таблице book
  Decision:
  SELECT * FROM buy_book;
      +-------------+--------+---------+--------+
      | buy_book_id | buy_id | book_id | amount |
      +-------------+--------+---------+--------+
      | 1           | 1      | 1       | 1      |
      | 2           | 1      | 7       | 2      |
      | 3           | 2      | 8       | 2      |
      | 4           | 3      | 3       | 2      |
      | 5           | 3      | 2       | 1      |
      | 6           | 3      | 1       | 1      |
      | 7           | 4      | 5       | 1      |
      | 8           | 5      | 8       | 2      |
      | 9           | 5      | 2       | 1      |
      +-------------+--------+---------+--------+
  SELECT * FROM client;
      +-----------+-----------------+---------+----------------+
      | client_id | name_client     | city_id | email          |
      +-----------+-----------------+---------+----------------+
      | 1         | Баранов Павел   | 3       | baranov@test   |
      | 2         | Абрамова Катя   | 1       | abramova@test  |
      | 3         | Семенонов Иван  | 2       | semenov@test   |
      | 4         | Яковлева Галина | 1       | yakovleva@test |
      | 5         | Попов Илья      | 1       | popov@test     |
      +-----------+-----------------+---------+----------------+
  SELECT * FROM buy;
      +--------+---------------------------------------+-----------+
      | buy_id | buy_description                       | client_id |
      +--------+---------------------------------------+-----------+
      | 1      | Доставка только вечером               | 1         |
      | 2      | NULL                                  | 3         |
      | 3      | Упаковать каждую книгу по отдельности | 2         |
      | 4      | NULL                                  | 1         |
      | 5      | Связаться со мной по вопросу доставки | 5         |
      +--------+---------------------------------------+-----------+
  SELECT * FROM author;
      +-----------+------------------+
      | author_id | name_author      |
      +-----------+------------------+
      | 1         | Булгаков М.А.    |
      | 2         | Достоевский Ф.М. |
      | 3         | Есенин С.А.      |
      | 4         | Пастернак Б.Л.   |
      | 5         | Лермонтов М.Ю.   |
      +-----------+------------------+
  SELECT * FROM book;
      +---------+-----------------------+-----------+----------+--------+--------+
      | book_id | title                 | author_id | genre_id | price  | amount |
      +---------+-----------------------+-----------+----------+--------+--------+
      | 1       | Мастер и Маргарита    | 1         | 1        | 670.99 | 3      |
      | 2       | Белая гвардия         | 1         | 1        | 540.50 | 4      |
      | 3       | Идиот                 | 2         | 1        | 460.00 | 10     |
      | 4       | Братья Карамазовы     | 2         | 1        | 799.01 | 3      |
      | 5       | Игрок                 | 2         | 1        | 480.50 | 10     |
      | 6       | Стихотворения и поэмы | 3         | 2        | 650.00 | 15     |
      | 7       | Черный человек        | 3         | 2        | 570.20 | 6      |
      | 8       | Лирика                | 4         | 2        | 518.99 | 0      |
      +---------+-----------------------+-----------+----------+--------+--------+
  INSERT INTO buy_book (buy_id, book_id, amount)
  SELECT DISTINCT *
  FROM((SELECT MAX(buy_id)
      FROM client
      INNER JOIN buy USING(client_id)
      WHERE name_client LtuserE '%Баранов%') a
      CROSS JOIN (SELECT book_id
          FROM author
          INNER JOIN book USING(author_id)
          WHERE name_author = 'Достоевский Ф.М.') b
      CROSS JOIN (SELECT 1
          FROM book) c)
  ORDER BY book_id;
  SELECT * FROM buy_book;
      +-------------+--------+---------+--------+
      | buy_book_id | buy_id | book_id | amount |
      +-------------+--------+---------+--------+
      | 1           | 1      | 1       | 1      |
      | 2           | 1      | 7       | 2      |
      | 3           | 2      | 8       | 2      |
      | 4           | 3      | 3       | 2      |
      | 5           | 3      | 2       | 1      |
      | 6           | 3      | 1       | 1      |
      | 7           | 4      | 5       | 1      |
      | 8           | 5      | 8       | 2      |
      | 9           | 5      | 2       | 1      |
      | 10          | 4      | 3       | 1      |
      | 11          | 4      | 4       | 1      |
      | 12          | 4      | 5       | 1      |
      +-------------+--------+---------+--------+
  Task:
  Разработать базу данных "Тестирование". Университет проводит онлайн-тестирование по нескольким дисциплинам. Каждая дисциплина включает в себя определенное количество вопросов. Ответы на вопрос представлены в виде вариантов ответов, один из этих вариантов правильный.
  Студент регистрируется в системе, указав свое имя, фамилию и отчество. После этого он может пройти тестирование по одной или нескольким дисциплинам. У студента есть несколько попыток сдать тест (необходимо сохранить дату попытки). Каждому студенту случайным образом подбирается набор вопросов по дисциплине и формируется индивидуальный тест. Студент отвечает на вопросы, выбирая один из предложенных ответов.
  После окончания тестирования вычисляется и сохраняется результат (в процентах) попытки.
  Запросы по предметной области:
  Привлеките студентов, которые прошли определенную дисциплину.
  Выведите количество попыток и средний результат по каждой дисциплине.
  Выведите студента(ов), набравшего самый высокий балл во время тестирования.
  Если студент предпринял несколько попыток по одной и той же дисциплине, то выведите разницу в днях между первой и последней попыткой.
  Выведите количество студентов, прошедших тестирование по каждой дисциплине.
  Случайным образом выберите 3 вопроса по определенной дисциплине.
  Выведите вопросы, на которые определенный студент ответил в определенной попытке, ответ студента и результат (правильный или нет).
  Рассчитайте результаты теста для всех попыток.
  Для каждого вопроса выведите процент успешных решений и общее количество ответов.
  Decision:
  mysql> CREATE DATABASE OnlineTest;
      Query OK, 1 row affected (0.21 sec)
  mysql> SHOW DATABASES;
      +--------------------+
      | Database           |
      +--------------------+
      | OnlineBookStore    |
      | OnlineTest         |
      | adminDB            |
      | information_schema |
      | mysql              |
      | performance_schema |
      | sys                |
      | testbdserver       |
      +--------------------+
      8 rows in set (0.00 sec)
  mysql> USE OnlineTest;
      Database changed
  mysql> CREATE TABLE subject (
  subject_id INT PRIMARY KEY AUTO_INCREMENT,
  name_subject varchar(30)
  );
      Query OK, 0 rows affected (2.33 sec)
  mysql> CREATE TABLE student (
  student_id INT PRIMARY KEY AUTO_INCREMENT,
  name_student varchar(50)
  );
      Query OK, 0 rows affected (2.01 sec)
  mysql> CREATE TABLE attempt (
  attempt_id INT PRIMARY KEY AUTO_INCREMENT,
  student_id INT,
  subject_id INT,
  date_attempt date,
  result INT,
  FOREIGN KEY (student_id) REFERENCES student (student_id) ON DELETE CASCADE,
  FOREIGN KEY (subject_id) REFERENCES subject (subject_id) ON DELETE CASCADE
  );
      Query OK, 0 rows affected (1.59 sec)
  mysql> CREATE TABLE question (
  question_id INT PRIMARY KEY AUTO_INCREMENT,
  name_question varchar(100),
  subject_id INT,
  FOREIGN KEY (subject_id) REFERENCES subject (subject_id) ON DELETE CASCADE
  );
      Query OK, 0 rows affected (1.40 sec)
  mysql> CREATE TABLE answer (
  answer_id INT PRIMARY KEY AUTO_INCREMENT,
  name_answer varchar(100),
  question_id INT,
  is_correct BOOLEAN,
  CONSTRAINT answer_ibfk_1 FOREIGN KEY (question_id) REFERENCES question (question_id) ON DELETE CASCADE
  );
      Query OK, 0 rows affected (2.32 sec)
  mysql> CREATE TABLE testing (
  testing_id INT PRIMARY KEY AUTO_INCREMENT,
  attempt_id INT,
  question_id INT,
  answer_id INT,
  FOREIGN KEY (attempt_id) REFERENCES attempt (attempt_id) ON DELETE CASCADE
  );
      Query OK, 0 rows affected (3.46 sec)
  mysql> SHOW tables;
      +----------------------+
      | Tables_in_OnlineTest |
      +----------------------+
      | answer               |
      | attempt              |
      | question             |
      | student              |
      | subject              |
      | testing              |
      +----------------------+
      6 rows in set (0.00 sec)
  mysql> INSERT INTO subject (subject_id,name_subject) VALUES
  (1,'Основы SQL'),
  (2,'Основы баз данных'),
  (3,'Физика');
      Query OK, 3 rows affected (0.20 sec)
      Records: 3  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM subject;
      +------------+----------------------------------+
      | subject_id | name_subject                     |
      +------------+----------------------------------+
      |          1 | Основы SQL                       |
      |          2 | Основы баз данных                |
      |          3 | Физика                           |
      +------------+----------------------------------+
      3 rows in set (0.00 sec)
  mysql> INSERT INTO student (student_id,name_student) VALUES
  (1,'Баранов Павел'),
  (2,'Абрамова Катя'),
  (3,'Семенов Иван'),
  (4,'Яковлева Галина');
      Query OK, 4 rows affected (0.35 sec)
      Records: 4  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM student;
      +------------+-------------------------------+
      | student_id | name_student                  |
      +------------+-------------------------------+
      |          1 | Баранов Павел                 |
      |          2 | Абрамова Катя                 |
      |          3 | Семенов Иван                  |
      |          4 | Яковлева Галина               |
      +------------+-------------------------------+
      4 rows in set (0.00 sec)
  mysql> INSERT INTO attempt (attempt_id,student_id,subject_id,date_attempt,result) VALUES
  (1,1,2,'2020-03-23',67),
  (2,3,1,'2020-03-23',100),
  (3,4,2,'2020-03-26',0),
  (4,1,1,'2020-04-15',33),
  (5,3,1,'2020-04-15',67),
  (6,4,2,'2020-04-21',100),
  (7,3,1,'2020-05-17',33);
      Query OK, 7 rows affected (0.31 sec)
      Records: 7  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM attempt;
      +------------+------------+------------+--------------+--------+
      | attempt_id | student_id | subject_id | date_attempt | result |
      +------------+------------+------------+--------------+--------+
      |          1 |          1 |          2 | 2020-03-23   |     67 |
      |          2 |          3 |          1 | 2020-03-23   |    100 |
      |          3 |          4 |          2 | 2020-03-26   |      0 |
      |          4 |          1 |          1 | 2020-04-15   |     33 |
      |          5 |          3 |          1 | 2020-04-15   |     67 |
      |          6 |          4 |          2 | 2020-04-21   |    100 |
      |          7 |          3 |          1 | 2020-05-17   |     33 |
      +------------+------------+------------+--------------+--------+
      7 rows in set (0.00 sec)
  mysql> INSERT INTO question (question_id,name_question,subject_id) VALUES
  (1,'Запрос на выборку начинается с ключевого слова:',1),
  (2,'Условие, по которому отбираются записи, задается после ключевого слова:',1),
  (3,'Для сортировки используется:',1),
  (4,'Какой запрос выбирает все записи из таблицы student:',1),
  (5,'Для внутреннего соединения таблиц используется оператор:',1),
  (6,'База данных - это:',2),
  (7,'Отношение - это:',2),
  (8,'Концептуальная модель используется для',2),
  (9,'Какой тип данных не допустим в реляционной таблице?',2);
      Query OK, 9 rows affected (0.19 sec)
      Records: 9  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM question;
      +-------------+-------------------------------------------------------------------------------------------------------------------------------------+------------+
      | question_id | name_question                                                                                                                       | subject_id |
      +-------------+-------------------------------------------------------------------------------------------------------------------------------------+------------+
      |           1 | Запрос на выборку начинается с ключевого слова:                                                                                     |          1 |
      |           2 | Условие, по которому отбираются записи, задается после ключевого слова:                                                             |          1 |
      |           3 | Для сортировки используется:                                                                                                        |          1 |
      |           4 | Какой запрос выбирает все записи из таблицы student:                                                                                |          1 |
      |           5 | Для внутреннего соединения таблиц используется оператор:                                                                            |          1 |
      |           6 | База данных - это:                                                                                                                  |          2 |
      |           7 | Отношение - это:                                                                                                                    |          2 |
      |           8 | Концептуальная модель используется для                                                                                              |          2 |
      |           9 | Какой тип данных не допустим в реляционной таблице?                                                                                 |          2 |
      +-------------+-------------------------------------------------------------------------------------------------------------------------------------+------------+
      9 rows in set (0.00 sec)
  mysql> INSERT INTO answer (answer_id,name_answer,question_id,is_correct) VALUES
  (1,'UPDATE',1,FALSE),
  (2,'SELECT',1,TRUE),
  (3,'INSERT',1,FALSE),
  (4,'GROUP BY',2,FALSE),
  (5,'FROM',2,FALSE),
  (6,'WHERE',2,TRUE),
  (7,'SELECT',2,FALSE),
  (8,'SORT',3,FALSE),
  (9,'ORDER BY',3,TRUE),
  (10,'RANG BY',3,FALSE),
  (11,'SELECT * FROM student',4,TRUE),
  (12,'SELECT student',4,FALSE),
  (13,'INNER JOIN',5,TRUE),
  (14,'LEFT JOIN',5,FALSE),
  (15,'RIGHT JOIN',5,FALSE),
  (16,'CROSS JOIN',5,FALSE),
  (17,'совокупность данных, организованных по определенным правилам',6,TRUE),
  (18,'совокупность программ для хранения и обработки больших массивов информации',6,FALSE),
  (19,'строка',7,FALSE),
  (20,'столбец',7,FALSE),
  (21,'таблица',7,TRUE),
  (22,'обобщенное представление пользователей о данных',8,TRUE),
  (23,'описание представления данных в памяти компьютера',8,FALSE),
  (24,'база данных',8,FALSE),
  (25,'file',9,TRUE),
  (26,'INT',9,FALSE),
  (27,'VARCHAR',9,FALSE),
  (28,'DATE',9,FALSE);
      Query OK, 28 rows affected (0.22 sec)
      Records: 28  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM answer;
      +-----------+----------------------------------------------------------------------------------------------------------------------------------------------+-------------+------------+
      | answer_id | name_answer                                                                                                                                  | question_id | is_correct |
      +-----------+----------------------------------------------------------------------------------------------------------------------------------------------+-------------+------------+
      |         1 | UPDATE                                                                                                                                       |           1 |          0 |
      |         2 | SELECT                                                                                                                                       |           1 |          1 |
      |         3 | INSERT                                                                                                                                       |           1 |          0 |
      |         4 | GROUP BY                                                                                                                                     |           2 |          0 |
      |         5 | FROM                                                                                                                                         |           2 |          0 |
      |         6 | WHERE                                                                                                                                        |           2 |          1 |
      |         7 | SELECT                                                                                                                                       |           2 |          0 |
      |         8 | SORT                                                                                                                                         |           3 |          0 |
      |         9 | ORDER BY                                                                                                                                     |           3 |          1 |
      |        10 | RANG BY                                                                                                                                      |           3 |          0 |
      |        11 | SELECT * FROM student                                                                                                                        |           4 |          1 |
      |        12 | SELECT student                                                                                                                               |           4 |          0 |
      |        13 | INNER JOIN                                                                                                                                   |           5 |          1 |
      |        14 | LEFT JOIN                                                                                                                                    |           5 |          0 |
      |        15 | RIGHT JOIN                                                                                                                                   |           5 |          0 |
      |        16 | CROSS JOIN                                                                                                                                   |           5 |          0 |
      |        17 | совокупность данных, организованных по определенным правилам                                                                                 |           6 |          1 |
      |        18 | совокупность программ для хранения и обработки больших массивов информации                                                                   |           6 |          0 |
      |        19 | строка                                                                                                                                       |           7 |          0 |
      |        20 | столбец                                                                                                                                      |           7 |          0 |
      |        21 | таблица                                                                                                                                      |           7 |          1 |
      |        22 | обобщенное представление пользователей о данных                                                                                              |           8 |          1 |
      |        23 | описание представления данных в памяти компьютера                                                                                            |           8 |          0 |
      |        24 | база данных                                                                                                                                  |           8 |          0 |
      |        25 | file                                                                                                                                         |           9 |          1 |
      |        26 | INT                                                                                                                                          |           9 |          0 |
      |        27 | VARCHAR                                                                                                                                      |           9 |          0 |
      |        28 | DATE                                                                                                                                         |           9 |          0 |
      +-----------+----------------------------------------------------------------------------------------------------------------------------------------------+-------------+------------+
      28 rows in set (0.00 sec)
  mysql> INSERT INTO testing (testing_id,attempt_id,question_id,answer_id) VALUES
  (1,1,9,25),
  (2,1,7,19),
  (3,1,6,17),
  (4,2,3,9),
  (5,2,1,2),
  (6,2,4,11),
  (7,3,6,18),
  (8,3,8,24),
  (9,3,9,28),
  (10,4,1,2),
  (11,4,5,16),
  (12,4,3,10),
  (13,5,2,6),
  (14,5,1,2),
  (15,5,4,12),
  (16,6,6,17),
  (17,6,8,22),
  (18,6,7,21),
  (19,7,1,3),
  (20,7,4,11),
  (21,7,5,16);
      Query OK, 21 rows affected (0.22 sec)
      Records: 21  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM testing;
      +------------+------------+-------------+-----------+
      | testing_id | attempt_id | question_id | answer_id |
      +------------+------------+-------------+-----------+
      |          1 |          1 |           9 |        25 |
      |          2 |          1 |           7 |        19 |
      |          3 |          1 |           6 |        17 |
      |          4 |          2 |           3 |         9 |
      |          5 |          2 |           1 |         2 |
      |          6 |          2 |           4 |        11 |
      |          7 |          3 |           6 |        18 |
      |          8 |          3 |           8 |        24 |
      |          9 |          3 |           9 |        28 |
      |         10 |          4 |           1 |         2 |
      |         11 |          4 |           5 |        16 |
      |         12 |          4 |           3 |        10 |
      |         13 |          5 |           2 |         6 |
      |         14 |          5 |           1 |         2 |
      |         15 |          5 |           4 |        12 |
      |         16 |          6 |           6 |        17 |
      |         17 |          6 |           8 |        22 |
      |         18 |          6 |           7 |        21 |
      |         19 |          7 |           1 |         3 |
      |         20 |          7 |           4 |        11 |
      |         21 |          7 |           5 |        16 |
      +------------+------------+-------------+-----------+
      21 rows in set (0.01 sec)
  Task:
  Вывести студентов, которые сдавали дисциплину Основы баз данных», указать дату попытки и результат. Информацию вывести по убыванию результатов тестирования.
  Decision:
  mysql> SELECT * FROM student;
      +------------+-------------------------------+
      | student_id | name_student                  |
      +------------+-------------------------------+
      |          1 | Баранов Павел                 |
      |          2 | Абрамова Катя                 |
      |          3 | Семенов Иван                  |
      |          4 | Яковлева Галина               |
      +------------+-------------------------------+
      4 rows in set (0.00 sec)
  mysql> SELECT * FROM attempt;
      +------------+------------+------------+--------------+--------+
      | attempt_id | student_id | subject_id | date_attempt | result |
      +------------+------------+------------+--------------+--------+
      |          1 |          1 |          2 | 2020-03-23   |     67 |
      |          2 |          3 |          1 | 2020-03-23   |    100 |
      |          3 |          4 |          2 | 2020-03-26   |      0 |
      |          4 |          1 |          1 | 2020-04-15   |     33 |
      |          5 |          3 |          1 | 2020-04-15   |     67 |
      |          6 |          4 |          2 | 2020-04-21   |    100 |
      |          7 |          3 |          1 | 2020-05-17   |     33 |
      +------------+------------+------------+--------------+--------+
      7 rows in set (0.00 sec)
  mysql> SELECT * FROM subject;
      +------------+----------------------------------+
      | subject_id | name_subject                     |
      +------------+----------------------------------+
      |          1 | Основы SQL                       |
      |          2 | Основы баз данных                |
      |          3 | Физика                           |
      +------------+----------------------------------+
      3 rows in set (0.00 sec)
  mysql> SELECT name_student, date_attempt, result
  FROM student
  INNER JOIN attempt
  ON student.student_id=attempt.student_id
  INNER JOIN subject
  ON attempt.subject_id=subject.subject_id
  WHERE subject.name_subject='Основы баз данных'
  ORDER BY result DESC;
      +-------------------------------+--------------+--------+
      | name_student                  | date_attempt | result |
      +-------------------------------+--------------+--------+
      | Яковлева Галина               | 2020-04-21   |    100 |
      | Баранов Павел                 | 2020-03-23   |     67 |
      | Яковлева Галина               | 2020-03-26   |      0 |
      +-------------------------------+--------------+--------+
      3 rows in set (0.01 sec)
  Task:
  Вывести, сколько попыток сделали студенты по каждой дисциплине, а также средний результат попыток, который округлить до 2 знаков после запятой. Под результатом попытки понимается процент правильных ответов на вопросы теста, который занесен в столбец result.  В результат включить название дисциплины, а также вычисляемые столбцы Количество и Среднее. Информацию вывести по убыванию средних результатов.
  Decision:
  mysql> SELECT * FROM attempt;
      +------------+------------+------------+--------------+--------+
      | attempt_id | student_id | subject_id | date_attempt | result |
      +------------+------------+------------+--------------+--------+
      |          1 |          1 |          2 | 2020-03-23   |     67 |
      |          2 |          3 |          1 | 2020-03-23   |    100 |
      |          3 |          4 |          2 | 2020-03-26   |      0 |
      |          4 |          1 |          1 | 2020-04-15   |     33 |
      |          5 |          3 |          1 | 2020-04-15   |     67 |
      |          6 |          4 |          2 | 2020-04-21   |    100 |
      |          7 |          3 |          1 | 2020-05-17   |     33 |
      +------------+------------+------------+--------------+--------+
      7 rows in set (0.00 sec)
  mysql> SELECT * FROM subject;
      +------------+----------------------------------+
      | subject_id | name_subject                     |
      +------------+----------------------------------+
      |          1 | Основы SQL                       |
      |          2 | Основы баз данных                |
      |          3 | Физика                           |
      +------------+----------------------------------+
      3 rows in set (0.00 sec)
  mysql> SELECT name_subject, COUNT(attempt.subject_id) AS Количество, ROUND(AVG(result),2) AS Среднее
  FROM attempt
  RIGHT JOIN subject
  ON attempt.subject_id=subject.subject_id
  GROUP BY name_subject;
      +----------------------------------+----------------------+----------------+
      | name_subject                     | Количество           | Среднее        |
      +----------------------------------+----------------------+----------------+
      | Основы SQL                       |                    4 |          58.25 |
      | Основы баз данных                |                    3 |          55.67 |
      | Физика                           |                    0 |           NULL |
      +----------------------------------+----------------------+----------------+
      3 rows in set (0.10 sec)
  Task:
  Вывести студентов (различных студентов), имеющих максимальные результаты попыток. Информацию отсортировать в алфавитном порядке по фамилии студента.
  Максимальный результат не обязательно будет 100%, поэтому явно это значение в запросе не задавать.
  Decision:
  mysql> SELECT * FROM attempt;
      +------------+------------+------------+--------------+--------+
      | attempt_id | student_id | subject_id | date_attempt | result |
      +------------+------------+------------+--------------+--------+
      |          1 |          1 |          2 | 2020-03-23   |     67 |
      |          2 |          3 |          1 | 2020-03-23   |    100 |
      |          3 |          4 |          2 | 2020-03-26   |      0 |
      |          4 |          1 |          1 | 2020-04-15   |     33 |
      |          5 |          3 |          1 | 2020-04-15   |     67 |
      |          6 |          4 |          2 | 2020-04-21   |    100 |
      |          7 |          3 |          1 | 2020-05-17   |     33 |
      +------------+------------+------------+--------------+--------+
      7 rows in set (0.01 sec)
  mysql> SELECT * FROM student;
      +------------+-------------------------------+
      | student_id | name_student                  |
      +------------+-------------------------------+
      |          1 | Баранов Павел                 |
      |          2 | Абрамова Катя                 |
      |          3 | Семенов Иван                  |
      |          4 | Яковлева Галина               |
      +------------+-------------------------------+
      4 rows in set (0.00 sec)
  mysql> SELECT name_student, result
  FROM attempt
  INNER JOIN student
  ON attempt.student_id=student.student_id
  WHERE result=(
  SELECT MAX(result)
  FROM attempt)
  ORDER BY name_student;
      +-------------------------------+--------+
      | name_student                  | result |
      +-------------------------------+--------+
      | Семенов Иван                  |    100 |
      | Яковлева Галина               |    100 |
      +-------------------------------+--------+
      2 rows in set (0.05 sec)
  Task:
  Если студент совершал несколько попыток по одной и той же дисциплине, то вывести разницу в днях между первой и последней попыткой. В результат включить фамилию и имя студента, название дисциплины и вычисляемый столбец Интервал. Информацию вывести по возрастанию разницы. Студентов, сделавших одну попытку по дисциплине, не учитывать.
  Decision:
  mysql> SELECT * FROM student;
      +------------+-------------------------------+
      | student_id | name_student                  |
      +------------+-------------------------------+
      |          1 | Баранов Павел                 |
      |          2 | Абрамова Катя                 |
      |          3 | Семенов Иван                  |
      |          4 | Яковлева Галина               |
      +------------+-------------------------------+
      4 rows in set (0.00 sec)
  mysql> SELECT * FROM attempt;
      +------------+------------+------------+--------------+--------+
      | attempt_id | student_id | subject_id | date_attempt | result |
      +------------+------------+------------+--------------+--------+
      |          1 |          1 |          2 | 2020-03-23   |     67 |
      |          2 |          3 |          1 | 2020-03-23   |    100 |
      |          3 |          4 |          2 | 2020-03-26   |      0 |
      |          4 |          1 |          1 | 2020-04-15   |     33 |
      |          5 |          3 |          1 | 2020-04-15   |     67 |
      |          6 |          4 |          2 | 2020-04-21   |    100 |
      |          7 |          3 |          1 | 2020-05-17   |     33 |
      +------------+------------+------------+--------------+--------+
      7 rows in set (0.00 sec)
  mysql> SELECT * FROM subject;
      +------------+----------------------------------+
      | subject_id | name_subject                     |
      +------------+----------------------------------+
      |          1 | Основы SQL                       |
      |          2 | Основы баз данных                |
      |          3 | Физика                           |
      +------------+----------------------------------+
      3 rows in set (0.00 sec)
  mysql> SELECT name_student,name_subject,DATEDIFF(MAX(date_attempt),MIN(date_attempt)) AS Интервал
  FROM attempt
  INNER JOIN student
  ON attempt.student_id=student.student_id
  INNER JOIN subject
  ON attempt.subject_id=subject.subject_id
  GROUP BY name_student,name_subject
  HAVING COUNT(date_attempt)>1
  ORDER BY Интервал;
      +-------------------------------+----------------------------------+------------------+
      | name_student                  | name_subject                     | Интервал         |
      +-------------------------------+----------------------------------+------------------+
      | Яковлева Галина               | Основы баз данных                |               26 |
      | Семенов Иван                  | Основы SQL                       |               55 |
      +-------------------------------+----------------------------------+------------------+
      2 rows in set (0.01 sec)
  Task:
  Студенты могут тестироваться по одной или нескольким дисциплинам (не обязательно по всем). Вывести дисциплину и количество уникальных студентов (столбец назвать Количество), которые по ней проходили тестирование . Информацию отсортировать сначала по убыванию количества, а потом по названию дисциплины. В результат включить и дисциплины, тестирование по которым студенты не проходили, в этом случае указать количество студентов 0.
  Decision:
  mysql> SELECT * FROM attempt;
      +------------+------------+------------+--------------+--------+
      | attempt_id | student_id | subject_id | date_attempt | result |
      +------------+------------+------------+--------------+--------+
      |          1 |          1 |          2 | 2020-03-23   |     67 |
      |          2 |          3 |          1 | 2020-03-23   |    100 |
      |          3 |          4 |          2 | 2020-03-26   |      0 |
      |          4 |          1 |          1 | 2020-04-15   |     33 |
      |          5 |          3 |          1 | 2020-04-15   |     67 |
      |          6 |          4 |          2 | 2020-04-21   |    100 |
      |          7 |          3 |          1 | 2020-05-17   |     33 |
      +------------+------------+------------+--------------+--------+
      7 rows in set (0.00 sec)
  mysql> SELECT * FROM subject;
      +------------+----------------------------------+
      | subject_id | name_subject                     |
      +------------+----------------------------------+
      |          1 | Основы SQL                       |
      |          2 | Основы баз данных                |
      |          3 | Физика                           |
      +------------+----------------------------------+
      3 rows in set (0.01 sec)
  mysql> SELECT name_subject,COUNT(new_table.student_id) AS Количество
  FROM (SELECT DISTINCT subject_id,student_id
  FROM attempt) AS new_table
  RIGHT JOIN subject
  ON new_table.subject_id=subject.subject_id
  GROUP BY name_subject
  ORDER BY Количество DESC,name_subject;
      +----------------------------------+----------------------+
      | name_subject                     | Количество           |
      +----------------------------------+----------------------+
      | Основы SQL                       |                    2 |
      | Основы баз данных                |                    2 |
      | Физика                           |                    0 |
      +----------------------------------+----------------------+
      3 rows in set (0.01 sec)
  Task:
  Случайным образом отберите 3 вопроса по дисциплине Основы баз данных». В результат включите столбцы question_id и name_question.
  Decision:
  mysql> SELECT * FROM question;
      +-------------+-------------------------------------------------------------------------------------------------------------------------------------+------------+
      | question_id | name_question                                                                                                                       | subject_id |
      +-------------+-------------------------------------------------------------------------------------------------------------------------------------+------------+
      |           1 | Запрос на выборку начинается с ключевого слова:                                                                                     |          1 |
      |           2 | Условие, по которому отбираются записи, задается после ключевого слова:                                                             |          1 |
      |           3 | Для сортировки используется:                                                                                                        |          1 |
      |           4 | Какой запрос выбирает все записи из таблицы student:                                                                                |          1 |
      |           5 | Для внутреннего соединения таблиц используется оператор:                                                                            |          1 |
      |           6 | База данных - это:                                                                                                                  |          2 |
      |           7 | Отношение - это:                                                                                                                    |          2 |
      |           8 | Концептуальная модель используется для                                                                                              |          2 |
      |           9 | Какой тип данных не допустим в реляционной таблице?                                                                                 |          2 |
      +-------------+-------------------------------------------------------------------------------------------------------------------------------------+------------+
      9 rows in set (0.04 sec)
  mysql> SELECT * FROM subject;
      +------------+----------------------------------+
      | subject_id | name_subject                     |
      +------------+----------------------------------+
      |          1 | Основы SQL                       |
      |          2 | Основы баз данных                |
      |          3 | Физика                           |
      +------------+----------------------------------+
      3 rows in set (0.00 sec)
  mysql> SELECT question_id,name_question
  FROM question
  INNER JOIN subject
  ON question.subject_id=subject.subject_id
  WHERE name_subject='Основы баз данных'
  ORDER BY RAND()
  LIMIT 3;
      +-------------+------------------------------------------------------------------------------------------------+
      | question_id | name_question                                                                                  |
      +-------------+------------------------------------------------------------------------------------------------+
      |           9 | Какой тип данных не допустим в реляционной таблице?                                            |
      |           7 | Отношение - это:                                                                               |
      |           8 | Концептуальная модель используется для                                                         |
      +-------------+------------------------------------------------------------------------------------------------+
      3 rows in set (0.04 sec)
  Task:
  Вывести вопросы, которые были включены в тест для Семенова Ивана по дисциплине Основы SQL» 2020-05-17  (значение attempt_id для этой попытки равно 7). Указать, какой ответ дал студент и правильный он или нет(вывести Верно или Неверно). В результат включить вопрос, ответ и вычисляемый столбец  Результат.
  Decision:
  mysql> SELECT * FROM question;
      +-------------+-------------------------------------------------------------------------------------------------------------------------------------+------------+
      | question_id | name_question                                                                                                                       | subject_id |
      +-------------+-------------------------------------------------------------------------------------------------------------------------------------+------------+
      |           1 | Запрос на выборку начинается с ключевого слова:                                                                                     |          1 |
      |           2 | Условие, по которому отбираются записи, задается после ключевого слова:                                                             |          1 |
      |           3 | Для сортировки используется:                                                                                                        |          1 |
      |           4 | Какой запрос выбирает все записи из таблицы student:                                                                                |          1 |
      |           5 | Для внутреннего соединения таблиц используется оператор:                                                                            |          1 |
      |           6 | База данных - это:                                                                                                                  |          2 |
      |           7 | Отношение - это:                                                                                                                    |          2 |
      |           8 | Концептуальная модель используется для                                                                                              |          2 |
      |           9 | Какой тип данных не допустим в реляционной таблице?                                                                                 |          2 |
      +-------------+-------------------------------------------------------------------------------------------------------------------------------------+------------+
      9 rows in set (0.00 sec)
  mysql> SELECT * FROM answer;
      +-----------+----------------------------------------------------------------------------------------------------------------------------------------------+-------------+------------+
      | answer_id | name_answer                                                                                                                                  | question_id | is_correct |
      +-----------+----------------------------------------------------------------------------------------------------------------------------------------------+-------------+------------+
      |         1 | UPDATE                                                                                                                                       |           1 |          0 |
      |         2 | SELECT                                                                                                                                       |           1 |          1 |
      |         3 | INSERT                                                                                                                                       |           1 |          0 |
      |         4 | GROUP BY                                                                                                                                     |           2 |          0 |
      |         5 | FROM                                                                                                                                         |           2 |          0 |
      |         6 | WHERE                                                                                                                                        |           2 |          1 |
      |         7 | SELECT                                                                                                                                       |           2 |          0 |
      |         8 | SORT                                                                                                                                         |           3 |          0 |
      |         9 | ORDER BY                                                                                                                                     |           3 |          1 |
      |        10 | RANG BY                                                                                                                                      |           3 |          0 |
      |        11 | SELECT * FROM student                                                                                                                        |           4 |          1 |
      |        12 | SELECT student                                                                                                                               |           4 |          0 |
      |        13 | INNER JOIN                                                                                                                                   |           5 |          1 |
      |        14 | LEFT JOIN                                                                                                                                    |           5 |          0 |
      |        15 | RIGHT JOIN                                                                                                                                   |           5 |          0 |
      |        16 | CROSS JOIN                                                                                                                                   |           5 |          0 |
      |        17 | совокупность данных, организованных по определенным правилам                                                                                 |           6 |          1 |
      |        18 | совокупность программ для хранения и обработки больших массивов информации                                                                   |           6 |          0 |
      |        19 | строка                                                                                                                                       |           7 |          0 |
      |        20 | столбец                                                                                                                                      |           7 |          0 |
      |        21 | таблица                                                                                                                                      |           7 |          1 |
      |        22 | обобщенное представление пользователей о данных                                                                                              |           8 |          1 |
      |        23 | описание представления данных в памяти компьютера                                                                                            |           8 |          0 |
      |        24 | база данных                                                                                                                                  |           8 |          0 |
      |        25 | file                                                                                                                                         |           9 |          1 |
      |        26 | INT                                                                                                                                          |           9 |          0 |
      |        27 | VARCHAR                                                                                                                                      |           9 |          0 |
      |        28 | DATE                                                                                                                                         |           9 |          0 |
      +-----------+----------------------------------------------------------------------------------------------------------------------------------------------+-------------+------------+
      28 rows in set (0.12 sec)
  mysql> SELECT * FROM testing;
      +------------+------------+-------------+-----------+
      | testing_id | attempt_id | question_id | answer_id |
      +------------+------------+-------------+-----------+
      |          1 |          1 |           9 |        25 |
      |          2 |          1 |           7 |        19 |
      |          3 |          1 |           6 |        17 |
      |          4 |          2 |           3 |         9 |
      |          5 |          2 |           1 |         2 |
      |          6 |          2 |           4 |        11 |
      |          7 |          3 |           6 |        18 |
      |          8 |          3 |           8 |        24 |
      |          9 |          3 |           9 |        28 |
      |         10 |          4 |           1 |         2 |
      |         11 |          4 |           5 |        16 |
      |         12 |          4 |           3 |        10 |
      |         13 |          5 |           2 |         6 |
      |         14 |          5 |           1 |         2 |
      |         15 |          5 |           4 |        12 |
      |         16 |          6 |           6 |        17 |
      |         17 |          6 |           8 |        22 |
      |         18 |          6 |           7 |        21 |
      |         19 |          7 |           1 |         3 |
      |         20 |          7 |           4 |        11 |
      |         21 |          7 |           5 |        16 |
      +------------+------------+-------------+-----------+
      21 rows in set (0.01 sec)
  mysql> SELECT name_question,
      name_answer,
      IF(is_correct,'Верно','Неверно') AS Результат
  FROM testing
  INNER JOIN answer
  USING(answer_id)
  INNER JOIN question
  ON testing.question_id=question.question_id
  INNER JOIN subject
  USING(subject_id)
  INNER JOIN attempt
  USING(attempt_id)
  INNER JOIN student
  USING(student_id)
  WHERE date_attempt=DATE('2020-05-17')
      AND name_student='Семенов Иван'
      AND name_subject='Основы SQL';
      +------------------------------------------------------------------------------------------------------------+-----------------------+--------------------+
      | name_question                                                                                              | name_answer           | Результат          |
      +------------------------------------------------------------------------------------------------------------+-----------------------+--------------------+
      | Запрос на выборку начинается с ключевого слова:                                                            | INSERT                | Неверно            |
      | Какой запрос выбирает все записи из таблицы student:                                                       | SELECT * FROM student | Верно              |
      | Для внутреннего соединения таблиц используется оператор:                                                   | CROSS JOIN            | Неверно            |
      +------------------------------------------------------------------------------------------------------------+-----------------------+--------------------+
      3 rows in set (0.02 sec)
  Task:
  Посчитать результаты тестирования. Результат попытки вычислить как количество правильных ответов, деленное на 3 (количество вопросов в каждой попытке) и умноженное на 100. Результат округлить до двух знаков после запятой. Вывести фамилию студента, название предмета, дату и результат. Последний столбец назвать Результат. Информацию отсортировать сначала по фамилии студента, потом по убыванию даты попытки.
  Decision:
  mysql> SELECT * FROM answer;
      +-----------+----------------------------------------------------------------------------------------------------------------------------------------------+-------------+------------+
      | answer_id | name_answer                                                                                                                                  | question_id | is_correct |
      +-----------+----------------------------------------------------------------------------------------------------------------------------------------------+-------------+------------+
      |         1 | UPDATE                                                                                                                                       |           1 |          0 |
      |         2 | SELECT                                                                                                                                       |           1 |          1 |
      |         3 | INSERT                                                                                                                                       |           1 |          0 |
      |         4 | GROUP BY                                                                                                                                     |           2 |          0 |
      |         5 | FROM                                                                                                                                         |           2 |          0 |
      |         6 | WHERE                                                                                                                                        |           2 |          1 |
      |         7 | SELECT                                                                                                                                       |           2 |          0 |
      |         8 | SORT                                                                                                                                         |           3 |          0 |
      |         9 | ORDER BY                                                                                                                                     |           3 |          1 |
      |        10 | RANG BY                                                                                                                                      |           3 |          0 |
      |        11 | SELECT * FROM student                                                                                                                        |           4 |          1 |
      |        12 | SELECT student                                                                                                                               |           4 |          0 |
      |        13 | INNER JOIN                                                                                                                                   |           5 |          1 |
      |        14 | LEFT JOIN                                                                                                                                    |           5 |          0 |
      |        15 | RIGHT JOIN                                                                                                                                   |           5 |          0 |
      CT *|        16 | CROSS JOIN                                                                                                                                   |           5 |          0 |
      |        17 | совокупность данных, организованных по определенным правилам                                                                                 |           6 |          1 |
      |        18 | совокупность программ для хранения и обработки больших массивов информации                                                                   |           6 |          0 |
      |        19 | строка                                                                                                                                       |           7 |          0 |
      |        20 | столбец                                                                                                                                      |           7 |          0 |
      |        21 | таблица                                                                                                                                      |           7 |          1 |
      |        22 | обобщенное представление пользователей о данных                                                                                              |           8 |          1 |
      |        23 | описание представления данных в памяти компьютера                                                                                            |           8 |          0 |
      |        24 | база данных                                                                                                                                  |           8 |          0 |
      |        25 | file                                                                                                                                         |           9 |          1 |
      |        26 | INT                                                                                                                                          |           9 |          0 |
      |        27 | VARCHAR                                                                                                                                      |           9 |          0 |
      |        28 | DATE                                                                                                                                         |           9 |          0 |
      +-----------+----------------------------------------------------------------------------------------------------------------------------------------------+-------------+------------+
      28 rows in set (0.00 sec)
  mysql> SELECT * FROM student;
      +------------+-------------------------------+
      | student_id | name_student                  |
      +------------+-------------------------------+
      |          1 | Баранов Павел                 |
      |          2 | Абрамова Катя                 |
      |          3 | Семенов Иван                  |
      |          4 | Яковлева Галина               |
      +------------+-------------------------------+
      4 rows in set (0.00 sec)
  mysql> SELECT * FROM testing;
      +------------+------------+-------------+-----------+
      | testing_id | attempt_id | question_id | answer_id |
      +------------+------------+-------------+-----------+
      |          1 |          1 |           9 |        25 |
      |          2 |          1 |           7 |        19 |
      |          3 |          1 |           6 |        17 |
      |          4 |          2 |           3 |         9 |
      |          5 |          2 |           1 |         2 |
      |          6 |          2 |           4 |        11 |
      |          7 |          3 |           6 |        18 |
      |          8 |          3 |           8 |        24 |
      |          9 |          3 |           9 |        28 |
      |         10 |          4 |           1 |         2 |
      |         11 |          4 |           5 |        16 |
      |         12 |          4 |           3 |        10 |
      |         13 |          5 |           2 |         6 |
      |         14 |          5 |           1 |         2 |
      |         15 |          5 |           4 |        12 |
      |         16 |          6 |           6 |        17 |
      |         17 |          6 |           8 |        22 |
      |         18 |          6 |           7 |        21 |
      |         19 |          7 |           1 |         3 |
      |         20 |          7 |           4 |        11 |
      |         21 |          7 |           5 |        16 |
      +------------+------------+-------------+-----------+
      21 rows in set (0.00 sec)
  mysql> SELECT * FROM attempt;
      +------------+------------+------------+--------------+--------+
      | attempt_id | student_id | subject_id | date_attempt | result |
      +------------+------------+------------+--------------+--------+
      |          1 |          1 |          2 | 2020-03-23   |     67 |
      |          2 |          3 |          1 | 2020-03-23   |    100 |
      |          3 |          4 |          2 | 2020-03-26   |      0 |
      |          4 |          1 |          1 | 2020-04-15   |     33 |
      |          5 |          3 |          1 | 2020-04-15   |     67 |
      |          6 |          4 |          2 | 2020-04-21   |    100 |
      |          7 |          3 |          1 | 2020-05-17   |     33 |
      +------------+------------+------------+--------------+--------+
      7 rows in set (0.00 sec)
  mysql> SELECT * FROM question;
      +-------------+-------------------------------------------------------------------------------------------------------------------------------------+------------+
      | question_id | name_question                                                                                                                       | subject_id |
      +-------------+-------------------------------------------------------------------------------------------------------------------------------------+------------+
      |           1 | Запрос на выборку начинается с ключевого слова:                                                                                     |          1 |
      |           2 | Условие, по которому отбираются записи, задается после ключевого слова:                                                             |          1 |
      |           3 | Для сортировки используется:                                                                                                        |          1 |
      |           4 | Какой запрос выбирает все записи из таблицы student:                                                                                |          1 |
      |           5 | Для внутреннего соединения таблиц используется оператор:                                                                            |          1 |
      |           6 | База данных - это:                                                                                                                  |          2 |
      |           7 | Отношение - это:                                                                                                                    |          2 |
      |           8 | Концептуальная модель используется для                                                                                              |          2 |
      |           9 | Какой тип данных не допустим в реляционной таблице?                                                                                 |          2 |
      +-------------+-------------------------------------------------------------------------------------------------------------------------------------+------------+
      9 rows in set (0.00 sec)
  mysql> SELECT * FROM subject;
      +------------+----------------------------------+
      | subject_id | name_subject                     |
      +------------+----------------------------------+
      |          1 | Основы SQL                       |
      |          2 | Основы баз данных                |
      |          3 | Физика                           |
      +------------+----------------------------------+
      3 rows in set (0.00 sec)
  mysql> SELECT name_student,
      name_subject,
      date_attempt,
      ROUND(100 * SUM(is_correct) / 3, 2) AS Результат
  FROM attempt
  INNER JOIN student
  USING(student_id)
  INNER JOIN subject
  USING(subject_id)
  INNER JOIN testing
  USING(attempt_id)
  INNER JOIN answer
  USING(answer_id)
  GROUP BY attempt_id
  ORDER BY name_student, date_attempt DESC;
      +-------------------------------+----------------------------------+--------------+--------------------+
      | name_student                  | name_subject                     | date_attempt | Результат          |
      +-------------------------------+----------------------------------+--------------+--------------------+
      | Баранов Павел                 | Основы SQL                       | 2020-04-15   |              33.33 |
      | Баранов Павел                 | Основы баз данных                | 2020-03-23   |              66.67 |
      | Семенов Иван                  | Основы SQL                       | 2020-05-17   |              33.33 |
      | Семенов Иван                  | Основы SQL                       | 2020-04-15   |              66.67 |
      | Семенов Иван                  | Основы SQL                       | 2020-03-23   |             100.00 |
      | Яковлева Галина               | Основы баз данных                | 2020-04-21   |             100.00 |
      | Яковлева Галина               | Основы баз данных                | 2020-03-26   |               0.00 |
      +-------------------------------+----------------------------------+--------------+--------------------+
      7 rows in set (1.33 sec)
  Task:
  Для каждого вопроса вывести процент успешных решений, то есть отношение количества верных ответов к общему количеству ответов, значение округлить до 2-х знаков после запятой. Также вывести название предмета, к которому относится вопрос, и общее количество ответов на этот вопрос. В результат включить название дисциплины, вопросы по ней (столбец назвать Вопрос), а также два вычисляемых столбца Всего_ответов и Успешность. Информацию отсортировать сначала по названию дисциплины, потом по убыванию успешности, а потом по тексту вопроса в алфавитном порядке.
  Поскольку тексты вопросов могут быть длинными, обрезать их 30 символов и добавить многоточие "...".
  Decision:
  mysql> SELECT * FROM subject;
      +------------+----------------------------------+
      | subject_id | name_subject                     |
      +------------+----------------------------------+
      |          1 | Основы SQL                       |
      |          2 | Основы баз данных                |
      |          3 | Физика                           |
      +------------+----------------------------------+
      3 rows in set (0.00 sec)
  mysql> SELECT * FROM question;
      +-------------+-------------------------------------------------------------------------------------------------------------------------------------+------------+
      | question_id | name_question                                                                                                                       | subject_id |
      +-------------+-------------------------------------------------------------------------------------------------------------------------------------+------------+
      |           1 | Запрос на выборку начинается с ключевого слова:                                                                                     |          1 |
      |           2 | Условие, по которому отбираются записи, задается после ключевого слова:                                                             |          1 |
      |           3 | Для сортировки используется:                                                                                                        |          1 |
      |           4 | Какой запрос выбирает все записи из таблицы student:                                                                                |          1 |
      |           5 | Для внутреннего соединения таблиц используется оператор:                                                                            |          1 |
      |           6 | База данных - это:                                                                                                                  |          2 |
      |           7 | Отношение - это:                                                                                                                    |          2 |
      |           8 | Концептуальная модель используется для                                                                                              |          2 |
      |           9 | Какой тип данных не допустим в реляционной таблице?                                                                                 |          2 |
      +-------------+-------------------------------------------------------------------------------------------------------------------------------------+------------+
      9 rows in set (0.01 sec)
  mysql> SELECT testing_id, question_id, answer_id FROM testing;
      +------------+-------------+-----------+
      | testing_id | question_id | answer_id |
      +------------+-------------+-----------+
      |          1 |           9 |        25 |
      |          2 |           7 |        19 |
      |          3 |           6 |        17 |
      |          4 |           3 |         9 |
      |          5 |           1 |         2 |
      |          6 |           4 |        11 |
      |          7 |           6 |        18 |
      |          8 |           8 |        24 |
      |          9 |           9 |        28 |
      |         10 |           1 |         2 |
      |         11 |           5 |        16 |
      |         12 |           3 |        10 |
      |         13 |           2 |         6 |
      |         14 |           1 |         2 |
      |         15 |           4 |        12 |
      |         16 |           6 |        17 |
      |         17 |           8 |        22 |
      |         18 |           7 |        21 |
      |         19 |           1 |         3 |
      |         20 |           4 |        11 |
      |         21 |           5 |        16 |
      +------------+-------------+-----------+
      21 rows in set (0.00 sec)
  mysql> SELECT answer_id, question_id, is_correct FROM answer;
      +-----------+-------------+------------+
      | answer_id | question_id | is_correct |
      +-----------+-------------+------------+
      |         1 |           1 |          0 |
      |         2 |           1 |          1 |
      |         3 |           1 |          0 |
      |         4 |           2 |          0 |
      |         5 |           2 |          0 |
      |         6 |           2 |          1 |
      |         7 |           2 |          0 |
      |         8 |           3 |          0 |
      |         9 |           3 |          1 |
      |        10 |           3 |          0 |
      |        11 |           4 |          1 |
      |        12 |           4 |          0 |
      |        13 |           5 |          1 |
      |        14 |           5 |          0 |
      |        15 |           5 |          0 |
      |        16 |           5 |          0 |
      |        17 |           6 |          1 |
      |        18 |           6 |          0 |
      |        19 |           7 |          0 |
      |        20 |           7 |          0 |
      |        21 |           7 |          1 |
      |        22 |           8 |          1 |
      |        23 |           8 |          0 |
      |        24 |           8 |          0 |
      |        25 |           9 |          1 |
      |        26 |           9 |          0 |
      |        27 |           9 |          0 |
      |        28 |           9 |          0 |
      +-----------+-------------+------------+
      28 rows in set (0.00 sec)
  mysql> SELECT name_subject,
      CONCAT(LEFT(name_question, 30), '...') AS Вопрос,
      COUNT(testing.answer_id) AS Всего_ответов,
      ROUND(SUM(is_correct) / COUNT(testing.answer_id) * 100, 2) AS Успешность
  FROM subject
  JOIN question USING(subject_id)
  JOIN testing USING(question_id)
  LEFT JOIN answer USING(answer_id)
  GROUP BY 1, 2
  ORDER BY 1, 4 DESC, 2;
      +----------------------------------+---------------------------------------------------------------+---------------------------+----------------------+
      | name_subject                     | Вопрос                                                        | Всего_ответов             | Успешность           |
      +----------------------------------+---------------------------------------------------------------+---------------------------+----------------------+
      | Основы SQL                       | Условие, по которому отбираютс...                             |                         1 |               100.00 |
      | Основы SQL                       | Запрос на выборку начинается с...                             |                         4 |                75.00 |
      | Основы SQL                       | Какой запрос выбирает все запи...                             |                         3 |                66.67 |
      | Основы SQL                       | Для сортировки используется:...                               |                         2 |                50.00 |
      | Основы SQL                       | Для внутреннего соединения таб...                             |                         2 |                 0.00 |
      | Основы баз данных                | База данных - это:...                                         |                         3 |                66.67 |
      | Основы баз данных                | Какой тип данных не допустим в...                             |                         2 |                50.00 |
      | Основы баз данных                | Концептуальная модель использу...                             |                         2 |                50.00 |
      | Основы баз данных                | Отношение - это:...                                           |                         2 |                50.00 |
      +----------------------------------+---------------------------------------------------------------+---------------------------+----------------------+
      9 rows in set (0.20 sec)
  Task:
  В таблицу attempt включить новую попытку для студента Баранова Павла по дисциплине Основы баз данных». Установить текущую дату в качестве даты выполнения попытки.
  Decision:
  mysql> SELECT * FROM student;
      +------------+-------------------------------+
      | student_id | name_student                  |
      +------------+-------------------------------+
      |          1 | Баранов Павел                 |
      |          2 | Абрамова Катя                 |
      |          3 | Семенов Иван                  |
      |          4 | Яковлева Галина               |
      +------------+-------------------------------+
      4 rows in set (0.00 sec)
  mysql> SELECT * FROM subject;
      +------------+----------------------------------+
      | subject_id | name_subject                     |
      +------------+----------------------------------+
      |          1 | Основы SQL                       |
      |          2 | Основы баз данных                |
      |          3 | Физика                           |
      +------------+----------------------------------+
      3 rows in set (0.01 sec)
  mysql> SELECT * FROM attempt;
      +------------+------------+------------+--------------+--------+
      | attempt_id | student_id | subject_id | date_attempt | result |
      +------------+------------+------------+--------------+--------+
      |          1 |          1 |          2 | 2020-03-23   |     67 |
      |          2 |          3 |          1 | 2020-03-23   |    100 |
      |          3 |          4 |          2 | 2020-03-26   |      0 |
      |          4 |          1 |          1 | 2020-04-15   |     33 |
      |          5 |          3 |          1 | 2020-04-15   |     67 |
      |          6 |          4 |          2 | 2020-04-21   |    100 |
      |          7 |          3 |          1 | 2020-05-17   |     33 |
      +------------+------------+------------+--------------+--------+
      7 rows in set (0.00 sec)
  mysql> INSERT INTO attempt(student_id, subject_id, date_attempt)
  SELECT student_id, subject_id, NOW()
  FROM  student, subject
  WHERE name_student = 'Баранов Павел' AND name_subject = 'Основы баз данных';
      Query OK, 1 row affected, 1 warning (0.16 sec)
      Records: 1  Duplicates: 0  Warnings: 1
  mysql> SELECT * FROM attempt;
      +------------+------------+------------+--------------+--------+
      | attempt_id | student_id | subject_id | date_attempt | result |
      +------------+------------+------------+--------------+--------+
      |          1 |          1 |          2 | 2020-03-23   |     67 |
      |          2 |          3 |          1 | 2020-03-23   |    100 |
      |          3 |          4 |          2 | 2020-03-26   |      0 |
      |          4 |          1 |          1 | 2020-04-15   |     33 |
      |          5 |          3 |          1 | 2020-04-15   |     67 |
      |          6 |          4 |          2 | 2020-04-21   |    100 |
      |          7 |          3 |          1 | 2020-05-17   |     33 |
      |          8 |          1 |          2 | 2022-03-22   |   NULL |
      +------------+------------+------------+--------------+--------+
      8 rows in set (0.00 sec)
  Task:
  Случайным образом выбрать три вопроса (запрос) по дисциплине, тестирование по которой собирается проходить студент, занесенный в таблицу attempt последним, и добавить их в таблицу testing. id последней попытки получить как максимальное значение id из таблицы attempt.
  Decision:
  mysql> SELECT * FROM question;
      +-------------+-------------------------------------------------------------------------------------------------------------------------------------+------------+
      | question_id | name_question                                                                                                                       | subject_id |
      +-------------+-------------------------------------------------------------------------------------------------------------------------------------+------------+
      |           1 | Запрос на выборку начинается с ключевого слова:                                                                                     |          1 |
      |           2 | Условие, по которому отбираются записи, задается после ключевого слова:                                                             |          1 |
      |           3 | Для сортировки используется:                                                                                                        |          1 |
      |           4 | Какой запрос выбирает все записи из таблицы student:                                                                                |          1 |
      |           5 | Для внутреннего соединения таблиц используется оператор:                                                                            |          1 |
      |           6 | База данных - это:                                                                                                                  |          2 |
      |           7 | Отношение - это:                                                                                                                    |          2 |
      |           8 | Концептуальная модель используется для                                                                                              |          2 |
      |           9 | Какой тип данных не допустим в реляционной таблице?                                                                                 |          2 |
      +-------------+-------------------------------------------------------------------------------------------------------------------------------------+------------+
      9 rows in set (0.00 sec)
  mysql> SELECT * FROM attempt;
      +------------+------------+------------+--------------+--------+
      | attempt_id | student_id | subject_id | date_attempt | result |
      +------------+------------+------------+--------------+--------+
      |          1 |          1 |          2 | 2020-03-23   |     67 |
      |          2 |          3 |          1 | 2020-03-23   |    100 |
      |          3 |          4 |          2 | 2020-03-26   |      0 |
      |          4 |          1 |          1 | 2020-04-15   |     33 |
      |          5 |          3 |          1 | 2020-04-15   |     67 |
      |          6 |          4 |          2 | 2020-04-21   |    100 |
      |          7 |          3 |          1 | 2020-05-17   |     33 |
      |          8 |          1 |          2 | 2022-03-22   |   NULL |
      +------------+------------+------------+--------------+--------+
      8 rows in set (0.00 sec)
  mysql> SELECT * FROM testing;
      +------------+------------+-------------+-----------+
      | testing_id | attempt_id | question_id | answer_id |
      +------------+------------+-------------+-----------+
      |          1 |          1 |           9 |        25 |
      |          2 |          1 |           7 |        19 |
      |          3 |          1 |           6 |        17 |
      |          4 |          2 |           3 |         9 |
      |          5 |          2 |           1 |         2 |
      |          6 |          2 |           4 |        11 |
      |          7 |          3 |           6 |        18 |
      |          8 |          3 |           8 |        24 |
      |          9 |          3 |           9 |        28 |
      |         10 |          4 |           1 |         2 |
      |         11 |          4 |           5 |        16 |
      |         12 |          4 |           3 |        10 |
      |         13 |          5 |           2 |         6 |
      |         14 |          5 |           1 |         2 |
      |         15 |          5 |           4 |        12 |
      |         16 |          6 |           6 |        17 |
      |         17 |          6 |           8 |        22 |
      |         18 |          6 |           7 |        21 |
      |         19 |          7 |           1 |         3 |
      |         20 |          7 |           4 |        11 |
      |         21 |          7 |           5 |        16 |
      +------------+------------+-------------+-----------+
      21 rows in set (0.00 sec)
  mysql> INSERT INTO testing(attempt_id, question_id)
  SELECT attempt_id, question_id
  FROM question
  JOIN attempt USING(subject_id)
  WHERE attempt_id = (SELECT MAX(attempt_id)
                  FROM attempt)
  ORDER BY RAND()
  LIMIT 3;
      Query OK, 3 rows affected (0.16 sec)
      Records: 3  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM testing;
      +------------+------------+-------------+-----------+
      | testing_id | attempt_id | question_id | answer_id |
      +------------+------------+-------------+-----------+
      |          1 |          1 |           9 |        25 |
      |          2 |          1 |           7 |        19 |
      |          3 |          1 |           6 |        17 |
      |          4 |          2 |           3 |         9 |
      |          5 |          2 |           1 |         2 |
      |          6 |          2 |           4 |        11 |
      |          7 |          3 |           6 |        18 |
      |          8 |          3 |           8 |        24 |
      |          9 |          3 |           9 |        28 |
      |         10 |          4 |           1 |         2 |
      |         11 |          4 |           5 |        16 |
      |         12 |          4 |           3 |        10 |
      |         13 |          5 |           2 |         6 |
      |         14 |          5 |           1 |         2 |
      |         15 |          5 |           4 |        12 |
      |         16 |          6 |           6 |        17 |
      |         17 |          6 |           8 |        22 |
      |         18 |          6 |           7 |        21 |
      |         19 |          7 |           1 |         3 |
      |         20 |          7 |           4 |        11 |
      |         21 |          7 |           5 |        16 |
      |         22 |          8 |           6 |      NULL |
      |         23 |          8 |           7 |      NULL |
      |         24 |          8 |           8 |      NULL |
      +------------+------------+-------------+-----------+
      24 rows in set (0.00 sec)
  Task:
  Студент прошел тестирование (то есть все его ответы занесены в таблицу testing), далее необходимо вычислить результат(запрос) и занести его в таблицу attempt для соответствующей попытки.  Результат попытки вычислить как количество правильных ответов, деленное на 3 (количество вопросов в каждой попытке) и умноженное на 100. Результат округлить до целого.
  Будем считать, что мы знаем id попытки,  для которой вычисляется результат, в нашем случае это 8. В таблицу testing занесены следующие ответы пользователя:
  +------------+------------+-------------+-----------+
  | testing_id | attempt_id | question_id | answer_id |
  +------------+------------+-------------+-----------+
  | 22         | 8          | 7           | 19        |
  | 23         | 8          | 6           | 17        |
  | 24         | 8          | 8           | 22        |
  +------------+------------+-------------+-----------+
  Decision:
  mysql> SELECT * FROM testing;
      *+------------+------------+-------------+-----------+
      | testing_id | attempt_id | question_id | answer_id |
      +------------+------------+-------------+-----------+
      |          1 |          1 |           9 |        25 |
      |          2 |          1 |           7 |        19 |
      |          3 |          1 |           6 |        17 |
      |          4 |          2 |           3 |         9 |
      |          5 |          2 |           1 |         2 |
      |          6 |          2 |           4 |        11 |
      |          7 |          3 |           6 |        18 |
      |          8 |          3 |           8 |        24 |
      |          9 |          3 |           9 |        28 |
      |         10 |          4 |           1 |         2 |
      |         11 |          4 |           5 |        16 |
      |         12 |          4 |           3 |        10 |
      |         13 |          5 |           2 |         6 |
      |         14 |          5 |           1 |         2 |
      |         15 |          5 |           4 |        12 |
      |         16 |          6 |           6 |        17 |
      |         17 |          6 |           8 |        22 |
      |         18 |          6 |           7 |        21 |
      |         19 |          7 |           1 |         3 |
      |         20 |          7 |           4 |        11 |
      |         21 |          7 |           5 |        16 |
      |         22 |          8 |           6 |      NULL |
      |         23 |          8 |           7 |      NULL |
      |         24 |          8 |           8 |      NULL |
      +------------+------------+-------------+-----------+
      24 rows in set (0.00 sec)
  mysql> SELECT * FROM attempt;
      +------------+------------+------------+--------------+--------+
      | attempt_id | student_id | subject_id | date_attempt | result |
      +------------+------------+------------+--------------+--------+
      |          1 |          1 |          2 | 2020-03-23   |     67 |
      |          2 |          3 |          1 | 2020-03-23   |    100 |
      |          3 |          4 |          2 | 2020-03-26   |      0 |
      |          4 |          1 |          1 | 2020-04-15   |     33 |
      |          5 |          3 |          1 | 2020-04-15   |     67 |
      |          6 |          4 |          2 | 2020-04-21   |    100 |
      |          7 |          3 |          1 | 2020-05-17   |     33 |
      |          8 |          1 |          2 | 2022-03-22   |   NULL |
      +------------+------------+------------+--------------+--------+
      8 rows in set (0.00 sec)
  mysql> SELECT * FROM answer;
      +-----------+----------------------------------------------------------------------------------------------------------------------------------------------+-------------+------------+
      | answer_id | name_answer                                                                                                                                  | question_id | is_correct |
      +-----------+----------------------------------------------------------------------------------------------------------------------------------------------+-------------+------------+
      |         1 | UPDATE                                                                                                                                       |           1 |          0 |
      |         2 | SELECT                                                                                                                                       |           1 |          1 |
      |         3 | INSERT                                                                                                                                       |           1 |          0 |
      |         4 | GROUP BY                                                                                                                                     |           2 |          0 |
      |         5 | FROM                                                                                                                                         |           2 |          0 |
      |         6 | WHERE                                                                                                                                        |           2 |          1 |
      |         7 | SELECT                                                                                                                                       |           2 |          0 |
      |         8 | SORT                                                                                                                                         |           3 |          0 |
      |         9 | ORDER BY                                                                                                                                     |           3 |          1 |
      |        10 | RANG BY                                                                                                                                      |           3 |          0 |
      |        11 | SELECT * FROM student                                                                                                                        |           4 |          1 |
      |        12 | SELECT student                                                                                                                               |           4 |          0 |
      |        13 | INNER JOIN                                                                                                                                   |           5 |          1 |
      |        14 | LEFT JOIN                                                                                                                                    |           5 |          0 |
      |        15 | RIGHT JOIN                                                                                                                                   |           5 |          0 |
      |        16 | CROSS JOIN                                                                                                                                   |           5 |          0 |
      |        17 | совокупность данных, организованных по определенным правилам                                                                                 |           6 |          1 |
      |        18 | совокупность программ для хранения и обработки больших массивов информации                                                                   |           6 |          0 |
      |        19 | строка                                                                                                                                       |           7 |          0 |
      |        20 | столбец                                                                                                                                      |           7 |          0 |
      |        21 | таблица                                                                                                                                      |           7 |          1 |
      |        22 | обобщенное представление пользователей о данных                                                                                              |           8 |          1 |
      |        23 | описание представления данных в памяти компьютера                                                                                            |           8 |          0 |
      |        24 | база данных                                                                                                                                  |           8 |          0 |
      |        25 | file                                                                                                                                         |           9 |          1 |
      |        26 | INT                                                                                                                                          |           9 |          0 |
      |        27 | VARCHAR                                                                                                                                      |           9 |          0 |
      |        28 | DATE                                                                                                                                         |           9 |          0 |
      +-----------+----------------------------------------------------------------------------------------------------------------------------------------------+-------------+------------+
      28 rows in set (0.00 sec)
  mysql> UPDATE attempt
  SET result = (SELECT ROUND((SUM(is_correct)/3)*100, 2)
      FROM answer
      INNER JOIN testing
      ON answer.answer_id = testing.answer_id
      WHERE testing.attempt_id = 8)
  WHERE attempt.attempt_id = 8;
  Task:
  Удалить из таблицы attempt все попытки, выполненные раньше 1 мая 2020 года. Также удалить и все соответствующие этим попыткам вопросы из таблицы testing, которая создавалась следующим запросом:
      CREATE TABLE testing (
          testing_id INT PRIMARY KEY AUTO_INCREMENT,
          attempt_id INT,
          question_id INT,
          answer_id INT,
          FOREIGN KEY (attempt_id)  REFERENCES attempt (attempt_id) ON DELETE CASCADE
      );
  Decision:
  mysql> SELECT * FROM testing;
      +------------+------------+-------------+-----------+
      | testing_id | attempt_id | question_id | answer_id |
      +------------+------------+-------------+-----------+
      |          1 |          1 |           9 |        25 |
      |          2 |          1 |           7 |        19 |
      |          3 |          1 |           6 |        17 |
      |          4 |          2 |           3 |         9 |
      |          5 |          2 |           1 |         2 |
      |          6 |          2 |           4 |        11 |
      |          7 |          3 |           6 |        18 |
      |          8 |          3 |           8 |        24 |
      |          9 |          3 |           9 |        28 |
      |         10 |          4 |           1 |         2 |
      |         11 |          4 |           5 |        16 |
      |         12 |          4 |           3 |        10 |
      |         13 |          5 |           2 |         6 |
      |         14 |          5 |           1 |         2 |
      |         15 |          5 |           4 |        12 |
      |         16 |          6 |           6 |        17 |
      |         17 |          6 |           8 |        22 |
      |         18 |          6 |           7 |        21 |
      |         19 |          7 |           1 |         3 |
      |         20 |          7 |           4 |        11 |
      |         21 |          7 |           5 |        16 |
      |         22 |          8 |           6 |      NULL |
      |         23 |          8 |           7 |      NULL |
      |         24 |          8 |           8 |      NULL |
      +------------+------------+-------------+-----------+
      24 rows in set (0.00 sec)
  mysql> SELECT * FROM attempt;
      +------------+------------+------------+--------------+--------+
      | attempt_id | student_id | subject_id | date_attempt | result |
      +------------+------------+------------+--------------+--------+
      |          1 |          1 |          2 | 2020-03-23   |     67 |
      |          2 |          3 |          1 | 2020-03-23   |    100 |
      |          3 |          4 |          2 | 2020-03-26   |      0 |
      |          4 |          1 |          1 | 2020-04-15   |     33 |
      |          5 |          3 |          1 | 2020-04-15   |     67 |
      |          6 |          4 |          2 | 2020-04-21   |    100 |
      |          7 |          3 |          1 | 2020-05-17   |     33 |
      |          8 |          1 |          2 | 2022-03-22   |   NULL |
      +------------+------------+------------+--------------+--------+
      8 rows in set (0.00 sec)
  mysql> DELETE FROM attempt
  WHERE date_attempt < '2020-05-01';
      Query OK, 6 rows affected (0.19 sec)
  mysql> SELECT * FROM attempt;
      +------------+------------+------------+--------------+--------+
      | attempt_id | student_id | subject_id | date_attempt | result |
      +------------+------------+------------+--------------+--------+
      |          7 |          3 |          1 | 2020-05-17   |     33 |
      |          8 |          1 |          2 | 2022-03-22   |   NULL |
      +------------+------------+------------+--------------+--------+
      2 rows in set (0.00 sec)
  mysql> SELECT * FROM testing;
      +------------+------------+-------------+-----------+
      | testing_id | attempt_id | question_id | answer_id |
      +------------+------------+-------------+-----------+
      |         19 |          7 |           1 |         3 |
      |         20 |          7 |           4 |        11 |
      |         21 |          7 |           5 |        16 |
      |         22 |          8 |           6 |      NULL |
      |         23 |          8 |           7 |      NULL |
      |         24 |          8 |           8 |      NULL |
      +------------+------------+-------------+-----------+
      6 rows in set (0.00 sec)
  Task:
  Найти вопрос, с самой большой успешностью выполнения - "самый легкий" и вопрос, с самой маленькой успешностью выполнения - "самый сложный". (Подробно про успешность на этом шаге). Вывести предмет, эти два вопроса и указание - самый сложный или самый легкий это вопрос. Сначала вывести самый легкий запроса, потом самый сложный.
  Decision:
  SET @mn = (SELECT SUM(is_correct) / COUNT(is_correct) * 100
  FROM subject
  JOIN question USING(subject_id)
  JOIN testing USING(question_id)
  LEFT JOIN answer USING(answer_id)
  GROUP BY name_subject, name_question
  ORDER BY 1
  LIMIT 1);
  SET @mx = (SELECT SUM(is_correct) / COUNT(is_correct) * 100
  FROM subject
  JOIN question USING(subject_id)
  JOIN testing USING(question_id)
  LEFT JOIN answer USING(answer_id)
  GROUP BY name_subject, name_question
  ORDER BY 1 DESC
  LIMIT 1);
  SELECT name_subject, name_question,
  IF(SUM(is_correct) / COUNT(is_correct) * 100 = @mx, 'самый легкий', 'самый сложный') AS Сложность
  FROM subject
  JOIN question USING(subject_id)
  JOIN testing USING(question_id)
  LEFT JOIN answer USING(answer_id)
  GROUP BY name_subject, name_question
  HAVING SUM(is_correct) / COUNT(is_correct) * 100 = @mn OR SUM(is_correct) / COUNT(is_correct) * 100 = @mx
  ORDER BY SUM(is_correct) / COUNT(is_correct) * 100 DESC
  +--------------+-------------------------------------------------------------------------+---------------+
  | name_subject | name_question | Сложность |
  +--------------+-------------------------------------------------------------------------+---------------+
  | Основы SQL | Условие, по которому отбираются записи, задается после ключевого слова: | самый легкий |
  | Основы SQL | Для внутреннего соединения таблиц используется оператор: | самый сложный |
  +--------------+-------------------------------------------------------------------------+---------------+
  Task:
  Для повышения успеваемости, предоставить возможность студентам снова пройти тестирование.Для студентов, у которых количество попыток меньше 3 и максимальный балл < 70, в таблицу attempt добавить новые попытки по соответствующим предметам с текущей датой.
  Decision:
  INSERT attempt(student_id, subject_id, date_attempt, result)
  SELECT student_id, subject_id, NOW(), NULL
  FROM attempt
  GROUP BY student_id, subject_id
  HAVING COUNT(subject_id) < 3 AND MAX(result) < 70;
  SELECT * FROM attempt;
  +------------+------------+------------+--------------+--------+
  | attempt_id | student_id | subject_id | date_attempt | result |
  +------------+------------+------------+--------------+--------+
  | 1 | 1 | 2 | 2020-03-23 | 67 |
  | 2 | 3 | 1 | 2020-03-23 | 100 |
  | 3 | 4 | 2 | 2020-03-26 | 0 |
  | 4 | 1 | 1 | 2020-04-15 | 33 |
  | 5 | 3 | 1 | 2020-04-15 | 67 |
  | 6 | 4 | 2 | 2020-04-21 | 100 |
  | 7 | 3 | 1 | 2020-05-17 | 33 |
  | 8 | 1 | 1 | 2020-05-18 | None |
  | 9 | 1 | 2 | 2020-05-18 | None |
  +------------+------------+------------+--------------+--------+
  Task:
  Разработать базу "Абитуриент".
  Университет состоит из множества факультетов (школ). Абитуриенты зачисляются на образовательные программы по результатам Единого государственного экзамена (ЕГЭ). Каждая образовательная программа относится к определенному факультету, для нее определяются предметы ЕГЭ, необходимые для поступления, минимальный балл по этим предметам, а также план набора (количество мест) на образовательную программу.
  Абитуриенты подают заявление в приемную комиссию на образовательную программу, каждый абитуриент может выбрать несколько образовательных программ (но не более трех). В заявлении указываются фамилия, имя, отчество заявителя, а также его достижения: получил ли он медаль за учебу в школе, есть ли у него значок ГТО и т.д. При этом за каждое достижение начисляется дополнительное очко. Абитуриент предоставляет справку с результатами сдачи Единого государственного экзамена. Если абитуриент выбирает образовательную программу, то он должен был сдать предметы, определенные для этой программы, и балл должен быть как минимум минимальным по этому предмету.
  Зачисление абитуриентов осуществляется следующим образом: сначала подсчитывается сумма баллов по предметам для каждой образовательной программы, суммируются баллы успеваемости, затем абитуриенты сортируются в порядке убывания суммы баллов и отбираются первые в соответствии с количеством мест, определенным планом набора.
  Decision:
  mysql> CREATE DATABASE Students;
  Query OK, 1 row affected (0.26 sec)
  mysql> USE Students;
  Database changed
  mysql> CREATE TABLE department (department_id INT PRIMARY KEY AUTO_INCREMENT,
      -> name_department VARCHAR(30));
  Query OK, 0 rows affected (1.35 sec)
  mysql> INSERT INTO department (department_id, name_department)
      -> VALUES (1, 'Инженерная школа'), (2, 'Школа естественных наук');
  Query OK, 2 rows affected (0.15 sec)
  Records: 2  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM department;
  +---------------+----------------------------------------------+
  | department_id | name_department                              |
  +---------------+----------------------------------------------+
  |             1 | Инженерная школа                             |
  |             2 | Школа естественных наук                      |
  +---------------+----------------------------------------------+
  2 rows in set (0.00 sec)
  mysql> CREATE TABLE subject (subject_id INT PRIMARY KEY AUTO_INCREMENT,
      -> name_subject VARCHAR(30));
  Query OK, 0 rows affected (2.33 sec)
  mysql> INSERT INTO subject (subject_id, name_subject)
      -> VALUES (1, 'Русский язык'), (2, 'Математика'), (3, 'Физика'), (4, 'Информатика');
  Query OK, 4 rows affected (0.26 sec)
  Records: 4  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM subject;
  +------------+-------------------------+
  | subject_id | name_subject            |
  +------------+-------------------------+
  |          1 | Русский язык            |
  |          2 | Математика              |
  |          3 | Физика                  |
  |          4 | Информатика             |
  +------------+-------------------------+
  4 rows in set (0.00 sec)
  mysql> CREATE TABLE program (program_id INT PRIMARY KEY AUTO_INCREMENT,
      -> name_program VARCHAR(50),
      -> department_id INT,
      -> plan INT,
      -> FOREIGN KEY (department_id) REFERENCES department(department_id) ON DELETE CASCADE);
  Query OK, 0 rows affected (1.43 sec)
  mysql> INSERT INTO program (program_id, name_program, department_id, plan)
      -> VALUES (1, 'Прикладная математика и информатика', 2, 2),
      -> (2, 'Математика и компьютерные науки', 2, 1),
      -> (3, 'Прикладная механика', 1, 2),
      -> (4, 'Мехатроника и робототехника', 1, 3);
  Query OK, 4 rows affected (0.14 sec)
  Records: 4  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM program;
  +------------+---------------------------------------------------------------------+---------------+------+
  | program_id | name_program                                                        | department_id | plan |
  +------------+---------------------------------------------------------------------+---------------+------+
  |          1 | Прикладная математика и информатика                                 |             2 |    2 |
  |          2 | Математика и компьютерные науки                                     |             2 |    1 |
  |          3 | Прикладная механика                                                 |             1 |    2 |
  |          4 | Мехатроника и робототехника                                         |             1 |    3 |
  +------------+---------------------------------------------------------------------+---------------+------+
  4 rows in set (0.01 sec)
  mysql> CREATE TABLE enrollee (enrollee_id INT PRIMARY KEY AUTO_INCREMENT,
      -> name_enrollee VARCHAR(50));
  Query OK, 0 rows affected (2.96 sec)
  mysql> INSERT INTO enrollee (enrollee_id, name_enrollee)
      -> VALUES (1, 'Баранов Павел'), (2, 'Абрамова Катя'), (3, 'Семенов Иван'),
      -> (4, 'Яковлева Галина'), (5, 'Попов Илья'), (6, 'Степанова Дарья');
  Query OK, 6 rows affected (0.30 sec)
  Records: 6  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM enrollee;
  +-------------+-------------------------------+
  | enrollee_id | name_enrollee                 |
  +-------------+-------------------------------+
  |           1 | Баранов Павел                 |
  |           2 | Абрамова Катя                 |
  |           3 | Семенов Иван                  |
  |           4 | Яковлева Галина               |
  |           5 | Попов Илья                    |
  |           6 | Степанова Дарья               |
  +-------------+-------------------------------+
  6 rows in set (0.01 sec)
  mysql> CREATE TABLE achievement (achievement_id INT PRIMARY KEY AUTO_INCREMENT,
      -> name_achievement VARCHAR(30),
      -> bonus INT);
  Query OK, 0 rows affected (1.13 sec)
  mysql> INSERT INTO achievement (achievement_id, name_achievement, bonus)
      -> VALUES (1, 'Золотая медаль', 5), (2, 'Серебряная медаль', 3),
      -> (3, 'Золотой значок ГТО', 3),(4, 'Серебряный значок ГТО', 1);
  Query OK, 4 rows affected (0.31 sec)
  Records: 4  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM achievement;
  +----------------+------------------------------------------+-------+
  | achievement_id | name_achievement                         | bonus |
  +----------------+------------------------------------------+-------+
  |              1 | Золотая медаль                           |     5 |
  |              2 | Серебряная медаль                        |     3 |
  |              3 | Золотой значок ГТО                       |     3 |
  |              4 | Серебряный значок ГТО                    |     1 |
  +----------------+------------------------------------------+-------+
  4 rows in set (0.00 sec)
  mysql> CREATE TABLE enrollee_achievement (enrollee_achiev_id INT PRIMARY KEY AUTO_INCREMENT,
      -> enrollee_id INT,
      -> achievement_id INT,
      -> FOREIGN KEY (enrollee_id) REFERENCES enrollee(enrollee_id) ON DELETE CASCADE,
      -> FOREIGN KEY (achievement_id) REFERENCES achievement(achievement_id) ON DELETE CASCADE);
  Query OK, 0 rows affected (1.85 sec)
  mysql> INSERT INTO enrollee_achievement (enrollee_achiev_id, enrollee_id, achievement_id)
      -> VALUES (1, 1, 2),
      -> (2, 1, 3),
      -> (3, 3, 1),
      -> (4, 4, 4),
      -> (5, 5, 1),
      -> (6, 5, 3);
  Query OK, 6 rows affected (0.29 sec)
  Records: 6  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM enrollee_achievement;
  +--------------------+-------------+----------------+
  | enrollee_achiev_id | enrollee_id | achievement_id |
  +--------------------+-------------+----------------+
  |                  1 |           1 |              2 |
  |                  2 |           1 |              3 |
  |                  3 |           3 |              1 |
  |                  4 |           4 |              4 |
  |                  5 |           5 |              1 |
  |                  6 |           5 |              3 |
  +--------------------+-------------+----------------+
  6 rows in set (0.00 sec)
  mysql> CREATE TABLE program_subject (program_subject_id INT PRIMARY KEY AUTO_INCREMENT,
      -> program_id INT,
      -> subject_id INT,
      -> min_result INT,
      -> FOREIGN KEY (program_id) REFERENCES program(program_id)  ON DELETE CASCADE,
      -> FOREIGN KEY (subject_id) REFERENCES subject(subject_id) ON DELETE CASCADE);
  Query OK, 0 rows affected (2.22 sec)
  mysql> INSERT INTO program_subject (program_subject_id, program_id, subject_id, min_result)
      -> VALUES (1, 1, 1, 40),(2, 1, 2, 50), (3, 1, 4, 60), (4, 2, 1, 30),
      -> (5, 2, 2, 50),(6, 2, 4, 60), (7, 3, 1, 30),(8, 3, 2, 45),
      -> (9, 3, 3, 45),(10, 4, 1, 40), (11, 4, 2, 45), (12, 4, 3, 45);
  Query OK, 12 rows affected (0.30 sec)
  Records: 12  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM program_subject;
  +--------------------+------------+------------+------------+
  | program_subject_id | program_id | subject_id | min_result |
  +--------------------+------------+------------+------------+
  |                  1 |          1 |          1 |         40 |
  |                  2 |          1 |          2 |         50 |
  |                  3 |          1 |          4 |         60 |
  |                  4 |          2 |          1 |         30 |
  |                  5 |          2 |          2 |         50 |
  |                  6 |          2 |          4 |         60 |
  |                  7 |          3 |          1 |         30 |
  |                  8 |          3 |          2 |         45 |
  |                  9 |          3 |          3 |         45 |
  |                 10 |          4 |          1 |         40 |
  |                 11 |          4 |          2 |         45 |
  |                 12 |          4 |          3 |         45 |
  +--------------------+------------+------------+------------+
  12 rows in set (0.00 sec)
  mysql> CREATE TABLE program_enrollee (program_enrollee_id INT PRIMARY KEY AUTO_INCREMENT,
      -> program_id INT,
      -> enrollee_id INT,
      -> FOREIGN KEY (program_id) REFERENCES program(program_id) ON DELETE CASCADE,
      -> FOREIGN KEY (enrollee_id) REFERENCES enrollee(enrollee_id) ON DELETE CASCADE);
  Query OK, 0 rows affected (2.10 sec)
  mysql> INSERT INTO program_enrollee (program_enrollee_id, program_id, enrollee_id)
      -> VALUES (1, 3, 1), (2, 4, 1), (3, 1, 1), (4, 2, 2), (5, 1, 2),
      -> (6, 1, 3), (7, 2, 3), (8, 4, 3), (9, 3, 4), (10, 3, 5),
      -> (11, 4, 5), (12, 2, 6), (13, 3, 6), (14, 4, 6);
  Query OK, 14 rows affected (0.24 sec)
  Records: 14  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM program_enrollee;
  +---------------------+------------+-------------+
  | program_enrollee_id | program_id | enrollee_id |
  +---------------------+------------+-------------+
  |                   1 |          3 |           1 |
  |                   2 |          4 |           1 |
  |                   3 |          1 |           1 |
  |                   4 |          2 |           2 |
  |                   5 |          1 |           2 |
  |                   6 |          1 |           3 |
  |                   7 |          2 |           3 |
  |                   8 |          4 |           3 |
  |                   9 |          3 |           4 |
  |                  10 |          3 |           5 |
  |                  11 |          4 |           5 |
  |                  12 |          2 |           6 |
  |                  13 |          3 |           6 |
  |                  14 |          4 |           6 |
  +---------------------+------------+-------------+
  14 rows in set (0.00 sec)
  mysql> CREATE TABLE enrollee_subject (enrollee_subject_id INT PRIMARY KEY AUTO_INCREMENT,
      -> enrollee_id INT,
      -> subject_id INT,
      -> result INT,
      -> FOREIGN KEY (enrollee_id) REFERENCES enrollee(enrollee_id) ON DELETE CASCADE,
      -> FOREIGN KEY (subject_id) REFERENCES subject(subject_id) ON DELETE CASCADE);
  Query OK, 0 rows affected (2.15 sec)
  mysql> INSERT INTO enrollee_subject (enrollee_subject_id, enrollee_id, subject_id, result)
      -> VALUES (1, 1, 1, 68), (2, 1, 2, 70), (3, 1, 3, 41), (4, 1, 4, 75), (5, 2, 1, 75), (6, 2, 2, 70),
      -> (7, 2, 4, 81), (8, 3, 1, 85), (9, 3, 2, 67), (10, 3, 3, 90), (11, 3, 4, 78), (12, 4, 1, 82),
      -> (13, 4, 2, 86), (14, 4, 3, 70), (15, 5, 1, 65), (16, 5, 2, 67), (17, 5, 3, 60),
      -> (18, 6, 1, 90), (19, 6, 2, 92), (20, 6, 3, 88), (21, 6, 4, 94);
  Query OK, 21 rows affected (0.30 sec)
  Records: 21  Duplicates: 0  Warnings: 0
  mysql> SHOW TABLES;
  +----------------------+
  | Tables_in_Students   |
  +----------------------+
  | achievement          |
  | department           |
  | enrollee             |
  | enrollee_achievement |
  | enrollee_subject     |
  | program              |
  | program_enrollee     |
  | program_subject      |
  | subject              |
  +----------------------+
  9 rows in set (0.00 sec)
  Запросы на выборку
  Task:
  Вывести абитуриентов, которые хотят поступать на образовательную программу Мехатроника и робототехника» в отсортированном по фамилиям виде.
  Decision:
  mysql> SELECT * FROM program;
  +------------+---------------------------------------------------------------------+---------------+------+
  | program_id | name_program                                                        | department_id | plan |
  +------------+---------------------------------------------------------------------+---------------+------+
  |          1 | Прикладная математика и информатика                                 |             2 |    2 |
  |          2 | Математика и компьютерные науки                                     |             2 |    1 |
  |          3 | Прикладная механика                                                 |             1 |    2 |
  |          4 | Мехатроника и робототехника                                         |             1 |    3 |
  +------------+---------------------------------------------------------------------+---------------+------+
  4 rows in set (0.00 sec)
  mysql> SELECT * FROM enrollee;
  +-------------+-------------------------------+
  | enrollee_id | name_enrollee                 |
  +-------------+-------------------------------+
  |           1 | Баранов Павел                 |
  |           2 | Абрамова Катя                 |
  |           3 | Семенов Иван                  |
  |           4 | Яковлева Галина               |
  |           5 | Попов Илья                    |
  |           6 | Степанова Дарья               |
  +-------------+-------------------------------+
  6 rows in set (0.00 sec)
  mysql> SELECT * FROM program_enrollee;
  +---------------------+------------+-------------+
  | program_enrollee_id | program_id | enrollee_id |
  +---------------------+------------+-------------+
  |                   1 |          3 |           1 |
  |                   2 |          4 |           1 |
  |                   3 |          1 |           1 |
  |                   4 |          2 |           2 |
  |                   5 |          1 |           2 |
  |                   6 |          1 |           3 |
  |                   7 |          2 |           3 |
  |                   8 |          4 |           3 |
  |                   9 |          3 |           4 |
  |                  10 |          3 |           5 |
  |                  11 |          4 |           5 |
  |                  12 |          2 |           6 |
  |                  13 |          3 |           6 |
  |                  14 |          4 |           6 |
  +---------------------+------------+-------------+
  14 rows in set (0.00 sec)
  mysql> SELECT name_enrollee
      -> FROM enrollee
      -> INNER JOIN program_enrollee
      -> ON enrollee.enrollee_id = program_enrollee.enrollee_id
      -> INNER JOIN program
      -> ON program_enrollee.program_id = program.program_id
      -> WHERE name_program="Мехатроника и робототехника"
      -> ORDER BY name_enrollee;
  +-------------------------------+
  | name_enrollee                 |
  +-------------------------------+
  | Баранов Павел                 |
  | Попов Илья                    |
  | Семенов Иван                  |
  | Степанова Дарья               |
  +-------------------------------+
  4 rows in set (0.00 sec)
  Task:
  Вывести образовательные программы, на которые для поступления необходим предмет Информатика». Программы отсортировать в обратном алфавитном порядке.
  Decision:
  mysql> SELECT * FROM program;
  +------------+---------------------------------------------------------------------+---------------+------+
  | program_id | name_program                                                        | department_id | plan |
  +------------+---------------------------------------------------------------------+---------------+------+
  |          1 | Прикладная математика и информатика                                 |             2 |    2 |
  |          2 | Математика и компьютерные науки                                     |             2 |    1 |
  |          3 | Прикладная механика                                                 |             1 |    2 |
  |          4 | Мехатроника и робототехника                                         |             1 |    3 |
  +------------+---------------------------------------------------------------------+---------------+------+
  4 rows in set (0.00 sec)
  mysql> SELECT * FROM subject;
  +------------+-------------------------+
  | subject_id | name_subject            |
  +------------+-------------------------+
  |          1 | Русский язык            |
  |          2 | Математика              |
  |          3 | Физика                  |
  |          4 | Информатика             |
  +------------+-------------------------+
  4 rows in set (0.01 sec)
  mysql> SELECT * FROM program_subject;
  +--------------------+------------+------------+------------+
  | program_subject_id | program_id | subject_id | min_result |
  +--------------------+------------+------------+------------+
  |                  1 |          1 |          1 |         40 |
  |                  2 |          1 |          2 |         50 |
  |                  3 |          1 |          4 |         60 |
  |                  4 |          2 |          1 |         30 |
  |                  5 |          2 |          2 |         50 |
  |                  6 |          2 |          4 |         60 |
  |                  7 |          3 |          1 |         30 |
  |                  8 |          3 |          2 |         45 |
  |                  9 |          3 |          3 |         45 |
  |                 10 |          4 |          1 |         40 |
  |                 11 |          4 |          2 |         45 |
  |                 12 |          4 |          3 |         45 |
  +--------------------+------------+------------+------------+
  12 rows in set (0.00 sec)
  mysql> SELECT name_program
      -> FROM program
      -> INNER JOIN program_subject
      -> USING(program_id)
      -> INNER JOIN subject
      -> USING(subject_id)
      -> WHERE name_subject="Информатика";
  +---------------------------------------------------------------------+
  | name_program                                                        |
  +---------------------------------------------------------------------+
  | Прикладная математика и информатика                                 |
  | Математика и компьютерные науки                                     |
  +---------------------------------------------------------------------+
  2 rows in set (0.00 sec)
  Task:
  Выведите количество абитуриентов, сдавших ЕГЭ по каждому предмету, максимальное, минимальное и среднее значение баллов по предмету ЕГЭ. Вычисляемые столбцы назвать Количество, Максимум, Минимум, Среднее. Информацию отсортировать по названию предмета в алфавитном порядке, среднее значение округлить до одного знака после запятой.
  Decision:
  mysql> SELECT * FROM subject;
  +------------+-------------------------+
  | subject_id | name_subject            |
  +------------+-------------------------+
  |          1 | Русский язык            |
  |          2 | Математика              |
  |          3 | Физика                  |
  |          4 | Информатика             |
  +------------+-------------------------+
  4 rows in set (0.00 sec)
  mysql> SELECT * FROM enrollee_subject;
  +---------------------+-------------+------------+--------+
  | enrollee_subject_id | enrollee_id | subject_id | result |
  +---------------------+-------------+------------+--------+
  |                   1 |           1 |          1 |     68 |
  |                   2 |           1 |          2 |     70 |
  |                   3 |           1 |          3 |     41 |
  |                   4 |           1 |          4 |     75 |
  |                   5 |           2 |          1 |     75 |
  |                   6 |           2 |          2 |     70 |
  |                   7 |           2 |          4 |     81 |
  |                   8 |           3 |          1 |     85 |
  |                   9 |           3 |          2 |     67 |
  |                  10 |           3 |          3 |     90 |
  |                  11 |           3 |          4 |     78 |
  |                  12 |           4 |          1 |     82 |
  |                  13 |           4 |          2 |     86 |
  |                  14 |           4 |          3 |     70 |
  |                  15 |           5 |          1 |     65 |
  |                  16 |           5 |          2 |     67 |
  |                  17 |           5 |          3 |     60 |
  |                  18 |           6 |          1 |     90 |
  |                  19 |           6 |          2 |     92 |
  |                  20 |           6 |          3 |     88 |
  |                  21 |           6 |          4 |     94 |
  +---------------------+-------------+------------+--------+
  21 rows in set (0.01 sec)
  mysql> SELECT name_subject,
      ->     COUNT(enrollee_id) AS Количество,
      ->     MAX(result) AS Максимум,
      ->     MIN(result) AS Минимум,
      ->     ROUND(AVG(result), 1) AS Среднее
      -> FROM subject
      -> INNER JOIN enrollee_subject
      -> USING(subject_id)
      -> GROUP BY name_subject
      -> ORDER BY name_subject;
  +-------------------------+----------------------+------------------+----------------+----------------+
  | name_subject            | Количество           | Максимум         | Минимум        | Среднее        |
  +-------------------------+----------------------+------------------+----------------+----------------+
  | Информатика             |                    4 |               94 |             75 |           82.0 |
  | Математика              |                    6 |               92 |             67 |           75.3 |
  | Русский язык            |                    6 |               90 |             65 |           77.5 |
  | Физика                  |                    5 |               90 |             41 |           69.8 |
  +-------------------------+----------------------+------------------+----------------+----------------+
  4 rows in set (0.01 sec)
  Task:
  Вывести образовательные программы, для которых минимальный балл ЕГЭ по каждому предмету больше или равен 40 баллам. Программы вывести в отсортированном по алфавиту виде.
  Decision:
  mysql> SELECT * FROM program;
  +------------+---------------------------------------------------------------------+---------------+------+
  | program_id | name_program                                                        | department_id | plan |
  +------------+---------------------------------------------------------------------+---------------+------+
  |          1 | Прикладная математика и информатика                                 |             2 |    2 |
  |          2 | Математика и компьютерные науки                                     |             2 |    1 |
  |          3 | Прикладная механика                                                 |             1 |    2 |
  |          4 | Мехатроника и робототехника                                         |             1 |    3 |
  +------------+---------------------------------------------------------------------+---------------+------+
  4 rows in set (0.00 sec)
  mysql> SELECT * FROM program_subject;
  +--------------------+------------+------------+------------+
  | program_subject_id | program_id | subject_id | min_result |
  +--------------------+------------+------------+------------+
  |                  1 |          1 |          1 |         40 |
  |                  2 |          1 |          2 |         50 |
  |                  3 |          1 |          4 |         60 |
  |                  4 |          2 |          1 |         30 |
  |                  5 |          2 |          2 |         50 |
  |                  6 |          2 |          4 |         60 |
  |                  7 |          3 |          1 |         30 |
  |                  8 |          3 |          2 |         45 |
  |                  9 |          3 |          3 |         45 |
  |                 10 |          4 |          1 |         40 |
  |                 11 |          4 |          2 |         45 |
  |                 12 |          4 |          3 |         45 |
  +--------------------+------------+------------+------------+
  12 rows in set (0.00 sec)
  mysql> SELECT name_program
      -> FROM (SELECT name_program, MIN(min_result)
      ->      FROM program
      ->      INNER JOIN program_subject
      ->      USING(program_id)
      ->      GROUP BY name_program
      ->      HAVING MIN(min_result)>=40) table1
      -> ORDER BY name_program;
  +---------------------------------------------------------------------+
  | name_program                                                        |
  +---------------------------------------------------------------------+
  | Мехатроника и робототехника                                         |
  | Прикладная математика и информатика                                 |
  +---------------------------------------------------------------------+
  2 rows in set (0.01 sec)
  Task:
  Вывести образовательные программы, которые имеют самый большой план набора,  вместе с этой величиной.
  Decision:
  mysql> SELECT * FROM program;
  +------------+---------------------------------------------------------------------+---------------+------+
  | program_id | name_program                                                        | department_id | plan |
  +------------+---------------------------------------------------------------------+---------------+------+
  |          1 | Прикладная математика и информатика                                 |             2 |    2 |
  |          2 | Математика и компьютерные науки                                     |             2 |    1 |
  |          3 | Прикладная механика                                                 |             1 |    2 |
  |          4 | Мехатроника и робототехника                                         |             1 |    3 |
  +------------+---------------------------------------------------------------------+---------------+------+
  4 rows in set (0.00 sec)
  mysql> SELECT name_program, plan
      -> FROM program
      -> WHERE plan=(SELECT MAX(plan)
      ->     FROM program) ;
  +------------------------------------------------------+------+
  | name_program                                         | plan |
  +------------------------------------------------------+------+
  | Мехатроника и робототехника                          |    3 |
  +------------------------------------------------------+------+
  1 row in set (0.11 sec)
  Task:
  Посчитать, сколько дополнительных баллов получит каждый абитуриент. Столбец с дополнительными баллами назвать Бонус. Информацию вывести в отсортированном по фамилиям виде.
  Decision:
  mysql> SELECT * FROM achievement;
  +----------------+------------------------------------------+-------+
  | achievement_id | name_achievement                         | bonus |
  +----------------+------------------------------------------+-------+
  |              1 | Золотая медаль                           |     5 |
  |              2 | Серебряная медаль                        |     3 |
  |              3 | Золотой значок ГТО                       |     3 |
  |              4 | Серебряный значок ГТО                    |     1 |
  +----------------+------------------------------------------+-------+
  4 rows in set (0.00 sec)
  mysql> SELECT * FROM enrollee;
  +-------------+-------------------------------+
  | enrollee_id | name_enrollee                 |
  +-------------+-------------------------------+
  |           1 | Баранов Павел                 |
  |           2 | Абрамова Катя                 |
  |           3 | Семенов Иван                  |
  |           4 | Яковлева Галина               |
  |           5 | Попов Илья                    |
  |           6 | Степанова Дарья               |
  +-------------+-------------------------------+
  6 rows in set (0.00 sec)
  mysql> SELECT * FROM enrollee_achievement;
  +--------------------+-------------+----------------+
  | enrollee_achiev_id | enrollee_id | achievement_id |
  +--------------------+-------------+----------------+
  |                  1 |           1 |              2 |
  |                  2 |           1 |              3 |
  |                  3 |           3 |              1 |
  |                  4 |           4 |              4 |
  |                  5 |           5 |              1 |
  |                  6 |           5 |              3 |
  +--------------------+-------------+----------------+
  6 rows in set (0.00 sec)
  mysql> SELECT name_enrollee,
      ->     IFNULL(SUM(bonus),0) AS Бонус
      -> FROM enrollee
      -> LEFT JOIN enrollee_achievement
      -> USING(enrollee_id)
      -> LEFT JOIN achievement
      -> USING(achievement_id)
      -> GROUP BY name_enrollee
      -> ORDER BY name_enrollee;
  +-------------------------------+------------+
  | name_enrollee                 | Бонус      |
  +-------------------------------+------------+
  | Абрамова Катя                 |          0 |
  | Баранов Павел                 |          6 |
  | Попов Илья                    |          8 |
  | Семенов Иван                  |          5 |
  | Степанова Дарья               |          0 |
  | Яковлева Галина               |          1 |
  +-------------------------------+------------+
  6 rows in set (0.00 sec)
  Task:
  Выведите сколько человек подало заявление на каждую образовательную программу и конкурс на нее (число поданных заявлений деленное на количество мест по плану), округленный до 2-х знаков после запятой. В запросе вывести название факультета, к которому относится образовательная программа, название образовательной программы, план набора абитуриентов на образовательную программу (plan), количество поданных заявлений (Количество) и Конкурс. Информацию отсортировать в порядке убывания конкурса.
  Decision:
  mysql> SELECT * FROM department;
  +---------------+----------------------------------------------+
  | department_id | name_department                              |
  +---------------+----------------------------------------------+
  |             1 | Инженерная школа                             |
  |             2 | Школа естественных наук                      |
  +---------------+----------------------------------------------+
  2 rows in set (0.01 sec)
  mysql> SELECT * FROM program;
  +------------+---------------------------------------------------------------------+---------------+------+
  | program_id | name_program                                                        | department_id | plan |
  +------------+---------------------------------------------------------------------+---------------+------+
  |          1 | Прикладная математика и информатика                                 |             2 |    2 |
  |          2 | Математика и компьютерные науки                                     |             2 |    1 |
  |          3 | Прикладная механика                                                 |             1 |    2 |
  |          4 | Мехатроника и робототехника                                         |             1 |    3 |
  +------------+---------------------------------------------------------------------+---------------+------+
  4 rows in set (0.01 sec)
  mysql> SELECT * FROM program_enrollee;
  +---------------------+------------+-------------+
  | program_enrollee_id | program_id | enrollee_id |
  +---------------------+------------+-------------+
  |                   1 |          3 |           1 |
  |                   2 |          4 |           1 |
  |                   3 |          1 |           1 |
  |                   4 |          2 |           2 |
  |                   5 |          1 |           2 |
  |                   6 |          1 |           3 |
  |                   7 |          2 |           3 |
  |                   8 |          4 |           3 |
  |                   9 |          3 |           4 |
  |                  10 |          3 |           5 |
  |                  11 |          4 |           5 |
  |                  12 |          2 |           6 |
  |                  13 |          3 |           6 |
  |                  14 |          4 |           6 |
  +---------------------+------------+-------------+
  14 rows in set (0.00 sec)
  mysql> SELECT name_department,
      ->     name_program,
      ->     plan,
      ->     COUNT(enrollee_id) AS Количество,
      -> ROUND(COUNT(enrollee_id)/plan ,2) AS Конкурс
      -> FROM department
      -> INNER JOIN program
      -> USING(department_id)
      -> INNER JOIN program_enrollee
      -> USING(program_id)
      -> GROUP BY name_department, name_program, plan
      -> ORDER BY Конкурс DESC;
  +----------------------------------------------+---------------------------------------------------------------------+------+----------------------+----------------+
  | name_department                              | name_program                                                        | plan | Количество           | Конкурс        |
  +----------------------------------------------+---------------------------------------------------------------------+------+----------------------+----------------+
  | Школа естественных наук                      | Математика и компьютерные науки                                     |    1 |                    3 |           3.00 |
  | Инженерная школа                             | Прикладная механика                                                 |    2 |                    4 |           2.00 |
  | Школа естественных наук                      | Прикладная математика и информатика                                 |    2 |                    3 |           1.50 |
  | Инженерная школа                             | Мехатроника и робототехника                                         |    3 |                    4 |           1.33 |
  +----------------------------------------------+---------------------------------------------------------------------+------+----------------------+----------------+
  4 rows in set (0.01 sec)
  Task:
  Вывести образовательные программы, на которые для поступления необходимы предмет Информатика» и Математика» в отсортированном по названию программ виде.
  Decision:
  mysql> SELECT * FROM program;
  +------------+---------------------------------------------------------------------+---------------+------+
  | program_id | name_program                                                        | department_id | plan |
  +------------+---------------------------------------------------------------------+---------------+------+
  |          1 | Прикладная математика и информатика                                 |             2 |    2 |
  |          2 | Математика и компьютерные науки                                     |             2 |    1 |
  |          3 | Прикладная механика                                                 |             1 |    2 |
  |          4 | Мехатроника и робототехника                                         |             1 |    3 |
  +------------+---------------------------------------------------------------------+---------------+------+
  4 rows in set (0.00 sec)
  mysql> SELECT * FROM subject;
  +------------+-------------------------+
  | subject_id | name_subject            |
  +------------+-------------------------+
  |          1 | Русский язык            |
  |          2 | Математика              |
  |          3 | Физика                  |
  |          4 | Информатика             |
  +------------+-------------------------+
  4 rows in set (0.00 sec)
  mysql> SELECT * FROM program_subject;
  +--------------------+------------+------------+------------+
  | program_subject_id | program_id | subject_id | min_result |
  +--------------------+------------+------------+------------+
  |                  1 |          1 |          1 |         40 |
  |                  2 |          1 |          2 |         50 |
  |                  3 |          1 |          4 |         60 |
  |                  4 |          2 |          1 |         30 |
  |                  5 |          2 |          2 |         50 |
  |                  6 |          2 |          4 |         60 |
  |                  7 |          3 |          1 |         30 |
  |                  8 |          3 |          2 |         45 |
  |                  9 |          3 |          3 |         45 |
  |                 10 |          4 |          1 |         40 |
  |                 11 |          4 |          2 |         45 |
  |                 12 |          4 |          3 |         45 |
  +--------------------+------------+------------+------------+
  12 rows in set (0.01 sec)
  mysql> SELECT name_program
      -> FROM program
      -> INNER JOIN program_subject
      -> USING(program_id)
      -> INNER JOIN subject
      -> ON program_subject.subject_id=subject.subject_id AND name_subject IN ('Математика', 'Информатика')
      -> GROUP BY name_program
      -> HAVING COUNT(name_subject)=2
      -> ORDEORDER BY name_program;
  +---------------------------------------------------------------------+
  | name_program                                                        |
  +---------------------------------------------------------------------+
  | Математика и компьютерные науки                                     |
  | Прикладная математика и информатика                                 |
  +---------------------------------------------------------------------+
  2 rows in set (0.01 sec)
  Task:
  Посчитать количество баллов каждого абитуриента на каждую образовательную программу, на которую он подал заявление, по результатам ЕГЭ. В результат включить название образовательной программы, фамилию и имя абитуриента, а также столбец с суммой баллов, который назвать itog. Информацию вывести в отсортированном сначала по образовательной программе, а потом по убыванию суммы баллов виде.
  Decision:
  mysql> SELECT program.name_program, enrollee.name_enrollee, SUM(enrollee_subject.result) AS itog
      -> FROM program_subject
      -> INNER JOIN program USING(program_id)
      -> INNER JOIN program_enrollee USING(program_id)
      -> INNER JOIN enrollee USING(enrollee_id)
      -> INNER JOIN enrollee_subject ON enrollee_subject.subject_id = program_subject.subject_id
      ->     AND enrollee_subject.enrollee_id = program_enrollee.enrollee_id
      -> GROUP BY 1, 2
      -> ORDER BY 1, 3 DESC;
  +---------------------------------------------------------------------+-------------------------------+------+
  | name_program                                                        | name_enrollee                 | itog |
  +---------------------------------------------------------------------+-------------------------------+------+
  | Математика и компьютерные науки                                     | Степанова Дарья               |  276 |
  | Математика и компьютерные науки                                     | Семенов Иван                  |  230 |
  | Математика и компьютерные науки                                     | Абрамова Катя                 |  226 |
  | Мехатроника и робототехника                                         | Степанова Дарья               |  270 |
  | Мехатроника и робототехника                                         | Семенов Иван                  |  242 |
  | Мехатроника и робототехника                                         | Попов Илья                    |  192 |
  | Мехатроника и робототехника                                         | Баранов Павел                 |  179 |
  | Прикладная математика и информатика                                 | Семенов Иван                  |  230 |
  | Прикладная математика и информатика                                 | Абрамова Катя                 |  226 |
  | Прикладная математика и информатика                                 | Баранов Павел                 |  213 |
  | Прикладная механика                                                 | Степанова Дарья               |  270 |
  | Прикладная механика                                                 | Яковлева Галина               |  238 |
  | Прикладная механика                                                 | Попов Илья                    |  192 |
  | Прикладная механика                                                 | Баранов Павел                 |  179 |
  +---------------------------------------------------------------------+-------------------------------+------+
  14 rows in set (0.00 sec)
  Task:
  Вывести название образовательной программы и фамилию тех абитуриентов, которые подавали документы на эту образовательную программу, но не могут быть зачислены на нее. Эти абитуриенты имеют результат по одному или нескольким предметам ЕГЭ, необходимым для поступления на эту образовательную программу, меньше минимального балла. Информацию вывести в отсортированном сначала по программам, а потом по фамилиям абитуриентов виде.
  Например, Баранов Павел по Физике» набрал 41 балл, а  для образовательной программы Прикладная механика» минимальный балл по этому предмету определен в 45 баллов. Следовательно, абитуриент на данную программу не может поступить.
  Decision:
  mysql> SELECT * FROM enrollee;
  +-------------+-------------------------------+
  | enrollee_id | name_enrollee                 |
  +-------------+-------------------------------+
  |           1 | Баранов Павел                 |
  |           2 | Абрамова Катя                 |
  |           3 | Семенов Иван                  |
  |           4 | Яковлева Галина               |
  |           5 | Попов Илья                    |
  |           6 | Степанова Дарья               |
  +-------------+-------------------------------+
  6 rows in set (0.00 sec)
  mysql> SELECT * FROM program_enrollee;
  +---------------------+------------+-------------+
  | program_enrollee_id | program_id | enrollee_id |
  +---------------------+------------+-------------+
  |                   1 |          3 |           1 |
  |                   2 |          4 |           1 |
  |                   3 |          1 |           1 |
  |                   4 |          2 |           2 |
  |                   5 |          1 |           2 |
  |                   6 |          1 |           3 |
  |                   7 |          2 |           3 |
  |                   8 |          4 |           3 |
  |                   9 |          3 |           4 |
  |                  10 |          3 |           5 |
  |                  11 |          4 |           5 |
  |                  12 |          2 |           6 |
  |                  13 |          3 |           6 |
  |                  14 |          4 |           6 |
  +---------------------+------------+-------------+
  14 rows in set (0.00 sec)
  mysql> SELECT * FROM program_enrollee;
  +---------------------+------------+-------------+
  | program_enrollee_id | program_id | enrollee_id |
  +---------------------+------------+-------------+
  |                   1 |          3 |           1 |
  |                   2 |          4 |           1 |
  |                   3 |          1 |           1 |
  |                   4 |          2 |           2 |
  |                   5 |          1 |           2 |
  |                   6 |          1 |           3 |
  |                   7 |          2 |           3 |
  |                   8 |          4 |           3 |
  |                   9 |          3 |           4 |
  |                  10 |          3 |           5 |
  |                  11 |          4 |           5 |
  |                  12 |          2 |           6 |
  |                  13 |          3 |           6 |
  |                  14 |          4 |           6 |
  +---------------------+------------+-------------+
  14 rows in set (0.00 sec)
  mysql> SELECT * FROM program_subject;
  +--------------------+------------+------------+------------+
  | program_subject_id | program_id | subject_id | min_result |
  +--------------------+------------+------------+------------+
  |                  1 |          1 |          1 |         40 |
  |                  2 |          1 |          2 |         50 |
  |                  3 |          1 |          4 |         60 |
  |                  4 |          2 |          1 |         30 |
  |                  5 |          2 |          2 |         50 |
  |                  6 |          2 |          4 |         60 |
  |                  7 |          3 |          1 |         30 |
  |                  8 |          3 |          2 |         45 |
  |                  9 |          3 |          3 |         45 |
  |                 10 |          4 |          1 |         40 |
  |                 11 |          4 |          2 |         45 |
  |                 12 |          4 |          3 |         45 |
  +--------------------+------------+------------+------------+
  12 rows in set (0.00 sec)
  mysql> SELECT * FROM subject;
  +------------+-------------------------+
  | subject_id | name_subject            |
  +------------+-------------------------+
  |          1 | Русский язык            |
  |          2 | Математика              |
  |          3 | Физика                  |
  |          4 | Информатика             |
  +------------+-------------------------+
  4 rows in set (0.00 sec)
  mysql> SELECT * FROM enrollee_subject;
  +---------------------+-------------+------------+--------+
  | enrollee_subject_id | enrollee_id | subject_id | result |
  +---------------------+-------------+------------+--------+
  |                   1 |           1 |          1 |     68 |
  |                   2 |           1 |          2 |     70 |
  |                   3 |           1 |          3 |     41 |
  |                   4 |           1 |          4 |     75 |
  |                   5 |           2 |          1 |     75 |
  |                   6 |           2 |          2 |     70 |
  |                   7 |           2 |          4 |     81 |
  |                   8 |           3 |          1 |     85 |
  |                   9 |           3 |          2 |     67 |
  |                  10 |           3 |          3 |     90 |
  |                  11 |           3 |          4 |     78 |
  |                  12 |           4 |          1 |     82 |
  |                  13 |           4 |          2 |     86 |
  |                  14 |           4 |          3 |     70 |
  |                  15 |           5 |          1 |     65 |
  |                  16 |           5 |          2 |     67 |
  |                  17 |           5 |          3 |     60 |
  |                  18 |           6 |          1 |     90 |
  |                  19 |           6 |          2 |     92 |
  |                  20 |           6 |          3 |     88 |
  |                  21 |           6 |          4 |     94 |
  +---------------------+-------------+------------+--------+
  21 rows in set (0.00 sec)
  mysql> SELECT name_program, name_enrollee
      -> FROM enrollee
      -> INNER JOIN program_enrollee USING(enrollee_id)
      -> INNER JOIN program USING(program_id)
      -> INNER JOIN program_subject USING(program_id)
      -> INNER JOIN subject USING(subject_id)
      -> INNER JOIN enrollee_subject USING(subject_id)
      -> WHERE enrollee_subject.enrollee_id = enrollee.enrollee_id AND result < min_result
      -> ORDER BY name_program;
  +------------------------------------------------------+---------------------------+
  | name_program                                         | name_enrollee             |
  +------------------------------------------------------+---------------------------+
  | Мехатроника и робототехника                          | Баранов Павел             |
  | Прикладная механика                                  | Баранов Павел             |
  +------------------------------------------------------+---------------------------+
  2 rows in set (0.00 sec)
  Task:
  Создать вспомогательную таблицу applicant,  куда включить id образовательной программы, id абитуриента, сумму баллов абитуриентов (столбец itog) в отсортированном сначала по id образовательной программы, а потом по убыванию суммы баллов виде (использовать запрос из предыдущего урока).
  Decision:
  MariaDB [Students]> SELECT * FROM enrollee;
      +-------------+-------------------------------+
      | enrollee_id | name_enrollee                 |
      +-------------+-------------------------------+
      |           1 | Баранов Павел                 |
      |           2 | Абрамова Катя                 |
      |           3 | Семенов Иван                  |
      |           4 | Яковлева Галина               |
      |           5 | Попов Илья                    |
      |           6 | Степанова Дарья               |
      +-------------+-------------------------------+
      6 rows in set (0.001 sec)
  MariaDB [Students]> SELECT * FROM program_enrollee;
      +---------------------+------------+-------------+
      | program_enrollee_id | program_id | enrollee_id |
      +---------------------+------------+-------------+
      |                   1 |          3 |           1 |
      |                   2 |          4 |           1 |
      |                   3 |          1 |           1 |
      |                   4 |          2 |           2 |
      |                   5 |          1 |           2 |
      |                   6 |          1 |           3 |
      |                   7 |          2 |           3 |
      |                   8 |          4 |           3 |
      |                   9 |          3 |           4 |
      |                  10 |          3 |           5 |
      |                  11 |          4 |           5 |
      |                  12 |          2 |           6 |
      |                  13 |          3 |           6 |
      |                  14 |          4 |           6 |
      +---------------------+------------+-------------+
      14 rows in set (0.001 sec)
  MariaDB [Students]> SELECT * FROM program;
      +------------+---------------------------------------------------------------------+---------------+------+
      | program_id | name_program                                                        | department_id | plan |
      +------------+---------------------------------------------------------------------+---------------+------+
      |          1 | Прикладная математика и информатика                                 |             2 |    2 |
      |          2 | Математика и компьютерные науки                                     |             2 |    1 |
      |          3 | Прикладная механика                                                 |             1 |    2 |
      |          4 | Мехатроника и робототехника                                         |             1 |    3 |
      +------------+---------------------------------------------------------------------+---------------+------+
      4 rows in set (0.001 sec)
  MariaDB [Students]> SELECT * FROM program_subject;
      +--------------------+------------+------------+------------+
      | program_subject_id | program_id | subject_id | min_result |
      +--------------------+------------+------------+------------+
      |                  1 |          1 |          1 |         40 |
      |                  2 |          1 |          2 |         50 |
      |                  3 |          1 |          4 |         60 |
      |                  4 |          2 |          1 |         30 |
      |                  5 |          2 |          2 |         50 |
      |                  6 |          2 |          4 |         60 |
      |                  7 |          3 |          1 |         30 |
      |                  8 |          3 |          2 |         45 |
      |                  9 |          3 |          3 |         45 |
      |                 10 |          4 |          1 |         40 |
      |                 11 |          4 |          2 |         45 |
      |                 12 |          4 |          3 |         45 |
      +--------------------+------------+------------+------------+
      12 rows in set (0.002 sec)
  MariaDB [Students]> SELECT * FROM subject;
      +------------+-------------------------+
      | subject_id | name_subject            |
      +------------+-------------------------+
      |          1 | Русский язык            |
      |          2 | Математика              |
      |          3 | Физика                  |
      |          4 | Информатика             |
      +------------+-------------------------+
      4 rows in set (0.001 sec)
  MariaDB [Students]> SELECT * FROM enrollee_subject;
      +---------------------+-------------+------------+--------+
      | enrollee_subject_id | enrollee_id | subject_id | result |
      +---------------------+-------------+------------+--------+
      |                   1 |           1 |          1 |     68 |
      |                   2 |           1 |          2 |     70 |
      |                   3 |           1 |          3 |     41 |
      |                   4 |           1 |          4 |     75 |
      |                   5 |           2 |          1 |     75 |
      |                   6 |           2 |          2 |     70 |
      |                   7 |           2 |          4 |     81 |
      |                   8 |           3 |          1 |     85 |
      |                   9 |           3 |          2 |     67 |
      |                  10 |           3 |          3 |     90 |
      |                  11 |           3 |          4 |     78 |
      |                  12 |           4 |          1 |     82 |
      |                  13 |           4 |          2 |     86 |
      |                  14 |           4 |          3 |     70 |
      |                  15 |           5 |          1 |     65 |
      |                  16 |           5 |          2 |     67 |
      |                  17 |           5 |          3 |     60 |
      |                  18 |           6 |          1 |     90 |
      |                  19 |           6 |          2 |     92 |
      |                  20 |           6 |          3 |     88 |
      |                  21 |           6 |          4 |     94 |
      +---------------------+-------------+------------+--------+
      21 rows in set (0.001 sec)
  MariaDB [Students]> CREATE TABLE applicant
      -> SELECT program_id, enrollee.enrollee_id, SUM(result) AS itog
      -> FROM enrollee
      -> JOIN program_enrollee USING(enrollee_id)
      -> JOIN program USING(program_id)
      -> JOIN program_subject USING(program_id)
      -> JOIN subject USING(subject_id)
      -> JOIN enrollee_subject USING(subject_id)
      -> WHERE enrollee_subject.enrollee_id = enrollee.enrollee_id
      -> GROUP BY program_id, enrollee_id
      -> ORDER BY program_id, itog DESC;
  Query OK, 14 rows affected (0.028 sec)
  Records: 14  Duplicates: 0  Warnings: 0
  MariaDB [Students]> SELECT * FROM applicant;
      +------------+-------------+------+
      | program_id | enrollee_id | itog |
      +------------+-------------+------+
      |          1 |           3 |  230 |
      |          1 |           2 |  226 |
      |          1 |           1 |  213 |
      |          2 |           6 |  276 |
      |          2 |           3 |  230 |
      |          2 |           2 |  226 |
      |          3 |           6 |  270 |
      |          3 |           4 |  238 |
      |          3 |           5 |  192 |
      |          3 |           1 |  179 |
      |          4 |           6 |  270 |
      |          4 |           3 |  242 |
      |          4 |           5 |  192 |
      |          4 |           1 |  179 |
      +------------+-------------+------+
      14 rows in set (0.001 sec)
  Task:
  Из таблицы applicant, созданной на предыдущем шаге, удалить записи, если абитуриент на выбранную образовательную программу не набрал минимального балла хотя бы по одному предмету (использовать запрос из предыдущего урока).
  Decision:
  MariaDB [Students]> DELETE FROM applicant
      -> USING applicant
      -> JOIN (SELECT program_enrollee.program_id, program_enrollee.enrollee_id
      ->     FROM program
      ->     JOIN program_subject  USING(program_id)
      ->     JOIN program_enrollee USING(program_id)
      ->     JOIN enrollee_subject
      ->     ON enrollee_subject.enrollee_id = program_enrollee.enrollee_id
      ->         AND enrollee_subject.subject_id = program_subject.subject_id
      ->     WHERE result < min_result) AS table1
      -> ON applicant.program_id = table1.program_id
      ->     AND applicant.enrollee_id = table1.enrollee_id;
  Query OK, 2 rows affected (0.005 sec)
  MariaDB [Students]> SELECT * FROM applicant;
      +------------+-------------+------+
      | program_id | enrollee_id | itog |
      +------------+-------------+------+
      |          1 |           3 |  230 |
      |          1 |           2 |  226 |
      |          1 |           1 |  213 |
      |          2 |           6 |  276 |
      |          2 |           3 |  230 |
      |          2 |           2 |  226 |
      |          3 |           6 |  270 |
      |          3 |           4 |  238 |
      |          3 |           5 |  192 |
      |          4 |           6 |  270 |
      |          4 |           3 |  242 |
      |          4 |           5 |  192 |
      +------------+-------------+------+
      12 rows in set (0.001 sec)
  Task:
  Повысить итоговые баллы абитуриентов в таблице applicant на значения дополнительных баллов (использовать запрос из предыдущего урока).
  Decision:
  MariaDB [Students]> SELECT * FROM applicant;
      +------------+-------------+------+
      | program_id | enrollee_id | itog |
      +------------+-------------+------+
      |          1 |           3 |  230 |
      |          1 |           2 |  226 |
      |          1 |           1 |  213 |
      |          2 |           6 |  276 |
      |          2 |           3 |  230 |
      |          2 |           2 |  226 |
      |          3 |           6 |  270 |
      |          3 |           4 |  238 |
      |          3 |           5 |  192 |
      |          4 |           6 |  270 |
      |          4 |           3 |  242 |
      |          4 |           5 |  192 |
      +------------+-------------+------+
      12 rows in set (0.001 sec)
  MariaDB [Students]> SELECT * FROM achievement;
      +----------------+------------------------------------------+-------+
      | achievement_id | name_achievement                         | bonus |
      +----------------+------------------------------------------+-------+
      |              1 | Золотая медаль                           |     5 |
      |              2 | Серебряная медаль                        |     3 |
      |              3 | Золотой значок ГТО                       |     3 |
      |              4 | Серебряный значок ГТО                    |     1 |
      +----------------+------------------------------------------+-------+
      4 rows in set (0.001 sec)
  MariaDB [Students]> SELECT * FROM enrollee;
      +-------------+-------------------------------+
      | enrollee_id | name_enrollee                 |
      +-------------+-------------------------------+
      |           1 | Баранов Павел                 |
      |           2 | Абрамова Катя                 |
      |           3 | Семенов Иван                  |
      |           4 | Яковлева Галина               |
      |           5 | Попов Илья                    |
      |           6 | Степанова Дарья               |
      +-------------+-------------------------------+
      6 rows in set (0.001 sec)
  MariaDB [Students]> SELECT * FROM enrollee_achievement;
      +--------------------+-------------+----------------+
      | enrollee_achiev_id | enrollee_id | achievement_id |
      +--------------------+-------------+----------------+
      |                  1 |           1 |              2 |
      |                  2 |           1 |              3 |
      |                  3 |           3 |              1 |
      |                  4 |           4 |              4 |
      |                  5 |           5 |              1 |
      |                  6 |           5 |              3 |
      +--------------------+-------------+----------------+
      6 rows in set (0.001 sec)
  MariaDB [Students]> UPDATE applicant
      -> JOIN (SELECT enrollee_id, IFNULL(SUM(bonus),0) AS Бонус
      ->     FROM enrollee_achievement
      ->     LEFT JOIN achievement
      ->     USING(achievement_id)
      ->     GROUP BY enrollee_id) AS table1
      -> USING(enrollee_id)
      -> SET itog = itog + Бонус;
  Query OK, 7 rows affected (0.004 sec)
  Rows matched: 7  Changed: 7  Warnings: 0
  MariaDB [Students]> SELECT * FROM applicant;
      +------------+-------------+------+
      | program_id | enrollee_id | itog |
      +------------+-------------+------+
      |          1 |           3 |  235 |
      |          1 |           2 |  226 |
      |          1 |           1 |  219 |
      |          2 |           6 |  276 |
      |          2 |           3 |  235 |
      |          2 |           2 |  226 |
      |          3 |           6 |  270 |
      |          3 |           4 |  239 |
      |          3 |           5 |  200 |
      |          4 |           6 |  270 |
      |          4 |           3 |  247 |
      |          4 |           5 |  200 |
      +------------+-------------+------+
      12 rows in set (0.001 sec)
  Task:
  Поскольку при добавлении дополнительных баллов, абитуриенты по каждой образовательной программе могут следовать не в порядке убывания суммарных баллов, необходимо создать новую таблицу applicant_order на основе таблицы applicant. При создании таблицы данные нужно отсортировать сначала по id образовательной программы, потом по убыванию итогового балла. А таблицу applicant, которая была создана как вспомогательная, необходимо удалить.
  Decision:
  MariaDB [Students]> SELECT * FROM applicant;
      +------------+-------------+------+
      | program_id | enrollee_id | itog |
      +------------+-------------+------+
      |          1 |           3 |  235 |
      |          1 |           2 |  226 |
      |          1 |           1 |  219 |
      |          2 |           6 |  276 |
      |          2 |           3 |  235 |
      |          2 |           2 |  226 |
      |          3 |           6 |  270 |
      |          3 |           4 |  239 |
      |          3 |           5 |  200 |
      |          4 |           6 |  270 |
      |          4 |           3 |  247 |
      |          4 |           5 |  200 |
      +------------+-------------+------+
      12 rows in set (0.001 sec)
  MariaDB [Students]> CREATE TABLE applicant_order
      -> SELECT * FROM applicant
      -> ORDER BY program_id, itog DESC;
  Query OK, 12 rows affected (0.010 sec)
  Records: 12  Duplicates: 0  Warnings: 0
  MariaDB [Students]> DROP TABLE applicant;
  Query OK, 0 rows affected (0.005 sec)
  MariaDB [Students]> SELECT * FROM applicant_order;
      +------------+-------------+------+
      | program_id | enrollee_id | itog |
      +------------+-------------+------+
      |          1 |           3 |  235 |
      |          1 |           2 |  226 |
      |          1 |           1 |  219 |
      |          2 |           6 |  276 |
      |          2 |           3 |  235 |
      |          2 |           2 |  226 |
      |          3 |           6 |  270 |
      |          3 |           4 |  239 |
      |          3 |           5 |  200 |
      |          4 |           6 |  270 |
      |          4 |           3 |  247 |
      |          4 |           5 |  200 |
      +------------+-------------+------+
      12 rows in set (0.001 sec)
  Task:
  Включить в таблицу applicant_order новый столбец str_id целого типа , расположить его перед первым.
  Decision:
  MariaDB [Students]> SELECT * FROM applicant_order;
      +------------+-------------+------+
      | program_id | enrollee_id | itog |
      +------------+-------------+------+
      |          1 |           3 |  235 |
      |          1 |           2 |  226 |
      |          1 |           1 |  219 |
      |          2 |           6 |  276 |
      |          2 |           3 |  235 |
      |          2 |           2 |  226 |
      |          3 |           6 |  270 |
      |          3 |           4 |  239 |
      |          3 |           5 |  200 |
      |          4 |           6 |  270 |
      |          4 |           3 |  247 |
      |          4 |           5 |  200 |
      +------------+-------------+------+
      12 rows in set (0.001 sec)
  MariaDB [Students]> ALTER TABLE applicant_order
      -> ADD str_id int FIRST;
  Query OK, 0 rows affected (0.004 sec)
  Records: 0  Duplicates: 0  Warnings: 0
  MariaDB [Students]> SELECT * FROM applicant_order;
      +--------+------------+-------------+------+
      | str_id | program_id | enrollee_id | itog |
      +--------+------------+-------------+------+
      |   NULL |          1 |           3 |  235 |
      |   NULL |          1 |           2 |  226 |
      |   NULL |          1 |           1 |  219 |
      |   NULL |          2 |           6 |  276 |
      |   NULL |          2 |           3 |  235 |
      |   NULL |          2 |           2 |  226 |
      |   NULL |          3 |           6 |  270 |
      |   NULL |          3 |           4 |  239 |
      |   NULL |          3 |           5 |  200 |
      |   NULL |          4 |           6 |  270 |
      |   NULL |          4 |           3 |  247 |
      |   NULL |          4 |           5 |  200 |
      +--------+------------+-------------+------+
      12 rows in set (0.001 sec)
  Task:
  Занести в столбец str_id таблицы applicant_order нумерацию абитуриентов, которая начинается с 1 для каждой образовательной программы.
  Decision:
  MariaDB [Students]> SELECT * FROM applicant_order;
      +--------+------------+-------------+------+
      | str_id | program_id | enrollee_id | itog |
      +--------+------------+-------------+------+
      |   NULL |          1 |           3 |  235 |
      |   NULL |          1 |           2 |  226 |
      |   NULL |          1 |           1 |  219 |
      |   NULL |          2 |           6 |  276 |
      |   NULL |          2 |           3 |  235 |
      |   NULL |          2 |           2 |  226 |
      |   NULL |          3 |           6 |  270 |
      |   NULL |          3 |           4 |  239 |
      |   NULL |          3 |           5 |  200 |
      |   NULL |          4 |           6 |  270 |
      |   NULL |          4 |           3 |  247 |
      |   NULL |          4 |           5 |  200 |
      +--------+------------+-------------+------+
      12 rows in set (0.001 sec)
  MariaDB [Students]> SET @row_num := 1;
      Query OK, 0 rows affected (0.001 sec)
  MariaDB [Students]> SET @num_pr := 0;
      Query OK, 0 rows affected (0.000 sec)
  MariaDB [Students]> UPDATE applicant_order
      ->     SET str_id = IF(program_id = @num_pr, @row_num := @row_num + 1, @row_num := 1 AND @num_pr := @num_pr + 1);
  Query OK, 12 rows affected (0.003 sec)
  Rows matched: 12  Changed: 12  Warnings: 0
  MariaDB [Students]> SELECT * FROM applicant_order;
      +--------+------------+-------------+------+
      | str_id | program_id | enrollee_id | itog |
      +--------+------------+-------------+------+
      |      1 |          1 |           3 |  235 |
      |      2 |          1 |           2 |  226 |
      |      3 |          1 |           1 |  219 |
      |      1 |          2 |           6 |  276 |
      |      2 |          2 |           3 |  235 |
      |      3 |          2 |           2 |  226 |
      |      1 |          3 |           6 |  270 |
      |      2 |          3 |           4 |  239 |
      |      3 |          3 |           5 |  200 |
      |      1 |          4 |           6 |  270 |
      |      2 |          4 |           3 |  247 |
      |      3 |          4 |           5 |  200 |
      +--------+------------+-------------+------+
      12 rows in set (0.001 sec)
  Task:
  Создать таблицу student,  в которую включить абитуриентов, которые могут быть рекомендованы к зачислению  в соответствии с планом набора. Информацию отсортировать сначала в алфавитном порядке по названию программ, а потом по убыванию итогового балла.
  Decision:
  MariaDB [Students]> SELECT * FROM applicant_order;
      +--------+------------+-------------+------+
      | str_id | program_id | enrollee_id | itog |
      +--------+------------+-------------+------+
      |      1 |          1 |           3 |  235 |
      |      2 |          1 |           2 |  226 |
      |      3 |          1 |           1 |  219 |
      |      1 |          2 |           6 |  276 |
      |      2 |          2 |           3 |  235 |
      |      3 |          2 |           2 |  226 |
      |      1 |          3 |           6 |  270 |
      |      2 |          3 |           4 |  239 |
      |      3 |          3 |           5 |  200 |
      |      1 |          4 |           6 |  270 |
      |      2 |          4 |           3 |  247 |
      |      3 |          4 |           5 |  200 |
      +--------+------------+-------------+------+
      12 rows in set (0.001 sec)
  MariaDB [Students]> SELECT * FROM enrollee;
      +-------------+-------------------------------+
      | enrollee_id | name_enrollee                 |
      +-------------+-------------------------------+
      |           1 | Баранов Павел                 |
      |           2 | Абрамова Катя                 |
      |           3 | Семенов Иван                  |
      |           4 | Яковлева Галина               |
      |           5 | Попов Илья                    |
      |           6 | Степанова Дарья               |
      +-------------+-------------------------------+
      6 rows in set (0.001 sec)
  MariaDB [Students]> SELECT * FROM program;
      +------------+---------------------------------------------------------------------+---------------+------+
      | program_id | name_program                                                        | department_id | plan |
      +------------+---------------------------------------------------------------------+---------------+------+
      |          1 | Прикладная математика и информатика                                 |             2 |    2 |
      |          2 | Математика и компьютерные науки                                     |             2 |    1 |
      |          3 | Прикладная механика                                                 |             1 |    2 |
      |          4 | Мехатроника и робототехника                                         |             1 |    3 |
      +------------+---------------------------------------------------------------------+---------------+------+
      4 rows in set (0.001 sec)
  MariaDB [Students]> CREATE TABLE student AS
      -> SELECT name_program, name_enrollee, itog
      -> FROM enrollee
      -> INNER JOIN applicant_order
      -> USING(enrollee_id)
      -> INNER JOIN program
      -> USING(program_id)
      -> WHERE str_id<=plan
      -> ORDER BY name_program, itog DESC;
  Query OK, 8 rows affected (0.012 sec)
  Records: 8  Duplicates: 0  Warnings: 0
  MariaDB [Students]> SELECT * FROM student;
      +---------------------------------------------------------------------+-------------------------------+------+
      | name_program                                                        | name_enrollee                 | itog |
      +---------------------------------------------------------------------+-------------------------------+------+
      | Математика и компьютерные науки                                     | Степанова Дарья               |  276 |
      | Мехатроника и робототехника                                         | Степанова Дарья               |  270 |
      | Мехатроника и робототехника                                         | Семенов Иван                  |  247 |
      | Мехатроника и робототехника                                         | Попов Илья                    |  200 |
      | Прикладная математика и информатика                                 | Семенов Иван                  |  235 |
      | Прикладная математика и информатика                                 | Абрамова Катя                 |  226 |
      | Прикладная механика                                                 | Степанова Дарья               |  270 |
      | Прикладная механика                                                 | Яковлева Галина               |  239 |
      +---------------------------------------------------------------------+-------------------------------+------+
      8 rows in set (0.001 sec)
  Task:
  Разработать базу "Аналитика образовательных курсов"
  Курс на платформе Steptuser состоит из нескольких модулей, каждый модуль включает в себя несколько уроков, для каждого урока сохраняется информация о его положении в модуле. Каждый урок состоит из последовательности шагов. Каждый шаг имеет свой собственный тип (это может быть текст, SQL-задание и т.д.), а также порядковый номер в уроке.
  Пользователи регистрируются на курс, указывают свое имя. Когда пользователь проходит курс на платформе Steptuser, все его действия оставляют "цифровой след": какие задачи и когда он выполнил, сколько попыток он предпринял, правильно ли он решил задачу. Все его комментарии также сохраняются. Если пользователь проходит курс и получает сертификат, дата его выдачи сохраняется. Вся эта информация является первичной для образовательной аналитики.
  Образовательная аналитика - это измерение, сбор, анализ и представление данных об учащемся и его действиях на онлайн-платформе с целью понимания и оптимизации образовательного процесса и среды, в которой этот процесс происходит.
  Для этого урока была создана база данных с полным описанием структуры курса. Образовательная аналитика включена в базу данных не полностью, а только для определенной группы пользователей из-за большого объема данных. Например, информация о решениях 17 000 пользователей нашего курса за шесть месяцев его существования содержит 534 500 записей.
  Мы выбрали пользователей для базы данных уроков следующим образом:
          мы отклонили всех тех, кто не выполнил ни одного задания (их было 8800).;
          мы сгруппировали оставшихся пользователей в зависимости от количества решенных задач, вот что произошло (мы считаем, что те, кто не отправлял задания более месяца, покинули курс):
      Всего    Закончили обучение или покинули курс    Активные пользователи
      Выполнили все задания    116    75    41
      Получили сертификат    617    470    147
      Третий модуль    225    220    5
      Второй модуль    940    762    178
      Первый модуль, 5-7 урок    1077    891    186
      Первый модуль, 4 урок    701    589    112
      Первый модуль, 3 урок    823    670    153
      Первый модуль, 2 урок    1268    1044    224
      Первый модуль, 1 урок    2430    2020    410
      затем были отобраны типичные представители групп более или менее пропорционально численности каждой группы (имена пользователей, разумеется, были заменены).;
  Получилось 64 пользователя и более 2000 их попыток.
  Группировка и выборка каждой группы обычно зависят от целей исследования, например, если вам нужно понять, когда и по какой причине пользователи покидают курс, то для начальных шагов необходимо более "мелкое" разделение.
  Структура и частичное наполнение таблиц
  Таблица module:
      module_id    module_name
      INT PRIMARY KEY
      AUTO_INCREMENT    VARCHAR(64)
      1    Основы реляционной модели и SQL
      2    Запросы SQL к связанным таблицам
  Таблица lesson (в последнем столбце указан порядковый номер урока внутри модуля):
      lesson_id    lesson_name    module_id    lesson_position
      INT PRIMARY KEY
      AUTO_INCREMENT    VARCHAR(50)    INT    INT
      1    Отношение(таблица)    1    1
      2    Выборка данных    1    2
      3    Таблица "Командировки", запросы на выборку    1    6
      4    Вложенные запросы    1    4
  Таблица step:
      step_id    step_name    step_type    lesson_id    step_position
      INT PRIMARY KEY
      AUTO_INCREMENT    VARCHAR(256)    VARCHAR(16)    INT    INT
      1    Структура уроков курса    text    1    1
      2    Содержание урока    text    1    2
      3    Реляционная модель, основные положения    table    1    3
      4    Отношение, реляционная модель    choice    1    4
  Таблица keyword:
      keyword_id    keyword_name
      INT PRIMARY KEY
      AUTO_INCREMENT    VARCHAR(16)
      1    SELECT
      2    FROM
  Таблица step_keyword:
      step_id    keyword_id
      INT PRIMARY KEY    INT PRIMARY KEY
      38    1
      81    3
  Пояснение
  В этой таблице ключ состоит из двух столбцов. Это сделано для того, чтобы в таблицу нельзя было включить одинаковые записи. Для создания таблицы с двумя ключами используется код:
      CREATE TABLE step_keyword (
          step_id INT,
          keyword_id INT,
          PRIMARY KEY (step_id, keyword_id),
          FOREIGN KEY (step_id)  REFERENCES step (step_id) ON DELETE CASCADE,
          FOREIGN KEY (keyword_id)  REFERENCES keyword (keyword_id) ON DELETE CASCADE
      );
  Таблица student:
      student_id    student_name
      INT PRIMARY KEY
      AUTO_INCREMENT    VARCHAR(64)
      1    student_1
      2    student_2
  Таблица step_student  (в этой таблице хранятся все попытки пользователей по каждому шагу, указывается время начала попытки и время отправки задания на проверку, а также верный или неверный получился результат):
      step_student_id    step_id    student_id    attempt_time    submission_time    result
      INT PRIMARY KEY
      AUTO_INCREMENT    INT    INT    INT    INT    VARCHAR(16)
      1    10    52    1598291444    1598291490    correct
      2    10    11    1593291995    1593292031    correct
      3    10    19    1591017571    1591017743    wrong
      4    10    4    1590254781    1590254800    correct
  Пояснение
  Время в этой таблице представлено в формате  Unix-время , в котором хранится количество секунд, прошедших с 1 января 1970 года.
  Для перевода к привычному типу DATE используется формула:
      1970-01-01 + time_unix / 86400
  В SQL для перевода удобно использовать функцию  
      FROM_UNIXTIME(time_unix)
  Decision:
  MariaDB [(none)]> CREATE DATABASE Analitics;
      Query OK, 1 row affected (0.002 sec)
  MariaDB [(none)]> SHOW DATABASES;
      +--------------------+
      | Database           |
      +--------------------+
      | Analitics          |
      | RPA                |
      | Students           |
      | information_schema |
      | mysql              |
      | performance_schema |
      +--------------------+
      6 rows in set (0.005 sec)
  MariaDB [(none)]> USE Analitics;
  Database changed
  MariaDB [Analitics]> CREATE TABLE module(
      -> module_id INT PRIMARY KEY AUTO_INCREMENT,
      -> module_name VARCHAR(64));
  Query OK, 0 rows affected (0.010 sec)
  MariaDB [Analitics]> INSERT INTO module (module_name)
      -> VALUES ('Основы реляционной модели и SQL'),
      -> ('Запросы SQL к связанным таблицам');
  ERROR 1366 (22007): Incorrect string value: '\xD0\x9E\xD1\x81\xD0\xBD...' for column `Analitics`.`module`.`module_name` at row 1
  MariaDB [Analitics]> SHOW VARIABLES WHERE variable_name LtuserE '%char%' OR variable_name LtuserE '%coll%';
      +--------------------------+------------------------------+
      | Variable_name            | Value                        |
      +--------------------------+------------------------------+
      | character_set_client     | utf8                         |
      | character_set_connection | utf8                         |
      | character_set_database   | latin1                       |
      | character_set_filesystem | binary                       |
      | character_set_results    | utf8                         |
      | character_set_server     | latin1                       |
      | character_set_system     | utf8                         |
      | character_sets_dir       | /usr/share/mariadb/charsets/ |
      | collation_connection     | utf8_general_ci              |
      | collation_database       | latin1_swedish_ci            |
      | collation_server         | latin1_swedish_ci            |
      +--------------------------+------------------------------+
      11 rows in set (0.006 sec)
  MariaDB [Analitics]> CREATE DROP module;
      ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near 'DROP module' at line 1
  MariaDB [Analitics]> DROP TABLE module;
      Query OK, 0 rows affected (0.005 sec)
  MariaDB [Analitics]> CREATE TABLE module( module_id INT PRIMARY KEY AUTO_INCREMENT, module_name VARCHAR(64)) ENGINE=MyISAM CHARACTER SET=utf8mb4;
      Query OK, 0 rows affected (0.003 sec)
  MariaDB [Analitics]> INSERT INTO module (module_name) VALUES ('Основы реляционной модели и SQL'), ('Запросы SQL к связанным таблицам');
      Query OK, 2 rows affected (0.001 sec)
      Records: 2  Duplicates: 0  Warnings: 0
  MariaDB [Analitics]> SHOW TABLES;
      +---------------------+
      | Tables_in_Analitics |
      +---------------------+
      | module              |
      +---------------------+
      1 row in set (0.001 sec)
  MariaDB [Analitics]> SELECT * FROM module;
      +-----------+-----------------------------------------------------------+
      | module_id | module_name                                               |
      +-----------+-----------------------------------------------------------+
      |         1 | Основы реляционной модели и SQL                           |
      |         2 | Запросы SQL к связанным таблицам                          |
      +-----------+-----------------------------------------------------------+
      2 rows in set (0.001 sec)
  MariaDB [Analitics]> CREATE TABLE lesson(
      -> lesson_id       INT PRIMARY KEY AUTO_INCREMENT,
      -> lesson_name     VARCHAR(50),
      -> module_id       INT,
      -> lesson_position INT,
      -> FOREIGN KEY (module_id) REFERENCES module (module_id) ON DELETE CASCADE)
      -> ENGINE=MyISAM CHARACTER SET=utf8mb4;
  Query OK, 0 rows affected (0.003 sec)
  MariaDB [Analitics]> INSERT INTO lesson(lesson_name, module_id, lesson_position)
      -> VALUES ('Отношение(таблица)', 1, 1),
      -> ('Выборка данных', 1, 2),
      -> ('Таблица "Командировки", запросы на выборку', 1, 6),
      -> ('Вложенные запросы', 1, 4);
  Query OK, 4 rows affected (0.002 sec)
  Records: 4  Duplicates: 0  Warnings: 0
  MariaDB [Analitics]> SELECT * FROM lesson;
      +-----------+-------------------------------------------------------------------------------+-----------+-----------------+
      | lesson_id | lesson_name                                                                   | module_id | lesson_position |
      +-----------+-------------------------------------------------------------------------------+-----------+-----------------+
      |         1 | Отношение(таблица)                                                            |         1 |               1 |
      |         2 | Выборка данных                                                                |         1 |               2 |
      |         3 | Таблица "Командировки", запросы на выборку                                    |         1 |               6 |
      |         4 | Вложенные запросы                                                             |         1 |               4 |
      +-----------+-------------------------------------------------------------------------------+-----------+-----------------+
      4 rows in set (0.001 sec)
  MariaDB [Analitics]> CREATE TABLE step(
      -> step_id       INT PRIMARY KEY AUTO_INCREMENT,
      -> step_name     VARCHAR(256),
      -> step_type     VARCHAR(16),
      -> lesson_id     INT,
      -> step_position INT,
      -> FOREIGN KEY (lesson_id) REFERENCES lesson (lesson_id) ON DELETE CASCADE)
      -> ENGINE=MyISAM CHARACTER SET=utf8mb4;
  Query OK, 0 rows affected (0.004 sec)
  MariaDB [Analitics]> INSERT INTO step(step_name, step_type, lesson_id, step_position)
      -> VALUES ('Структура уроков курса', 'text', 1, 1),
      -> ('Содержание урока', 'text', 1, 2),
      -> ('Реляционная модель, основные положения', 'table', 1, 3),
      -> ('Отношение, реляционная модель', 'choice', 1, 4);
  Query OK, 4 rows affected (0.001 sec)
  Records: 4  Duplicates: 0  Warnings: 0
  MariaDB [Analitics]> SELECT * FROM step;
      +---------+--------------------------------------------------------------------------+-----------+-----------+---------------+
      | step_id | step_name                                                                | step_type | lesson_id | step_position |
      +---------+--------------------------------------------------------------------------+-----------+-----------+---------------+
      |       1 | Структура уроков курса                                                   | text      |         1 |             1 |
      |       2 | Содержание урока                                                         | text      |         1 |             2 |
      |       3 | Реляционная модель, основные положения                                   | table     |         1 |             3 |
      |       4 | Отношение, реляционная модель                                            | choice    |         1 |             4 |
      +---------+--------------------------------------------------------------------------+-----------+-----------+---------------+
      4 rows in set (0.001 sec)
  MariaDB [Analitics]> CREATE TABLE keyword(
      -> keyword_id   INT PRIMARY KEY AUTO_INCREMENT,
      -> keyword_name VARCHAR(16))
      -> ENGINE=MyISAM CHARACTER SET=utf8mb4;
  Query OK, 0 rows affected (0.003 sec)
  MariaDB [Analitics]> INSERT INTO keyword(keyword_name)
      -> VALUES ('SELECT'),
      -> ('FROM');
  Query OK, 2 rows affected (0.001 sec)
  Records: 2  Duplicates: 0  Warnings: 0
  MariaDB [Analitics]> SELECT * FROM keyword;
      +------------+--------------+
      | keyword_id | keyword_name |
      +------------+--------------+
      |          1 | SELECT       |
      |          2 | FROM         |
      +------------+--------------+
      2 rows in set (0.001 sec)
  MariaDB [Analitics]> CREATE TABLE step_keyword(
      -> step_id    INT,
      -> keyword_id INT,
      -> PRIMARY KEY (step_id, keyword_id),
      -> FOREIGN KEY (step_id) REFERENCES step (step_id) ON DELETE CASCADE,
      -> FOREIGN KEY (keyword_id) REFERENCES keyword (keyword_id) ON DELETE CASCADE)
      -> ENGINE=MyISAM CHARACTER SET=utf8mb4;
  Query OK, 0 rows affected (0.003 sec)
  MariaDB [Analitics]> SET FOREIGN_KEY_CHECKS = 0;
      Query OK, 0 rows affected (0.000 sec)
  MariaDB [Analitics]> INSERT INTO step_keyword (step_id, keyword_id) VALUE (38, 1);
      Query OK, 1 row affected (0.001 sec)
  MariaDB [Analitics]> INSERT INTO step_keyword (step_id, keyword_id) VALUE (81, 3);
      Query OK, 1 row affected (0.000 sec)
  MariaDB [Analitics]> SELECT * FROM step_keyword;
      +---------+------------+
      | step_id | keyword_id |
      +---------+------------+
      |      38 |          1 |
      |      81 |          3 |
      +---------+------------+
      2 rows in set (0.001 sec)
  MariaDB [Analitics]> CREATE TABLE student(
      -> student_id   INT PRIMARY KEY AUTO_INCREMENT,
      -> student_name VARCHAR(64))
      -> ENGINE=MyISAM CHARACTER SET=utf8mb4;
  Query OK, 0 rows affected (0.003 sec)
  MariaDB [Analitics]> INSERT INTO student(student_name)
      -> VALUES ('student_1'),
      -> ('student_2');
  Query OK, 2 rows affected (0.001 sec)
  Records: 2  Duplicates: 0  Warnings: 0
  MariaDB [Analitics]> SELECT * FROM student;
      +------------+--------------+
      | student_id | student_name |
      +------------+--------------+
      |          1 | student_1    |
      |          2 | student_2    |
      +------------+--------------+
      2 rows in set (0.001 sec)
  MariaDB [Analitics]> CREATE TABLE step_student(
      -> step_student_id INT PRIMARY KEY AUTO_INCREMENT,
      -> step_id         INT,
      -> student_id      INT,
      -> attempt_time    INT,
      -> submission_time INT,
      -> result          VARCHAR(16),
      -> FOREIGN KEY (student_id) REFERENCES student (student_id) ON DELETE CASCADE,
      -> FOREIGN KEY (step_id) REFERENCES step (step_id) ON DELETE CASCADE)
      -> ENGINE=MyISAM CHARACTER SET=utf8mb4;
  Query OK, 0 rows affected (0.003 sec)
  MariaDB [Analitics]> INSERT INTO step_student (step_id, student_id, attempt_time, submission_time, result)
      -> VALUES (10, 52, 1598291444, 1598291490, 'correct'),
      -> (10, 11, 1593291995, 1593292031, 'correct'),
      -> (10, 19, 1591017571, 1591017743, 'wrong'),
      -> (10, 4, 1590254781, 1590254800, 'correct');
  Query OK, 4 rows affected (0.002 sec)
  Records: 4  Duplicates: 0  Warnings: 0
  MariaDB [Analitics]> SET FOREIGN_KEY_CHECKS = 1;
      Query OK, 0 rows affected (0.001 sec)
  MariaDB [Analitics]> SELECT * FROM step_student;
      +-----------------+---------+------------+--------------+-----------------+---------+
      | step_student_id | step_id | student_id | attempt_time | submission_time | result  |
      +-----------------+---------+------------+--------------+-----------------+---------+
      |               1 |      10 |         52 |   1598291444 |      1598291490 | correct |
      |               2 |      10 |         11 |   1593291995 |      1593292031 | correct |
      |               3 |      10 |         19 |   1591017571 |      1591017743 | wrong   |
      |               4 |      10 |          4 |   1590254781 |      1590254800 | correct |
      +-----------------+---------+------------+--------------+-----------------+---------+
      4 rows in set (0.001 sec)
  MariaDB [Analitics]> SHOW TABLES;
      +---------------------+
      | Tables_in_Analitics |
      +---------------------+
      | keyword             |
      | lesson              |
      | module              |
      | step                |
      | step_keyword        |
      | step_student        |
      | student             |
      +---------------------+
      7 rows in set (0.001 sec)
  Task:
  Отобрать все шаги, в которых рассматриваются вложенные запросы (то есть в названии шага упоминаются вложенные запросы). Указать к какому уроку и модулю они относятся. Для этого вывести 3 поля:
          в поле Модуль указать номер модуля и его название через пробел;
          в поле Урок указать номер модуля, порядковый номер урока (lesson_position) через точку и название урока через пробел;
          в поле Шаг указать номер модуля, порядковый номер урока (lesson_position) через точку, порядковый номер шага (step_position) через точку и название шага через пробел.
  Длину полей Модуль и Урок ограничить 19 символами, при этом слишком длинные надписи обозначить многоточием в конце (16 символов - это номер модуля или урока, пробел и  название Урока или Модуля к ним присоединить "..."). Информацию отсортировать по возрастанию номеров модулей, порядковых номеров уроков и порядковых номеров шагов.
  Decision:
  MariaDB [Analitics]> SELECT lesson_id, lesson_name, module_id FROM lesson;
      +-----------+-------------------------------------------------------------------------------+-----------+
      | lesson_id | lesson_name                                                                   | module_id |
      +-----------+-------------------------------------------------------------------------------+-----------+
      |         1 | Отношение(таблица)                                                            |         1 |
      |         2 | Выборка данных                                                                |         1 |
      |         3 | Таблица "Командировки", запросы на выборку                                    |         1 |
      |         4 | Вложенные запросы                                                             |         1 |
      +-----------+-------------------------------------------------------------------------------+-----------+
      4 rows in set (0.001 sec)
  MariaDB [Analitics]> SELECT * FROM module;
      +-----------+-----------------------------------------------------------+
      | module_id | module_name                                               |
      +-----------+-----------------------------------------------------------+
      |         1 | Основы реляционной модели и SQL                           |
      |         2 | Запросы SQL к связанным таблицам                          |
      +-----------+-----------------------------------------------------------+
      2 rows in set (0.000 sec)
  MariaDB [Analitics]> SELECT step_id, step_name, lesson_id FROM step;
      +---------+--------------------------------------------------------------------------+-----------+
      | step_id | step_name                                                                | lesson_id |
      +---------+--------------------------------------------------------------------------+-----------+
      |       1 | Структура уроков курса                                                   |         1 |
      |       2 | Содержание урока                                                         |         1 |
      |       3 | Реляционная модель, основные положения                                   |         1 |
      |       4 | Отношение, реляционная модель                                            |         1 |
      +---------+--------------------------------------------------------------------------+-----------+
      4 rows in set (0.001 sec)
  MariaDB [Analitics]> SELECT CONCAT(LEFT(CONCAT(module_id, ' ', module_name), 16), '...') AS Модуль,
      ->     CONCAT(LEFT(CONCAT(module_id, '.', lesson_position, ' ', lesson_name), 16), '...') AS Урок,
      ->     CONCAT(module_id, '.', lesson_position, '.', step_position, ' ', step_name) AS Шаг
      -> FROM module
      -> JOIN lesson
      ->     USING(module_id)
      -> JOIN step
      ->     USING(lesson_id)
      -> WHERE step_name LtuserE '%ложенн% запрос%'
      -> ORDER BY module_id, lesson_id, step_id;
  Query result:
  +---------------------+---------------------+-------------------------------------------------------------+
  | Модуль              | Урок                | Шаг                                                         |
  +---------------------+---------------------+-------------------------------------------------------------+
  | 1 Основы реляцио... | 1.4 Вложенные за... | 1.4.2 Вложенный запрос, возвращающий одно значение          |
  | 1 Основы реляцио... | 1.4 Вложенные за... | 1.4.3 Использование вложенного запроса в выражении          |
  | 1 Основы реляцио... | 1.4 Вложенные за... | 1.4.4 Вложенный запрос, оператор IN                         |
  | 1 Основы реляцио... | 1.4 Вложенные за... | 1.4.5 Вложенный запрос, операторы ANY и ALL                 |
  | 1 Основы реляцио... | 1.4 Вложенные за... | 1.4.6 Вложенный запрос после SELECT                         |
  | 1 Основы реляцио... | 1.5 Запросы корр... | 1.5.5 Добавление записей, вложенные запросы                 |
  | 2 Запросы SQL к ... | 2.2 Запросы на в... | 2.2.7 Запросы для нескольких таблиц со вложенными запросами |
  | 2 Запросы SQL к ... | 2.2 Запросы на в... | 2.2.8 Вложенные запросы в операторах соединения             |
  | 2 Запросы SQL к ... | 2.3 Запросы корр... | 2.3.5 Запрос на обновление, вложенные запросы               |
  +---------------------+---------------------+-------------------------------------------------------------+
  Affected rows: 9
  Task:
  Заполнить таблицу step_keyword следующим образом: если ключевое слово есть в названии шага, то включить в step_keyword строку с id шага и id ключевого слова.
  Decision:
  MariaDB [Analitics]> SELECT * FROM keyword;
      +------------+--------------+
      | keyword_id | keyword_name |
      +------------+--------------+
      |          1 | SELECT       |
      |          2 | FROM         |
      +------------+--------------+
      2 rows in set (0.000 sec)
  MariaDB [Analitics]> SELECT * FROM step;
      +---------+--------------------------------------------------------------------------+-----------+-----------+---------------+
      | step_id | step_name                                                                | step_type | lesson_id | step_position |
      +---------+--------------------------------------------------------------------------+-----------+-----------+---------------+
      |       1 | Структура уроков курса                                                   | text      |         1 |             1 |
      |       2 | Содержание урока                                                         | text      |         1 |             2 |
      |       3 | Реляционная модель, основные положения                                   | table     |         1 |             3 |
      |       4 | Отношение, реляционная модель                                            | choice    |         1 |             4 |
      +---------+--------------------------------------------------------------------------+-----------+-----------+---------------+
      4 rows in set (0.001 sec)
  MariaDB [Analitics]> INSERT INTO step_keyword(step_id, keyword_id)
      -> SELECT step_id, keyword_id
      -> FROM step
      -> INNER JOIN keyword
      -> ON INSTR(CONCAT(step_name, ' '), CONCAT(' ', keyword_name, ' '))
      ->     OR INSTR(CONCAT(step_name, ' '), CONCAT(' ', keyword_name, ','))
      ->     OR INSTR(CONCAT(step_name, ' '), CONCAT(' ', keyword_name, '('));
  Query result:
  +---------+------------+
  | step_id | keyword_id |
  +---------+------------+
  | 38      | 1          |
  | 81      | 3          |
  | 82      | 4          |
  | 82      | 5          |
  | 82      | 6          |
  | 81      | 7          |
  | 82      | 7          |
  | 83      | 7          |
  | 83      | 8          |
  | 47      | 10         |
  | 47      | 11         |
  | 42      | 15         |
  | 43      | 16         |
  | 44      | 16         |
  | 42      | 17         |
  | 43      | 18         |
  | 46      | 18         |
  | 43      | 19         |
  | 88      | 26         |
  | 112     | 27         |
  | 113     | 27         |
  | 37      | 28         |
  | 37      | 29         |
  | 18      | 30         |
  | 36      | 30         |
  | 19      | 31         |
  | 18      | 32         |
  +---------+------------+
  Affected rows: 27
  Task:
  Реализовать поиск по ключевым словам. Вывести шаги, с которыми связаны ключевые слова MAX и AVG одновременно. Для шагов указать id модуля, позицию урока в модуле, позицию шага в уроке через точку, после позиции шага перед заголовком - пробел. Позицию шага в уроке вывести в виде двух цифр (если позиция шага меньше 10, то перед цифрой поставить 0). Столбец назвать Шаг. Информацию отсортировать по первому столбцу в алфавитном порядке.
  Decision:
  MariaDB [Analitics]> SELECT CONCAT(module_id,'.',
      ->     lesson_position,
      ->     IF(step_position < 10, ".0","."),
      ->     step_position,
      ->     " ",
      ->     step_name) AS Шаг
      -> FROM step
      -> JOIN lesson
      ->     USING(lesson_id)
      -> JOIN module
      ->     USING(module_id)
      -> JOIN step_keyword
      ->     USING (step_id)
      -> JOIN keyword
      ->     USING(keyword_id)
      -> WHERE keyword_name = 'MAX'
      ->     OR keyword_name ='AVG'
      -> GROUP BY ШАГ
      -> HAVING COUNT(*) = 2
      -> ORDER BY 1;
  Query result:
  +---------------------------------------------------------+
  | Шаг                                                     |
  +---------------------------------------------------------+
  | 1.3.04 Выборка данных, групповые функции MIN, MAX и AVG |
  | 1.4.06 Вложенный запрос после SELECT                    |
  +---------------------------------------------------------+
  Affected rows: 2
  Task:
  Посчитать, сколько студентов относится к каждой группе. Столбцы назвать Группа, Интервал, Количество. Указать границы интервала.
  Decision:
  MariaDB [Analitics]> SELECT rate_group Группа,
      ->     CASE rate_group
      ->         WHEN 'I'   THEN 'от 0 до 10'
      ->         WHEN 'II'  THEN 'от 11 до 15'
      ->         WHEN 'III' THEN 'от 16 до 27'
      ->         ELSE 'больше 27'
      ->     END Интервал,
      ->     COUNT(*) Количество
      -> FROM(
      ->     SELECT
      ->         CASE
      ->             WHEN COUNT(DISTINCT step_id) <= 10 THEN 'I'
      ->             WHEN COUNT(DISTINCT step_id) <= 15 THEN 'II'
      ->             WHEN COUNT(DISTINCT step_id) <= 27 THEN 'III'
      ->             ELSE 'IV'
      ->         END rate_group
      ->     FROM step_student
      ->     WHERE result = 'correct'
      ->     GROUP BY student_id) query_in
      -> GROUP BY rate_group
      -> ORDER BY rate_group;
  Query result:
  +--------+-------------+------------+
  | Группа | Интервал    | Количество |
  +--------+-------------+------------+
  | I      | от 0 до 10  | 10         |
  | II     | от 11 до 15 | 27         |
  | III    | от 16 до 27 | 9          |
  | IV     | больше 27   | 18         |
  +--------+-------------+------------+
  Affected rows: 4
  Task:
  Исправить запрос примера так: для шагов, которые  не имеют неверных ответов,  указать 100 как процент успешных попыток, если же шаг не имеет верных ответов, указать 0. Информацию отсортировать сначала по возрастанию успешности, а затем по названию шага в алфавитном порядке.
  Decision:
  MariaDB [Analitics]> WITH table1 (step_name, correct, count)
      ->     AS (SELECT step_name,
      ->         SUM( IF (result = 'correct' , 1 , 0)),
      ->         COUNT(result)
      ->         FROM step
      ->         JOIN step_student
      ->             USING (step_id)
      ->         GROUP BY step_name)
      -> SELECT step_name AS Шаг,
      ->     ROUND((correct/count)*100) AS Успешность
      -> FROM table1
      -> ORDER BY 2, 1;
  Query result:
  +--------------------------------------------------------------------------+------------+
  | Шаг                                                                      | Успешность |
  +--------------------------------------------------------------------------+------------+
  | Задание. Работа с архивной таблицей, оператор UNION, часть 1             | 0          |
  | Выборка данных, оператор LtuserE                                            | 19         |
  | Вложенные запросы в операторах соединения                                | 32         |
  | Задание. Вывести самый популярный жанр                                   | 33         |
  | Запросы для нескольких таблиц с группировкой                             | 33         |
  | Задание. Вывести заказы, доставленные с опозданием                       | 35         |
  | Задание. Вывести информацию о движении каждого заказа                    | 36         |
  | Запросы для нескольких таблиц со вложенными запросами                    | 36         |
  | Задание. Вывести подробную информацию о каждом заказе                    | 37         |
  | Выборка данных, вычисляемые столбцы, логические функции                  | 44         |
  | Операция соединение, использование USING()                               | 45         |
  | Перекрестное соединение CROSS JOIN                                       | 45         |
  | Задание. Вывести города, в которых живут клиенты магазина                | 48         |
  | Задание. Посчитать, сколько раз была заказана каждая книга               | 48         |
  | Запросы на основе трех и более связанных таблиц                          | 49         |
  | Выборка данных с сортировкой                                             | 53         |
  | Внешнее соединение LEFT и RIGHT OUTER JOIN                               | 55         |
  | Запросы на выборку из нескольких таблиц                                  | 58         |
  | Выборка данных, вычисляемые столбцы, математические функции              | 59         |
  | Задание. Вывести клиентов, которые заказывали книги определенного автора | 63         |
  | Задание. Вывести информацию об оплате каждого заказа                     | 65         |
  | Выборка данных, логические операции                                      | 67         |
  | Проектирование концептуальной модели базы данных                         | 70         |
  | Выборка данных, операторы BETWEEN, IN                                    | 72         |
  | Выборка данных с созданием вычисляемого столбца                          | 74         |
  | Выборка отдельных столбцов                                               | 76         |
  | Соединение INNER JOIN                                                    | 78         |
  | Выборка данных по условию                                                | 81         |
  | Выборка отдельных столбцов и присвоение им новых имен                    | 84         |
  | Выборка всех данных из таблицы                                           | 87         |
  | Задание. Работа с архивной таблицей, оператор UNION, часть 2             | 100        |
  | Построение логической схемы базы данных                                  | 100        |
  +--------------------------------------------------------------------------+------------+
  Affected rows: 32
  Task:
  Вычислить прогресс пользователей по курсу. Прогресс вычисляется как отношение верно пройденных шагов к общему количеству шагов в процентах, округленное до целого. В нашей базе данные о
  Тем пользователям, которые прошли все шаги (прогресс = 100%) выдать "Сертификат с отличием". Тем, у кого прогресс больше или равен 80% - "Сертификат". Для остальных записей в столбце Результат задать пустую строку ("").
  Информацию отсортировать по убыванию прогресса, затем по имени пользователя в алфавитном порядке.
  Decision:
  MariaDB [Analitics]> WITH get_passed (student_name, pssd)
      ->     AS( SELECT student_name, COUNT(DISTINCT step_id) AS passed
      ->         FROM student JOIN step_student USING(student_id)
      ->         WHERE result = "correct"
      ->         GROUP BY student_id
      ->         ORDER BY passed)
      -> SELECT student_name AS Студент,
      ->     ROUND(100*pssd/(SELECT COUNT(DISTINCT step_id)
      ->         FROM step_student)) AS Прогресс,
      ->     CASE
      ->         WHEN ROUND(100*pssd/(SELECT COUNT(DISTINCT step_id) FROM step_student)) =  100 THEN "Сертификат с отличием"
      ->         WHEN ROUND(100*pssd/(SELECT COUNT(DISTINCT step_id) FROM step_student)) >= 80 THEN "Сертификат"
      ->         ELSE ""
      ->     END AS Результат
      -> FROM get_passed
      -> ORDER BY Прогресс DESC, Студент;
  Query result:
  +------------+----------+-----------------------+
  | Студент    | Прогресс | Результат             |
  +------------+----------+-----------------------+
  | student_60 | 100      | Сертификат с отличием |
  | student_15 | 94       | Сертификат            |
  | student_18 | 94       | Сертификат            |
  | student_27 | 94       | Сертификат            |
  | student_30 | 94       | Сертификат            |
  | student_31 | 94       | Сертификат            |
  | student_36 | 94       | Сертификат            |
  | student_39 | 94       | Сертификат            |
  | student_4  | 94       | Сертификат            |
  | student_43 | 94       | Сертификат            |
  | student_44 | 94       | Сертификат            |
  | student_46 | 94       | Сертификат            |
  | student_49 | 94       | Сертификат            |
  | student_51 | 94       | Сертификат            |
  | student_53 | 94       | Сертификат            |
  | student_59 | 91       | Сертификат            |
  | student_9  | 91       | Сертификат            |
  | student_23 | 88       | Сертификат            |
  | student_50 | 84       | Сертификат            |
  | student_20 | 78       |                       |
  | student_24 | 78       |                       |
  | student_52 | 63       |                       |
  | student_56 | 63       |                       |
  | student_34 | 59       |                       |
  | student_40 | 59       |                       |
  | student_11 | 50       |                       |
  | student_48 | 50       |                       |
  | student_42 | 47       |                       |
  | student_61 | 44       |                       |
  | student_13 | 41       |                       |
  | student_26 | 41       |                       |
  | student_1  | 34       |                       |
  | student_10 | 34       |                       |
  | student_12 | 34       |                       |
  | student_14 | 34       |                       |
  | student_19 | 34       |                       |
  | student_2  | 34       |                       |
  | student_21 | 34       |                       |
  | student_22 | 34       |                       |
  | student_25 | 34       |                       |
  | student_28 | 34       |                       |
  | student_3  | 34       |                       |
  | student_32 | 34       |                       |
  | student_35 | 34       |                       |
  | student_37 | 34       |                       |
  | student_41 | 34       |                       |
  | student_45 | 34       |                       |
  | student_54 | 34       |                       |
  | student_55 | 34       |                       |
  | student_57 | 34       |                       |
  | student_6  | 34       |                       |
  | student_62 | 34       |                       |
  | student_7  | 34       |                       |
  | student_8  | 34       |                       |
  | student_17 | 31       |                       |
  | student_33 | 31       |                       |
  | student_38 | 31       |                       |
  | student_58 | 31       |                       |
  | student_64 | 31       |                       |
  | student_16 | 28       |                       |
  | student_5  | 28       |                       |
  | student_63 | 28       |                       |
  | student_29 | 25       |                       |
  | student_47 | 25       |                       |
  +------------+----------+-----------------------+
  Task:
  Для студента с именем student_61 вывести все его попытки: название шага, результат и дату отправки попытки (submission_time). Информацию отсортировать по дате отправки попытки и указать, сколько минут прошло между отправкой соседних попыток. Название шага ограничить 20 символами и добавить "...". Столбцы назвать Студент, Шаг, Результат, Дата_отправки, Разница.
  Decision:
  SELECT student_name AS Студент,
  CONCAT(LEFT(step_name, 20), '...') AS Шаг,
  result AS Результат,
  FROM_UNIXTIME(submission_time) AS Дата_отправки,
  SEC_TO_TIME(submission_time - LAG(submission_time,
  1,
  submission_time)
  OVER (ORDER BY submission_time)) AS Разница
  FROM student
  INNER JOIN step_student USING(student_id)
  INNER JOIN step USING(step_id)
  WHERE student_name = 'student_61'
  ORDER BY Дата_отправки;
  +------------+-------------------------+-----------+---------------------+------------------+
  | Студент | Шаг | Результат | Дата_отправки | Разница |
  +------------+-------------------------+-----------+---------------------+------------------+
  | student_61 | Выборка всех данных ... | correct | 2020-08-27 14:22:14 | 0:00:00 |
  | student_61 | Выборка отдельных ст... | correct | 2020-08-27 14:23:53 | 0:01:39 |
  | student_61 | Выборка отдельных ст... | correct | 2020-08-27 14:28:41 | 0:04:48 |
  | student_61 | Выборка данных с соз... | wrong | 2020-08-27 14:33:57 | 0:05:16 |
  | student_61 | Выборка данных с соз... | wrong | 2020-08-27 14:34:24 | 0:00:27 |
  | student_61 | Выборка данных с соз... | correct | 2020-08-27 14:34:50 | 0:00:26 |
  | student_61 | Выборка данных, вычи... | correct | 2020-08-27 14:42:44 | 0:07:54 |
  | student_61 | Выборка данных, вычи... | wrong | 2020-08-27 14:54:06 | 0:11:22 |
  | student_61 | Выборка данных, вычи... | wrong | 2020-08-27 14:55:04 | 0:00:58 |
  | student_61 | Выборка данных, вычи... | wrong | 2020-08-27 14:58:23 | 0:03:19 |
  | student_61 | Выборка данных, вычи... | wrong | 2020-08-27 14:58:56 | 0:00:33 |
  | student_61 | Выборка данных, вычи... | wrong | 2020-08-27 14:59:09 | 0:00:13 |
  | student_61 | Выборка данных, вычи... | wrong | 2020-08-27 14:59:49 | 0:00:40 |
  | student_61 | Выборка данных, вычи... | wrong | 2020-08-27 15:01:00 | 0:01:11 |
  | student_61 | Выборка данных, вычи... | wrong | 2020-08-27 15:05:20 | 0:04:20 |
  | student_61 | Выборка данных, вычи... | wrong | 2020-08-27 15:06:19 | 0:00:59 |
  | student_61 | Выборка данных, вычи... | wrong | 2020-08-27 15:06:58 | 0:00:39 |
  | student_61 | Выборка данных, вычи... | wrong | 2020-08-27 15:08:40 | 0:01:42 |
  | student_61 | Выборка данных, вычи... | wrong | 2020-08-27 15:09:02 | 0:00:22 |
  | student_61 | Выборка данных, вычи... | correct | 2020-08-27 15:13:06 | 0:04:04 |
  | student_61 | Выборка данных по ус... | wrong | 2020-08-27 15:21:02 | 0:07:56 |
  | student_61 | Выборка данных по ус... | correct | 2020-08-27 15:21:18 | 0:00:16 |
  | student_61 | Выборка данных, логи... | correct | 2020-08-27 15:26:05 | 0:04:47 |
  | student_61 | Выборка данных, опер... | correct | 2020-08-27 15:31:31 | 0:05:26 |
  | student_61 | Выборка данных, опер... | wrong | 2020-08-27 15:42:30 | 0:10:59 |
  | student_61 | Выборка данных, опер... | wrong | 2020-08-27 15:43:35 | 0:01:05 |
  | student_61 | Выборка данных, опер... | wrong | 2020-08-27 15:48:09 | 0:04:34 |
  | student_61 | Выборка данных, опер... | wrong | 2020-08-27 15:49:47 | 0:01:38 |
  | student_61 | Выборка данных, опер... | wrong | 2020-08-27 15:52:13 | 0:02:26 |
  | student_61 | Выборка данных, опер... | wrong | 2020-08-27 15:57:41 | 0:05:28 |
  | student_61 | Выборка данных, опер... | wrong | 2020-08-27 15:57:53 | 0:00:12 |
  | student_61 | Выборка данных, опер... | wrong | 2020-08-27 15:58:28 | 0:00:35 |
  | student_61 | Выборка данных, опер... | wrong | 2020-08-27 15:59:58 | 0:01:30 |
  | student_61 | Выборка данных, опер... | wrong | 2020-08-27 16:00:22 | 0:00:24 |
  | student_61 | Выборка данных, опер... | correct | 2020-08-27 16:01:05 | 0:00:43 |
  | student_61 | Выборка данных с сор... | wrong | 2020-08-27 16:12:51 | 0:11:46 |
  | student_61 | Выборка данных с сор... | correct | 2020-08-27 16:14:15 | 0:01:24 |
  | student_61 | Соединение INNER JOI... | correct | 2020-09-01 07:25:39 | 4 days, 15:11:24 |
  | student_61 | Внешнее соединение L... | wrong | 2020-09-01 09:53:30 | 2:27:51 |
  | student_61 | Внешнее соединение L... | correct | 2020-09-01 09:53:50 | 0:00:20 |
  | student_61 | Перекрестное соедине... | wrong | 2020-09-01 10:45:30 | 0:51:40 |
  | student_61 | Перекрестное соедине... | wrong | 2020-09-01 10:46:21 | 0:00:51 |
  | student_61 | Перекрестное соедине... | correct | 2020-09-01 10:47:55 | 0:01:34 |
  +------------+-------------------------+-----------+---------------------+------------------+
  Task:
  Посчитать среднее время, за которое пользователи проходят урок по следующему алгоритму:

          для каждого пользователя вычислить время прохождения шага как сумму времени, потраченного на каждую попытку (время попытки - это разница между временем отправки задания и временем начала попытки), при этом попытки, которые длились больше 4 часов не учитывать, так как пользователь мог просто оставить задание открытым в браузере, а вернуться к нему на следующий день;
          для каждого студента посчитать общее время, которое он затратил на каждый урок;
          вычислить среднее время выполнения урока в часах, результат округлить до 2-х знаков после запятой;
          вывести информацию по возрастанию времени, пронумеровав строки, для каждого урока указать номер модуля и его позицию в нем.
  Decision:
  MariaDB [Analitics]> SELECT ROW_NUMBER() OVER (ORDER BY Среднее_время) AS Номер,
      ->     Урок, Среднее_время
      -> FROM(
      ->     SELECT
      ->         Урок, ROUND(AVG(difference), 2) AS Среднее_время
      -> FROM
      ->      (SELECT student_id,
      ->              CONCAT(module_id, '.', lesson_position, ' ', lesson_name) AS Урок,
      ->              SUM((submission_time - attempt_time) / 3600) AS difference
      ->       FROM module INNER JOIN lesson USING (module_id)
      ->                   INNER JOIN step USING (lesson_id)
      ->                   INNER JOIN step_student USING (step_id)
      ->       WHERE submission_time - attempt_time <= 4 * 3600
      ->       GROUP BY 1, 2) AS query_1
      -> GROUP BY 1) AS TA
      -> order by 3;
  Query result:
  +-------+-------------------------------------------------------------+---------------+
  | Номер | Урок                                                        | Среднее_время |
  +-------+-------------------------------------------------------------+---------------+
  | 1     | 2.2 Запросы на выборку, соединение таблиц                   | 2.37          |
  | 2     | 1.2 Выборка данных                                          | 2.65          |
  | 3     | 2.4 База данных "Интернет-магазин книг", запросы на выборку | 3.65          |
  +-------+-------------------------------------------------------------+---------------+
  Affected rows: 3
  Task:
  Вычислить рейтинг каждого студента относительно студента, прошедшего наибольшее количество шагов в модуле (вычисляется как отношение количества пройденных студентом шагов к максимальному количеству пройденных шагов, умноженное на 100). Вывести номер модуля, имя студента, количество пройденных им шагов и относительный рейтинг. Относительный рейтинг округлить до одного знака после запятой. Столбцы назвать Модуль, Студент, Пройдено_шагов и Относительный_рейтинг  соответственно. Информацию отсортировать сначала по возрастанию номера модуля, потом по убыванию относительного рейтинга и, наконец, по имени студента в алфавитном порядке.
  Decision:
  MariaDB [Analitics]> SELECT  module_id AS Модуль, student_name AS Студент, COUNT(DISTINCT step_id) AS Пройдено_шагов ,
      -> ROUND(COUNT(DISTINCT step_id) /
      ->       MAX(COUNT(DISTINCT step_id)) OVER(PARTITION BY module_id) *100, 1) AS Относительный_рейтинг
      -> FROM lesson
      -> JOIN step USING (lesson_id)
      -> JOIN step_student USING (step_id)
      -> JOIN student USING (student_id)
      -> WHERE result = 'correct'
      -> GROUP BY module_id, student_name
      -> ORDER BY 1, 4 DESC, 2;
  Query result:
  +--------+------------+----------------+-----------------------+
  | Модуль | Студент    | Пройдено_шагов | Относительный_рейтинг |
  +--------+------------+----------------+-----------------------+
  | 1      | student_1  | 11             | 100.0                 |
  | 1      | student_10 | 11             | 100.0                 |
  | 1      | student_11 | 11             | 100.0                 |
  | 1      | student_12 | 11             | 100.0                 |
  | 1      | student_13 | 11             | 100.0                 |
  | 1      | student_14 | 11             | 100.0                 |
  | 1      | student_15 | 11             | 100.0                 |
  | 1      | student_18 | 11             | 100.0                 |
  | 1      | student_19 | 11             | 100.0                 |
  | 1      | student_2  | 11             | 100.0                 |
  | 1      | student_20 | 11             | 100.0                 |
  | 1      | student_21 | 11             | 100.0                 |
  | 1      | student_22 | 11             | 100.0                 |
  | 1      | student_23 | 11             | 100.0                 |
  | 1      | student_24 | 11             | 100.0                 |
  | 1      | student_25 | 11             | 100.0                 |
  | 1      | student_26 | 11             | 100.0                 |
  | 1      | student_27 | 11             | 100.0                 |
  | 1      | student_28 | 11             | 100.0                 |
  | 1      | student_3  | 11             | 100.0                 |
  | 1      | student_30 | 11             | 100.0                 |
  | 1      | student_31 | 11             | 100.0                 |
  | 1      | student_32 | 11             | 100.0                 |
  | 1      | student_34 | 11             | 100.0                 |
  | 1      | student_35 | 11             | 100.0                 |
  | 1      | student_36 | 11             | 100.0                 |
  | 1      | student_37 | 11             | 100.0                 |
  | 1      | student_39 | 11             | 100.0                 |
  | 1      | student_4  | 11             | 100.0                 |
  | 1      | student_40 | 11             | 100.0                 |
  | 1      | student_41 | 11             | 100.0                 |
  | 1      | student_42 | 11             | 100.0                 |
  | 1      | student_43 | 11             | 100.0                 |
  | 1      | student_44 | 11             | 100.0                 |
  | 1      | student_45 | 11             | 100.0                 |
  | 1      | student_46 | 11             | 100.0                 |
  | 1      | student_48 | 11             | 100.0                 |
  | 1      | student_49 | 11             | 100.0                 |
  | 1      | student_50 | 11             | 100.0                 |
  | 1      | student_51 | 11             | 100.0                 |
  | 1      | student_52 | 11             | 100.0                 |
  | 1      | student_53 | 11             | 100.0                 |
  | 1      | student_54 | 11             | 100.0                 |
  | 1      | student_55 | 11             | 100.0                 |
  | 1      | student_56 | 11             | 100.0                 |
  | 1      | student_57 | 11             | 100.0                 |
  | 1      | student_59 | 11             | 100.0                 |
  | 1      | student_6  | 11             | 100.0                 |
  | 1      | student_60 | 11             | 100.0                 |
  | 1      | student_61 | 11             | 100.0                 |
  | 1      | student_62 | 11             | 100.0                 |
  | 1      | student_7  | 11             | 100.0                 |
  | 1      | student_8  | 11             | 100.0                 |
  | 1      | student_9  | 11             | 100.0                 |
  | 1      | student_17 | 10             | 90.9                  |
  | 1      | student_33 | 10             | 90.9                  |
  | 1      | student_38 | 10             | 90.9                  |
  | 1      | student_58 | 10             | 90.9                  |
  | 1      | student_64 | 10             | 90.9                  |
  | 1      | student_16 | 9              | 81.8                  |
  | 1      | student_5  | 9              | 81.8                  |
  | 1      | student_63 | 9              | 81.8                  |
  | 1      | student_29 | 8              | 72.7                  |
  | 1      | student_47 | 8              | 72.7                  |
  | 2      | student_60 | 21             | 100.0                 |
  | 2      | student_15 | 19             | 90.5                  |
  | 2      | student_18 | 19             | 90.5                  |
  | 2      | student_27 | 19             | 90.5                  |
  | 2      | student_30 | 19             | 90.5                  |
  | 2      | student_31 | 19             | 90.5                  |
  | 2      | student_36 | 19             | 90.5                  |
  | 2      | student_39 | 19             | 90.5                  |
  | 2      | student_4  | 19             | 90.5                  |
  | 2      | student_43 | 19             | 90.5                  |
  | 2      | student_44 | 19             | 90.5                  |
  | 2      | student_46 | 19             | 90.5                  |
  | 2      | student_49 | 19             | 90.5                  |
  | 2      | student_51 | 19             | 90.5                  |
  | 2      | student_53 | 19             | 90.5                  |
  | 2      | student_59 | 18             | 85.7                  |
  | 2      | student_9  | 18             | 85.7                  |
  | 2      | student_23 | 17             | 81.0                  |
  | 2      | student_50 | 16             | 76.2                  |
  | 2      | student_20 | 14             | 66.7                  |
  | 2      | student_24 | 14             | 66.7                  |
  | 2      | student_52 | 9              | 42.9                  |
  | 2      | student_56 | 9              | 42.9                  |
  | 2      | student_34 | 8              | 38.1                  |
  | 2      | student_40 | 8              | 38.1                  |
  | 2      | student_11 | 5              | 23.8                  |
  | 2      | student_48 | 5              | 23.8                  |
  | 2      | student_42 | 4              | 19.0                  |
  | 2      | student_61 | 3              | 14.3                  |
  | 2      | student_13 | 2              | 9.5                   |
  | 2      | student_26 | 2              | 9.5                   |
  +--------+------------+----------------+-----------------------+
  Affected rows: 95
  Task:
  Проанализировать, в каком порядке и с каким интервалом пользователь отправлял последнее верно выполненное задание каждого урока. Учитывать только студентов, прошедших хотя бы один шаг из всех трех уроков. В базе занесены попытки студентов  для трех уроков курса, поэтому анализ проводить только для этих уроков.
  Для студентов прошедших как минимум по одному шагу в каждом уроке, найти последний пройденный шаг каждого урока - крайний шаг, и указать:
          имя студента;
          номер урока, состоящий из номера модуля и через точку позиции каждого урока в модуле;
          время отправки  - время подачи решения на проверку;
          разницу во времени отправки между текущим и предыдущим крайним шагом в днях, при этом для первого шага поставить прочерк ("-"), а количество дней округлить до целого в большую сторону.
  Столбцы назвать  Студент, Урок,  Макс_время_отправки и Интервал  соответственно. Отсортировать результаты по имени студента в алфавитном порядке, а потом по возрастанию времени отправки.
  Decision:
  MariaDB [Analitics]> WITH get_time_lesson(student_name,  lesson, max_submission_time)
      -> AS( SELECT student_name,  
      ->    CONCAT(module_id,
      ->        '.',
      ->         lesson_position),
      ->    MAX(submission_time)
      ->    FROM step_student
      ->    INNER JOIN step USING (step_id)
      ->    INNER JOIN lesson USING (lesson_id)
      ->    INNER JOIN student USING(student_id)
      ->    WHERE  result = 'correct'  
      ->    GROUP BY 1,2
      ->    ORDER BY 1),
      ->    get_students(student_name)
      ->  AS( SELECT student_name
      ->    FROM get_time_lesson
      ->    GROUP BY student_name
      ->    HAVING COUNT(lesson) = 3)
      -> SELECT student_name AS Студент,  
      ->    lesson AS Урок,
      ->    FROM_UNIXTIME(max_submission_time) AS Макс_время_отправки,
      ->    IFNULL(CEIL((max_submission_time - LAG(max_submission_time) OVER (PARTITION BY student_name
      ->        ORDER BY max_submission_time )) / 86400),'-') AS Интервал
      -> FROM get_time_lesson
      -> WHERE student_name in (SELECT * FROM get_students)
      -> ORDER BY 1,3;
  Query result:
  +------------+------+---------------------+----------+
  | Студент    | Урок | Макс_время_отправки | Интервал |
  +------------+------+---------------------+----------+
  | student_15 | 1.2  | 2020-05-20 12:35:57 | -        |
  | student_15 | 2.4  | 2020-06-08 07:10:24 | 19       |
  | student_15 | 2.2  | 2020-08-18 12:47:03 | 72       |
  | student_18 | 1.2  | 2020-04-17 03:22:14 | -        |
  | student_18 | 2.2  | 2020-06-18 07:25:44 | 63       |
  | student_18 | 2.4  | 2020-06-18 07:34:14 | 1        |
  | student_20 | 1.2  | 2020-05-28 12:08:53 | -        |
  | student_20 | 2.2  | 2020-06-17 15:55:29 | 21       |
  | student_20 | 2.4  | 2020-06-18 09:48:39 | 1        |
  | student_23 | 1.2  | 2020-05-24 18:15:27 | -        |
  | student_23 | 2.2  | 2020-06-01 04:37:16 | 8        |
  | student_23 | 2.4  | 2020-06-01 04:42:36 | 1        |
  | student_24 | 1.2  | 2020-04-14 16:16:22 | -        |
  | student_24 | 2.2  | 2020-05-11 12:28:49 | 27       |
  | student_24 | 2.4  | 2020-05-13 12:20:39 | 2        |
  | student_27 | 1.2  | 2020-08-12 10:18:47 | -        |
  | student_27 | 2.2  | 2020-08-14 17:14:51 | 3        |
  | student_27 | 2.4  | 2020-08-20 12:23:34 | 6        |
  | student_30 | 1.2  | 2020-08-10 08:38:49 | -        |
  | student_30 | 2.2  | 2020-08-16 12:53:39 | 7        |
  | student_30 | 2.4  | 2020-08-19 11:41:49 | 3        |
  | student_31 | 1.2  | 2020-06-13 09:03:39 | -        |
  | student_31 | 2.2  | 2020-07-02 16:43:36 | 20       |
  | student_31 | 2.4  | 2020-07-05 17:18:56 | 4        |
  | student_36 | 1.2  | 2020-08-04 07:25:30 | -        |
  | student_36 | 2.2  | 2020-08-07 11:39:12 | 4        |
  | student_36 | 2.4  | 2020-08-07 20:33:02 | 1        |
  | student_39 | 1.2  | 2020-05-31 12:35:10 | -        |
  | student_39 | 2.2  | 2020-06-02 09:47:15 | 2        |
  | student_39 | 2.4  | 2020-06-02 17:06:41 | 1        |
  | student_4  | 1.2  | 2020-05-31 17:46:27 | -        |
  | student_4  | 2.2  | 2020-07-27 17:12:45 | 57       |
  | student_4  | 2.4  | 2020-07-29 09:21:24 | 2        |
  | student_43 | 1.2  | 2020-07-16 21:19:13 | -        |
  | student_43 | 2.4  | 2020-08-06 13:02:44 | 21       |
  | student_43 | 2.2  | 2020-08-08 20:11:52 | 3        |
  | student_44 | 1.2  | 2020-05-26 14:23:39 | -        |
  | student_44 | 2.2  | 2020-06-02 11:07:52 | 7        |
  | student_44 | 2.4  | 2020-06-06 21:57:20 | 5        |
  | student_46 | 1.2  | 2020-05-26 13:02:10 | -        |
  | student_46 | 2.4  | 2020-06-03 20:30:01 | 9        |
  | student_46 | 2.2  | 2020-06-03 20:54:34 | 1        |
  | student_49 | 1.2  | 2020-07-11 16:31:12 | -        |
  | student_49 | 2.2  | 2020-07-15 05:00:03 | 4        |
  | student_49 | 2.4  | 2020-07-16 04:57:51 | 1        |
  | student_50 | 1.2  | 2020-07-01 08:16:41 | -        |
  | student_50 | 2.2  | 2020-08-10 08:26:49 | 41       |
  | student_50 | 2.4  | 2020-09-09 12:44:00 | 31       |
  | student_51 | 1.2  | 2020-09-03 07:24:26 | -        |
  | student_51 | 2.2  | 2020-09-07 19:31:01 | 5        |
  | student_51 | 2.4  | 2020-09-10 13:12:11 | 3        |
  | student_52 | 1.2  | 2020-08-24 18:30:55 | -        |
  | student_52 | 2.2  | 2020-09-07 13:51:02 | 14       |
  | student_52 | 2.4  | 2020-09-07 22:16:19 | 1        |
  | student_53 | 1.2  | 2020-07-11 09:32:33 | -        |
  | student_53 | 2.2  | 2020-07-17 12:34:54 | 7        |
  | student_53 | 2.4  | 2020-07-19 05:09:32 | 2        |
  | student_56 | 1.2  | 2020-07-15 12:20:48 | -        |
  | student_56 | 2.2  | 2020-08-06 10:22:13 | 22       |
  | student_56 | 2.4  | 2020-08-20 09:18:46 | 14       |
  | student_59 | 1.2  | 2020-08-17 19:29:09 | -        |
  | student_59 | 2.2  | 2020-08-21 10:35:18 | 4        |
  | student_59 | 2.4  | 2020-08-22 10:39:29 | 2        |
  | student_60 | 1.2  | 2020-09-01 12:54:58 | -        |
  | student_60 | 2.2  | 2020-09-02 15:34:45 | 2        |
  | student_60 | 2.4  | 2020-09-03 10:53:13 | 1        |
  | student_9  | 1.2  | 2020-05-01 05:40:11 | -        |
  | student_9  | 2.2  | 2020-05-05 09:29:20 | 5        |
  | student_9  | 2.4  | 2020-05-06 10:52:38 | 2        |
  +------------+------+---------------------+----------+
  Affected rows: 69
  Task:
  Для студента с именем student_59 вывести следующую информацию по всем его попыткам:
          информация о шаге: номер модуля, символ '.', позиция урока в модуле, символ '.', позиция шага в модуле;
          порядковый номер попытки для каждого шага - определяется по возрастанию времени отправки попытки;
          результат попытки;
          время попытки (преобразованное к формату времени) - определяется как разность между временем отправки попытки и времени ее начала, в случае если попытка длилась  более 1 часа, то время попытки заменить на среднее время всех попыток пользователя по всем шагам без учета тех, которые длились больше 1 часа;
          относительное время попытки  - определяется как отношение времени попытки (с учетом замены времени попытки) к суммарному времени всех попыток  шага, округленное до двух знаков после запятой  .
  Столбцы назвать  Студент,  Шаг, Номер_попытки, Результат, Время_попытки и Относительное_время. Информацию отсортировать сначала по возрастанию id шага, а затем по возрастанию номера попытки (определяется по времени отправки попытки).
  Decision:
  MariaDB [Analitics]> SET @avg_time := (SELECT CEIL(AVG(submission_time - attempt_time))
      ->     FROM step_student
      ->     INNER JOIN student USING(student_id)
      ->     WHERE student_name = "student_59"
      ->         AND (submission_time - attempt_time) < 3600);
  Query OK, 0 rows affected (0.002 sec)
  MariaDB [Analitics]>     WITH get_stat
      ->     AS( SELECT student_name,
      ->        CONCAT(module_id,
      ->            ".",
      ->            lesson_position,
      ->            ".",
      ->            step_position) AS less,
      ->        step_id,
      ->        RANK() OVER (PARTITION BY CONCAT(module_id,
      ->            ".",
      ->            lesson_position,
      ->            ".",
      ->            step_position)
      ->        ORDER BY submission_time) AS rang,
      ->        result,
      ->        CASE
      ->            WHEN (submission_time - attempt_time) > 3600
      ->               THEN @avg_time
      ->            ELSE (submission_time - attempt_time)
      ->        END AS qr
      ->     FROM student
      ->     INNER JOIN step_student USING(student_id)
      ->     INNER JOIN step USING(step_id)
      ->     INNER JOIN lesson USING(lesson_id)
      ->     WHERE student_name = "student_59")
      -> SELECT student_name AS Студент,
      ->     less AS Шаг,
      ->     rang AS Номер_попытки,
      ->     result AS Результат,
      ->     SEC_TO_TIME(CEIL(qr)) AS Время_попытки,
      ->     ROUND((qr / (SUM(qr) OVER (PARTITION BY less ORDER BY less)) * 100), 2) AS Относительное_время
      -> FROM get_stat
      -> ORDER BY step_id, 3;
  Affected rows: 0
  Query result:
  +------------+--------+---------------+-----------+---------------+---------------------+
  | Студент    | Шаг    | Номер_попытки | Результат | Время_попытки | Относительное_время |
  +------------+--------+---------------+-----------+---------------+---------------------+
  | student_59 | 1.2.2  | 1             | correct   | 0:00:28       | 100.00              |
  | student_59 | 1.2.3  | 1             | correct   | 0:01:11       | 100.00              |
  | student_59 | 1.2.4  | 1             | correct   | 0:06:09       | 100.00              |
  | student_59 | 1.2.5  | 1             | correct   | 0:02:24       | 100.00              |
  | student_59 | 1.2.6  | 1             | wrong     | 0:09:42       | 90.37               |
  | student_59 | 1.2.6  | 2             | wrong     | 0:00:05       | 0.78                |
  | student_59 | 1.2.6  | 3             | wrong     | 0:00:23       | 3.57                |
  | student_59 | 1.2.6  | 4             | wrong     | 0:00:10       | 1.55                |
  | student_59 | 1.2.6  | 5             | correct   | 0:00:20       | 3.11                |
  | student_59 | 1.2.6  | 6             | correct   | 0:00:04       | 0.62                |
  | student_59 | 1.2.7  | 1             | wrong     | 0:11:44       | 98.88               |
  | student_59 | 1.2.7  | 2             | correct   | 0:00:08       | 1.12                |
  | student_59 | 1.2.8  | 1             | correct   | 0:02:23       | 100.00              |
  | student_59 | 1.2.9  | 1             | wrong     | 0:04:53       | 92.72               |
  | student_59 | 1.2.9  | 2             | correct   | 0:00:23       | 7.28                |
  | student_59 | 1.2.10 | 1             | wrong     | 0:03:19       | 76.83               |
  | student_59 | 1.2.10 | 2             | wrong     | 0:00:07       | 2.70                |
  | student_59 | 1.2.10 | 3             | correct   | 0:00:53       | 20.46               |
  | student_59 | 1.2.11 | 1             | wrong     | 0:15:50       | 79.56               |
  | student_59 | 1.2.11 | 2             | wrong     | 0:00:06       | 0.50                |
  | student_59 | 1.2.11 | 3             | wrong     | 0:00:10       | 0.84                |
  | student_59 | 1.2.11 | 4             | wrong     | 0:00:29       | 2.43                |
  | student_59 | 1.2.11 | 5             | wrong     | 0:00:07       | 0.59                |
  | student_59 | 1.2.11 | 6             | wrong     | 0:00:08       | 0.67                |
  | student_59 | 1.2.11 | 7             | wrong     | 0:00:04       | 0.34                |
  | student_59 | 1.2.11 | 8             | wrong     | 0:00:24       | 2.01                |
  | student_59 | 1.2.11 | 9             | wrong     | 0:00:07       | 0.59                |
  | student_59 | 1.2.11 | 10            | wrong     | 0:00:10       | 0.84                |
  | student_59 | 1.2.11 | 11            | wrong     | 0:02:11       | 10.97               |
  | student_59 | 1.2.11 | 12            | correct   | 0:00:08       | 0.67                |
  | student_59 | 1.2.12 | 1             | correct   | 0:07:10       | 100.00              |
  | student_59 | 2.2.2  | 1             | correct   | 0:08:52       | 100.00              |
  | student_59 | 2.2.3  | 1             | wrong     | 0:11:31       | 98.86               |
  | student_59 | 2.2.3  | 2             | correct   | 0:00:08       | 1.14                |
  | student_59 | 2.2.4  | 1             | wrong     | 0:17:46       | 93.18               |
  | student_59 | 2.2.4  | 2             | wrong     | 0:00:51       | 4.46                |
  | student_59 | 2.2.4  | 3             | wrong     | 0:00:15       | 1.31                |
  | student_59 | 2.2.4  | 4             | wrong     | 0:00:08       | 0.70                |
  | student_59 | 2.2.4  | 5             | wrong     | 0:00:04       | 0.35                |
  | student_59 | 2.2.5  | 1             | correct   | 0:07:10       | 100.00              |
  | student_59 | 2.2.6  | 1             | correct   | 0:24:35       | 100.00              |
  | student_59 | 2.2.7  | 1             | wrong     | 0:53:14       | 99.29               |
  | student_59 | 2.2.7  | 2             | correct   | 0:00:23       | 0.71                |
  | student_59 | 2.2.8  | 1             | wrong     | 0:07:10       | 48.31               |
  | student_59 | 2.2.8  | 2             | correct   | 0:07:40       | 51.69               |
  | student_59 | 2.2.9  | 1             | correct   | 0:31:13       | 100.00              |
  | student_59 | 2.4.2  | 1             | correct   | 0:03:31       | 100.00              |
  | student_59 | 2.4.3  | 1             | correct   | 0:08:21       | 100.00              |
  | student_59 | 2.4.5  | 1             | correct   | 0:07:10       | 100.00              |
  | student_59 | 2.4.6  | 1             | correct   | 0:13:38       | 100.00              |
  | student_59 | 2.4.7  | 1             | correct   | 0:21:18       | 100.00              |
  | student_59 | 2.4.8  | 1             | correct   | 0:33:02       | 100.00              |
  | student_59 | 2.4.9  | 1             | wrong     | 0:18:12       | 71.75               |
  | student_59 | 2.4.9  | 2             | correct   | 0:07:10       | 28.25               |
  | student_59 | 2.4.10 | 1             | correct   | 0:05:32       | 100.00              |
  | student_59 | 2.4.11 | 1             | correct   | 0:40:27       | 100.00              |
  | student_59 | 2.4.12 | 1             | correct   | 0:07:10       | 100.00              |
  | student_59 | 2.4.13 | 1             | correct   | 0:07:15       | 100.00              |
  +------------+--------+---------------+-----------+---------------+---------------------+
  Affected rows: 58
  Task:
  Online курс обучающиеся могут проходить по различным траекториям, проследить за которыми можно по способу решения ими заданий шагов курса. Большинство обучающихся за несколько попыток  получают правильный ответ
  и переходят к следующему шагу. Но есть такие, что остаются на шаге, выполняя несколько верных попыток, или переходят к следующему, оставив нерешенные шаги.
  Выделив эти "необычные" действия обучающихся, можно проследить их траекторию работы с курсом и проанализировать задания, для которых эти действия выполнялись, а затем их как-то изменить.
  Для этой цели необходимо выделить группы обучающихся по способу прохождения шагов:
          I группа - это те пользователи, которые после верной попытки решения шага делают неверную (скорее всего для того, чтобы поэкспериментировать или проверить, как работают примеры);
          II группа - это те пользователи, которые делают больше одной верной попытки для одного шага (возможно, улучшают свое решение или пробуют другой вариант);
          III группа - это те пользователи, которые не смогли решить задание какого-то шага (у них все попытки по этому шагу - неверные).
  Вывести группу (I, II, III), имя пользователя, количество шагов, которые пользователь выполнил по соответствующему способу. Столбцы назвать Группа, Студент, Количество_шагов. Отсортировать информацию по возрастанию номеров групп, потом по убыванию количества шагов и, наконец, по имени студента в алфавитном порядке.
  Decision:
  MariaDB [Analitics]> WITH qr
      -> AS(SELECT student_name,
      ->     step_id,
      ->     count(result) AS sm
      ->     FROM step_student
      ->     INNER JOIN student
      ->         USING(student_id)
      ->     WHERE result = "correct"
      ->     GROUP BY 1, 2
      ->     HAVING count(result) > 1)
      -> SELECT "I" AS Группа,
      ->     student_name AS Студент,
      ->     count(step_id) AS Количество_шагов
      -> FROM (SELECT student_name,
      ->     step_id,
      ->     IF(result = "correct"
      ->        AND submission_time < MAX(submission_time) OVER (PARTITION BY student_name, step_id),
      ->        IF(LEAD(result) OVER (PARTITION BY student_id, step_id ORDER BY submission_time) = "wrong",
      ->            1,
      ->            0),
      ->        0) AS change_res
      -> FROM step_student INNER JOIN student USING(student_id))qr1
      -> WHERE change_res = 1
      -> GROUP BY 1, 2
      -> UNION
      -> SELECT "II" AS Группа,
      ->     student_name AS Студент,
      ->     count(step_id) AS Количество_шагов
      -> FROM qr
      -> GROUP BY 1, 2
      -> UNION
      -> SELECT "III" AS Группа,
      ->     student_name AS Студент,
      ->     count(DISTINCT step_id) AS Количество_шагов
      -> FROM (SELECT student_id,
      ->     step_id,
      ->     SUM(new_result) OVER (PARTITION BY student_id, step_id) AS sum_result
      ->     FROM (SELECT student_id,
      ->         step_id,
      ->         IF(result = "wrong",
      ->             0,
      ->             1) AS new_result
      ->         FROM step_student)qr_1)qr_2
      ->         INNER JOIN student
      ->             USING(student_id)
      -> WHERE sum_result = 0
      -> GROUP BY student_id
      -> ORDER BY Группа, Количество_шагов DESC, Студент;
  Query result:
  +--------+------------+------------------+
  | Группа | Студент    | Количество_шагов |
  +--------+------------+------------------+
  | I      | student_15 | 2                |
  | I      | student_53 | 2                |
  | I      | student_11 | 1                |
  | I      | student_34 | 1                |
  | I      | student_35 | 1                |
  | I      | student_40 | 1                |
  | I      | student_57 | 1                |
  | I      | student_62 | 1                |
  | I      | student_9  | 1                |
  | II     | student_53 | 4                |
  | II     | student_62 | 4                |
  | II     | student_34 | 3                |
  | II     | student_60 | 3                |
  | II     | student_20 | 2                |
  | II     | student_35 | 2                |
  | II     | student_9  | 2                |
  | II     | student_11 | 1                |
  | II     | student_15 | 1                |
  | II     | student_30 | 1                |
  | II     | student_36 | 1                |
  | II     | student_39 | 1                |
  | II     | student_40 | 1                |
  | II     | student_46 | 1                |
  | II     | student_57 | 1                |
  | II     | student_59 | 1                |
  | III    | student_24 | 3                |
  | III    | student_33 | 1                |
  | III    | student_42 | 1                |
  | III    | student_50 | 1                |
  | III    | student_51 | 1                |
  | III    | student_59 | 1                |
  | III    | student_64 | 1                |
  +--------+------------+------------------+
  Affected rows: 32
  Task:
  Разработать базу "Склад Книг"
  Известны название книги, ее автор, количество экземпляров в наличии и ее цена. Вся эта информация может быть представлена в виде таблицы, состоящей из 4 столбцов (приведены только 4 записи, на самом деле их гораздо больше).:
  Название            Автор               Цена, руб   Количество
  Мастер и Маргарита  Булгаков М.А.       670.99      3
  Белая гвардия       Булгаков М.А.       540.50      5
  Идиот               Достоевский Ф.М.    460         10
  Братья Карамазовы   Достоевский Ф.М.    799.01      2
  Task:
  Сформулируйте SQL запрос для создания таблицы book
  Структура таблицы book:
  Поле        Тип, описание
  book_id     INT PRIMARY KEY AUTO_INCREMENT
  title       VARCHAR(50)
  author      VARCHAR(30)
  price       DECIMAL(8, 2)
  amount      INT
  Decision:
  mysql> CREATE TABLE book(
      -> book_id INT PRIMARY KEY AUTO_INCREMENT,
      -> title VARCHAR(50),
      -> author VARCHAR(30),
      -> price DECIMAL(8, 2),
      -> amount INT
      -> );  
      Query OK, 0 rows affected (0.16 sec)
  Task:
  Занесите новую строку в таблицу book.
  текстовые значения (тип VARCHAR) заключать либо в двойные, либо в одинарные кавычки:
  book_id                         title               author          price           amount
  INT PRIMARY KEY AUTO_INCREMENT  VARCHAR(50)         VARCHAR(30)     DECIMAL(8,2)    INT
  1                               Мастер и Маргарита  Булгаков М.А.   670.99          3
  Decision:
  mysql> INSERT INTO book (title, author, price, amount)
      -> VALUES ('Мастер и Маргарита', 'Булгаков М.А.', '670.99', '3');
      Query OK, 1 row affected (0.09 sec)
  mysql> SELECT * FROM book;
      +---------+------------------------------------+-------------------------+--------+--------+
      | book_id | title                              | author                  | price  | amount |
      +---------+------------------------------------+-------------------------+--------+--------+
      |       1 | Мастер и Маргарита                 | Булгаков М.А.           | 670.99 |      3 |
      +---------+------------------------------------+-------------------------+--------+--------+
      1 row in set (0.00 sec)
  Task:
  Занесите три последние записи в таблицу book.
  book_id                         title   author  price   amount
  INT PRIMARY KEY AUTO_INCREMENT  VARCHAR(50)             VARCHAR(30)         DECIMAL(8,2)    INT
  1                               Мастер и Маргарита      Булгаков М.А.       670.99          3
  2                               Белая гвардия           Булгаков М.А.       540.50          5
  3                               Идиот                   Достоевский Ф.М.    460.00          10
  4                               Братья Карамазовы       Достоевский Ф.М.    799.01          2
  Decision:
  mysql> INSERT INTO book (title, author, price, amount) VALUES ('Белая гвардия', 'Булгаков М.А.', 540.50, 5),
      -> ('Идиот', 'Достоевский Ф.М.', 460.00, 10),
      -> ('Братья Карамазовы', 'Достоевский Ф.М.', 799.01, 2);
      Query OK, 3 rows affected (0.14 sec)
      Records: 3  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM book;
      +---------+------------------------------------+-------------------------------+--------+--------+
      | book_id | title                              | author                        | price  | amount |
      +---------+------------------------------------+-------------------------------+--------+--------+
      |       1 | Мастер и Маргарита                 | Булгаков М.А.                 | 670.99 |      3 |
      |       2 | Белая гвардия                      | Булгаков М.А.                 | 540.50 |      5 |
      |       3 | Идиот                              | Достоевский Ф.М.              | 460.00 |     10 |
      |       4 | Братья Карамазовы                  | Достоевский Ф.М.              | 799.01 |      2 |
      +---------+------------------------------------+-------------------------------+--------+--------+
      4 rows in set (0.00 sec)
  Task:
  Вывести информацию о всех книгах, хранящихся на складе.
  Decision:
  mysql> SELECT * FROM book;
      +---------+------------------------------------------+-------------------------------+--------+--------+
      | book_id | title                                    | author                        | price  | amount |
      +---------+------------------------------------------+-------------------------------+--------+--------+
      |       1 | Мастер и Маргарита                       | Булгаков М.А.                 | 670.99 |      3 |
      |       2 | Белая гвардия                            | Булгаков М.А.                 | 540.50 |      5 |
      |       3 | Идиот                                    | Достоевский Ф.М.              | 460.00 |     10 |
      |       4 | Братья Карамазовы                        | Достоевский Ф.М.              | 799.01 |      2 |
      |       5 | Стихотворение и поэмы                    | Есенин С.А.                   | 650.00 |     15 |
      +---------+------------------------------------------+-------------------------------+--------+--------+
      5 rows in set (0.01 sec)
  Task:
  Выбрать авторов, название книг и их цену из таблицы book.
  Decision:
  mysql> SELECT author, title, price FROM book;
      +-------------------------------+------------------------------------------+--------+
      | author                        | title                                    | price  |
      +-------------------------------+------------------------------------------+--------+
      | Булгаков М.А.                 | Мастер и Маргарита                       | 670.99 |
      | Булгаков М.А.                 | Белая гвардия                            | 540.50 |
      | Достоевский Ф.М.              | Идиот                                    | 460.00 |
      | Достоевский Ф.М.              | Братья Карамазовы                        | 799.01 |
      | Есенин С.А.                   | Стихотворение и поэмы                    | 650.00 |
      +-------------------------------+------------------------------------------+--------+
      5 rows in set (0.00 sec)
  Task:
  Выбрать названия книг и авторов из таблицы book, для поля title задать имя(псевдоним) Название, для поля author –  Автор.
  Decision:
  mysql> SELECT title AS Название, author AS Автор FROM book;
      +------------------------------------------+-------------------------------+
      | Название                                 | Автор                         |
      +------------------------------------------+-------------------------------+
      | Мастер и Маргарита                       | Булгаков М.А.                 |
      | Белая гвардия                            | Булгаков М.А.                 |
      | Идиот                                    | Достоевский Ф.М.              |
      | Братья Карамазовы                        | Достоевский Ф.М.              |
      | Стихотворение и поэмы                    | Есенин С.А.                   |
      +------------------------------------------+-------------------------------+
      5 rows in set (0.00 sec)
  Task:
  Для упаковки каждой книги требуется один лист бумаги, цена которого 1 рубль 65 копеек. Посчитать стоимость упаковки для каждой книги (сколько денег потребуется, чтобы упаковать все экземпляры книги). В запросе вывести название книги, ее количество и стоимость упаковки, последний столбец назвать pack.
  Decision:
  mysql> SELECT title, amount, amount*1.65 AS pack FROM book;
      +------------------------------------------+--------+-------+
      | title                                    | amount | pack  |
      +------------------------------------------+--------+-------+
      | Мастер и Маргарита                       |      3 |  4.95 |
      | Белая гвардия                            |      5 |  8.25 |
      | Идиот                                    |     10 | 16.50 |
      | Братья Карамазовы                        |      2 |  3.30 |
      | Стихотворение и поэмы                    |     15 | 24.75 |
      +------------------------------------------+--------+-------+
      5 rows in set (0.00 sec)
  Task:
  В конце года цену всех книг на складе пересчитывают – снижают ее на 30%. Написать SQL запрос, который из таблицы book выбирает названия, авторов, количества и вычисляет новые цены книг. Столбец с новой ценой назвать new_price, цену округлить до 2-х знаков после запятой.
  Decision:
  mysql> SELECT title, author, amount, ROUND(price*0.7,2) AS new_price FROM book;
      +------------------------------------------+-------------------------------+--------+-----------+
      | title                                    | author                        | amount | new_price |
      +------------------------------------------+-------------------------------+--------+-----------+
      | Мастер и Маргарита                       | Булгаков М.А.                 |      3 |    469.69 |
      | Белая гвардия                            | Булгаков М.А.                 |      5 |    378.35 |
      | Идиот                                    | Достоевский Ф.М.              |     10 |    322.00 |
      | Братья Карамазовы                        | Достоевский Ф.М.              |      2 |    559.31 |
      | Стихотворение и поэмы                    | Есенин С.А.                   |     15 |    455.00 |
      +------------------------------------------+-------------------------------+--------+-----------+
      5 rows in set (0.01 sec)
  Task:
  Для каждой книги из таблицы book установим скидку следующим образом: если количество книг меньше 4, то скидка будет составлять 50% от цены, в противном случае 30%.
  Decision:
  SELECT title, amount, price,
      IF(amount<4, price*0.5, price*0.7) AS sale
  FROM book;
  +-----------------------+--------+--------+---------+
  | title                 | amount | price  | sale    |
  +-----------------------+--------+--------+---------+
  | Мастер и Маргарита    | 3      | 670.99 | 335.495 |
  | Белая гвардия         | 5      | 540.50 | 378.350 |
  | Идиот                 | 10     | 460.00 | 322.000 |
  | Братья Карамазовы     | 2      | 799.01 | 399.505 |
  | Стихотворения и поэмы | 15     | 650.00 | 455.000 |
  +-----------------------+--------+--------+---------+
  Task:
  Цена по скидке должна отображаться с двумя знаками после запятой, добавим в запрос округление:
  Decision:
  SELECT title, amount, price,
      ROUND(IF(amount<4, price*0.5, price*0.7),2) AS sale
  FROM book;
  +-----------------------+--------+--------+--------+
  | title                 | amount | price  | sale   |
  +-----------------------+--------+--------+--------+
  | Мастер и Маргарита    | 3      | 670.99 | 335.50 |
  | Белая гвардия         | 5      | 540.50 | 378.35 |
  | Идиот                 | 10     | 460.00 | 322.00 |
  | Братья Карамазовы     | 2      | 799.01 | 399.51 |
  | Стихотворения и поэмы | 15     | 650.00 | 455.00 |
  +-----------------------+--------+--------+--------+
  Task:
  При анализе продаж книг выяснилось, что наибольшей популярностью пользуются книги Михаила Булгакова, на втором месте книги Сергея Есенина. Исходя из этого решили поднять цену книг Булгакова на 10%, а цену книг Есенина - на 5%. Написать запрос, куда включить автора, название книги и новую цену, последний столбец назвать new_price. Значение округлить до двух знаков после запятой.
  Decision:
  mysql> SELECT author, title,
      -> ROUND(
      -> IF(author='Булгаков М.А.', price*1.1,
      -> IF(author='Есенин С.А.', price*1.05, price)
      -> ),2) AS new_price
      -> FROM book;
      +-------------------------------+------------------------------------------+-----------+
      | author                        | title                                    | new_price |
      +-------------------------------+------------------------------------------+-----------+
      | Булгаков М.А.                 | Мастер и Маргарита                       |    738.09 |
      | Булгаков М.А.                 | Белая гвардия                            |    594.55 |
      | Достоевский Ф.М.              | Идиот                                    |    460.00 |
      | Достоевский Ф.М.              | Братья Карамазовы                        |    799.01 |
      | Есенин С.А.                   | Стихотворение и поэмы                    |    682.50 |
      +-------------------------------+------------------------------------------+-----------+
      5 rows in set (0.00 sec)
  mysql> SELECT author, title,
      -> ROUND
      ->     (CASE
      ->         WHEN author = 'Булгаков М.А.' THEN price*1.1
      ->         WHEN author = 'Есенин С.А.' THEN price*1.05
      ->             ELSE price END,2)
      ->     AS new_price
      -> FROM book;
      +-------------------------------+------------------------------------------+-----------+
      | author                        | title                                    | new_price |
      +-------------------------------+------------------------------------------+-----------+
      | Булгаков М.А.                 | Мастер и Маргарита                       |    738.09 |
      | Булгаков М.А.                 | Белая гвардия                            |    594.55 |
      | Достоевский Ф.М.              | Идиот                                    |    460.00 |
      | Достоевский Ф.М.              | Братья Карамазовы                        |    799.01 |
      | Есенин С.А.                   | Стихотворение и поэмы                    |    682.50 |
      +-------------------------------+------------------------------------------+-----------+
      5 rows in set (0.00 sec)
  Task:
  Вывести автора, название  и цены тех книг, количество которых меньше 10.
  Decision:
  mysql> SELECT author, title, price FROM book WHERE amount<10;
      +-------------------------------+------------------------------------+--------+
      | author                        | title                              | price  |
      +-------------------------------+------------------------------------+--------+
      | Булгаков М.А.                 | Мастер и Маргарита                 | 670.99 |
      | Булгаков М.А.                 | Белая гвардия                      | 540.50 |
      | Достоевский Ф.М.              | Братья Карамазовы                  | 799.01 |
      +-------------------------------+------------------------------------+--------+
      3 rows in set (0.00 sec)
  Task:
  Вывести название, автора,  цену  и количество всех книг, цена которых меньше 500 или больше 600, а стоимость всех экземпляров этих книг больше или равна 5000.
  Decision:
  mysql> SELECT title, author, price, amount FROM book
      -> WHERE (price<500 OR price>600) AND (price*amount >= 5000);
      +------------------------------------------+---------------------+--------+--------+
      | title                                    | author              | price  | amount |
      +------------------------------------------+---------------------+--------+--------+
      | Стихотворение и поэмы                    | Есенин С.А.         | 650.00 |     15 |
      +------------------------------------------+---------------------+--------+--------+
      1 row in set (0.00 sec)
  Task:
  Вывести название и авторов тех книг, цены которых принадлежат интервалу от 540.50 до 800 (включая границы),  а количество или 2, или 3, или 5, или 7
  Decision:
  mysql> SELECT title, author
      -> FROM book
      -> WHERE (price BETWEEN 540.50 AND 800) AND (amount IN (2,3,5,7));
      +------------------------------------+-------------------------------+
      | title                              | author                        |
      +------------------------------------+-------------------------------+
      | Мастер и Маргарита                 | Булгаков М.А.                 |
      | Белая гвардия                      | Булгаков М.А.                 |
      | Братья Карамазовы                  | Достоевский Ф.М.              |
      +------------------------------------+-------------------------------+
      3 rows in set (0.00 sec)
  Task:
  Вывести  автора и название  книг, количество которых принадлежит интервалу от 2 до 14 (включая границы). Информацию  отсортировать сначала по авторам (в обратном алфавитном порядке), а затем по названиям книг (по алфавиту).
  Decision:
  mysql> SELECT author, title  FROM book WHERE amount BETWEEN 2 AND 14 ORDER BY author DESC, title;
      +-------------------------------+------------------------------------+
      | author                        | title                              |
      +-------------------------------+------------------------------------+
      | Достоевский Ф.М.              | Братья Карамазовы                  |
      | Достоевский Ф.М.              | Идиот                              |
      | Булгаков М.А.                 | Белая гвардия                      |
      | Булгаков М.А.                 | Мастер и Маргарита                 |
      +-------------------------------+------------------------------------+
      4 rows in set (0.00 sec)
  Task:
  Вывести название и автора тех книг, название которых состоит из двух и более слов, а инициалы автора содержат букву «С». Считать, что в названии слова отделяются друг от друга пробелами и не содержат знаков препинания, между фамилией автора и инициалами обязателен пробел, инициалы записываются без пробела в формате: буква, точка, буква, точка. Информацию отсортировать по названию книги в алфавитном порядке.
  Decision:
  mysql> INSERT INTO book (title, author, price, amount) VALUES ('', 'Иванов С.С.', 50.00, 10),
      -> ('Дети полуночи', 'Рушди Салман', 950.00, 5),
      -> ('Лирика', 'Гумилев Н.С.', 460.00, 10),
      -> ('Поэмы', 'Бехтерев С.С.', 460.00, 10),
      -> ('Капитанская дочка', 'Пушкин А.С.', 520.50, 7);
      Query OK, 5 rows affected (0.05 sec)
      Records: 5  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM book;
      +---------+------------------------------------------+-------------------------------+--------+--------+
      | book_id | title                                    | author                        | price  | amount |
      +---------+------------------------------------------+-------------------------------+--------+--------+
      |       1 | Мастер и Маргарита                       | Булгаков М.А.                 | 670.99 |      3 |
      |       2 | Белая гвардия                            | Булгаков М.А.                 | 540.50 |      5 |
      |       3 | Идиот                                    | Достоевский Ф.М.              | 460.00 |     10 |
      |       4 | Братья Карамазовы                        | Достоевский Ф.М.              | 799.01 |      2 |
      |       5 | Стихотворение и поэмы                    | Есенин С.А.                   | 650.00 |     15 |
      |       6 |                                          | Иванов С.С.                   |  50.00 |     10 |
      |       7 | Дети полуночи                            | Рушди Салман                  | 950.00 |      5 |
      |       8 | Лирика                                   | Гумилев Н.С.                  | 460.00 |     10 |
      |       9 | Поэмы                                    | Бехтерев С.С.                 | 460.00 |     10 |
      |      10 | Капитанская дочка                        | Пушкин А.С.                   | 520.50 |      7 |
      +---------+------------------------------------------+-------------------------------+--------+--------+
      10 rows in set (0.00 sec)
  mysql> SELECT title, author
      -> FROM book
      -> WHERE title LtuserE "%_ %"
      -> AND author LtuserE "%С.%"
      -> ORDER BY title;
      +------------------------------------------+---------------------+
      | title                                    | author              |
      +------------------------------------------+---------------------+
      | Капитанская дочка                        | Пушкин А.С.         |
      | Стихотворение и поэмы                    | Есенин С.А.         |
      +------------------------------------------+---------------------+
      2 rows in set (0.00 sec)
      +------------------------------------------+---------------------+
      | title                                    | author              |
      +------------------------------------------+---------------------+
      | Капитанская дочка                        | Пушкин А.С.         |
      | Стихотворение и поэмы                    | Есенин С.А.         |
      +------------------------------------------+---------------------+
      2 rows in set (0.00 sec)
  Task:
  Отобрать различные (уникальные) элементы столбца amount таблицы book.
  Decision:
  mysql> SELECT DISTINCT amount
      -> FROM book;
      +--------+
      | amount |
      +--------+
      |      3 |
      |      5 |
      |     10 |
      |      2 |
      |     15 |
      +--------+
      5 rows in set (0.00 sec)
  Task:
  Посчитать, количество различных книг и количество экземпляров книг каждого автора , хранящихся на складе.  Столбцы назвать Автор, Различных_книг и Количество_экземпляров соответственно.
  Decision:
  mysql> SELECT  author AS Автор,  COUNT(title) AS Различных_книг,  SUM(amount) AS Количество_экземпляров  FROM book  GROUP BY author;
      +-------------------------------+-----------------------------+---------------------------------------------+
      | Автор                         | Различных_книг              | Количество_экземпляров                      |
      +-------------------------------+-----------------------------+---------------------------------------------+
      | Булгаков М.А.                 |                           2 |                                           8 |
      | Достоевский Ф.М.              |                           3 |                                          22 |
      | Есенин С.А.                   |                           1 |                                          15 |
      +-------------------------------+-----------------------------+---------------------------------------------+
      3 rows in set (0.00 sec)
  Task:
  Вывести фамилию автора, минимальную, максимальную и среднюю цену книг каждого автора . Вычисляемые столбцы назвать Минимальная_цена, Максимальная_цена и Средняя_цена соответственно.
  Decision:
  mysql> SELECT author, MIN(price) AS Минимальная_цена, MAX(price) AS Максимальная_цена, AVG(price) AS Средняя_цена
      -> FROM book
      -> GROUP BY author;
      +-------------------------------+---------------------------------+-----------------------------------+-------------------------+
      | author                        | Минимальная_цена                | Максимальная_цена                 | Средняя_цена            |
      +-------------------------------+---------------------------------+-----------------------------------+-------------------------+
      | Булгаков М.А.                 |                          540.50 |                            670.99 |              605.745000 |
      | Достоевский Ф.М.              |                          460.00 |                            799.01 |              579.836667 |
      | Есенин С.А.                   |                          650.00 |                            650.00 |              650.000000 |
      +-------------------------------+---------------------------------+-----------------------------------+-------------------------+
      3 rows in set (0.01 sec)
  Task:
  Для каждого автора вычислить суммарную стоимость книг S (имя столбца Стоимость), а также вычислить налог на добавленную стоимость  для полученных сумм (имя столбца НДС ) , который включен в стоимость и составляет k = 18%,  а также стоимость книг  (Стоимость_без_НДС) без него. Значения округлить до двух знаков после запятой.
  Decision:
  mysql> SELECT
      -> author,
      -> ROUND(SUM(price * amount),2) AS Стоимость,
      -> ROUND(SUM(price * amount*18/100)/(1+18/100),2) AS НДС,
      -> ROUND(SUM(price * amount/(1+18/100)),2) AS Стоимость_без_НДС
      -> FROM book
      -> GROUP BY author;
      +-------------------------------+--------------------+---------+----------------------------------+
      | author                        | Стоимость          | НДС     | Стоимость_без_НДС                |
      +-------------------------------+--------------------+---------+----------------------------------+
      | Булгаков М.А.                 |            4715.47 |  719.31 |                          3996.16 |
      | Достоевский Ф.М.              |           11003.02 | 1678.43 |                          9324.59 |
      | Есенин С.А.                   |            9750.00 | 1487.29 |                          8262.71 |
      +-------------------------------+--------------------+---------+----------------------------------+
      3 rows in set (0.01 sec)
  Task:
  Вывести  цену самой дешевой книги, цену самой дорогой и среднюю цену книг на складе. Названия столбцов Минимальная_цена, Максимальная_цена, Средняя_цена соответственно. Среднюю цену округлить до двух знаков после запятой.
  Decision:
  mysql> SELECT MIN(price) AS Минимальная_цена, MAX(price) AS Максимальная_цена, ROUND(AVG(price),2) AS Средняя_цена FROM book;
      +---------------------------------+-----------------------------------+-------------------------+
      | Минимальная_цена                | Максимальная_цена                 | Средняя_цена            |
      +---------------------------------+-----------------------------------+-------------------------+
      |                          460.00 |                            799.01 |                  600.17 |
      +---------------------------------+-----------------------------------+-------------------------+
      1 row in set (0.00 sec)   
  Task:
  Вычислить среднюю цену и суммарную стоимость тех книг, количество экземпляров которых принадлежит интервалу от 5 до 14, включительно. Столбцы назвать Средняя_цена и Стоимость, значения округлить до 2-х знаков после запятой.
  Decision:
  mysql> SELECT
      -> ROUND(AVG(price), 2) AS Средняя_цена,
      -> ROUND(SUM(price * amount), 2) AS Стоимость
      -> FROM book
      -> WHERE amount BETWEEN 5 AND 14
      -> HAVING SUM(price * amount);
      +-------------------------+--------------------+
      | Средняя_цена            | Стоимость          |
      +-------------------------+--------------------+
      |                  493.67 |           12107.50 |
      +-------------------------+--------------------+
      1 row in set (0.01 sec)
  Task:
  Посчитать стоимость всех экземпляров каждого автора без учета книг «Идиот» и «Белая гвардия». В результат включить только тех авторов, у которых суммарная стоимость книг более 5000 руб. Вычисляемый столбец назвать Стоимость. Результат отсортировать по убыванию стоимости.
  Decision:
  mysql> SELECT author, SUM(amount*price) AS Стоимость
      -> FROM book
      -> WHERE title <> 'Идиот' AND title <> 'Белая гвардия'
      -> GROUP BY author
      -> HAVING SUM(amount*price) > 5000
      -> ORDER BY 2 DESC;
      +-------------------------------+--------------------+
      | author                        | Стоимость          |
      +-------------------------------+--------------------+
      | Есенин С.А.                   |            9750.00 |
      | Достоевский Ф.М.              |            6403.02 |
      +-------------------------------+--------------------+
      2 rows in set (0.00 sec)
  Task:
  Вывести информацию (автора, название и цену) о  книгах, цены которых меньше или равны средней цене книг на складе. Информацию вывести в отсортированном по убыванию цены виде. Среднее вычислить как среднее по цене книги.
  Decision:
  SELECT author, title, price
  FROM book
  WHERE price<=(
      SELECT AVG(price)
      FROM book
  ) ORDER BY price DESC;
      +------------------+---------------+--------+
      | author           | title         | price  |
      +------------------+---------------+--------+
      | Булгаков М.А.    | Белая гвардия | 540.50 |
      | Достоевский Ф.М. | Игрок         | 480.50 |
      | Достоевский Ф.М. | Идиот         | 460.00 |
      +------------------+---------------+--------+
  Task:
  Вывести информацию (автора, название и цену) о тех книгах, цены которых превышают минимальную цену книги на складе не более чем на 150 рублей в отсортированном по возрастанию цены виде.
  Decision:
  SELECT author, title, price
  FROM book
  WHERE price<=(
      SELECT MIN(price)
      FROM book
  ) +150 ORDER BY price ASC;
      +------------------+----------------+--------+
      | author           | title          | price  |
      +------------------+----------------+--------+
      | Достоевский Ф.М. | Идиот          | 460.00 |
      | Достоевский Ф.М. | Игрок          | 480.50 |
      | Булгаков М.А.    | Белая гвардия  | 540.50 |
      | Пушкин А.С.      | Евгений Онегин | 610.00 |
      +------------------+----------------+--------+
  Task:
  Вывести информацию (автора, книгу и количество) о тех книгах, количество экземпляров которых в таблице book не дублируется.
  Decision:
  SELECT author, title, amount
  FROM book
  WHERE amount IN(
      SELECT amount
      FROM book
      GROUP BY amount
      HAVING count(amount) = 1
  );
      +---------------+-----------------------+--------+
      | author        | title                 | amount |
      +---------------+-----------------------+--------+
      | Булгаков М.А. | Белая гвардия         | 5      |
      | Есенин С.А.   | Стихотворения и поэмы | 15     |
      +---------------+-----------------------+--------+
  Task:
  Вывести информацию о книгах(автор, название, цена), цена которых меньше самой большой из минимальных цен, вычисленных для каждого автора
  Decision:
  SELECT author, title, price
  FROM book
  WHERE price < ANY(
      SELECT MIN(price)
      FROM book
      GROUP BY author
  );
      +------------------+---------------+--------+
      | author           | title         | price  |
      +------------------+---------------+--------+
      | Булгаков М.А.    | Белая гвардия | 540.50 |
      | Достоевский Ф.М. | Идиот         | 460.00 |
      | Достоевский Ф.М. | Игрок         | 480.50 |
      +------------------+---------------+--------+
  Task:
  Посчитать сколько и каких экземпляров книг нужно заказать поставщикам, чтобы на складе стало одинаковое количество экземпляров каждой книги, равное значению самого большего количества экземпляров одной книги на складе. Вывести название книги, ее автора, текущее количество экземпляров на складе и количество заказываемых экземпляров книг. Последнему столбцу присвоить имя Заказ.
  Decision:
  SELECT title, author, amount,
        ABS(((SELECT MAX(amount) FROM book)-amount)) AS 'Заказ'
  FROM book
  WHERE amount  NOT IN (SELECT MAX(amount) FROM book);
      +-----------------------+------------------+--------+--------------------+
      | title                 | author           | amount | Среднее_количество |
      +-----------------------+------------------+--------+--------------------+
      | Мастер и Маргарита    | Булгаков М.А.    | 3      | 7                  |
      | Братья Карамазовы     | Достоевский Ф.М. | 3      | 7                  |
      | Стихотворения и поэмы | Есенин С.А.      | 15     | 7                  |
      +-----------------------+------------------+--------+--------------------+
  Task:
  Создать таблицу поставка (supply), которая имеет структуру:
  Поле    Тип, описание
  supply_id   INT PRIMARY KEY AUTO_INCREMENT
  title   VARCHAR(50)
  author  VARCHAR(30)
  price   DECIMAL(8, 2)
  amount  INT
  Decision:
  mysql> CREATE TABLE supply (
      -> supply_id INT PRIMARY KEY AUTO_INCREMENT,
      -> title VARCHAR(50),
      -> author VARCHAR(30),
      -> price DECIMAL(8,2),
      -> amount INT
      -> );
      Query OK, 0 rows affected (0.42 sec)
  mysql> SELECT * FROM supply;
      Empty set (0.00 sec)
  Task:
  Занесите в таблицу supply четыре записи, чтобы получилась следующая таблица
  supply_id   title   author  price   amount
  1   Лирика  Пастернак Б.Л.  518.99  2
  2   Черный человек      Есенин С.А.     570.20  6
  3   Белая гвардия   Булгаков М.А.   540.50  7
  4   Идиот   Достоевский Ф.М.    360.80  3
  Decision:
  mysql> INSERT INTO supply (title, author, price, amount)  VALUES ('Лирика', 'Пастернак Б.Л.', 518.99, 2), ('Черный человек', 'Есенин С.А.', 570.20, 6), ('Белая гвардия', 'Булгаков М.А.', 540.50, 7),
      -> ('Идиот', 'Достоевский Ф.М.', 360.80, 3);
      Query OK, 4 rows affected (0.18 sec)
      Records: 4  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM supply;
      +-----------+-----------------------------+-------------------------------+--------+--------+
      | supply_id | title                       | author                        | price  | amount |
      +-----------+-----------------------------+-------------------------------+--------+--------+
      |         1 | Лирика                      | Пастернак Б.Л.                | 518.99 |      2 |
      |         2 | Черный человек              | Есенин С.А.                   | 570.20 |      6 |
      |         3 | Белая гвардия               | Булгаков М.А.                 | 540.50 |      7 |
      |         4 | Идиот                       | Достоевский Ф.М.              | 360.80 |      3 |
      +-----------+-----------------------------+-------------------------------+--------+--------+
      4 rows in set (0.00 sec)
  Task:
  Добавить из таблицы supply в таблицу book, все книги, кроме книг, написанных Булгаковым М.А. и Достоевским Ф.М.
  Decision:
  mysql> SELECT * FROM book;
      +---------+------------------------------------------+-------------------------------+--------+--------+
      | book_id | title                                    | author                        | price  | amount |
      +---------+------------------------------------------+-------------------------------+--------+--------+
      |       1 | Мастер и Маргарита                       | Булгаков М.А.                 | 670.99 |      3 |
      |       2 | Белая гвардия                            | Булгаков М.А.                 | 540.50 |      5 |
      |       3 | Идиот                                    | Достоевский Ф.М.              | 460.00 |     10 |
      |       4 | Братья Карамазовы                        | Достоевский Ф.М.              | 799.01 |      2 |
      |       5 | Игрок                                    | Достоевский Ф.М.              | 480.50 |     10 |
      |       6 | Стихотворения и поэмы                    | Есенин С.А.                   | 650.00 |     15 |
      +---------+------------------------------------------+-------------------------------+--------+--------+
      6 rows in set (0.00 sec)
  mysql> SELECT * FROM supply;
      +-----------+-----------------------------+-------------------------------+--------+--------+
      | supply_id | title                       | author                        | price  | amount |
      +-----------+-----------------------------+-------------------------------+--------+--------+
      |         1 | Лирика                      | Пастернак Б.Л.                | 518.99 |      2 |
      |         2 | Черный человек              | Есенин С.А.                   | 570.20 |      6 |
      |         3 | Белая гвардия               | Булгаков М.А.                 | 540.50 |      7 |
      |         4 | Идиот                       | Достоевский Ф.М.              | 360.80 |      3 |
      +-----------+-----------------------------+-------------------------------+--------+--------+
      4 rows in set (0.00 sec)
  mysql> INSERT INTO book (title, author, price, amount)
      -> SELECT title, author, price, amount
      -> FROM supply
      -> where (author != 'Булгаков М.А.') and (author !='Достоевский Ф.М.');
      Query OK, 2 rows affected (0.12 sec)
      Records: 2  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM book;
      +---------+------------------------------------------+-------------------------------+--------+--------+
      | book_id | title                                    | author                        | price  | amount |
      +---------+------------------------------------------+-------------------------------+--------+--------+
      |       1 | Мастер и Маргарита                       | Булгаков М.А.                 | 670.99 |      3 |
      |       2 | Белая гвардия                            | Булгаков М.А.                 | 540.50 |      5 |
      |       3 | Идиот                                    | Достоевский Ф.М.              | 460.00 |     10 |
      |       4 | Братья Карамазовы                        | Достоевский Ф.М.              | 799.01 |      2 |
      |       5 | Игрок                                    | Достоевский Ф.М.              | 480.50 |     10 |
      |       6 | Стихотворения и поэмы                    | Есенин С.А.                   | 650.00 |     15 |
      |      17 | Лирика                                   | Пастернак Б.Л.                | 518.99 |      2 |
      |      18 | Черный человек                           | Есенин С.А.                   | 570.20 |      6 |
      +---------+------------------------------------------+-------------------------------+--------+--------+
      8 rows in set (0.01 sec)
  Task:
  Занести из таблицы supply в таблицу book только те книги, авторов которых нет в book.
  Decision:
  mysql> INSERT INTO book (title, author, price, amount)
      -> SELECT title, author, price, amount
      -> FROM supply
      -> WHERE author NOT IN (
      -> SELECT author
      -> FROM book
      -> );
      Query OK, 0 rows affected (0.02 sec)
      Records: 0  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM book;
      +---------+------------------------------------------+-------------------------------+--------+--------+
      | book_id | title                                    | author                        | price  | amount |
      +---------+------------------------------------------+-------------------------------+--------+--------+
      |       1 | Мастер и Маргарита                       | Булгаков М.А.                 | 670.99 |      3 |
      |       2 | Белая гвардия                            | Булгаков М.А.                 | 540.50 |      5 |
      |       3 | Идиот                                    | Достоевский Ф.М.              | 460.00 |     10 |
      |       4 | Братья Карамазовы                        | Достоевский Ф.М.              | 799.01 |      2 |
      |       5 | Игрок                                    | Достоевский Ф.М.              | 480.50 |     10 |
      |       6 | Стихотворения и поэмы                    | Есенин С.А.                   | 650.00 |     15 |
      |      17 | Лирика                                   | Пастернак Б.Л.                | 518.99 |      2 |
      |      18 | Черный человек                           | Есенин С.А.                   | 570.20 |      6 |
      +---------+------------------------------------------+-------------------------------+--------+--------+
      8 rows in set (0.00 sec)
  Task:
  Уменьшить на 10% цену тех книг в таблице book, количество которых принадлежит интервалу от 5 до 10, включая границы.
  Decision:
  mysql> UPDATE book  SET price = 0.9 * price  WHERE amount BETWEEN 5 AND 10;
  mysql> SELECT * FROM book;
      +---------+------------------------------------------+-------------------------------+--------+--------+
      | book_id | title                                    | author                        | price  | amount |
      +---------+------------------------------------------+-------------------------------+--------+--------+
      |       1 | Мастер и Маргарита                       | Булгаков М.А.                 | 670.99 |      3 |
      |       2 | Белая гвардия                            | Булгаков М.А.                 | 486.45 |      5 |
      |       3 | Идиот                                    | Достоевский Ф.М.              | 414.00 |     10 |
      |       4 | Братья Карамазовы                        | Достоевский Ф.М.              | 799.01 |      2 |
      |       5 | Игрок                                    | Достоевский Ф.М.              | 432.45 |     10 |
      |       6 | Стихотворения и поэмы                    | Есенин С.А.                   | 650.00 |     15 |
      |      17 | Лирика                                   | Пастернак Б.Л.                | 518.99 |      2 |
      |      18 | Черный человек                           | Есенин С.А.                   | 513.18 |      6 |
      +---------+------------------------------------------+-------------------------------+--------+--------+
      8 rows in set (0.00 sec)
  Task:
  В таблице book необходимо скорректировать значение для покупателя в столбце buy таким образом, чтобы оно не превышало количество экземпляров книг, указанных в столбце amount. А цену тех книг, которые покупатель не заказывал, снизить на 10%.
  Decision:
  mysql> update book
  set buy = if(buy>amount,amount,buy),
  price = if(buy=0, price * 0.9, price);
  mysql> SELECT * FROM book;
      +---------+-----------------------+------------------+--------+--------+-----+
      | book_id | title                 | author           | price  | amount | buy |
      +---------+-----------------------+------------------+--------+--------+-----+
      | 1       | Мастер и Маргарита    | Булгаков М.А.    | 670.99 | 3      | 0   |
      | 2       | Белая гвардия         | Булгаков М.А.    | 540.50 | 5      | 3   |
      | 3       | Идиот                 | Достоевский Ф.М. | 460.00 | 10     | 8   |
      | 4       | Братья Карамазовы     | Достоевский Ф.М. | 799.01 | 2      | 0   |
      | 5       | Стихотворения и поэмы | Есенин С.А.      | 650.00 | 15     | 18  |
      +---------+-----------------------+------------------+--------+--------+-----+
  Task:
  Для тех книг в таблице book , которые есть в таблице supply, не только увеличить их количество в таблице book ( увеличить их количество на значение столбца amount таблицы supply), но и пересчитать их цену (для каждой книги найти сумму цен из таблиц book и supply и разделить на 2).
  Decision:
  mysql> UPDATE book, supply
      -> SET book.price = (book.price + supply.price)/2, book.amount = book.amount + supply.amount
      -> WHERE book.title = supply.title AND book.author = supply.author;
      Query OK, 4 rows affected, 1 warning (0.05 sec)
      Rows matched: 4  Changed: 4  Warnings: 1
  mysql> SELECT * FROM book;
      +---------+------------------------------------------+-------------------------------+--------+--------+
      | book_id | title                                    | author                        | price  | amount |
      +---------+------------------------------------------+-------------------------------+--------+--------+
      |       1 | Мастер и Маргарита                       | Булгаков М.А.                 | 670.99 |      3 |
      |       2 | Белая гвардия                            | Булгаков М.А.                 | 513.48 |     12 |
      |       3 | Идиот                                    | Достоевский Ф.М.              | 387.40 |     13 |
      |       4 | Братья Карамазовы                        | Достоевский Ф.М.              | 799.01 |      2 |
      |       5 | Игрок                                    | Достоевский Ф.М.              | 432.45 |     10 |
      |       6 | Стихотворения и поэмы                    | Есенин С.А.                   | 650.00 |     15 |
      |      17 | Лирика                                   | Пастернак Б.Л.                | 518.99 |      4 |
      |      18 | Черный человек                           | Есенин С.А.                   | 541.69 |     12 |
      +---------+------------------------------------------+-------------------------------+--------+--------+
      8 rows in set (0.00 sec)
  Task:
  Удалить из таблицы supply книги тех авторов, общее количество экземпляров книг которых в таблице book превышает 10.
  Decision:
  mysql> SELECT * FROM book;
      +---------+------------------------------------------+-------------------------------+--------+--------+
      | book_id | title                                    | author                        | price  | amount |
      +---------+------------------------------------------+-------------------------------+--------+--------+
      |       1 | Мастер и Маргарита                       | Булгаков М.А.                 | 670.99 |      3 |
      |       2 | Белая гвардия                            | Булгаков М.А.                 | 513.48 |     12 |
      |       3 | Идиот                                    | Достоевский Ф.М.              | 387.40 |     13 |
      |       4 | Братья Карамазовы                        | Достоевский Ф.М.              | 799.01 |      2 |
      |       5 | Игрок                                    | Достоевский Ф.М.              | 432.45 |     10 |
      |       6 | Стихотворения и поэмы                    | Есенин С.А.                   | 650.00 |     15 |
      |      17 | Лирика                                   | Пастернак Б.Л.                | 518.99 |      4 |
      |      18 | Черный человек                           | Есенин С.А.                   | 541.69 |     12 |
      +---------+------------------------------------------+-------------------------------+--------+--------+
      8 rows in set (0.00 sec)
  mysql> SELECT * FROM supply;
      +-----------+-----------------------------+-------------------------------+--------+--------+
      | supply_id | title                       | author                        | price  | amount |
      +-----------+-----------------------------+-------------------------------+--------+--------+
      |         1 | Лирика                      | Пастернак Б.Л.                | 518.99 |      2 |
      |         2 | Черный человек              | Есенин С.А.                   | 570.20 |      6 |
      |         3 | Белая гвардия               | Булгаков М.А.                 | 540.50 |      7 |
      |         4 | Идиот                       | Достоевский Ф.М.              | 360.80 |      3 |
      +-----------+-----------------------------+-------------------------------+--------+--------+
      4 rows in set (0.00 sec)
  mysql> DELETE FROM supply
      -> WHERE author IN(SELECT author FROM book
      -> GROUP BY author HAVING SUM(amount)>10);
      Query OK, 3 rows affected (0.02 sec)
  mysql> SELECT * FROM supply;
      +-----------+--------------+---------------------------+--------+--------+
      | supply_id | title        | author                    | price  | amount |
      +-----------+--------------+---------------------------+--------+--------+
      |         1 | Лирика       | Пастернак Б.Л.            | 518.99 |      2 |
      +-----------+--------------+---------------------------+--------+--------+
      1 row in set (0.00 sec)
  Task:
  Создать таблицу заказ (ordering), куда включить авторов и названия тех книг, количество экземпляров которых в таблице book меньше среднего количества экземпляров книг в таблице book. В таблицу включить столбец   amount, в котором для всех книг указать одинаковое значение - среднее количество экземпляров книг в таблице book.
  Decision:
  mysql> Select * from supply;
      +-----------+--------------+---------------------------+--------+--------+
      | supply_id | title        | author                    | price  | amount |
      +-----------+--------------+---------------------------+--------+--------+
      |         1 | Лирика       | Пастернак Б.Л.            | 518.99 |      2 |
      +-----------+--------------+---------------------------+--------+--------+
      1 row in set (0.00 sec)
  mysql> SELECT * FROM book;
      +---------+------------------------------------------+-------------------------------+--------+--------+
      | book_id | title                                    | author                        | price  | amount |
      +---------+------------------------------------------+-------------------------------+--------+--------+
      |       1 | Мастер и Маргарита                       | Булгаков М.А.                 | 670.99 |      3 |
      |       2 | Белая гвардия                            | Булгаков М.А.                 | 513.48 |     12 |
      |       3 | Идиот                                    | Достоевский Ф.М.              | 387.40 |     13 |
      |       4 | Братья Карамазовы                        | Достоевский Ф.М.              | 799.01 |      2 |
      |       5 | Игрок                                    | Достоевский Ф.М.              | 432.45 |     10 |
      |       6 | Стихотворения и поэмы                    | Есенин С.А.                   | 650.00 |     15 |
      |      17 | Лирика                                   | Пастернак Б.Л.                | 518.99 |      4 |
      |      18 | Черный человек                           | Есенин С.А.                   | 541.69 |     12 |
      +---------+------------------------------------------+-------------------------------+--------+--------+
      8 rows in set (0.01 sec)
  mysql> CREATE TABLE ordering AS
      -> SELECT author, title,
      -> (
      -> SELECT ROUND(AVG(amount))
      -> FROM book
      -> ) AS amount
      -> FROM book
      -> WHERE amount < (SELECT AVG(amount) FROM book) ;
      Query OK, 3 rows affected (0.23 sec)
      Records: 3  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM ordering;
      +-------------------------------+------------------------------------+--------+
      | author                        | title                              | amount |
      +-------------------------------+------------------------------------+--------+
      | Булгаков М.А.                 | Мастер и Маргарита                 |      9 |
      | Достоевский Ф.М.              | Братья Карамазовы                  |      9 |
      | Пастернак Б.Л.                | Лирика                             |      9 |
      +-------------------------------+------------------------------------+--------+
      3 rows in set (0.00 sec)
  Task:
  Создать таблицу author следующей структуры:
  Поле            Тип, описание
  author_id       INT PRIMARY KEY AUTO_INCREMENT
  name_author     VARCHAR(50)
  Decision:
  mysql> CREATE TABLE author (
  author_id INT PRIMARY KEY AUTO_INCREMENT,
  name_author VARCHAR(50)
  );
      Query OK, 0 rows affected (0.92 sec)
  Task:
  Заполнить таблицу author. В нее включить следующих авторов:
  Булгаков М.А.
  Достоевский Ф.М.
  Есенин С.А.
  Пастернак Б.Л
  Decision:
  mysql> INSERT INTO author (name_author)  VALUES ('Булгаков М.А.'),
  ('Достоевский Ф.М.'),
  ('Есенин С.А.'),
  ('Пастернак Б.Л.');
      Query OK, 4 rows affected (1.08 sec)
      Records: 4  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM author;
      +-----------+-------------------------------+
      | author_id | name_author                   |
      +-----------+-------------------------------+
      |         1 | Булгаков М.А.                 |
      |         2 | Достоевский Ф.М.              |
      |         3 | Есенин С.А.                   |
      |         4 | Пастернак Б.Л.                |
      +-----------+-------------------------------+
      4 rows in set (0.01 sec)
  Task:
  Создадим таблицу genre следующей структуры.
  Поле        Тип, описание
  genre_id    INT PRIMARY KEY AUTO_INCREMENT
  name_genre  VARCHAR(30)
  Decision:
  mysql> CREATE TABLE genre(     genre_id INT PRIMARY KEY AUTO_INCREMENT,      name_genre VARCHAR(30) );
      Query OK, 0 rows affected (0.23 sec)
  Task:
  Вставим новую запись в таблицу genre
  В первых двух строках показана структура таблицы, далее - ее содержимое:
  genre_id                        name_genre
  INT PRIMARY KEY AUTO_INCREMENT  VARCHAR(30)
  1                               Роман
  Decision
  mysql> INSERT INTO genre (name_genre)
      -> VALUES ('Роман');
      Query OK, 1 row affected (0.06 sec)
  mysql> SELECT * FROM genre;
      +----------+------------+
      | genre_id | name_genre |
      +----------+------------+
      |        1 | Роман      |
      +----------+------------+
      1 row in set (0.00 sec)
  Task:
  Перепишите запрос на создание таблицы book , чтобы ее структура соответствовала структуре, показанной на логической схеме (таблица genre уже создана, порядок следования столбцов - как на логической схеме в таблице book, genre_id  - внешний ключ) . Для genre_id ограничение о недопустимости пустых значений не задавать. В качестве главной таблицы для описания поля  genre_idиспользовать таблицу genre следующей структуры:
  Поле        Тип, описание
  genre_id    INT PRIMARY KEY AUTO_INCREMENT
  name_genre  VARCHAR(30)
  Decision:
  mysql> SELECT * FROM author;
      +-----------+-------------------------------+
      | author_id | name_author                   |
      +-----------+-------------------------------+
      |         1 | Булгаков М.А.                 |
      |         2 | Достоевский Ф.М.              |
      |         3 | Есенин С.А.                   |
      |         4 | Пастернак Б.Л.                |
      +-----------+-------------------------------+
      4 rows in set (0.00 sec)
  mysql> SELECT * FROM genre;
      +----------+------------+
      | genre_id | name_genre |
      +----------+------------+
      |        1 | Роман      |
      +----------+------------+
      1 row in set (0.11 sec)
  mysql> CREATE TABLE book1 (
  book_id INT PRIMARY KEY AUTO_INCREMENT,
  title VARCHAR(50),
  author_id INT NOT NULL,
  genre_id INT,
  price DECIMAL(8,2),
  amount INT,
  FOREIGN KEY (author_id)  REFERENCES author (author_id),
  FOREIGN KEY (genre_id)  REFERENCES genre (genre_id)
  );
      Query OK, 0 rows affected (0.33 sec)
  mysql> DESCRIBE book1;
      +-----------+--------------+------+-----+---------+----------------+
      | Field     | Type         | Null | Key | Default | Extra          |
      +-----------+--------------+------+-----+---------+----------------+
      | book_id   | int          | NO   | PRI | NULL    | auto_increment |
      | title     | varchar(50)  | YES  |     | NULL    |                |
      | author_id | int          | NO   | MUL | NULL    |                |
      | genre_id  | int          | YES  | MUL | NULL    |                |
      | price     | decimal(8,2) | YES  |     | NULL    |                |
      | amount    | int          | YES  |     | NULL    |                |
      +-----------+--------------+------+-----+---------+----------------+
      6 rows in set (0.01 sec)
  mysql> SHOW COLUMNS FROM book1;
      +-----------+--------------+------+-----+---------+----------------+
      | Field     | Type         | Null | Key | Default | Extra          |
      +-----------+--------------+------+-----+---------+----------------+
      | book_id   | int          | NO   | PRI | NULL    | auto_increment |
      | title     | varchar(50)  | YES  |     | NULL    |                |
      | author_id | int          | NO   | MUL | NULL    |                |
      | genre_id  | int          | YES  | MUL | NULL    |                |
      | price     | decimal(8,2) | YES  |     | NULL    |                |
      | amount    | int          | YES  |     | NULL    |                |
      +-----------+--------------+------+-----+---------+----------------+
      6 rows in set (0.01 sec)
  Task:
  Создать таблицу book той же структуры, что и на предыдущем шаге. Будем считать, что при удалении автора из таблицы author, должны удаляться все записи о книгах из таблицы book, написанные этим автором. А при удалении жанра из таблицы genre для соответствующей записи book установить значение Null в столбце genre_id.
  Decision:
  mysql> CREATE TABLE book2 (
  book_id INT PRIMARY KEY AUTO_INCREMENT,
  title VARCHAR(50),
  author_id INT NOT NULL,
  genre_id INT,
  price DECIMAL(8,2),
  amount INT,
  FOREIGN KEY (author_id)  REFERENCES author (author_id) ON DELETE CASCADE,
  FOREIGN KEY (genre_id)  REFERENCES genre (genre_id) ON DELETE SET NULL
  );
      Query OK, 0 rows affected (0.28 sec)
  mysql> SHOW COLUMNS FROM book2;
      +-----------+--------------+------+-----+---------+----------------+
      | Field     | Type         | Null | Key | Default | Extra          |
      +-----------+--------------+------+-----+---------+----------------+
      | book_id   | int          | NO   | PRI | NULL    | auto_increment |
      | title     | varchar(50)  | YES  |     | NULL    |                |
      | author_id | int          | NO   | MUL | NULL    |                |
      | genre_id  | int          | YES  | MUL | NULL    |                |
      | price     | decimal(8,2) | YES  |     | NULL    |                |
      | amount    | int          | YES  |     | NULL    |                |
      +-----------+--------------+------+-----+---------+----------------+
      6 rows in set (0.01 sec)
  Task:
  На предыдущих шагах были созданы и заполнены таблицы author:
  author_id   name_author
  1   Булгаков М.А.
  2   Достоевский Ф.М.
  3   Есенин С.А.
  4   Пастернак Б.Л.
  и  genre:
  genre_id    name_genre
  1   Роман
  2   Поэзия
  Добавьте три последние записи (с ключевыми значениями 6, 7, 8) в таблицу book:
  book_id     title           author_id   genre_id    price   amount
  1   Мастер и Маргарита      1           1   670.99  3
  2   Белая гвардия           1           1   540.50  5
  3   Идиот                   2           1   460.00  10
  4   Братья Карамазовы       2           1   799.01  3
  5   Игрок                   2           1   480.50  10
  6   Стихотворения и поэмы   3           2   650.00  15
  7   Черный человек          3           2   570.20  6
  8   Лирика                  4           2   518.99  2
  Decision:
  mysql> SELECT * FROM genre;
      +----------+------------+
      | genre_id | name_genre |
      +----------+------------+
      |        1 | Роман      |
      +----------+------------+
      1 row in set (0.00 sec)
  mysql> SELECT * FROM author;
      +-----------+-------------------------------+
      | author_id | name_author                   |
      +-----------+-------------------------------+
      |         1 | Булгаков М.А.                 |
      |         2 | Достоевский Ф.М.              |
      |         3 | Есенин С.А.                   |
      |         4 | Пастернак Б.Л.                |
      +-----------+-------------------------------+
      4 rows in set (0.00 sec)
  mysql> SHOW COLUMNS FROM book2;
      +-----------+--------------+------+-----+---------+----------------+
      | Field     | Type         | Null | Key | Default | Extra          |
      +-----------+--------------+------+-----+---------+----------------+
      | book_id   | int          | NO   | PRI | NULL    | auto_increment |
      | title     | varchar(50)  | YES  |     | NULL    |                |
      | author_id | int          | NO   | MUL | NULL    |                |
      | genre_id  | int          | YES  | MUL | NULL    |                |
      | price     | decimal(8,2) | YES  |     | NULL    |                |
      | amount    | int          | YES  |     | NULL    |                |
      +-----------+--------------+------+-----+---------+----------------+
      6 rows in set (0.00 sec)
  mysql> INSERT INTO book2 (title, author_id, genre_id, price, amount) VALUES ('Мастер и Маргарита', 1, 1, 670.99, 3),('Белая гвардия', 1, 1, 540.50, 5),('Идиот', 2, 1, 460.00, 10),('Братья Карамазовы', 2, 1, 799.01, 3),('Игрок', 2, 1, 480.50, 10);
      Query OK, 5 rows affected (0.12 sec)
      Records: 5  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM book2;
      +---------+------------------------------------+-----------+----------+--------+--------+
      | book_id | title                              | author_id | genre_id | price  | amount |
      +---------+------------------------------------+-----------+----------+--------+--------+
      |       9 | Мастер и Маргарита                 |         1 |        1 | 670.99 |      3 |
      |      10 | Белая гвардия                      |         1 |        1 | 540.50 |      5 |
      |      11 | Идиот                              |         2 |        1 | 460.00 |     10 |
      |      12 | Братья Карамазовы                  |         2 |        1 | 799.01 |      3 |
      |      13 | Игрок                              |         2 |        1 | 480.50 |     10 |
      +---------+------------------------------------+-----------+----------+--------+--------+
      5 rows in set (0.00 sec)
  mysql> INSERT INTO genre (name_genre) VALUES ('Поэзия');
      Query OK, 1 row affected (0.08 sec)
  mysql> SELECT * FROM genre;
      +----------+--------------+
      | genre_id | name_genre   |
      +----------+--------------+
      |        1 | Роман        |
      |        2 | Поэзия       |
      +----------+--------------+
      2 rows in set (0.00 sec)
  mysql> INSERT INTO book2 (title, author_id, genre_id, price, amount) VALUES ('Стихотворения и поэмы', 3, 2, 650.00, 15);
      Query OK, 1 row affected (0.08 sec)
  mysql> SELECT * FROM book2;
      +---------+------------------------------------------+-----------+----------+--------+--------+
      | book_id | title                                    | author_id | genre_id | price  | amount |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      |       9 | Мастер и Маргарита                       |         1 |        1 | 670.99 |      3 |
      |      10 | Белая гвардия                            |         1 |        1 | 540.50 |      5 |
      |      11 | Идиот                                    |         2 |        1 | 460.00 |     10 |
      |      12 | Братья Карамазовы                        |         2 |        1 | 799.01 |      3 |
      |      13 | Игрок                                    |         2 |        1 | 480.50 |     10 |
      |      14 | Стихотворения и поэмы                    |         3 |        2 | 650.00 |     15 |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      6 rows in set (0.00 sec)
  mysql> INSERT INTO book2 (title, author_id, genre_id, price, amount) VALUES ('Черный человек', 3, 2, 570.20, 6), ('Лирика', 4, 2, 518.99, 2);
      Query OK, 2 rows affected (0.12 sec)
      Records: 2  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM book2;
      +---------+------------------------------------------+-----------+----------+--------+--------+
      | book_id | title                                    | author_id | genre_id | price  | amount |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      |       9 | Мастер и Маргарита                       |         1 |        1 | 670.99 |      3 |
      |      10 | Белая гвардия                            |         1 |        1 | 540.50 |      5 |
      |      11 | Идиот                                    |         2 |        1 | 460.00 |     10 |
      |      12 | Братья Карамазовы                        |         2 |        1 | 799.01 |      3 |
      |      13 | Игрок                                    |         2 |        1 | 480.50 |     10 |
      |      14 | Стихотворения и поэмы                    |         3 |        2 | 650.00 |     15 |
      |      15 | Черный человек                           |         3 |        2 | 570.20 |      6 |
      |      16 | Лирика                                   |         4 |        2 | 518.99 |      2 |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      8 rows in set (0.00 sec)
  Task:
  Вывести название, жанр и цену тех книг, количество которых больше 8, в отсортированном по убыванию цены виде.
  Decision:
  mysql> SELECT * FROM genre;
      +----------+--------------+
      | genre_id | name_genre   |
      +----------+--------------+
      |        1 | Роман        |
      |        2 | Поэзия       |
      +----------+--------------+
      2 rows in set (0.27 sec)
  mysql> INSERT INTO genre (name_genre)
  VALUES ('Приключения');
      Query OK, 1 row affected (0.75 sec)
  mysql> SELECT * FROM genre;
      +----------+------------------------+
      | genre_id | name_genre             |
      +----------+------------------------+
      |        1 | Роман                  |
      |        2 | Поэзия                 |
      |        3 | Приключения            |
      +----------+------------------------+
      3 rows in set (0.01 sec)
  mysql> SELECT * FROM author;
      +-----------+-------------------------------+
      | author_id | name_author                   |
      +-----------+-------------------------------+
      |         1 | Булгаков М.А.                 |
      |         2 | Достоевский Ф.М.              |
      |         3 | Есенин С.А.                   |
      |         4 | Пастернак Б.Л.                |
      +-----------+-------------------------------+
      4 rows in set (0.23 sec)
  mysql> INSERT INTO author (name_author) VALUES ('Лермонтов М.Ю.');
      Query OK, 1 row affected (0.02 sec)
  mysql> SELECT * FROM author;
      +-----------+-------------------------------+
      | author_id | name_author                   |
      +-----------+-------------------------------+
      |         1 | Булгаков М.А.                 |
      |         2 | Достоевский Ф.М.              |
      |         3 | Есенин С.А.                   |
      |         4 | Пастернак Б.Л.                |
      |         5 | Лермонтов М.Ю.                |
      +-----------+-------------------------------+
      5 rows in set (0.00 sec)
  mysql> SELECT * FROM book2;
      +---------+------------------------------------------+-----------+----------+--------+--------+
      | book_id | title                                    | author_id | genre_id | price  | amount |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      |       9 | Мастер и Маргарита                       |         1 |        1 | 670.99 |      3 |
      |      10 | Белая гвардия                            |         1 |        1 | 540.50 |      5 |
      |      11 | Идиот                                    |         2 |        1 | 460.00 |     10 |
      |      12 | Братья Карамазовы                        |         2 |        1 | 799.01 |      3 |
      |      13 | Игрок                                    |         2 |        1 | 480.50 |     10 |
      |      14 | Стихотворения и поэмы                    |         3 |        2 | 650.00 |     15 |
      |      15 | Черный человек                           |         3 |        2 | 570.20 |      6 |
      |      16 | Лирика                                   |         4 |        2 | 518.99 |      2 |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      8 rows in set (0.05 sec)
  mysql> SELECT title, name_genre, price
  FROM genre INNER JOIN book2
  ON book2.genre_id = genre.genre_id
  WHERE amount>8
  ORDER BY price DESC;
      +------------------------------------------+--------------+--------+
      | title                                    | name_genre   | price  |
      +------------------------------------------+--------------+--------+
      | Стихотворения и поэмы                    | Поэзия       | 650.00 |
      | Игрок                                    | Роман        | 480.50 |
      | Идиот                                    | Роман        | 460.00 |
      +------------------------------------------+--------------+--------+
      3 rows in set (0.00 sec)
  Task:
  Вывести все жанры, которые не представлены в книгах на складе.
  Decision:
  mysql> SELECT * FROM book2;
      +---------+------------------------------------------+-----------+----------+--------+--------+
      | book_id | title                                    | author_id | genre_id | price  | amount |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      |       9 | Мастер и Маргарита                       |         1 |        1 | 670.99 |      3 |
      |      10 | Белая гвардия                            |         1 |        1 | 540.50 |      5 |
      |      11 | Идиот                                    |         2 |        1 | 460.00 |     10 |
      |      12 | Братья Карамазовы                        |         2 |        1 | 799.01 |      3 |
      |      13 | Игрок                                    |         2 |        1 | 480.50 |     10 |
      |      14 | Стихотворения и поэмы                    |         3 |        2 | 650.00 |     15 |
      |      15 | Черный человек                           |         3 |        2 | 570.20 |      6 |
      |      16 | Лирика                                   |         4 |        2 | 518.99 |      2 |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      8 rows in set (0.00 sec)
  mysql> SELECT * FROM author;
      +-----------+-------------------------------+
      | author_id | name_author                   |
      +-----------+-------------------------------+
      |         1 | Булгаков М.А.                 |
      |         2 | Достоевский Ф.М.              |
      |         3 | Есенин С.А.                   |
      |         4 | Пастернак Б.Л.                |
      |         5 | Лермонтов М.Ю.                |
      +-----------+-------------------------------+
      5 rows in set (0.00 sec)
  mysql> SELECT * FROM genre;
      +----------+------------------------+
      | genre_id | name_genre             |
      +----------+------------------------+
      |        1 | Роман                  |
      |        2 | Поэзия                 |
      |        3 | Приключения            |
      +----------+------------------------+
      3 rows in set (0.00 sec)
  mysql> SELECT name_genre
  FROM genre LEFT JOIN  book2
  ON book2.genre_id=genre.genre_id
  WHERE book2.genre_id IS NULL;
      +------------------------+
      | name_genre             |
      +------------------------+
      | Приключения            |
      +------------------------+
      1 row in set (0.00 sec)
  Task:
  Есть список городов, хранящийся в таблице city:
  city_id     name_city
  1   Москва
  2   Санкт-Петербург
  3   Владивосток
  Необходимо в каждом городе провести выставку книг каждого автора в течение 2020 года. Дату проведения выставки выбрать случайным образом. Создать запрос, который выведет город, автора и дату проведения выставки. Последний столбец назвать Дата. Информацию вывести, отсортировав сначала в алфавитном порядке по названиям городов, а потом по убыванию дат проведения выставок.
  Decision:
  mysql> SELECT * FROM city;
      ERROR 1146 (42S02): Table 'testbdserver.city' doesn't exist
  mysql> CREATE TABLE city(
      book_id SERIAL PRIMARY KEY,
      name_city VARCHAR(30)
  );
      Query OK, 0 rows affected (0.54 sec)
  mysql> INSERT INTO city (name_city) VALUES ('Москва'), ('Санкт-Петербург'), ('Владивосток');
      Query OK, 3 rows affected (0.33 sec)
      Records: 3  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM city;
      +---------+-------------------------------+
      | book_id | name_city                     |
      +---------+-------------------------------+
      |       1 | Москва                        |
      |       2 | Санкт-Петербург               |
      |       3 | Владивосток                   |
      +---------+-------------------------------+
      3 rows in set (0.01 sec)
  mysql> SELECT * FROM genre;
      +----------+------------------------+
      | genre_id | name_genre             |
      +----------+------------------------+
      |        1 | Роман                  |
      |        2 | Поэзия                 |
      |        3 | Приключения            |
      +----------+------------------------+
      3 rows in set (0.00 sec)
  mysql> SELECT * FROM author;
      +-----------+-------------------------------+
      | author_id | name_author                   |
      +-----------+-------------------------------+
      |         1 | Булгаков М.А.                 |
      |         2 | Достоевский Ф.М.              |
      |         3 | Есенин С.А.                   |
      |         4 | Пастернак Б.Л.                |
      |         5 | Лермонтов М.Ю.                |
      +-----------+-------------------------------+
      5 rows in set (0.00 sec)
  mysql> SELECT * FROM book2;
      +---------+------------------------------------------+-----------+----------+--------+--------+
      | book_id | title                                    | author_id | genre_id | price  | amount |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      |       9 | Мастер и Маргарита                       |         1 |        1 | 670.99 |      3 |
      |      10 | Белая гвардия                            |         1 |        1 | 540.50 |      5 |
      |      11 | Идиот                                    |         2 |        1 | 460.00 |     10 |
      |      12 | Братья Карамазовы                        |         2 |        1 | 799.01 |      3 |
      |      13 | Игрок                                    |         2 |        1 | 480.50 |     10 |
      |      14 | Стихотворения и поэмы                    |         3 |        2 | 650.00 |     15 |
      |      15 | Черный человек                           |         3 |        2 | 570.20 |      6 |
      |      16 | Лирика                                   |         4 |        2 | 518.99 |      2 |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      8 rows in set (0.00 sec)
  mysql> SELECT name_city, name_author, DATE_ADD('2020-01-01', INTERVAL FLOOR(RAND()*365) DAY) AS Дата
  FROM city CROSS JOIN author
  ORDER BY name_city ASC, Дата DESC;
      +-------------------------------+-------------------------------+------------+
      | name_city                     | name_author                   | Дата       |
      +-------------------------------+-------------------------------+------------+
      | Владивосток                   | Булгаков М.А.                 | 2020-10-23 |
      | Владивосток                   | Есенин С.А.                   | 2020-06-19 |
      | Владивосток                   | Пастернак Б.Л.                | 2020-05-29 |
      | Владивосток                   | Достоевский Ф.М.              | 2020-04-30 |
      | Владивосток                   | Лермонтов М.Ю.                | 2020-01-30 |
      | Москва                        | Достоевский Ф.М.              | 2020-12-02 |
      | Москва                        | Пастернак Б.Л.                | 2020-09-07 |
      | Москва                        | Лермонтов М.Ю.                | 2020-06-30 |
      | Москва                        | Есенин С.А.                   | 2020-06-02 |
      | Москва                        | Булгаков М.А.                 | 2020-02-02 |
      | Санкт-Петербург               | Пастернак Б.Л.                | 2020-10-12 |
      | Санкт-Петербург               | Булгаков М.А.                 | 2020-09-14 |
      | Санкт-Петербург               | Есенин С.А.                   | 2020-07-24 |
      | Санкт-Петербург               | Достоевский Ф.М.              | 2020-05-19 |
      | Санкт-Петербург               | Лермонтов М.Ю.                | 2020-05-07 |
      +-------------------------------+-------------------------------+------------+
      15 rows in set (0.03 sec)
  Task:
  Вывести информацию о книгах (жанр, книга, автор), относящихся к жанру, включающему слово роман» в отсортированном по названиям книг виде.
  Decision:
  mysql> SELECT name_genre, title, name_author
  FROM genre
  INNER JOIN book2 ON genre.genre_id = book2.genre_id
  INNER JOIN author ON author.author_id = book2.author_id
  WHERE name_genre="роман"
  ORDER BY title;
      +------------+------------------------------------+-------------------------------+
      | name_genre | title                              | name_author                   |
      +------------+------------------------------------+-------------------------------+
      | Роман      | Белая гвардия                      | Булгаков М.А.                 |
      | Роман      | Братья Карамазовы                  | Достоевский Ф.М.              |
      | Роман      | Игрок                              | Достоевский Ф.М.              |
      | Роман      | Идиот                              | Достоевский Ф.М.              |
      | Роман      | Мастер и Маргарита                 | Булгаков М.А.                 |
      +------------+------------------------------------+-------------------------------+
      5 rows in set (0.00 sec)
  Task:
  Посчитать количество экземпляров  книг каждого автора из таблицы author.  Вывести тех авторов,  количество книг которых меньше 10, в отсортированном по возрастанию количества виде. Последний столбец назвать Количество.
  Decision:
  mysql> SELECT name_author, IF(SUM(amount) IS NULL, NULL, SUM(amount)) AS Количество
  FROM
  author LEFT JOIN book2
  ON author.author_id = book2.author_id
  GROUP BY name_author
  HAVING  Количество < 10 or COUNT(title) = 0
  ORDER BY Количество;
      +---------------------------+----------------------+
      | name_author               | Количество           |
      +---------------------------+----------------------+
      | Лермонтов М.Ю.            |                 NULL |
      | Пастернак Б.Л.            |                    2 |
      | Булгаков М.А.             |                    8 |
      +---------------------------+----------------------+
      3 rows in set (0.00 sec)
  Task:
  Вывести в алфавитном порядке всех авторов, которые пишут только в одном жанре. Поскольку у нас в таблицах так занесены данные, что у каждого автора книги только в одном жанре,  для этого запроса внесем изменения в таблицу book. Пусть у нас  книга Есенина Черный человек» относится к жанру Роман», а книга Булгакова Белая гвардия» к Приключениям» (эти изменения в таблицы уже внесены).
  Decision:
  mysql> SELECT * FROM book2;
      +---------+------------------------------------------+-----------+----------+--------+--------+
      | book_id | title                                    | author_id | genre_id | price  | amount |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      |       9 | Мастер и Маргарита                       |         1 |        1 | 670.99 |      3 |
      |      10 | Белая гвардия                            |         1 |        1 | 540.50 |      5 |
      |      11 | Идиот                                    |         2 |        1 | 460.00 |     10 |
      |      12 | Братья Карамазовы                        |         2 |        1 | 799.01 |      3 |
      |      13 | Игрок                                    |         2 |        1 | 480.50 |     10 |
      |      14 | Стихотворения и поэмы                    |         3 |        2 | 650.00 |     15 |
      |      15 | Черный человек                           |         3 |        2 | 570.20 |      6 |
      |      16 | Лирика                                   |         4 |        2 | 518.99 |      2 |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      8 rows in set (0.00 sec)
  mysql> SELECT * FROM author;
      +-----------+-------------------------------+
      | author_id | name_author                   |
      +-----------+-------------------------------+
      |         1 | Булгаков М.А.                 |
      |         2 | Достоевский Ф.М.              |
      |         3 | Есенин С.А.                   |
      |         4 | Пастернак Б.Л.                |
      |         5 | Лермонтов М.Ю.                |
      +-----------+-------------------------------+
      5 rows in set (0.00 sec)
  mysql> SELECT * FROM genre;
      +----------+------------------------+
      | genre_id | name_genre             |
      +----------+------------------------+
      |        1 | Роман                  |
      |        2 | Поэзия                 |
      |        3 | Приключения            |
      +----------+------------------------+
      3 rows in set (0.00 sec)
  mysql> UPDATE book2 SET genre_id=1 WHERE book_id=15;
      Query OK, 1 row affected (0.17 sec)
      Rows matched: 1  Changed: 1  Warnings: 0
  mysql> SELECT * FROM book2;
      +---------+------------------------------------------+-----------+----------+--------+--------+
      | book_id | title                                    | author_id | genre_id | price  | amount |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      |       9 | Мастер и Маргарита                       |         1 |        1 | 670.99 |      3 |
      |      10 | Белая гвардия                            |         1 |        1 | 540.50 |      5 |
      |      11 | Идиот                                    |         2 |        1 | 460.00 |     10 |
      |      12 | Братья Карамазовы                        |         2 |        1 | 799.01 |      3 |
      |      13 | Игрок                                    |         2 |        1 | 480.50 |     10 |
      |      14 | Стихотворения и поэмы                    |         3 |        2 | 650.00 |     15 |
      |      15 | Черный человек                           |         3 |        1 | 570.20 |      6 |
      |      16 | Лирика                                   |         4 |        2 | 518.99 |      2 |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      8 rows in set (0.00 sec)
  mysql> UPDATE book2 SET genre_id=3 WHERE book_id=10;
      Query OK, 1 row affected (0.12 sec)
      Rows matched: 1  Changed: 1  Warnings: 0
  mysql> SELECT * FROM book2;
      +---------+------------------------------------------+-----------+----------+--------+--------+
      | book_id | title                                    | author_id | genre_id | price  | amount |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      |       9 | Мастер и Маргарита                       |         1 |        1 | 670.99 |      3 |
      |      10 | Белая гвардия                            |         1 |        3 | 540.50 |      5 |
      |      11 | Идиот                                    |         2 |        1 | 460.00 |     10 |
      |      12 | Братья Карамазовы                        |         2 |        1 | 799.01 |      3 |
      |      13 | Игрок                                    |         2 |        1 | 480.50 |     10 |
      |      14 | Стихотворения и поэмы                    |         3 |        2 | 650.00 |     15 |
      |      15 | Черный человек                           |         3 |        1 | 570.20 |      6 |
      |      16 | Лирика                                   |         4 |        2 | 518.99 |      2 |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      8 rows in set (0.00 sec)
  mysql> SELECT DISTINCT author_id, genre_id
  FROM book2;
      +-----------+----------+
      | author_id | genre_id |
      +-----------+----------+
      |         1 |        1 |
      |         1 |        3 |
      |         2 |        1 |
      |         3 |        2 |
      |         3 |        1 |
      |         4 |        2 |
      +-----------+----------+
      6 rows in set (0.00 sec)
  mysql> SELECT author_id, COUNT(genre_id) AS genre_count
  FROM (
  SELECT DISTINCT author_id, genre_id
  FROM book2
  ) q1
  GROUP BY author_id
  HAVING genre_count = 1;
      +-----------+-------------+
      | author_id | genre_count |
      +-----------+-------------+
      |         2 |           1 |
      |         4 |           1 |
      +-----------+-------------+
      2 rows in set (0.00 sec)
  mysql> SELECT name_author
  FROM author INNER JOIN (
  SELECT author_id, COUNT(genre_id) AS genre_count
  FROM (
  SELECT DISTINCT author_id, genre_id
  FROM book2
  ) q1
  GROUP BY author_id
  HAVING genre_count = 1) q2
  ON author.author_id = q2.author_id;
      +-------------------------------+
      | name_author                   |
      +-------------------------------+
      | Достоевский Ф.М.              |
      | Пастернак Б.Л.                |
      +-------------------------------+
      2 rows in set (0.00 sec)
  Task:
  Вывести информацию о книгах (название книги, фамилию и инициалы автора, название жанра, цену и количество экземпляров книги), написанных в самых популярных жанрах, в отсортированном в алфавитном порядке по названию книг виде. Самым популярным считать жанр, общее количество экземпляров книг которого на складе максимально.
  Decision:
  mysql> SELECT genre_id, SUM(amount) AS sum_amount
  FROM book2
  GROUP BY genre_id;
      +----------+------------+
      | genre_id | sum_amount |
      +----------+------------+
      |        1 |         32 |
      |        2 |         17 |
      |        3 |          5 |
      +----------+------------+
      3 rows in set (0.00 sec)
  mysql> SELECT genre_id, SUM(amount) AS sum_amount
  FROM book2
  GROUP BY genre_id
  ORDER BY sum_amount DESC
  LIMIT 1;
      +----------+------------+
      | genre_id | sum_amount |
      +----------+------------+
      |        1 |         32 |
      +----------+------------+
      1 row in set (0.00 sec)
  mysql> SELECT query_in_1.genre_id
  FROM (
  SELECT genre_id, SUM(amount) AS sum_amount
  FROM book2
  GROUP BY genre_id
  )query_in_1 INNER JOIN (
  SELECT genre_id, SUM(amount) AS sum_amount
  FROM book2
  GROUP BY genre_id
  ORDER BY sum_amount DESC
  LIMIT 1
  )
  query_in_2
  ON query_in_1.sum_amount= query_in_2.sum_amount;
      +----------+
      | genre_id |
      +----------+
      |        1 |
      +----------+
      1 row in set (0.00 sec)
  mysql> SELECT  title, name_author, name_genre, price, amount
  FROM
  author
  INNER JOIN book2 ON author.author_id = book2.author_id
  INNER JOIN genre ON  book2.genre_id = genre.genre_id
  WHERE genre.genre_id IN(
  SELECT query_in_1.genre_id
  FROM (
  SELECT genre_id, SUM(amount) AS sum_amount
  FROM book2
  GROUP BY genre_id
  )query_in_1 INNER JOIN (
  SELECT genre_id, SUM(amount) AS sum_amount
  FROM book2
  GROUP BY genre_id
  ORDER BY sum_amount DESC
  LIMIT 1
  )
  query_in_2 ON query_in_1.sum_amount= query_in_2.sum_amount)
  ORDER BY title ASC;
      +------------------------------------+-------------------------------+------------+--------+--------+
      | title                              | name_author                   | name_genre | price  | amount |
      +------------------------------------+-------------------------------+------------+--------+--------+
      | Братья Карамазовы                  | Достоевский Ф.М.              | Роман      | 799.01 |      3 |
      | Игрок                              | Достоевский Ф.М.              | Роман      | 480.50 |     10 |
      | Идиот                              | Достоевский Ф.М.              | Роман      | 460.00 |     10 |
      | Мастер и Маргарита                 | Булгаков М.А.                 | Роман      | 670.99 |      3 |
      | Черный человек                     | Есенин С.А.                   | Роман      | 570.20 |      6 |
      +------------------------------------+-------------------------------+------------+--------+--------+
      5 rows in set (0.11 sec)
  Task:
  Если в таблицах supply  и book есть одинаковые книги, которые имеют равную цену,  вывести их название и автора, а также посчитать общее количество экземпляров книг в таблицах supply и book,  столбцы назвать Название, Автор  и Количество.
  Decision:
  mysql> SELECT * FROM supply;
      +-----------+--------------+---------------------------+--------+--------+
      | supply_id | title        | author                    | price  | amount |
      +-----------+--------------+---------------------------+--------+--------+
      |         1 | Лирика       | Пастернак Б.Л.            | 518.99 |      2 |
      +-----------+--------------+---------------------------+--------+--------+
      1 row in set (0.10 sec)
  mysql> DELETE FROM supply
  WHERE title='Лирика';
      Query OK, 1 row affected (0.03 sec)
  mysql> INSERT INTO supply (title, author, price, amount)VALUES
  ('Доктор Живаго', 'Пастернак Б.Л.', 618.99, 3),
  ('Черный человек', 'Есенин С.А.', 570.20, 6),
  ('Евгений Онегин', 'Пушкин А.С.', 440.80, 5),
  ('Идиот', 'Достоевский Ф.М.', 360.80, 3);
      Query OK, 4 rows affected (0.03 sec)
      Records: 4  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM supply;
      +-----------+-----------------------------+-------------------------------+--------+--------+
      | supply_id | title                       | author                        | price  | amount |
      +-----------+-----------------------------+-------------------------------+--------+--------+
      |         5 | Доктор Живаго               | Пастернак Б.Л.                | 618.99 |      3 |
      |         6 | Черный человек              | Есенин С.А.                   | 570.20 |      6 |
      |         7 | Евгений Онегин              | Пушкин А.С.                   | 440.80 |      5 |
      |         8 | Идиот                       | Достоевский Ф.М.              | 360.80 |      3 |
      +-----------+-----------------------------+-------------------------------+--------+--------+
      4 rows in set (0.00 sec)
  mysql> SELECT * FROM author;
      +-----------+-------------------------------+
      | author_id | name_author                   |
      +-----------+-------------------------------+
      |         1 | Булгаков М.А.                 |
      |         2 | Достоевский Ф.М.              |
      |         3 | Есенин С.А.                   |
      |         4 | Пастернак Б.Л.                |
      |         5 | Лермонтов М.Ю.                |
      +-----------+-------------------------------+
      5 rows in set (0.00 sec)
  mysql> SELECT * FROM book2;
      +---------+------------------------------------------+-----------+----------+--------+--------+
      | book_id | title                                    | author_id | genre_id | price  | amount |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      |       9 | Мастер и Маргарита                       |         1 |        1 | 670.99 |      3 |
      |      10 | Белая гвардия                            |         1 |        3 | 540.50 |      5 |
      |      11 | Идиот                                    |         2 |        1 | 460.00 |     10 |
      |      12 | Братья Карамазовы                        |         2 |        1 | 799.01 |      3 |
      |      13 | Игрок                                    |         2 |        1 | 480.50 |     10 |
      |      14 | Стихотворения и поэмы                    |         3 |        2 | 650.00 |     15 |
      |      15 | Черный человек                           |         3 |        1 | 570.20 |      6 |
      |      16 | Лирика                                   |         4 |        2 | 518.99 |      2 |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      8 rows in set (0.00 sec)
  mysql> SELECT book2.title as Название, name_author as Автор, sum(book2.amount + supply.amount) as Количество
  FROM
  author
  INNER JOIN book2 USING (author_id)
  INNER JOIN supply ON book2.title = supply.title AND author.name_author = supply.author
  WHERE book2.price = supply.price
  GROUP BY book2.title, name_author;
      +-----------------------------+---------------------+----------------------+
      | Название                    | Автор               | Количество           |
      +-----------------------------+---------------------+----------------------+
      | Черный человек              | Есенин С.А.         |                   12 |
      +-----------------------------+---------------------+----------------------+
      1 row in set (0.00 sec)
  Task:
  Для книг, которые уже есть на складе (в таблице book), но по другой цене, чем в поставке (supply),  необходимо в таблице book увеличить количество на значение, указанное в поставке,  и пересчитать цену. А в таблице  supply обнулить количество этих книг. Формула для пересчета цены:
      price=(p1∗k1+p2∗k2)/(k1+k2)
  где  p1, p2 - цена книги в таблицах book и supply;
  k1, k2 - количество книг в таблицах book и supply.
  Decision:
  mysql> SELECT * FROM book2;
      +---------+------------------------------------------+-----------+----------+--------+--------+
      | book_id | title                                    | author_id | genre_id | price  | amount |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      |       9 | Мастер и Маргарита                       |         1 |        1 | 670.99 |      3 |
      |      10 | Белая гвардия                            |         1 |        3 | 540.50 |      5 |
      |      11 | Идиот                                    |         2 |        1 | 460.00 |     10 |
      |      12 | Братья Карамазовы                        |         2 |        1 | 799.01 |      3 |
      |      13 | Игрок                                    |         2 |        1 | 480.50 |     10 |
      |      14 | Стихотворения и поэмы                    |         3 |        2 | 650.00 |     15 |
      |      15 | Черный человек                           |         3 |        1 | 570.20 |      6 |
      |      16 | Лирика                                   |         4 |        2 | 518.99 |      2 |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      8 rows in set (0.00 sec)
  mysql> SELECT * FROM supply;
      +-----------+-----------------------------+-------------------------------+--------+--------+
      | supply_id | title                       | author                        | price  | amount |
      +-----------+-----------------------------+-------------------------------+--------+--------+
      |         5 | Доктор Живаго               | Пастернак Б.Л.                | 618.99 |      3 |
      |         6 | Черный человек              | Есенин С.А.                   | 570.20 |      6 |
      |         7 | Евгений Онегин              | Пушкин А.С.                   | 440.80 |      5 |
      |         8 | Идиот                       | Достоевский Ф.М.              | 360.80 |      3 |
      +-----------+-----------------------------+-------------------------------+--------+--------+
      4 rows in set (0.00 sec)
  mysql> INSERT INTO supply (title, author, price, amount) VALUES ('Стихотворения и поэмы', 'Лермонтов М.Ю.', 255.90, 4),('Остров сокровищ', 'Стивенсон Р.Л.', 599.99, 5);
      Query OK, 2 rows affected (0.09 sec)
      Records: 2  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM supply;
      +-----------+------------------------------------------+-------------------------------+--------+--------+
      | supply_id | title                                    | author                        | price  | amount |
      +-----------+------------------------------------------+-------------------------------+--------+--------+
      |         5 | Доктор Живаго                            | Пастернак Б.Л.                | 618.99 |      3 |
      |         6 | Черный человек                           | Есенин С.А.                   | 570.20 |      6 |
      |         7 | Евгений Онегин                           | Пушкин А.С.                   | 440.80 |      5 |
      |         8 | Идиот                                    | Достоевский Ф.М.              | 360.80 |      3 |
      |       100 | Стихотворения и поэмы                    | Лермонтов М.Ю.                | 255.90 |      4 |
      |       101 | Остров сокровищ                          | Стивенсон Р.Л.                | 599.99 |      5 |
      +-----------+------------------------------------------+-------------------------------+--------+--------+
      6 rows in set (0.00 sec)
  mysql> SELECT * FROM author;
      +-----------+-------------------------------+
      | author_id | name_author                   |
      +-----------+-------------------------------+
      |         1 | Булгаков М.А.                 |
      |         2 | Достоевский Ф.М.              |
      |         3 | Есенин С.А.                   |
      |         4 | Пастернак Б.Л.                |
      |         5 | Лермонтов М.Ю.                |
      |         6 | Булгаков М.А.                 |
      |         7 | Достоевский Ф.М.              |
      |         8 | Есенин С.А.                   |
      |         9 | Пастернак Б.Л.                |
      |        10 | Лермонтов М.Ю.                |
      +-----------+-------------------------------+
      10 rows in set (0.01 sec)
  mysql> SELECT * FROM genre;
      +----------+------------------------+
      | genre_id | name_genre             |
      +----------+------------------------+
      |        1 | Роман                  |
      |        2 | Поэзия                 |
      |        3 | Приключения            |
      +----------+------------------------+
      3 rows in set (0.01 sec)
  mysql> UPDATE book
       INNER JOIN author
       ON author.author_id = book.author_id
       INNER JOIN supply
       ON book.title = supply.title
          AND supply.author = author.name_author
  SET
      book.price = (book.amount * book.price + supply.amount*supply.price) / (book.amount + supply.amount),
      book.amount = book.amount + supply.amount,
      supply.amount = 0   
  WHERE book.price <> supply.price;
      Query OK, 2 rows affected, 1 warning (1.72 sec)
      Rows matched: 2  Changed: 2  Warnings: 1
  mysql> SELECT * FROM book2;
      +---------+------------------------------------------+-----------+----------+--------+--------+
      | book_id | title                                    | author_id | genre_id | price  | amount |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      |       9 | Мастер и Маргарита                       |         1 |        1 | 670.99 |      3 |
      |      10 | Белая гвардия                            |         1 |        3 | 540.50 |      5 |
      |      11 | Идиот                                    |         2 |        1 | 437.11 |     13 |
      |      12 | Братья Карамазовы                        |         2 |        1 | 799.01 |      3 |
      |      13 | Игрок                                    |         2 |        1 | 480.50 |     10 |
      |      14 | Стихотворения и поэмы                    |         3 |        2 | 650.00 |     15 |
      |      15 | Черный человек                           |         3 |        1 | 570.20 |      6 |
      |      16 | Лирика                                   |         4 |        2 | 518.99 |      2 |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      8 rows in set (0.00 sec)
  mysql> SELECT * FROM supply;
      +-----------+------------------------------------------+-------------------------------+--------+--------+
      | supply_id | title                                    | author                        | price  | amount |
      +-----------+------------------------------------------+-------------------------------+--------+--------+
      |         5 | Доктор Живаго                            | Пастернак Б.Л.                | 618.99 |      3 |
      |         6 | Черный человек                           | Есенин С.А.                   | 570.20 |      6 |
      |         7 | Евгений Онегин                           | Пушкин А.С.                   | 440.80 |      5 |
      |         8 | Идиот                                    | Достоевский Ф.М.              | 360.80 |      0 |
      |       100 | Стихотворения и поэмы                    | Лермонтов М.Ю.                | 255.90 |      4 |
      |       101 | Остров сокровищ                          | Стивенсон Р.Л.                | 599.99 |      5 |
      +-----------+------------------------------------------+-------------------------------+--------+--------+
      6 rows in set (0.00 sec)
  Task:
  Включить новых авторов в таблицу author с помощью запроса на добавление, а затем вывести все данные из таблицы author.  Новыми считаются авторы, которые есть в таблице supply, но нет в таблице author.
  Decision:
  mysql> INSERT INTO author (name_author)
  SELECT supply.author
  FROM
      author
      RIGHT JOIN supply ON author.name_author = supply.author
  WHERE name_author IS NULL;
      Query OK, 0 rows affected (0.00 sec)
      Records: 0  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM author;
      +-----------+-------------------------------+
      | author_id | name_author                   |
      +-----------+-------------------------------+
      |         1 | Булгаков М.А.                 |
      |         2 | Достоевский Ф.М.              |
      |         3 | Есенин С.А.                   |
      |         4 | Пастернак Б.Л.                |
      |         5 | Лермонтов М.Ю.                |
      |         6 | Булгаков М.А.                 |
      |         7 | Достоевский Ф.М.              |
      |         8 | Есенин С.А.                   |
      |         9 | Пастернак Б.Л.                |
      |        10 | Лермонтов М.Ю.                |
      |        11 | Пушкин А.С.                   |
      |        12 | Стивенсон Р.Л.                |
      +-----------+-------------------------------+
      12 rows in set (0.00 sec)
  Task:
  Добавить новые книги из таблицы supply в таблицу book на основе сформированного выше запроса. Затем вывести для просмотра таблицу book.
  Decision:
  mysql> SELECT * FROM book2;
      +---------+------------------------------------------+-----------+----------+--------+--------+
      | book_id | title                                    | author_id | genre_id | price  | amount |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      |       9 | Мастер и Маргарита                       |         1 |        1 | 670.99 |      3 |
      |      10 | Белая гвардия                            |         1 |        3 | 540.50 |      5 |
      |      11 | Идиот                                    |         2 |        1 | 437.11 |     13 |
      |      12 | Братья Карамазовы                        |         2 |        1 | 799.01 |      3 |
      |      13 | Игрок                                    |         2 |        1 | 480.50 |     10 |
      |      14 | Стихотворения и поэмы                    |         3 |        2 | 650.00 |     15 |
      |      15 | Черный человек                           |         3 |        1 | 570.20 |      6 |
      |      16 | Лирика                                   |         4 |        2 | 518.99 |      2 |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      8 rows in set (0.01 sec)
  mysql> INSERT INTO book2 (title, author_id, price, amount)
  SELECT title, author_id, price, amount
  FROM
      author
      INNER JOIN supply ON author.name_author = supply.author
  WHERE amount <> 0;
      Query OK, 8 rows affected (0.14 sec)
      Records: 8  Duplicates: 0  Warnings: 0
  mysql> SELECT * FROM book2;
      +---------+------------------------------------------+-----------+----------+--------+--------+
      | book_id | title                                    | author_id | genre_id | price  | amount |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      |       9 | Мастер и Маргарита                       |         1 |        1 | 670.99 |      3 |
      |      10 | Белая гвардия                            |         1 |        3 | 540.50 |      5 |
      |      11 | Идиот                                    |         2 |        1 | 437.11 |     13 |
      |      12 | Братья Карамазовы                        |         2 |        1 | 799.01 |      3 |
      |      13 | Игрок                                    |         2 |        1 | 480.50 |     10 |
      |      14 | Стихотворения и поэмы                    |         3 |        2 | 650.00 |     15 |
      |      15 | Черный человек                           |         3 |        1 | 570.20 |      6 |
      |      16 | Лирика                                   |         4 |        2 | 518.99 |      2 |
      |      17 | Черный человек                           |         3 |     NULL | 570.20 |      6 |
      |      18 | Доктор Живаго                            |         4 |     NULL | 618.99 |      3 |
      |      19 | Стихотворения и поэмы                    |         5 |     NULL | 255.90 |      4 |
      |      20 | Черный человек                           |         8 |     NULL | 570.20 |      6 |
      |      21 | Доктор Живаго                            |         9 |     NULL | 618.99 |      3 |
      |      22 | Стихотворения и поэмы                    |        10 |     NULL | 255.90 |      4 |
      |      23 | Евгений Онегин                           |        11 |     NULL | 440.80 |      5 |
      |      24 | Остров сокровищ                          |        12 |     NULL | 599.99 |      5 |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      16 rows in set (0.00 sec)
  Task:
  Занести для книги Стихотворения и поэмы» Лермонтова жанр Поэзия», а для книги Остров сокровищ» Стивенсона - Приключения». (Использовать два запроса).
  Decision:
  mysql> SELECT * FROM book2;
      +---------+------------------------------------------+-----------+----------+--------+--------+
      | book_id | title                                    | author_id | genre_id | price  | amount |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      |       9 | Мастер и Маргарита                       |         1 |        1 | 670.99 |      3 |
      |      10 | Белая гвардия                            |         1 |        3 | 540.50 |      5 |
      |      11 | Идиот                                    |         2 |        1 | 437.11 |     13 |
      |      12 | Братья Карамазовы                        |         2 |        1 | 799.01 |      3 |
      |      13 | Игрок                                    |         2 |        1 | 480.50 |     10 |
      |      14 | Стихотворения и поэмы                    |         3 |        2 | 650.00 |     15 |
      |      15 | Черный человек                           |         3 |        1 | 570.20 |      6 |
      |      16 | Лирика                                   |         4 |        2 | 518.99 |      2 |
      |      17 | Черный человек                           |         3 |     NULL | 570.20 |      6 |
      |      18 | Доктор Живаго                            |         4 |     NULL | 618.99 |      3 |
      |      19 | Стихотворения и поэмы                    |         5 |     NULL | 255.90 |      4 |
      |      20 | Черный человек                           |         8 |     NULL | 570.20 |      6 |
      |      21 | Доктор Живаго                            |         9 |     NULL | 618.99 |      3 |
      |      22 | Стихотворения и поэмы                    |        10 |     NULL | 255.90 |      4 |
      |      23 | Евгений Онегин                           |        11 |     NULL | 440.80 |      5 |
      |      24 | Остров сокровищ                          |        12 |     NULL | 599.99 |      5 |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      16 rows in set (0.00 sec)
  mysql> SELECT * FROM genre;
      +----------+------------------------+
      | genre_id | name_genre             |
      +----------+------------------------+
      |        1 | Роман                  |
      |        2 | Поэзия                 |
      |        3 | Приключения            |
      +----------+------------------------+
      3 rows in set (0.00 sec)
  mysql> UPDATE book2
  SET genre_id = (SELECT genre_id
      FROM genre
      WHERE name_genre = 'Поэзия')
  WHERE book_id = 19;
      Query OK, 1 row affected (0.21 sec)
      Rows matched: 1  Changed: 1  Warnings: 0
  mysql> UPDATE book2
  SET genre_id = (SELECT genre_id
      FROM genre
      WHERE name_genre = 'Приключения')
  WHERE book_id = 24;
      Query OK, 1 row affected (0.05 sec)
      Rows matched: 1  Changed: 1  Warnings: 0
  mysql> SELECT * FROM book2;
      +---------+------------------------------------------+-----------+----------+--------+--------+
      | book_id | title                                    | author_id | genre_id | price  | amount |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      |       9 | Мастер и Маргарита                       |         1 |        1 | 670.99 |      3 |
      |      10 | Белая гвардия                            |         1 |        3 | 540.50 |      5 |
      |      11 | Идиот                                    |         2 |        1 | 437.11 |     13 |
      |      12 | Братья Карамазовы                        |         2 |        1 | 799.01 |      3 |
      |      13 | Игрок                                    |         2 |        1 | 480.50 |     10 |
      |      14 | Стихотворения и поэмы                    |         3 |        2 | 650.00 |     15 |
      |      15 | Черный человек                           |         3 |        1 | 570.20 |      6 |
      |      16 | Лирика                                   |         4 |        2 | 518.99 |      2 |
      |      17 | Черный человек                           |         3 |     NULL | 570.20 |      6 |
      |      18 | Доктор Живаго                            |         4 |     NULL | 618.99 |      3 |
      |      19 | Стихотворения и поэмы                    |         5 |        2 | 255.90 |      4 |
      |      20 | Черный человек                           |         8 |     NULL | 570.20 |      6 |
      |      21 | Доктор Живаго                            |         9 |     NULL | 618.99 |      3 |
      |      22 | Стихотворения и поэмы                    |        10 |     NULL | 255.90 |      4 |
      |      23 | Евгений Онегин                           |        11 |     NULL | 440.80 |      5 |
      |      24 | Остров сокровищ                          |        12 |        3 | 599.99 |      5 |
      +---------+------------------------------------------+-----------+----------+--------+--------+
      16 rows in set (0.01 sec)
  Task:
  Удалить всех авторов и все их книги, общее количество книг которых меньше 20.
  Decision:
  SELECT * FROM author;
  SELECT * FROM book;
  DELETE FROM author
  WHERE author_id IN (SELECT author_id
      FROM book
      GROUP BY author_id
      HAVING SUM(amount)<20);
  SELECT * FROM author;
  SELECT * FROM book;
      Query result:
      +-----------+------------------+
      | author_id | name_author      |
      +-----------+------------------+
      | 1         | Булгаков М.А.    |
      | 2         | Достоевский Ф.М. |
      | 3         | Есенин С.А.      |
      | 4         | Пастернак Б.Л.   |
      | 5         | Лермонтов М.Ю.   |
      | 6         | Стивенсон Р.Л.   |
      +-----------+------------------+
      Affected rows: 6
      Query result:
      +---------+-----------------------+-----------+----------+--------+--------+
      | book_id | title                 | author_id | genre_id | price  | amount |
      +---------+-----------------------+-----------+----------+--------+--------+
      | 1       | Мастер и Маргарита    | 1         | 1        | 670.99 | 3      |
      | 2       | Белая гвардия         | 1         | 1        | 540.50 | 12     |
      | 3       | Идиот                 | 2         | 1        | 437.11 | 13     |
      | 4       | Братья Карамазовы     | 2         | 1        | 799.01 | 3      |
      | 5       | Игрок                 | 2         | 1        | 480.50 | 10     |
      | 6       | Стихотворения и поэмы | 3         | 2        | 650.00 | 15     |
      | 7       | Черный человек        | 3         | 2        | 570.20 | 12     |
      | 8       | Лирика                | 4         | 2        | 518.99 | 2      |
      | 9       | Доктор Живаго         | 4         | 1        | 380.80 | 4      |
      | 10      | Стихотворения и поэмы | 5         | 2        | 255.90 | 4      |
      | 11      | Остров сокровищ       | 6         | 3        | 599.99 | 5      |
      +---------+-----------------------+-----------+----------+--------+--------+
      Affected rows: 11
      Affected rows: 4
      Query result:
      +-----------+------------------+
      | author_id | name_author      |
      +-----------+------------------+
      | 2         | Достоевский Ф.М. |
      | 3         | Есенин С.А.      |
      +-----------+------------------+
      Affected rows: 2
      Query result:
      +---------+-----------------------+-----------+----------+--------+--------+
      | book_id | title                 | author_id | genre_id | price  | amount |
      +---------+-----------------------+-----------+----------+--------+--------+
      | 3       | Идиот                 | 2         | 1        | 437.11 | 13     |
      | 4       | Братья Карамазовы     | 2         | 1        | 799.01 | 3      |
      | 5       | Игрок                 | 2         | 1        | 480.50 | 10     |
      | 6       | Стихотворения и поэмы | 3         | 2        | 650.00 | 15     |
      | 7       | Черный человек        | 3         | 2        | 570.20 | 12     |
      +---------+-----------------------+-----------+----------+--------+--------+
      Affected rows: 5
  Task:
  Удалить все жанры, к которым относится меньше 4-х книг. В таблице book для этих жанров установить значение Null.
  Decision:
  SELECT * FROM genre;
  SELECT * FROM book;
  DELETE FROM genre
  WHERE genre_id IN (SELECT genre_id
      FROM book
      GROUP BY genre_id
      HAVING count(title)<4);
  SELECT * FROM genre;
  SELECT * FROM book;
  Query result:
      +----------+-------------+
      | genre_id | name_genre  |
      +----------+-------------+
      | 1        | Роман       |
      | 2        | Поэзия      |
      | 3        | Приключения |
      +----------+-------------+
      Affected rows: 3
      Query result:
      +---------+-----------------------+-----------+----------+--------+--------+
      | book_id | title                 | author_id | genre_id | price  | amount |
      +---------+-----------------------+-----------+----------+--------+--------+
      | 1       | Мастер и Маргарита    | 1         | 1        | 670.99 | 3      |
      | 2       | Белая гвардия         | 1         | 1        | 540.50 | 12     |
      | 3       | Идиот                 | 2         | 1        | 437.11 | 13     |
      | 4       | Братья Карамазовы     | 2         | 1        | 799.01 | 3      |
      | 5       | Игрок                 | 2         | 1        | 480.50 | 10     |
      | 6       | Стихотворения и поэмы | 3         | 2        | 650.00 | 15     |
      | 7       | Черный человек        | 3         | 2        | 570.20 | 12     |
      | 8       | Лирика                | 4         | 2        | 518.99 | 2      |
      | 9       | Доктор Живаго         | 4         | 1        | 380.80 | 4      |
      | 10      | Стихотворения и поэмы | 5         | 2        | 255.90 | 4      |
      | 11      | Остров сокровищ       | 6         | 3        | 599.99 | 5      |
      +---------+-----------------------+-----------+----------+--------+--------+
      Affected rows: 11
      Affected rows: 1
      Query result:
      +----------+------------+
      | genre_id | name_genre |
      +----------+------------+
      | 1        | Роман      |
      | 2        | Поэзия     |
      +----------+------------+
      Affected rows: 2
      Query result:
      +---------+-----------------------+-----------+----------+--------+--------+
      | book_id | title                 | author_id | genre_id | price  | amount |
      +---------+-----------------------+-----------+----------+--------+--------+
      | 1       | Мастер и Маргарита    | 1         | 1        | 670.99 | 3      |
      | 2       | Белая гвардия         | 1         | 1        | 540.50 | 12     |
      | 3       | Идиот                 | 2         | 1        | 437.11 | 13     |
      | 4       | Братья Карамазовы     | 2         | 1        | 799.01 | 3      |
      | 5       | Игрок                 | 2         | 1        | 480.50 | 10     |
      | 6       | Стихотворения и поэмы | 3         | 2        | 650.00 | 15     |
      | 7       | Черный человек        | 3         | 2        | 570.20 | 12     |
      | 8       | Лирика                | 4         | 2        | 518.99 | 2      |
      | 9       | Доктор Живаго         | 4         | 1        | 380.80 | 4      |
      | 10      | Стихотворения и поэмы | 5         | 2        | 255.90 | 4      |
      | 11      | Остров сокровищ       | 6         | NULL     | 599.99 | 5      |
      +---------+-----------------------+-----------+----------+--------+--------+
      Affected rows: 11
  Task:
  Удалить всех авторов, которые пишут в жанре "Поэзия". Из таблицы book удалить все книги этих авторов. В запросе для отбора авторов использовать полное название жанра, а не его id.
  Decision:
  SELECT * FROM author;
  SELECT * FROM book;
  DELETE FROM author
  USING
      book
      INNER JOIN author ON author.author_id = book.author_id
      INNER JOIN genre ON book.genre_id = genre.genre_id
  WHERE genre.name_genre = 'Поэзия';
  SELECT * FROM author;
  SELECT * FROM book;
      Query result:
      +-----------+------------------+
      | author_id | name_author      |
      +-----------+------------------+
      | 1         | Булгаков М.А.    |
      | 2         | Достоевский Ф.М. |
      | 3         | Есенин С.А.      |
      | 4         | Пастернак Б.Л.   |
      | 5         | Лермонтов М.Ю.   |
      | 6         | Стивенсон Р.Л.   |
      +-----------+------------------+
      Affected rows: 6
      Query result:
      +---------+-----------------------+-----------+----------+--------+--------+
      | book_id | title                 | author_id | genre_id | price  | amount |
      +---------+-----------------------+-----------+----------+--------+--------+
      | 1       | Мастер и Маргарита    | 1         | 1        | 670.99 | 3      |
      | 2       | Белая гвардия         | 1         | 1        | 540.50 | 12     |
      | 3       | Идиот                 | 2         | 1        | 437.11 | 13     |
      | 4       | Братья Карамазовы     | 2         | 1        | 799.01 | 3      |
      | 5       | Игрок                 | 2         | 1        | 480.50 | 10     |
      | 6       | Стихотворения и поэмы | 3         | 2        | 650.00 | 15     |
      | 7       | Черный человек        | 3         | 2        | 570.20 | 12     |
      | 8       | Лирика                | 4         | 2        | 518.99 | 2      |
      | 9       | Доктор Живаго         | 4         | 1        | 380.80 | 4      |
      | 10      | Стихотворения и поэмы | 5         | 2        | 255.90 | 4      |
      | 11      | Остров сокровищ       | 6         | 3        | 599.99 | 5      |
      +---------+-----------------------+-----------+----------+--------+--------+
      Affected rows: 11
      Affected rows: 3
      Query result:
      +-----------+------------------+
      | author_id | name_author      |
      +-----------+------------------+
      | 1         | Булгаков М.А.    |
      | 2         | Достоевский Ф.М. |
      | 6         | Стивенсон Р.Л.   |
      +-----------+------------------+
      Affected rows: 3
      Query result:
      +---------+--------------------+-----------+----------+--------+--------+
      | book_id | title              | author_id | genre_id | price  | amount |
      +---------+--------------------+-----------+----------+--------+--------+
      | 1       | Мастер и Маргарита | 1         | 1        | 670.99 | 3      |
      | 2       | Белая гвардия      | 1         | 1        | 540.50 | 12     |
      | 3       | Идиот              | 2         | 1        | 437.11 | 13     |
      | 4       | Братья Карамазовы  | 2         | 1        | 799.01 | 3      |
      | 5       | Игрок              | 2         | 1        | 480.50 | 10     |
      | 11      | Остров сокровищ    | 6         | 3        | 599.99 | 5      |
      +---------+--------------------+-----------+----------+--------+--------+
      Affected rows: 6
  Source:
  https://stepik.org/course/63054/info

С/С++ vs Python
  Task:
  Мне нужно написать программу, которая считывает возраст человека. Программа сначала запрашивает год рождения.
  Decision:
  https://github.com/David138it/Engineer-MyFirstMiniProjects
  $ cat Cpp-AgeDetermination.cpp
  #include <iostream>
  using namespace std;
  int age(int current_date, int current_month, int current_year, int birth_date, int birth_month, int birth_year)
  {
    //если дата рождения больше текущей даты рождения тогда не считайте в этом месяце и добавьте 30 к дате так как вычесть дату и получить оставшиеся дни
    int month[]={31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
    if (birth_date > current_date)
    {
      current_month = current_month - 1;
      current_date = current_date + month[birth_month-1];
    }
    //если месяц рождения превышает текущий месяц, то  Не считайте в этом году и добавьте 12 к месяц, чтобы мы могли вычесть и выяснить различия
    if (birth_month > current_month)
    {
      current_year = current_year - 1;
          current_month = current_month + 12;
    }
      // вычислить дату, месяц, год
      int calculated_date = current_date - birth_date;
      int calculated_month = current_month - birth_month;
      int calculated_year = current_year - birth_year;
    // печать нынешнего возраста
      cout<<"Present Age:"<<endl;
      cout<<"Years: "<<calculated_year<<" Months: "<<calculated_month<<" Days: "<<calculated_date<<endl;
    return 0;
  }
  int main()
  {
    int current_date, current_month, current_year, birth_date, birth_month, birth_year;
    //код пользователя
    cout<<"Today:"<<endl;
    cout<<"DD: ";
    cin>>current_date;
    cout<<"MM: ";
    cin>>current_month;
    cout<<"YYYY: ";
    cin>>current_year;
    //рождение дд // мм // гггг
    cout<<"You'r Birthday:"<<endl;
    cout<<"DD: ";
    cin>>birth_date;
      cout<<"MM: ";
    cin>>birth_month;
      cout<<"YYYY:";
    cin>>birth_year;
    age(current_date, current_month, current_year, birth_date, birth_month, birth_year);
    system("pause");
    return 0;
  }
  $ cat Py-AgeDetermination.py
  def age(current_date, current_month, current_year, birth_date, birth_month, birth_year):
      #если дата рождения больше текущей даты рождения тогда не считайте в этом месяце и добавьте 30 к дате так как вычесть дату и получить оставшиеся дни
      month =[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
      if (birth_date > current_date):
          current_month = current_month - 1
          current_date = current_date + month[birth_month-1]
      #если месяц рождения превышает текущий месяц, то Не считайте в этом году и добавьте 12 к месяц, чтобы мы могли вычесть и выяснить различия
      if (birth_month > current_month):
          current_year = current_year - 1;
          current_month = current_month + 12;
      # вычислить дату, месяц, год
      calculated_date = current_date - birth_date;
      calculated_month = current_month - birth_month;
      calculated_year = current_year - birth_year;
      # печать нынешнего возраста
      print("Present Age:")
      print("Years:", calculated_year, "Months:", calculated_month, "Days:", calculated_date)
  print("Today:")
  # код пользователя
  current_date = int(input("DD: "))
  current_month = int(input("MM: "))
  current_year = int(input("YYYY: "))
  # рождение дд // мм // гггг
  print("You'r Birthday:")
  birth_date = int(input("DD: "))
  birth_month = int(input("MM: "))
  birth_year = int(input("YYYY: "))
  age(current_date, current_month, current_year, birth_date, birth_month, birth_year)
  $ python3 Py-AgeDetermination.py
  Today:
  DD: 18
  MM: 07
  YYYY: 2022
  You'r Birthday:
  DD: 23
  MM: 09
  YYYY: 1992
  Present Age:
  Years: 29 Months: 9 Days: 25
  $ g++ Cpp-AgeDetermination.cpp -o output
  $ ./output
  Today:
  DD: 18
  MM: 07
  YYYY: 2022
  You'r Birthday:
  DD: 23
  MM: 09
  YYYY:1992
  Present Age:
  Years: 29 Months: 9 Days: 25
  https://github.com/David138it/MyFirstMiniProjects
  Task:
  Создайте конвертер валют, который получает данные из национального банка с помощью json и выводит данные о стоимости рубля к доллару, евро и юаню. Запустите программу через терминал.
  Decision:
  $ cat Cpp-CurrencyConverter.cpp
  #include <iostream>
  using namespace std;
  int main()
  {
    float dollar, euro, yuan;
    cout<<"current dollar data: ";
    cin>>dollar;
          cout<<"current euro data: ";
    cin>>euro;
          cout<<"current yuan data: ";
    cin>>yuan;
    //cout<<dollar<<" "<<euro<<" "<<yuan<<" "<<endl;
    cout<<"1) Convert to dollars, Euros, yuan"<<endl<<"2) Transfer from dollars, Euros, yuan"<<endl<<"Choose your actions: ";
    int choise;
    cin>>choise;
    //cout<<choise; 
    if (choise==1){
      float ruble, resultDollar, resultEuro, resultYuan;
      cout<<"Enter the number of rubles: ";
      cin>>ruble;
      resultDollar=ruble/dollar;
      resultEuro=ruble/euro;
      resultYuan=ruble/yuan;
      cout<<"The result of your transfer = "<<resultDollar<<endl<<"The result of your transfer = "<<resultEuro<<endl<<"The result of your transfer = "<<resultYuan<<endl;
    } else if (choise==2) {
      float d, e, y, resultDollar, resultEuro, resultYuan;
      cout<<"Enter the number of dollars: ";
      cin>>d;
      cout<<"Enter the number of euroes: ";
      cin>>e;
      cout<<"Enter the number of yuans: ";
      cin>>y;
      resultDollar=d*dollar;
      resultEuro=e*euro;
      resultYuan=y*yuan;
      cout<<"The result of your transfer = "<<resultDollar<<endl<<"The result of your transfer = "<<resultEuro<<endl<<"The result of your transfer = "<<resultYuan<<endl;
    } else {
      cout<<"Error! Enter only 1 or 2: "<<endl;
      exit(0);
    }
    //system("pause");
    return 0;
  }
  $ cat Py-CurrencyConverter.py 
  from pprint import pprint
  import requests
  data = requests.get('https://www.cbr-xml-daily.ru/daily_json.js').json()
  dictionaryU=data['Valute']['USD']
  dictionaryE=data['Valute']['EUR']
  dictionaryC=data['Valute']['CNY']
  '''
  lists=[dictionaryU, dictionaryE, dictionaryC]
  for index in lists:
    print(index)
  '''
  '''
  print(dictionaryU['Value'],dictionaryU['Name'])
  print(dictionaryE['Value'],dictionaryE['Name'])
  print(dictionaryC['Value'],dictionaryC['Name'])
  '''
  '''
  dollar=float(input("Enter the dollar rate: "))
  euro=float(input("Enter the euro exchange rate: "))
  yuan=float(input("Enter the yuan exchange rate: "))
  '''
  dollar=dictionaryU['Value']
  euro=dictionaryE['Value']
  yuan=dictionaryC['Value']
  print("Dollar exchange rate: ",dollar)
  print("Euro exchange rate: ",euro)
  print("Yuan exchange rate: ",yuan)
  print("1) Convert to dollars, Euros, yuan\n2) Transfer from dollars, Euros, yuan\n")
  choise=int(input("Choose your actions:\n"))
  if choise==1:
    ruble=float(input("Enter the number of rubles: "))
    resultDollar=ruble/dollar
    resultEuro=ruble/euro
    resultYuan=ruble/yuan
    print("The result of your transfer = ", '{:.2f}'.format(resultDollar))
    print("The result of your transfer = ", '{:.2f}'.format(resultEuro))
    print("The result of your transfer = ", '{:.2f}'.format(resultYuan))
  elif choise==2:
    d=float(input("Enter the number of dollars: "))
    e=float(input("Enter the number of euroes: "))  
    y=float(input("Enter the number of yuans: "))
    resultDollar=d*dollar
    resultEuro=e*euro
    resultYuan=y*yuan
    print("The result of your transfer = ", '{:.2f}'.format(resultDollar))
    print("The result of your transfer = ", '{:.2f}'.format(resultEuro))
    print("The result of your transfer = ", '{:.2f}'.format(resultYuan))
  else:
    print("Error! Enter only 1 or 2")
    exit(0)
  $ python3 Py-CurrencyConverter.py
  Dollar exchange rate:  61.3101
  Euro exchange rate:  62.5695
  Yuan exchange rate:  92.1636
  1) Convert to dollars, Euros, yuan
  2) Transfer from dollars, Euros, yuan
  Choose your actions:
  1
  Enter the number of rubles: 500
  The result of your transfer =  8.16
  The result of your transfer =  7.99
  The result of your transfer =  5.43
  $ python3 Py-CurrencyConverter.py
  Dollar exchange rate:  61.3101
  Euro exchange rate:  62.5695
  Yuan exchange rate:  92.1636
  1) Convert to dollars, Euros, yuan
  2) Transfer from dollars, Euros, yuan
  Choose your actions:
  2
  Enter the number of dollars: 1000
  Enter the number of euroes: 900
  Enter the number of yuans: 100
  The result of your transfer =  61310.10
  The result of your transfer =  56312.55
  The result of your transfer =  9216.36
  $ python3 Py-CurrencyConverter.py
  Dollar exchange rate:  61.3101
  Euro exchange rate:  62.5695
  Yuan exchange rate:  92.1636
  1) Convert to dollars, Euros, yuan
  2) Transfer from dollars, Euros, yuan
  Choose your actions:
  3
  Error! Enter only 1 or 2
  $ g++ Cpp-CurrencyConverter.cpp -o output
  $ ./output
  current dollar data: 61.3101
  current euro data: 62.5695
  current yuan data: 92.1636
  1) Convert to dollars, Euros, yuan
  2) Transfer from dollars, Euros, yuan
  Choose your actions: 1
  Enter the number of rubles: 500
  The result of your transfer = 8.15526
  The result of your transfer = 7.99111
  The result of your transfer = 5.42514
  $ ./output
  current dollar data: 61.3101
  current euro data: 62.5695
  current yuan data: 92.1636
  1) Convert to dollars, Euros, yuan
  2) Transfer from dollars, Euros, yuan
  Choose your actions: 2
  Enter the number of dollars: 1000
  Enter the number of euroes: 900
  Enter the number of yuans: 100
  The result of your transfer = 61310.1
  The result of your transfer = 56312.6
  The result of your transfer = 9216.36
  $ ./output
  current dollar data: 61.3101
  current euro data: 62.5695
  current yuan data: 92.1636
  1) Convert to dollars, Euros, yuan
  2) Transfer from dollars, Euros, yuan
  Choose your actions: 3
  Error! Enter only 1 or 2:
  https://github.com/David138it/MyFirstMiniProjects
  Task:
  Создайте простой калькулятор, который запускается через терминал.
  Decision:
  $ cat Cpp-Calculator.cpp
  #include <iostream>
  using namespace std;
  int main()
  {
    string repeat="y";
    while (repeat == "y"){
        int numb1, numb2;
        cout<<("Enter number1: ");
        cin>>numb1;
        cout<<("Enter number2: ");
        cin>>numb2;
        char operation;
        cout<<("Enter the operation: ");
        cin>>operation;
        if (operation == '+')
            cout<<(numb1 + numb2)<<endl;
        else if (operation == '-')
            cout<<(numb1 - numb2)<<endl;
        else if (operation == '*')
            cout<<(numb1 * numb2)<<endl;
        else if (operation == '/'){
            if (numb2 == 0)
                cout<<("You cant divide by zero!")<<endl;
            else
                cout<<(numb1 / numb2)<<endl;
        }else{
            cout<<("Invalid operation")<<endl;
        }
        cout<<("Do you want to continue? (y/n): ");
        cin>>repeat;
        if (repeat == "n"){
            break;
        }
        while (repeat!="y" && repeat!="n"){
            cout<<("Please enter the correct answer (y/n): ");
            cin>>repeat;
        }
    }
    return 0;
  }
  $ cat Py-Calculator.py
  repeat="y"
  while repeat == "y":
      numb1, numb2 = int(input("Enter number1: ")), int(input("Enter number2: "))
      operation = input("Enter the operation: ")
      if operation == '+':
          print(numb1 + numb2)
      elif operation == '-':
          print(numb1 - numb2)
      elif operation == '*':
          print(numb1 * numb2)
      elif operation == '/':
          if numb2 == 0:
              print('You cant divide by zero!')
          else:
              print(numb1 / numb2)
      else:
          print('Invalid operation')
      repeat = input("Do you want to continue? (y/n): ")
      if repeat == "n":
          break
      while (repeat!="y" and repeat!="n"):
          repeat = input("Please enter the correct answer (y/n): ")
  $ python3 Py-Calculator.py
  Enter number1: 16
  Enter number2: 0
  Enter the operation: /
  You cant divide by zero!
  Do you want to continue? (y/n): t
  Please enter the correct answer (y/n): t
  Please enter the correct answer (y/n): y
  Enter number1: 16
  Enter number2: 1
  Enter the operation: t
  Invalid operation
  Do you want to continue? (y/n): y
  Enter number1: 16
  Enter number2: 1
  Enter the operation: -
  15
  Do you want to continue? (y/n): n
  $ g++ Cpp-Calculator.cpp -o output
  $ ./output
  Enter number1: 16
  Enter number2: 0
  Enter the operation: /
  You cant divide by zero!
  Do you want to continue? (y/n): t
  Please enter the correct answer (y/n): t
  Please enter the correct answer (y/n): y
  Enter number1: 16
  Enter number2: 1
  Enter the operation: t
  Invalid operation
  Do you want to continue? (y/n): y
  Enter number1: 16
  Enter number2: 1
  Enter the operation: -
  15
  Do you want to continue? (y/n): n

Windows vs Linux
    Task:
    Adding the Ubuntu using wsl
    Decision:
    C:\Users\dd>powershell "start-process powershell -verb runas"
    PS C:\Windows\system32> wsl --list --online
    PS C:\Windows\system32> wsl --install -d Ubuntu-20.04
    PS C:\Windows\system32> Restart-Computer
    Task:
    WslRegisterDistribution failed with error: 0x8007019e
    The Windows Subsystem for Linux optional component is not enabled. Please enable it and try again.
    See https://aka.ms/wslinstall for details.
    Press any key to continue...
    Decision:
    панель управление -> Включение или отключение компонентов Windows -> Подсистема Windows для Linux + -> Ok -> reboot -> Пуск -> Ubuntu 20.04
    Task:
    суфд флешка просит форматнуть
    Decision:
    CMD, chkdisk F:/r=> на всяк случ скопир в диск Д (flash seettd), идем в бухг, вставл флешку, пуск, криптопроксп, сервис, обхор, сначала верхн, потом нижн, смотрим, чтоб не было такого (отсут, недоступ) у нас было: ключ под ... не доступен, ок, прогу, установить связь ведерации, ок, порт суфд 
    Task:
    Не работает ПОРТАЛ из-за такой ошибки: 
    Часы спешат. Не удалось установить защищенное соединение с доменом ecs.sudrf.ru из-за неверных настроек системных часов и календаря
    NET.ERR_CERT_DATE_INVALID
    Decision:
    Изменить время на сервере контроллера домена или заменить батарейку в сервере
    Task:
    ОС не загружается. Предложите на ваш взгляд способы решения проблемы, которые могут вернуть работоспособное состояние.
    Task:
    При перезагрузке ОС сбиваются настройки ориентации экрана. Предложите на ваш взгляд способы решения проблемы.
    Task:
    Сделать резервное копирование диска через Acronis
    Decision:
    Для начала нам нужнa программа Stop SMS Uni Boot — Загрузочные образы CD & USB . Сборки имеют достаточное количество программ для работы с разделами HDD, восстановления системы, создания настроенного образа системы и для решения других проблем.
    Установить образ на флешку можно через Rufus - Запускаемся через флешку - Тут в меню нужно выбрать HDD++ - Acronis - True image premium - Далее выбираем резервное копирование - диски - Выбираем нужный диск - Выбираем путь в обзоре, куда мы хотим сохранить копию диска - В следующем шаге параметра выбираем метод резервного копирования с режимом полное резервное копирование. По умолчанию стоит «инкрементное». Можно оставить этот метод. Но я выберу «полное». - Можно приступить, после чего пойдет загрузка.
  	Task:
  	поставить вторую операционную систему Windows 7. Первая стояла Windows server 2003.
  	Decision:
  	делим диск через флешку - добавим 2 том - ставим туда 7ку Через флешку - Перезагружаемся
  	Task:
  	видим, что 7ка не поставилась, но в меню загрузчика есть
  	Decision:
  	нужно поменять режим в биос (sata) - Теперь запуск через режим asci или sata
  	Task:
  	устанавить винду 8 на жесткий диск через Acronis, Booti-ce Rus, WinNTSetup. После обновлю до винды 10
  	Decision:
  	У меня уже есть загрузочная флешка с нужными программами Acronis, Booti-ce Rus, WinNTSetup (ссылка на загрузочные образы — https://usbtor.ru/viewtopi-c.php?t=1728 ) и ISO образ с виндой 8.1.  - запуститься с загрузочной флешки в Boot Menu через bios. -  Откроем выбор дополнительных программ -Акронис в меню Hdd ++ - Acronis - Acronis Disk Director - Очистим диск - Инициализировать - Создать том - Выбираем размер создаваемого тома - Выбираем тип тома: Основной: активный - Если нужен второй том, тогда после создания основного тома создаем еще один том и выбираем логический тип тома. Но мне не нужен второй том, поэтому я пропускаю данную функцию - Завершить и применить ожидающие операции - Перезагрузимся - также с флешки и откроем 78setup -тут же нажмем Windows NT Setup - правильно выбрать диск, на который будет установлен загрузчик, в моем случае, это новый том Q - отформатируем его - Еще мы видим, что МБР горит желтым - 78setup - Booti-ce Rus - Physi-cal disk - правильный диск назначения (в моем случае это том Q) - в управлении MBR ставим галочку на Windows NT - Инсталяция/конфигурация - выбираем Windows NT 6.x MBR - 78setup - WIndows NT Setup -путь к установочным файлам Windows - прописываем тот путь где находится сам файл с Wim образом windows. - диск на который будет установлена ОС - выбираем нужный диск. В моем случае диск Q.- Установка. - перезапускаемся - установка винды 8.1 -Настраиваем часовой пояс - Придумываем имя компа - Имя пользователя, если нужно пароли - Ждем завершение настроек -
  	Task:
  	бесконечно долго проходил процесс завершения настроек. ( может даже два три дня процесс этот проходить)
  	Decision:
  	выключить и включить ПК главное сразу не включать Пускай хотя бы минут 10 прогрузится завершение настроек, а после уже можно выключить и включить самостоятельно. - После включения рекомендую установить дополнительные драйвера (не обязательно). 
  	Task:
  	Когда запускаем ubuntu в windows:
  	Installing, this may take a few minutes...
  	WslRegisterDistribution failed with error: 0x8007019e
  	The Windows Subsystem for Linux optional component is not enabled. Please enable it and try again.
  	See https://aka.ms/wslinstall for details.
  	Press any key to continue...
  	Decision:
  	Пуск-панель управления-программы и компоненты-включение и отключение компонентов- +подсистема windows для linux
  	Task:
  	Необходимо отключить автоматическое обновления ОС. Предложите на ваш взгляд способы решения задачи. Решение необходимо сделать с использованием cmd | powershell. 
  	Task:
  	В Windows 8.1 не найдено обновлений, хоть и последний раз обновлялся 2 года назад.
  	Decision:
  	гугл -> update puble windows 8.1 64 bit -> скачиваем winFuture8.1x64...exe -> обновляемся.
    Task:
    Установить Visualstudio в Linux
    Decision:
    $ sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc
    $ sudo sh -c 'echo -e "[code]\nname=Visual Studio Code\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc" > /etc/yum.repos.d/vscode.repo'
    $ dnf check-update
    $ sudo dnf install code -y
    $ code
    Source:
    https://code.visualstudio.com/docs/setup/linux
    Task:
    Установить Centos рядом с Windows
    Decision:
    Скачиваем iso-файл с официального сайта Centos - Запускаем Rufus - Выбираем скаченный ISO файл дистрибутива и схему раздела (Если на старые компьютеры, то нужно выбрать MBR и целевую систему Bios, Файловую систему — Fat32, а размер кластера — 4068 байт, а если же компьютеры по новее и поддерживают Uefi, тогда выбираем в схеме раздела GPT и целевую систему Uefi)
    2. После успешной установки, загрузимся с флешки - в биосе настроиваем приоритет загрузчика, чтоб первая запускалась загрузочная флешка 
    3. Перейдём к установке операционной системы - выбираем Install - выбрать размер разделов - поменяем систему разметки LVM на Standart Portition - нажимаем на click here to create them autmaticaly - установщик автоматически разделит диск - уменьшить размер корневого раздела / и раздел /home - Меняю у них размеры - Done - интернет настроить в Network & Host Name - Ethernet переключаем тумблер - Done - software Slection - minmal install- Done - запуск
    Task:
    После установки Linux на Windows, Windows показывает неправильное время
    Decision:
    Win+R ->regedit -> HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\TimeZoneInfor-tation -> Щелкаем правой кнопкой мыши в правой части окна -> новый параметр DWORD(32) -> имя — RealTimeIsUniversal -> щелкаем по новому параметру два раза -> значение 1 -> Перезагружаемся
    Task:
    Для воспроизведения видео вам может потребоваться установить необходимые видеокодеки
    Decision:
    $ sudo dnf update -y
    $ sudo dnf config-manager --set-enabled crb
    $ sudo dnf install -y epel-release epel-next-release
    $ dnf repolist
    $ sudo dnf install -y https://mirrors.rpmfusion.org/free/el/rpmfusion-free-release-9.noarch.rpm
    $ sudo dnf install -y https://mirrors.rpmfusion.org/nonfree/el/rpmfusion-nonfree-release-9.noarch.rpm
    $ sudo dnf install -y ffmpeg ffmpeg-devel
    $ ffmpeg -version
    Source:
    https://setiwik.ru/kak-vklyuchit-repozitoriy-epel-v-centos-9-stream/
    https://setiwik.ru/kak-ustanovit-ffmpeg-na-centos-9-stream/?ysclid=lkordttfyw687770645
    https://docs.microsoft.com/ru-ru/windows/wsl/

1c
    Task:
    Во время установки 1C 8.3 выходит сообщение об ошибке с кодом 1311.
    Decision:
    Поик - regedit - HLM>SYSTEM>CurrentControlSet>Control>NIls>Codepage - выбрать 1252 - изменить в нем значение с "c_1252.nls" на "c_1251.nls" - перезагрузиться - заново установить 1С
    Task:
    В 1 кабинете ошибка:
    лицензия не обнаружена
    в другом кабинете посмотрел, там другая ошибка: 
    Не найдена лицензия, ключ защиты не обнаружен.
    Decision:
    Подключился к серверу, запустил программу HASP License Manager for Win32 (рядом с часами), load смотрю, IPX-unload, TCP/IP-load, NetBios-Load,  перезагрузил комп, HASP License Manager for Win32, load смотрю, IPX-unload, TCP/IP-load, NetBios-unload, нажимаю load, all, теперь в NetBios-Load - все запустилось.
    Task:
    Установить 1С в 101 кабинете или просто обновить 1С
    Decision:
    1С - тонкий клиент - Сетап от администратора - рус - далее - ок - запуск - добавление (изменить) - добавл в сущ - наименов любое - галочку на Сервере 1С предприятия - кластер (w-1c-app:1741) - инф база имя (tDb) - далее - тонкий клиент - версия 1С -(8.3... - будет меняться) - готово - запуск - инциалы, пароль - меняем на нужный пароль
    Task:     
    переименовать пользователя (кадры) в 1с 
    Установить 1С в 101 кабинете или просто обновить 1С
    Decision:
    из под учетки бухгалтера в 1с выбрать администрирование и польз, меняем имя.
    Task:
    Написать программный код (наСервере) изменения всех элементов справочника "Номенклатура", добавить к наименованию слово " проверено". Выборку элементов произвести через запрос.
    Decision:
    Сделать печатную форму для документа «Реализация товаров и услуг» со следующими данными:
    Шапка:
        Организация
        Покупатель
        Телефон покупателя
    Таблица
    Номер по порядку
        Наименование товара
        Количество
        Цена
        Сумма
        Вес
        Объем
    В итогах вывести поля
        Сумма
        Вес
        Объем
    Задание выполнить в демонстрационной базе 1С:Управление торговлей, версии 11.4.
    В результате решения предоставить внешнюю печатную форму.

C/C++
    Task:
    Первый запуск на языке Си
    Decision:
    Начало (Welcome) - проекты - создаем проект - проект без Qt - приложение на языке Си - qmake - ok - проекты - запуск - запуск в терминале - ок - запуск (зеленый треугольник внизу или ctrl+r)
    Task:
    Установка OpenGl
    Task:
    Настроим утилиту для OpenGl в ubuntu 20.04
    Decision:
    $ sudo apt-get update
    $ sudo apt-get install libglu1-mesa-dev freeglut3-dev mesa-common-dev
    Task:
    Первый запуск OpenGl
    Decision:$ vim main.cpp
    $ cat main.cpp
      #include <GL/glut.h>
      void displayMe(void)
      {
          glClear(GL_COLOR_BUFFER_BIT);
          glBegin(GL_POLYGON);
              glVertex3f(0.5, 0.0, 0.5);
              glVertex3f(0.5, 0.0, 0.0);
              glVertex3f(0.0, 0.5, 0.0);
              glVertex3f(0.0, 0.0, 0.5);
          glEnd();
          glFlush();
      }
      int main(int argc, char** argv)
      {
          glutInit(&argc, argv);
          glutInitDisplayMode(GLUT_SINGLE);
          glutInitWindowSize(400, 300);
          glutInitWindowPosition(100, 100);
          glutCreateWindow("Hello world!");
          glutDisplayFunc(displayMe);
          glutMainLoop();
          return 0;
      }
    $ g++ main.cpp -o firstOpenGlApp -lglut -lGLU -lGL
    $ ./firstOpenGlApp
    Task:
    Установка Qt Creator под Windows
    Decision:
        https://visualstudio.microsoft.com/ru/downloads/ -> Инструменты для Visual Studio 2022 -> Инструменты сборки для Visual Studio 2022 -> aka.ms
    C:\Users\...\Downloads\qt C++ installer> vs_buildtools.exe --layout offline --lang en-us --add Microsoft.VisualStudio.Workload.VCTools --includeRecommended
        ...\offline\vs_setup.exe
        https://developer.microsoft.com/en-US/windows/downloads/windows-sdk/-> Getting started -> https://go.microsoft.com/fwlink/?linkid=2173746-> ...\22000.194.210911-1543.co_release_svc_prod1_WindowsSDK.iso -> Извлечь в текущую папку -> ...\22000.194.210911-1543.co_release_svc_prod1_WindowsSDK\Installers\X64 Debuggers And Tools-x64_en-us.exe -> ...\22000.194.210911-1543.co_release_svc_prod1_WindowsSDK\Installers\X86 Debuggers And Tools-x86_en-us.exe
        https://cmake.org/download/-> Binary distributions: -> Windows x64 Installer: Installer tool has changed. Uninstall CMake 3.4 or lower first! -> https://github.com/Kitware/CMake/releases/download/v3.22.0/cmake-3.22.0-windows-x86_64.msi
        ...\cmake-3.22.0-windows-x86_64.msi -> Add CMake to the system PATH for all users
        https://www.qt.io/offline-installers -> Windows Host -> \qt-opensource-windows-x86-5.12.11.exe -> Select Components -> Qt 5.12 -> MSVC 2017 32-bit -> MSVC 2017 64-bit -> Launch QT Creator -> Компьютер -> Свойства -> Дополнительные параметры системы -> Переменные среды ->  Системные переменные -> Path -> Изменить -> Создать -> C:\Qt\Qt5.12.11\Tools\QtCreator\bin -> Пуск -> QT Creator Community -> Инструменты -> Параметры
    Task:
    Установка Qt Creator под Ubuntu 20.04
    Decision:
    https://www.qt.io/download-qt-installer - Download:
    $ chmod u+x qt-unified-linux-x64-4.1.1-online.run
    $ ./qt-unified-linux-x64-4.1.1-online.run
    нужно выбрать компоненты
    Task:
    Компиляция программ с помощью команд ./configure и make. Давайте что-нибудь скомпилируем. Для этого нам понадобятся некоторые инструменты, такие как компилятор, компоновщик и утилита make . Практически во всех системах Linux используется один и тот же компилятор языка C с именем gcc (GNU C Compiler). Проверить его присутствие в системе можно так
    Decision:
    $ which gcc
        /usr/bin/gcc
    Task:
    Получение исходного кода
    Ckомпилируем программу с названием diction из проекта GNU. Эта маленькая удобная программка проверяет качество и стиль содержимого текстовых файлов. А поскольку она невелика, она легко компилируется.
    Следуя соглашениям, мы сначала создадим каталог src для исходного кода и затем загрузим в него исходный код с помощью команды ftp
    Decision:
    $ mkdir src
    $ cd src/
    /src$ ftp ftp.gnu.org
        Name (ftp.gnu.org:server): anonymous
        ...
        230 Login successful.
        Remote system type is UNIX.
        Using binary mode to transfer files.
    ftp> cd gnu/diction
        250 Directory successfully changed.
    ftp> ls
        200 PORT command successful. Consider using PASV.
        150 Here comes the directory listing.
        -rw-r--r--    1 3003     65534       68940 Aug 28  1998 diction-0.7.tar.gz
        -rw-r--r--    1 3003     65534       90957 Mar 04  2002 diction-1.02.tar.gz
        -rw-r--r--    1 3003     65534      141062 Sep 17  2007 diction-1.11.tar.gz
        -rw-r--r--    1 3003     65534         189 Sep 17  2007 diction-1.11.tar.gz.sig
        226 Directory send OK.
    ftp> get diction-1.11.tar.gz
    ftp> bye
        221 Goodbye.
    Task:
    Поскольку мы сами управляем процессом компиляции исходного кода, поместим его в каталог ~/src. Исходный код, устанавливаемый дистрибутивом, помещается в каталог /usr/src, а исходный код, предназначенный для использования множеством пользователей, обычно устанавливается в /usr/local/src.
    Исходный код обычно распространяется в виде сжатого tar-файла. Подключившись к FTP-сайту, мы получили список доступных tar-файлов и выбрали для загрузки самую свежую версию. При помощи команды get программы ftp скопировали файл с сервера FTP на локальную машину.
    После загрузки tar-файла его нужно распаковать. Программа diction , подобно всем программам из проекта GNU, следует определенным стандартам упаковки исходного кода. Большая часть других исходных кодов, доступных в экосистеме Linux, также следует этому стандарту. Одним из элементов стандарта является создание каталога с деревом исходных текстов и именем project-x.xx после распаковывания tar-файла, то есть с именем, содержащим имя проекта и номер версии. Такая схема упрощает установку нескольких версий одной и той же программы. Однако перед распаковыванием хорошо бы исследовать организацию дерева. При распаковывании некоторых проектов каталог не создается, а файлы помещаются непосредственно в текущий каталог, что может вызвать неразбериху и путаницу в хорошо организованном каталоге src. Чтобы избежать этого, пользуйтесь следующей командой для исследования содержимого tar-файла
    Decision:
    /src$ tar tzvf diction-1.11.tar.gz | head
        -rw-r--r-- michael/user  35068 2007-07-30 14:47 diction-1.11/COPYING
        -rw-r--r-- michael/user   9416 2007-08-03 01:03 diction-1.11/INSTALL
        -rw-r--r-- michael/user   3920 2007-08-03 04:05 diction-1.11/Makefile.in
        -rw-r--r-- michael/user   1448 2007-08-30 04:20 diction-1.11/README
        -rw-r--r-- michael/user    152 2007-08-30 02:08 diction-1.11/NEWS
        -rwxr-xr-x michael/user 144080 2007-08-30 02:06 diction-1.11/configure
        -rwxr-xr-x michael/user  13184 2007-08-03 01:03 diction-1.11/install-sh
        -rw-r--r-- michael/user   2621 2007-03-30 15:45 diction-1.11/de
        -rw-r--r-- michael/user  24830 2007-03-30 15:45 diction-1.11/en
        -rw-r--r-- michael/user  25043 2007-03-30 15:45 diction-1.11/en_GB
    /src$ tar xzf diction-1.11.tar.gz
    /src$ ls -l
        total 144
        drwxrwxr-x 3 s s   4096 Jan  3 20:55 diction-1.11
        -rw-rw-r-- 1 s s 141062 Jan  3 20:47 diction-1.11.tar.gz
    Task:
    Исследование дерева исходных текстов
    Decision:
    /src$ cd diction-1.11
    /src/diction-1.11$ ls -l
        config.guess  de            diction.spec.in  getopt.c      misc.c  sentence.c
        config.h.in   de.po         diction.texi.in  getopt.h      misc.h  sentence.h
        config.sub    diction.1.in  en               getopt_int.h  NEWS    style.1.in
        configure     diction.c     en_GB            INSTALL       nl      style.c
        configure.in  diction.pot   en_GB.po         install-sh    nl.po   test
        COPYING       diction.spec  getopt1.c        Makefile.in   README
    /src/diction-1.11$ ls *.c
        diction.c  getopt1.c  getopt.c  misc.c  sentence.c  style.c
    /src/diction-1.11$ ls *.h
        getopt.h  getopt_int.h  misc.h  sentence.h
    Decision:
    /src/diction-1.11$ ls /usr/include
        aio.h        fnmatch.h       mcheck.h        pty.h          sysexits.h
        aliases.h    fstab.h         memory.h        pwd.h          syslog.h
        alloca.h     fts.h           misc            python3.8      tar.h
        argp.h       ftw.h           mlocate         rdma           termio.h
        argz.h       gcalc-2         mntent.h        re_comp.h      termios.h
        ar.h         gci-2           monetary.h      regex.h        tgmath.h
        arpa         gconv.h         mqueue.h        regexp.h       thread_db.h
        asm-generic  getopt.h        mtd             reglib         threads.h
        assert.h     GL              net             resolv.h       time.h
        byteswap.h   glob.h          netash          rpc            ttyent.h
        c++          gnumake.h       netatalk        rpcsvc         uchar.h
        clif.h       gnu-versions.h  netax25         sched.h        ucontext.h
        complex.h    grp.h           netdb.h         scsi           ulimit.h
        cpio.h       gshadow.h       neteconet       search.h       unistd.h
        crypt.h      iconv.h         netinet         semaphore.h    utime.h
        ctype.h      ifaddrs.h       netipx          setjmp.h       utmp.h
        dirent.h     inttypes.h      netiucv         sgtty.h        utmpx.h
        dlfcn.h      iproute2        netpacket       shadow.h       values.h
        drm          KHR             netrom          signal.h       video
        elf.h        langinfo.h      netrose         sound          wait.h
        endian.h     lastlog.h       nfs             spawn.h        wchar.h
        envz.h       libdrm          nl_types.h      stab.h         wctype.h
        err.h        libgen.h        nss.h           stdc-predef.h  wordexp.h
        errno.h      libintl.h       obstack.h       stdint.h       X11
        error.h      libsync.h       openvpn         stdio_ext.h    x86_64-linux-gnu
        execinfo.h   limits.h        paths.h         stdio.h        xcb
        fcntl.h      link.h          poll.h          stdlib.h       xen
        features.h   linux           printf.h        string.h       xf86drm.h
        fenv.h       locale.h        proc_service.h  strings.h      xf86drmMode.h
        finclude     malloc.h        protocols       sudo_plugin.h  xorg
        fmtmsg.h     math.h          pthread.h       syscall.h
    Task:
    Сборка программ
    Давайте запустим configure . Так как эта программа находится не там, где командная оболочка обычно ищет выполняемые файлы, нужно явно сообщить ей местоположение программы, добавив в команду префикс ./ . Он указывает, что программа находится в текущем рабочем каталоге
    Decision:
    /src/diction-1.11$ ./configure
        ...
        configure: creating ./config.status
        config.status: creating Makefile
        config.status: creating diction.1
        config.status: creating diction.texi
        config.status: creating diction.spec
        config.status: creating style.1
        config.status: creating test/rundiction
        config.status: creating config.h
    /src/diction-1.11$ cat Makefile
    ...
    CC=     gcc
    ...
    diction:    diction.o sentence.o misc.o getopt.o getopt1.o
            $(CC) -o $@ $(LDFLAGS) diction.o sentence.o misc.o \
            getopt.o getopt1.o $(LIBS)
    ...
    .c.o:
            $(CC) -c $(CPPFLAGS) $(CFLAGS) $<
            ...
    #{{{ dependencies
    diction.o:  diction.c config.h getopt.h misc.h sentence.h
    getopt.o:   getopt.c getopt.h getopt_int.h
    getopt1.o:  getopt1.c getopt.h getopt_int.h
    misc.o: misc.c config.h misc.h
    sentence.o: sentence.c config.h misc.h sentence.h
    style.o:    style.c config.h getopt.h misc.h sentence.h
    #}}}
    Task:
    давайте запустим make и соберем наши программы:
    Decision:
    /src/diction-1.11$ make
    /src/diction-1.11$ ls
        config.guess   de.po            diction.texi.in  INSTALL      README
        config.h       diction          en               install-sh   sentence.c
        config.h.in    diction.1        en_GB            Makefile     sentence.h
        config.log     diction.1.in     en_GB.po         Makefile.in  sentence.o
        config.status  diction.c        getopt1.c        misc.c       style
        config.sub     diction.o        getopt1.o        misc.h       style.1
        configure      diction.pot      getopt.c         misc.o       style.1.in
        configure.in   diction.spec     getopt.h         NEWS         style.c
        COPYING        diction.spec.in  getopt_int.h     nl           style.o
        de             diction.texi     getopt.o         nl.po        test
    Task:
    Мы только что скомпилировали первые программы из исходного кода! Но, исключительно ради любопытства, запустим make еще раз
    Decision:
    /src/diction-1.11$ make
        make: Nothing to be done for 'all'.
    Task:
    Во всем виновата make . Вместо того чтобы просто собрать все заново, make собирает только то, что нужно собрать. Так как все целевые файлы уже присутствуют в каталоге, make решила, что ничего больше делать не требуется. Продемонстрировать это можно, удалив одну из собранных целей и запустив make снова.
    Decision:
    /src/diction-1.11$ rm getopt.o
    /src/diction-1.11$ make
        ...
        gcc -o diction -g diction.o sentence.o misc.o \
            getopt.o getopt1.o
        gcc -o style -g style.o sentence.o misc.o \
            getopt.o getopt1.o -lm
    Task:
    Воспользуемся программой touch , чтобы «обновить» один из файлов с исходным кодом, и посмотрим, к чему это приведет
    Decision:
    /src/diction-1.11$ ls -l diction getopt.c
        -rwxrwxr-x 1 s s 68128 Jan  3 21:22 diction
        -rw-r--r-- 1 s s 33125 Mar 30  2007 getopt.c
    /src/diction-1.11$ touch getopt.c
    /src/diction-1.11$ ls -l diction getopt.c
        -rwxrwxr-x 1 s s 68128 Jan  3 21:22 diction
        -rw-r--r-- 1 s s 33125 Jan  3 21:24 getopt.c
    /src/diction-1.11$ make
        gcc -c -I. -DSHAREDIR=\"/usr/local/share\" -DLOCALEDIR=\"/usr/local/share/locale\" -g -O2 -pipe -Wno-unused -Wshadow -Wbad-function-cast -Wmissing-prototypes -Wstrict-prototypes -Wcast-align -Wcast-qual -Wpointer-arith -Wcast-align -Wwrite-strings -Wmissing-declarations -Wnested-externs -Wundef -pedantic -fno-common getopt.c
        gcc -o diction -g diction.o sentence.o misc.o \
            getopt.o getopt1.o
        gcc -o style -g style.o sentence.o misc.o \
            getopt.o getopt1.o -lm
    /src/diction-1.11$ ls -l diction getopt.c
        -rwxrwxr-x 1 s s 68128 Jan  3 21:24 diction
        -rw-r--r-- 1 s s 33125 Jan  3 21:24 getopt.c
    Task:
    Установка программ
    Старательно упакованный исходный код часто включает специальную цель для make , которая называется install (установить). Эта цель выполняет установку готового программного продукта в системный каталог. Обычно это каталог /usr/local/bin, традиционное место для установки программного обеспечения, собранного в локальной системе. Однако этот каталог, как правило, недоступен рядовым пользователям для записи, поэтому, чтобы выполнить установку, вам потребуются привилегии суперпользователя. После установки проверим готовность программы к использованию
    Decision:
    /src/diction-1.11$ sudo make install
    /src/diction-1.11$ which diction
        /usr/local/bin/diction
    Task:
    Установка g++
    Decision:
    $ sudo apt install build-essential
    $ g++ --version
        g++ (Ubuntu 9.3.0-10ubuntu2) 9.3.0
        Copyright (C) 2019 Free Software Foundation, Inc.
        This is free software; see the source for copying conditions.  There is NO
        warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    Task:
    Первый запуск
    Decision:
    $ vim hello.cc
    $ cat hello.cc
        #include <iostream>
        using namespace std;
        int main()
        {
            cout << "Hello, World!";
            return 0;
        }
    $ ls -l
        итого 28
        -rw-rw-r-- 1     100 Jul 20 20:13 hello.cc
    $ g++ -o hello hello.cc
    $ ls -l
        итого 48
        -rwxrwxr-x 1   17160 Jul 20 20:13 hello
        -rw-rw-r-- 1     100 Jul 20 20:13 hello.cc
    $ ./hello
        Hello, World!
    Decision:
    $ vim test.cpp
    $ cat test.cpp
        fint main(){
        }
    $ g++ test.cpp -o test
        test.cpp:1:1: error: ‘fint’ does not name a type; did you mean ‘int’?
            1 | fint main(){
              | ^~~~
              | int
    $ vim test.cpp
    $ cat test.cpp
        int main(){
        }
    $ g++ test.cpp -o test
    $ ls
        test  test.cpp
    $ gdb --annotate=3 test
        GNU gdb (Ubuntu 9.1-0ubuntu1) 9.1
        Copyright (C) 2020 Free Software Foundation, Inc.
        License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
        This is free software: you are free to change and redistribute it.
        There is NO WARRANTY, to the extent permitted by law.
        Type "show copying" and "show warranty" for details.
        This GDB was configured as "x86_64-linux-gnu".
        Type "show configuration" for configuration details.
        For bug reporting instructions, please see:
        <http://www.gnu.org/software/gdb/bugs/>.
        Find the GDB manual and other documentation resources online at:
            <http://www.gnu.org/software/gdb/documentation/>.
        For help, type "help".
        Type "apropos word" to search for commands related to "word"...
        Reading symbols from test...
        (No debugging symbols found in test)
        ��pre-prompt
        (gdb)
        ��prompt
    run
        ��post-prompt
        Starting program: /home/as/Документы/C++/C++ Open GL/test/test
        ��starting
        ��exited 0
        [Inferior 1 (process 8426) exited normally]
        ��thread-exited,id="1",group-id="i1"
        ��stopped
        ��pre-prompt
        (gdb)
        ��prompt
    quit
        ��post-prompt
    Task:
    Теперь попробуем добавить что-нибудь в программе. Чтобы добавить какой-нибудь текст, нужно подключить библиотеку iostream
    Decision:
    $ vim test.cpp
    $ cat test.cpp
        #include <iostream>
        int main(){
            std::cout<<"Hello"<<std::endl;
        }
    $ g++ test.cpp -o test
    $ gdb --annotate=3 test
        Copyright (C) 2020 Free Software Foundation, Inc.
        License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
        This is free software: you are free to change and redistribute it.
        There is NO WARRANTY, to the extent permitted by law.
        Type "show copying" and "show warranty" for details.
        This GDB was configured as "x86_64-linux-gnu".
        Type "show configuration" for configuration details.
        For bug reporting instructions, please see:
        <http://www.gnu.org/software/gdb/bugs/>.
        Find the GDB manual and other documentation resources online at:
            <http://www.gnu.org/software/gdb/documentation/>.
        For help, type "help".
        Type "apropos word" to search for commands related to "word"...
        Reading symbols from test...
        (No debugging symbols found in test)
        ��pre-prompt
        (gdb)
        ��prompt
    run
        ��post-prompt
        Starting program: /home/as/Документы/C++/C++ Open GL/test/test
        ��starting
        Hello
        ��exited 0
        [Inferior 1 (process 8581) exited normally]
        ��thread-exited,id="1",group-id="i1"
        ��stopped
        ��pre-prompt
        (gdb)
        ��prompt
    q
        ��post-prompt
    Decision:
    $ vim test.cpp
    $ cat test.cpp
        #include <iostream>
        using namespace std;
        int main(){
            int i=1;
            float f=1.1123;
            char c='f';
            cin>>i;
            cin>>f;
            cin>>c;
            cout<<i<<endl;
            cout<<f<<endl;
            cout<<c<<endl;
        }
    $ g++ test.cpp -o test
    $ gdb --annotate=3 test
        GNU gdb (Ubuntu 9.1-0ubuntu1) 9.1
        Copyright (C) 2020 Free Software Foundation, Inc.
        License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
        This is free software: you are free to change and redistribute it.
        There is NO WARRANTY, to the extent permitted by law.
        Type "show copying" and "show warranty" for details.
        This GDB was configured as "x86_64-linux-gnu".
        Type "show configuration" for configuration details.
        For bug reporting instructions, please see:
        <http://www.gnu.org/software/gdb/bugs/>.
        Find the GDB manual and other documentation resources online at:
            <http://www.gnu.org/software/gdb/documentation/>.
        For help, type "help".
        Type "apropos word" to search for commands related to "word"...
        Reading symbols from test...
        (No debugging symbols found in test)
        ��pre-prompt
        (gdb)
        ��prompt
    run
        ��post-prompt
        Starting program: /home/as/Документы/C++/C++ Open GL/test/test
        ��starting
        32
        15.04
        g
        32
        15.04
        g
        ��exited 0
        [Inferior 1 (process 9164) exited normally]
        ��thread-exited,id="1",group-id="i1"
        ��stopped
        ��pre-prompt
        (gdb)
        ��prompt
    q
        ��post-prompt
    Task:
    Создание плитки пятнашек
    Decision:
    Создать->приложение (qt quick)->application empty->qmake->ok->/->add new->qt->файл qml->ok
        Tile.qml:
    Rectangle {
        id: root
        color: "lightgreen"
        radius: 10
        border.color: "black"
        border.width: 1
        Text {
            id: _firstText
            anchors.centerIn: root
            text: "1"
            font {
                pointSize: Math.min(root.width, root.height) / 3
                bold: true
            }
        }
    }
        main.qml:
    Window {
        id: root
        width: 640
        height: 480
        visible: true
        title: qsTr("Hello World")
        Tile {
            width: root.width / 4
            height: root.height / 4
        }
    }
    Task:
    C:\Users\...\OneDrive\Документы\Projects\Cpp\Test\CMakeLists.txt:3: ошибка: The CMAKE_CXX_COMPILER: cl is not a full path and was not found in the PATH. To use the JOM generator with Visual C++, cmake must be run from a shell that can use the compiler cl from the command line.  This environment is unable to invoke the cl compiler.  To fix this problem, run cmake from the Visual Studio Command Prompt (vcvarsall.bat). Tell CMake where to find the compiler by setting either the environment variable "CXX" or the CMake cache entry CMAKE_CXX_COMPILER to the full path to the compiler, or to the compiler name if it is in the PATH.
    :-1: ошибка: Процесс CMake завершился с Решением 1.
    Decision:
        Панель управления -> visual studio 2022 -> Удаление программы -> my.visualstudio.com-> Build Tools for Visual Studio 2019 (version 16.9) -> Download
    C:\Users\...\Downloads\qt C++ installer> vs_buildtools.exe --layout offline --lang en-us --add Microsoft.VisualStudio.Workload.VCTools --includeRecommended
        ...\offline\vs_setup.exe
    Task:
        qrc:/main.qml:13:9: Unable to assign [undefined] to double
        qrc:/main.qml:12:9: Unable to assign [undefined] to QColor
        QQmlApplicationEngine failed to load component
        qrc:/main.qml:3 module "StyleSettings" is not installed
    Task:
    Подгрузим нашу папку StyleSettings в qml
    Decision:
        main.cpp
    ...
        QQmlApplicationEngine engine;
        engine.addImportPath(":/qml");
        const QUrl url(QStringLiteral("qrc:/main.qml")
    ...

        main.qml
    import QtQuick 2.12
    import QtQuick.Window 2.12
    import StyleSettings 1.0
    Window {
        width: 640
        height: 480
        visible: true
        title: qsTr("Hello World")
        Rectangle {
            id: _background
            z: -100
            anchors.fill: parent
            color: Style.backgroundColor
            opacity: Style.emphasisOpacity
        }
        /*Style {
            id: _style
        }*/
        Component.onCompleted: {
            console.log(Style)
        }
    }

        qmdir
    module StyleSettings
    singleton Style 1.0 Style.qml
        Addressbook.pro
    ...
        # Additional import path used to resolve QML modules in Qt Creators code model
        QML_IMPORT_PATH += $$PWD/qml
    ...
    Task:
    После того как написали програамму сервера на классическм процессоре, подключим CPU ядра
    Decision:
        https://developer.nvidia.com/opencl - OpenCL Multi Threads - Download - Windows (x64) - излечь - C:\Users\david\Downloads\NVIDIA GPU Computing SDK\OpenCL\common\inc\CL - Копируем CL - Вставляем в наш проект - C:\Users\david\Downloads\NVIDIA GPU Computing SDK\OpenCL\common\lib\x64\ - Копируем OpenCL.lib - вставляем в наш проект - Поиск - opencl.dll - C:\Windows\SysWOW64 - коипруем OpenCL.dll и вставляем в наш проект \build-main-Desktop_Qt_5_12_11_MSVC2017_32bit-Debug\debug\-
    ...
    //#pragma comment (lib, "Mswsock.lib")
    #pragma comment(lib, "OpenCL.lib")
    #include "CL\cl.h"
    struct TPot{
    ...
    Task:
    :-1: error: LNK1104: cannot open file 'OpenCL.lib'
    Decision:
        main.pro
    ...
    CONFIG -= app_bundle
    LIBS += C:\Users\...\Documents\Projects\Cpp\Git\CPP-WebServer0\main\OpenCL.lib
    # You can make your code fail to compile if it uses deprecated APIs
    Task:
    Web Server on CPU. To create a CPU-based web server. here I am learning how to create a web server on the CPU
    Decision:
    https://github.com/David138it/MyPortfolio/Skills/Engineer-Isu/Cpp/WebServerOnCpu/
    Decision:
    запустить QT creator - открыть проект с расширением .pro - указать правильный путь в библиотеку OpenCL в расширении .pro - запустить проект - после запуска запустить любой браузер - в адресную строку ввести адрес вашей локальной машины с портом 8080 - например так: IpAddr1:8080 - узнать ip адрес командой ipconfig
    Task:
    The matrix
    Decision:
    #include <GL/glut.h>
    #include <iostream>
    using namespace std;
    struct Ch{
        Ch(char ach=' ', int alive=0):
            ch(ach),
            live(alive)
        {}
        char ch;
        int live;
    };
    const int W=852/9;
    const int H=480/15;
    Ch screen[W][H];
    void display(){
        glClear(GL_COLOR_BUFFER_BIT);
        for(int y=0; y<H; ++y){
            for(int x=0; x<W; ++x){
                glRasterPos2f(x*9, (y+1)*15);
                glColor3f(0, screen[x][y].live/10000.0, 0);
                glutBitmapCharacter(GLUT_BITMAP_9_BY_15, screen[x][y].ch);
            }
        }
        glutSwapBuffers();
    }
    void timer(int=0){
            for(int y=0; y<H; ++y){
                for(int x=0; x<W; ++x){
                if(screen[x][y].live>0){
                    --screen[x][y].live;
                }
            }
        }
        int x=rand()%W;
        for(int y=0; y<H; ++y){
            if(screen[x][y].live<=0){
                screen[x][y].ch=rand()%256;
                screen[x][y].live=10000;
                break;
            }
        }
        glutPostRedisplay();
        glutTimerFunc(0, timer, 0);
    }
    int main(int argc, char **argv){
        glutInit(&argc, argv);
        glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
        glutInitWindowSize(852, 480);
        glutInitWindowPosition(0, 86);
        glutCreateWindow("Metrix Code");
        glClearColor(0, 0, 0, 1.0);
        glMatrixMode(GL_PROJECTION);
        glLoadIdentity();
        glOrtho(0, 852, 480, 0, -1, 1);
        glutDisplayFunc(display);
        timer();
        glutMainLoop();
        /*for(unsigned wchar i=' '; i<500; ++i){
            wcout<<(wchar)i;
        }*/
    }
    Task:
    Address Book. here I am learning how to create a program with a graphical application Address Book - a telephone directory using Model View Controller
    Decision:
    https://github.com/David138it/MyPortfolio/Skills/Engineer-Isu/Cpp/AddressBook/
    Task:
    Я заранее создал список имен c телефонными номерами в файле file.txt. Нужно создать такую программу, что бы при вводе имени на консоле выдавался номер нужного человека. Сделаю я это с помощью вектора.
    Decision:
    #include<iostream>
    #include<fstream>
    #include<vector>
    #include<string>
    using namespace std;
    class Number{
    public:
        string name;
        string number;
        Number (const Number &v):
            name(v.name),
            number(v.number){}
        Number(){}
        const Number &operator=(const Number &v){
            name=v.name;
            number=v.number;
            return v;
        }       
    };
    int main(){
        fstream f("file.txt");
        vector<Number> telBook;
        while(true){
            Number t;
            f>>t.name;
            if(f.eof()){
                break;
            }
            f>>t.number;
            if(f.eof()){
                break;
            }
            telBook.push_back(t);
        }
        while(true){
            cout<<"Введите имя (или стоп)";
            string name;
            cin>>name;
            if(name=="стоп"){
                break;
            }
            for(int i=0;i<telBook.size(); ++i){
                if(telBook[i].name==name){
                    cout<<name<<" "<<telBook[i].number<<endl;
                }
            }
        }
    }
    Task:
    работа с мышью
    Decision:
    #include <GL/glut.h>
    #include <cstdlib>
    #include <cmath>
    using namespace std;
    int x=0, y=0;
    bool down=false;
    const int N=100;
    struct P{
        float x, y, vx, vy, r, g, b;
    }p[N];
    void display(){
        glClear(GL_COLOR_BUFFER_BIT);
        glPointSize(5);
        glBegin(GL_POINTS);
        for(int i=0; i<N; ++i){
            glColor3f(p[i].r, p[i].g, p[i].b);
            glVertex2f(p[i].x, p[i].y);
        }
        glEnd();
        glutSwapBuffers();
    }
    void timer(int=0){
        display();
        for(int i=0; i<N; ++i){
            p[i].x+=p[i].vx;
            p[i].y+=p[i].vy;
            if (down){
                float d=sqrt((p[i].x-x)*(p[i].x-x)+(p[i].y-y)*(p[i].y-y));
                p[i].x+=5*(x-p[i].x)/d;
                p[i].y+=5*(y-p[i].y)/d;
            }
        }
        glutTimerFunc(10, timer, 0);
    }
    void mouse(int button, int state, int ax, int ay){
        x=ax;
        y=ay;
        down=state==GLUT_DOWN;
    }
    void motion(int ax, int ay){
        x=ax;
        y=ay;
    }
    int main(int argc, char **argv){
        for(int i=0; i<N; ++i){
            p[i].x=rand()%480;
            p[i].y=rand()%480;
            p[i].vx=rand()%480/100.0-2.4;
            p[i].vy=rand()%480/100.0-2.4;
            p[i].r=rand()%200/200.0;
            p[i].g=rand()%200/200.0;
            p[i].b=rand()%200/200.0;
        }
        glutInit(&argc, argv);
        glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
        glutInitWindowSize(480, 480);
        glutInitWindowPosition(20, 1050-480-20);
        glutCreateWindow("Knight tour");
        glClearColor(0, 0, 0, 1.0);
        glMatrixMode(GL_PROJECTION);
        glLoadIdentity();
        glOrtho(0, 480, 480, 0, -1, 1);
        glutDisplayFunc(display);
        timer();
        glutMouseFunc(mouse);
        glutMotionFunc(motion);
        glutMainLoop();
    }
    Task:
    Моделирование гравитации
    Decision:
    #include<GL/glut.h>
    #include<cmath>
    struct Particle{
        float x, y, vx, vy, m;
    };
    const int N=4;
    Particle particles[N];
    void display(){
            glClear(GL_COLOR_BUFFER_BIT);
            glBegin(GL_POINTS);
        for(int i=0; i<N; ++i){
            glVertex2f(particles[i].x, particles[i].y);
        }
            glEnd();
            glutSwapBuffers();
    }
    void timer(int=0){
        for(int i=0; i<N; ++i){
            Particle &p0=particles[i];
            for(int j=0; j<N; ++j){
                if(j==i){
                    continue;
                }
                const Particle &p=particles[j];
                float d=sqrt((p0.x-p.x)*(p0.x-p.x)+
                        (p0.y-p.y)*(p0.y-p.y));
                if(d>3){
                    p0.vx+=0.0007*p.m/d/d*(p.x-p0.x)/d;
                                    p0.vy+=0.0007*p.m/d/d*(p.y-p0.y)/d;
                }
            }
            p0.x+=p0.vx;
            p0.y+=p0.vy;

        }
            display();
            glutTimerFunc(1,timer,0);
    }
    int main(int argc, char **argv){
        particles[0].x=100;
        particles[0].y=100;
        particles[0].vx=0;
        particles[0].vy=0;
        particles[0].m=1000;
            particles[1].x=130;
            particles[1].y=100;
            particles[1].vx=0;
            particles[1].vy=-0.1;
            particles[1].m=7;
            particles[2].x=30;
            particles[2].y=100;
            particles[2].vx=0;
            particles[2].vy=0.1;
            particles[2].m=10;
            particles[3].x=25;
            particles[3].y=100;
            particles[3].vx=0;
            particles[3].vy=0.11;
            particles[3].m=0.1;
        glutInit(&argc, argv);
            glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
            glutInitWindowSize(200,200);
            glutInitWindowPosition(20,810);
            glutCreateWindow("Gravitation");
            glClearColor(0,0,0,1.0);
            glMatrixMode(GL_PROJECTION);
            glLoadIdentity();
            glOrtho(0,200,200,0,-1,1);
            glutDisplayFunc(display);
            timer();
            glutMainLoop();
    }
    Task:   
    Дан String с кучей символами, напиши код который вернет самый длинный substring без повторяющихся символов
    input: "aaaabbbbbvvvxvxxzzzzrgdsbbbdddvcc"
    output: "zrgdsb"
    Source:
    1. https://www.youtube.com/playlist?list=PLg5SS_4L6LYuu1RAT4l1tCkZrJzkIaNgL
    Task:
    определить длину строки
    Decision:
    #include<stdio.h>
    #include<string.h>
    void main()
    {
        char S[]="This is string";
        printf("%d",strlen(S));
    } 
    Task:
    Склонение слов
    Decision:
    #include <iostream>
    using namespace std;
    int main(){
        cout<<"Введите кoличество пирожков: ";
        int n;
        cin>>n;
        cout<<"Я собираюсь съесть "<<n;
            int o=n%100;
        if((o>10)&&(o<20)){
            cout<<" .";
        }
        else{
            switch(o%10){
                case 0:
                    cout<<" пирожков.";
                    break;
                case 1:
                    cout<<" пирожок.";
                    break;
                case 2:
                case 3:
                case 4:
                    cout<<" пирожка.";
                    break;
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                    cout<<" пирожков.";
                    break;
            }
        }
        cout<<endl; 
    }
    Task:
    Вращающийся куб
    Decision:
    #include <GL/glut.h>
    //#include <GL/freeglut.h>
    void display(){
        glClear(GL_COLOR_BUFFER_BIT);
        glRotatef(1,1,1,0);
        glBegin(GL_LINE_STRIP);
        glVertex3f(-50, -50, -50);
        glVertex3f(50, -50, -50);
        glVertex3f(50, 50, -50);
        glVertex3f(-50, 50, -50);   
        glVertex3f(-50, -50, -50);
        glEnd();
            glBegin(GL_LINE_STRIP);
            glVertex3f(-50, -50, 50);
            glVertex3f(50, -50, 50);
            glVertex3f(50, 50, 50);
            glVertex3f(-50, 50, 50); 
            glVertex3f(-50, -50, 50);
            glEnd();
            glBegin(GL_LINES);
            glVertex3f(-50, -50, 50);
            glVertex3f(-50, -50, -50);
            glVertex3f(50, -50, 50);
            glVertex3f(50, -50, -50); 
            glVertex3f(50, 50, 50);
        glVertex3f(50, 50, -50);
        glVertex3f(-50, 50, 50);
        glVertex3f(-50, 50, -50);
            glEnd();

        glutSwapBuffers();
    }
    void timer(int=0){
        display();
    glutTimerFunc(10, timer, 0);
    }
    int main(int argc, char **argv){
        glutInit(&argc, argv);
        glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
        glutInitWindowSize(200, 200);
        glutInitWindowPosition(20, 810);
        glutCreateWindow("Cube");
        glClearColor(0,0,0,1.0);
        glMatrixMode(GL_PROJECTION);
        glLoadIdentity();
        glOrtho(-100, 100, -100, 100, -100, 100);
        glutDisplayFunc(display);
        timer();
        glutMainLoop();
    }
    Task:
    Две функции, синус и косинус, должны отображаться на одном графике при изменении аргумента функции в диапазоне от 0 до 10 радиан. Графики должны представлять собой ломаные линии, проходящие через узловые точки. Шаг узлов должен быть задан с помощью графического интерфейса. Необходимо выполнить полную разметку осей (ординат и абсцисс). Каждая функция должна использовать свой собственный стиль строки. Необходимо организовать рисование подписи к графику.
    Decision:
    https://github.com/David138it/MyPortfolio/Skills/Engineer-Isu/Cpp/Graphics/
    Task:
    Составить программу, принимающую с клавиатуры декартовы координаты точки и печатающую сферические координаты. Преобразование координат должно быть выполнено функцией типа void по формулам
    Decision:
    #include<stdio.h>
    #include<math.h>
    /*void sphere(double x, double y, double z, double *r, double *q, double *fi)
    {
        int a;
        *r=sqrt(x*x+y*y+z*z);
        *q=acos(z/(*r));
        if (x!=0){
            *fi=atan(y/x);
        }
    }
    void main(void)
    {
        double x, y, z, r, q, fi;
        printf("x=");scanf("%lf",&x);
        printf("y=");scanf("%lf",&y);
        printf("z=");scanf("%lf",&z);
        sphere(x, y, z, &r, &q, &fi);
        printf("%lf\n%lf\n%lf\n",r,q,fi);
    }*/
    const double pi=3.1415927;
    void sphere(double x, double y, double z, double *r, double *q, double *fi)
    {
        int a;
        *r=sqrt(x*x+y*y+z*z);
        *q=acos(z/(*r))*180.0/pi;
        if (x!=0){
            *fi=atan(y/x)*180.0/pi;
        }
    }
    void main(void)
    {
        double x, y, z, r, q, fi;
        printf("x=");scanf("%lf",&x);
        printf("y=");scanf("%lf",&y);
        printf("z=");scanf("%lf",&z);
        sphere(x, y, z, &r, &q, &fi);
        printf("%lf\n%lf\n%lf\n",r,q,fi);
    }
    Task:
    нам нужно создать функцию, которая принимает в качестве аргументов полярные координаты точки p и ф и передает в вызывающую эту функцию программу декартовы координаты точки Х и У, вычисляемые по формулам: *X=p*Cos(ф), Y=p*Sin(ф)
    Decision:
    #include<stdio.h>
    #include<math.h>
    const double pi180=3.1415927/180;
    void DECART(double r, double f, double *x, double *y)
    {
        *x=r*sin(f*pi180);
        *y=r*cos(f*pi180);
    }
    void main()
    {
        double r,f,x,y;
        scanf("%lf %lf",&r,&f);
        DECART(r,f,&x,&y);
        printf("%lf %lf",x,y);
    }
    Task:
    Для вводимого с консоли значения вещественной переменной а, напечатать таблицу значений функций вида:
    sin(a)=...
    arccos(a)==...
    ехр(a).==...
    ln(a)=^...
    ceil(a)=...
    floor(a)=...
    sqrt(a)=…
    pow(2,a)=...
    На месте a должно отображаться число, введенное с клавиатуры, на месте ... - значение соответствующей функции. 
    Decision:
    #include<stdio.h>
    #include<curses.h>
    #include<math.h>
    const float Pi=3.1415927;
    void main()
    {
      float a;
      a=30.0;
      printf("Напишите число: "); scanf("%f",&a);
      printf("sin(a)=%4.2lf\n",sin(a*Pi/180.0));
      printf("arccos(a)=%4.2lf\n",acos(a*Pi/180.0));
      printf("exp(a)=%4.2lf\n",exp(a));
      printf("ln(a)=%4.2lf\n",log(a));
      printf("ceil(a)=%4.1lf\n",ceil(a));
      printf("floor(a)=%4.1lf\n",floor(a));
      printf("sqrt(a)=%4.2lf\n",sqrt(a));
      printf("pow(2,a)=%4.2lf\n",pow(2,a));
      getch();
    } 
    Task:
    Используя математическую функцию tan, напечатать таблицу тангенсов и котангенсов в виде:
    a      tg(a)   ctg(a)
    30.0  ...      ...
    45.0 ...       ...
    60.0 ...       ...
    На месте ... должны быть напечатаны соответствующие значения тригонометрических функций с тремя значащими цифрами в дробной части.
    Decision:
    #include<stdio.h>
    #include<curses.h>
    #include<math.h>
    const float Pi=3.1415927;
    void main()
    {
      float a;
      a=30.0;
      printf("a\ttg(a)\tctg(a)\n");
      printf("%4.1f\t%4.2lf\t%4.2lf\n",a,tan(a*Pi/180.0),1/tan(a*Pi/180.0));
      printf("%4.1f\t%4.2lf\t%4.2lf\n",a+15,tan((a+15)*Pi/180.0),1/tan((a+15)*Pi/180.0));
      printf("%4.1f\t%4.2lf\t%4.2lf\n",a+30,tan((a+30)*Pi/180.0),1/tan((a+30)*Pi/180.0));
      getch();
    } 
    Task:
    Puzzle 15
    Decision:
    https://github.com/David138it/MyPortfolio/Skills/Engineer-Isu/Cpp/15Puzzle/
    Task:
    Тетрис
    Decision:
    https://github.com/David138it/MyPortfolio/Skills/Engineer-Isu/Cpp/Tetris/Tetris
    Decision:
    $ g++ painter.cpp tetris.cpp -o main -lglut -lGLU -lGL
    $ ./main
    Task:
    Draw a red square in the window
    Decision:
    https://github.com/David138it/MyPortfolio/Skills/Engineer-Isu/Cpp/Tetris/Tetris1
    Decision:
    $ g++ painter.cpp tetris.cpp -o main -lglut -lGLU -lGL
    $ ./main
    Task:
    Draw figures for tetris
    Decision:
    https://github.com/David138it/MyPortfolio/Skills/Engineer-Isu/Cpp/Tetris/Tetris2
    Decision:
    $ g++ painter.cpp tetris.cpp tetromino.cpp -o main -lglut -lGLU -lGL
    $ ./main
    Task:
    Let's draw a figure now, so that you can turn it over
    Decision:
    https://github.com/David138it/MyPortfolio/Skills/Engineer-Isu/Cpp/Tetris/Tetris3
    Decision:
    $ g++ painter.cpp tetris.cpp tetromino.cpp -o main -lglut -lGLU -lGL
    $ ./main
    Task:
    We will also check other figures
    Decision:
    https://github.com/David138it/MyPortfolio/Skills/Engineer-Isu/Cpp/Tetris/Tetris4
    Decision:
    $ g++ painter.cpp tetris.cpp tetromino.cpp -o main -lglut -lGLU -lGL
    $ ./main
    Task:
    Change the color of the shapes
    Decision:
    https://github.com/David138it/MyPortfolio/Skills/Engineer-Isu/Cpp/Tetris/Tetris5
    Decision:
    $ g++ painter.cpp tetris.cpp tetromino.cpp well.cpp -o main -lglut -lGLU -lGL
    $ ./main
    Task:
    Let's create a movement for the figure
    Decision:
    https://github.com/David138it/MyPortfolio/Skills/Engineer-Isu/Cpp/Tetris/Tetris6
    Decision:
    $ g++ painter.cpp tetris.cpp tetromino.cpp well.cpp game.cpp -o main -lglut -lGLU -lGL
    $ ./main
    Task:
    Final stage
    Decision:
    $ g++ painter.cpp tetris.cpp tetromino.cpp well.cpp game.cpp -o main -lglut -lGLU -lGL
    $ ./main
    Decision:
    https://github.com/David138it/MyPortfolio/Skills/Engineer-Isu/Cpp/Tetris/Tetris7
    Task:
    chess rook
    The chess rook moves horizontally or vertically. Given two different cells of the chessboard, determine whether the rook can get from the first cell to the second one in one move. The program receives four numbers from 1 to 8 each, specifying the column number and row number first for the first cell, then for the second cell. The program should output YES if it is possible to get into the second cell from the first cell by the move of the rook, or NO otherwise.
    Task:
    Chess King
    The chess king moves horizontally, vertically and diagonally, but only by 1 square. Given two different squares of the chessboard, determine whether the king can get from the first square to the second one in one move. The program receives four numbers from 1 to 8 each, specifying the column number and row number first for the first cell, then for the second cell. The program should output YES if it is possible to get to the second square from the first square by the king's move, or NO otherwise.
    Task:
    Chess bishop
    Chess bishop moves diagonally. Given two different cells of the chessboard, determine whether the bishop can get from the first cell to the second one in one move. The program receives four numbers from 1 to 8 each, specifying the column number and row number first for the first cell, then for the second cell. The program should output YES if it is possible to get into the second cell from the first cell by the bishop's move, or NO otherwise.
    Task:
    Chess queen
    The chess queen moves diagonally, horizontally or vertically. Given two different cells of the chessboard, determine whether the queen can get from the first cell to the second one in one move. The program receives four numbers from 1 to 8 each, specifying the column number and row number first for the first cell, then for the second cell. The program should output YES if it is possible to get into the second cell from the first cell by the queen's move, or NO otherwise.
    Task:
    Chess knight
    The chess knight moves the letter "G" two squares vertically in any direction and one square horizontally, or vice versa. Given two different squares of the chessboard, determine whether the knight can get from the first square to the second one in one move. The program receives four numbers from 1 to 8 each, specifying the column number and row number first for the first cell, then for the second cell. The program should output YES if it is possible to get to the second square from the first square by the knight's move, or NO otherwise.
    Decision:
    https://github.com/David138it/MyPortfolio/Skills/Engineer-Isu/Cpp/Chess/
    Task:
    Шашки
    Decision:
    https://github.com/David138it/MyPortfolio/Skills/Engineer-Isu/Cpp/Checkers/
    Task:
    Крестики-нолики
    Decision:
    #include <iostream>
    using namespace std;
    int main() {
        char xo[3][3] = {
            {'.', '.','.'},
            {'.', '.','.'},
            {'.', '.','.'}
        };
        while(true) {
            int x, y;
            cin >> x >> y;
            xo[x][y] = 'x';
            for(int i=0;i<3; i++) {
                for(int j=0;j<3; j++) {
                    cout << xo[i][j] << " ";
                }
                cout << endl;
            }
        }
        return 0;
    }
    Decision:
    #include<iostream>
    using namespace std;
    //char d[9]={ '-', '-', '-', '-', '-', '-', '-', '-', '-'};
    char d[9]={};
    void clear(){
        for(int i=0; i<50; i++){
            cout<<endl;
        }
    }
    void clear_doska(){
        for(int i=0; i<9; i++){
            d[i]='-';
        }
    }
    void doska_player(){
        cout<<"ход игроков"<<endl;
        cout<<"-"<<d[6]<<"-|-"<<d[7]<<"-|-"<<d[8]<<"-"<<endl;
        cout<<"-"<<d[3]<<"-|-"<<d[4]<<"-|-"<<d[5]<<"-"<<endl;
        cout<<"-"<<d[0]<<"-|-"<<d[1]<<"-|-"<<d[2]<<"-"<<endl;
    }
    int doska(){
        cout<<"подсказка хода"<<endl;
        cout<<"-7-|-8-|-9-"<<endl;
        cout<<"-4-|-5-|-6-"<<endl;
        cout<<"-1-|-2-|-3-"<<endl;
        doska_player("");
        //cout<<"ход игроков"<<endl;
        //cout<<"-"<<d[6]<<"-|-"<<d[7]<<"-|-"<<d[8]<<"-"<<endl;
        //cout<<"-"<<d[3]<<"-|-"<<d[4]<<"-|-"<<d[5]<<"-"<<endl;
        //cout<<"-"<<d[0]<<"-|-"<<d[1]<<"-|-"<<d[2]<<"-"<<endl;
        int hod;
        cout<<"ваш ход: ";
        cin>>hod;
        while(hod>9 || hod<1 || d[hod-1]!='-'){
            cout<<"введите правильный ход: ";
            cin>>hod;
        }
        return hod;
    }
    int main(){
        clear_doska();
        int turn=0;
        for(int i=0; i<9; i++){
            clear();
            int hod=doska();
            cout<<"Вы ввели: "<<hod<<endl;
            if(i%2==0){
                d[hod-1]='x';
            }else{
                d[hod-1]='o';
            }
            turn++;
        }
        doska_player();
        return 0;
    }
    Decision:
    #include<iostream>
    #include<string>
    using namespace std;
    char d[9]={};
    void clear(){
        for(int i=0; i<50; i++){
            cout<<endl;
        }
    }
    void clear_doska(){
        for(int i=0; i<9; i++){
            d[i]='-';
        }
    }
    void doska_player(string indent){
        cout<<indent<<"-"<<d[6]<<"-|-"<<d[7]<<"-|-"<<d[8]<<"-"<<endl;
        cout<<indent<<"-"<<d[3]<<"-|-"<<d[4]<<"-|-"<<d[5]<<"-"<<endl;
        cout<<indent<<"-"<<d[0]<<"-|-"<<d[1]<<"-|-"<<d[2]<<"-"<<endl;
    }
    int doska(){
        cout<<"подсказка хода"<<endl;
        cout<<"-7-|-8-|-9-"<<endl;
        cout<<"-4-|-5-|-6-"<<endl;
        cout<<"-1-|-2-|-3-"<<endl;
        doska_player("");
        int hod;    
        cout<<"ваш ход: ";
        cin>>hod;
        while(hod>9 || hod<1 || d[hod-1]!='-'){
            cout<<"введите правильный ход: ";
            cin>>hod;
        }
        return hod;
    }
    bool finish_win(char player){
        int win[][3]={{0,1,2},{3,4,5},{6,7,8},{0,3,6},{1,4,7},{2,5,8},{6,4,2},{0,4,8}};
        for(int i=0; i<8; i++){
            int count=0;
            for(int j=0; j<3; j++){
                if(d[win[i][j]]==player){
                    count++;
                }
            }
            if(count==3){
                return true;
            }
        }
        return false;
    }
    char play_and_get_winner(){
        int turn=1;
        while(!finish_win('x') && !finish_win('o')){
            clear();
            int hod=doska();
            cout<<"Вы ввели: "<<hod<<endl;
            if(turn%2==1){
                d[hod-1]='x';
                if(finish_win('x')){
                    cout<<"player X: поздравляю, вы выйграли"<<endl;
                    return 'x';
                }
            }else{
                d[hod-1]='o';
                if(finish_win('o')){
                    cout<<"player O: поздравляю, вы выйграли"<<endl;
                    return 'o';
                }
            }
            turn++;
            if(turn==10){
                cout<<"Ничья"<<endl;
            }
        }
        return 'D';
    }
    int main(){
        cout<<"Welcome"<<endl;
        string reply="y";
        int x_wins=0, o_wins=0, ties=0;
        while(reply=="y"){
            clear_doska();
            char winner=play_and_get_winner();
            doska_player("\t");
            switch(winner){
                case 'x':
                    x_wins++;
                    break;
                case 'o':
                    o_wins++;
                    break;
                case 'D':
                    ties++;
                    break;
            }
            cout<<" Статистика Игрока Х: " <<x_wins<<", Игрока О: "<<o_wins<<" И нeчьи "<<ties<<endl;
            cout<<"Хотите продолжить?(y/n) ";
            cin>>reply;
            while(reply!="y" && reply!="n"){
                cout<<"Пожалуйста, введите правильный ответ(y/n) ";
                cin>>reply;
            }
        }
        return 0;
    }
    Task:
    Сапер
    Мальчику Васе очень нравится знаменитая игра "Сапер" ("Minesweeper").
    Один человек играет в "Сапера". Игра ведется на клетчатом поле (далее мы будем называть это картой) N×M (N строк, M столбцов). В K ячейках поля находятся мины, в остальных ячейках либо записывается число от 1 до 8 — количество мин в соседних ячейках, либо ничего не записывается, если в соседних ячейках нет мин. Ячейки являются смежными, если у них есть хотя бы одна общая точка, в одной ячейке не может быть более одной мины. Изначально все ячейки поля закрыты. Игрок может открыть ячейку за один ход. Если в открытой им ячейке есть мина, он проигрывает, в противном случае игроку показывается число, которое стоит в этой ячейке, и игра продолжается. Цель игры состоит в том, чтобы открыть все ячейки, в которых нет мин.
    У Васи есть эта игра на компьютере, но ему кажется, что все карточки, которые в ней есть, некрасивые и неинтересные. Поэтому он решил нарисовать свой собственный. Однако у него богатое воображение, а времени мало, и он хочет успеть нарисовать как можно больше карточек. Поэтому он просто выбирает N, M и K и расставляет мины на поле, после чего все остальные ячейки могут быть однозначно идентифицированы. Однако он не хочет тратить свое драгоценное время на определение оставшихся ячеек. Помогите ему!
    Decision:
    #include<iostream>
    #include<fstream>
    #include<ctime>
    #include<cstdlib>
    using namespace std;
    ifstream in("input.txt");
    ofstream out("output.txt");
    int main()
    {

        char massive[10][10]={
                {'.','.','.','.','.','.','.','.','.','.'},
                {'.','.','.','.','.','.','.','.','.','.'},
                {'.','.','.','.','.','.','.','.','.','.'},
                {'.','.','.','.','.','.','.','.','.','.'},
                {'.','.','.','.','.','.','.','.','.','.'},
                {'.','.','.','.','.','.','.','.','.','.'},
                {'.','.','.','.','.','.','.','.','.','.'},
                {'.','.','.','.','.','.','.','.','.','.'},
                {'.','.','.','.','.','.','.','.','.','.'},
                {'.','.','.','.','.','.','.','.','.','.'}
                };
        time_t now = time(NULL);
        srand(now);
        int x, y;
        for (int i=0; i<10; ){
            x = rand()%10;
            y = rand()%10;
            if (massive[x][y]=='*'){
                continue;
            }
            else {
                massive[x][y] ='*';
            }
           i++;
        }
        for (int i=0; i<10; i++){
            for (int j=0;j<10;j++)
            cout << massive[i][j] << " ";
            cout << endl;
        }

        return 0;
    }
    Task:
    Лабиринт с помощью двумерных массивов
    Decision:
    #include <iostream>
    #include <math.h>
    #include <clocale>
    using namespace std;
    int main()
    {
        setlocale(LC_CTYPE, "rus");
        int mas[33][20] = {
                            {1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,}, 
                            {1,2,1,0,0,1,0,1,2,2,2,1,1,1,1,0,0,0,0,1,},
                            {1,2,1,1,0,1,0,1,2,1,2,2,2,2,1,0,1,1,0,1,},
                            {1,2,2,2,2,2,2,1,2,1,1,1,1,2,1,0,0,1,0,1,},
                            {1,1,1,1,1,1,2,1,2,1,0,0,1,2,1,1,0,1,0,1,},
                            {1,0,0,1,0,0,2,2,2,1,1,0,0,2,0,0,0,1,0,1,},
                            {1,0,1,1,0,1,1,1,1,1,0,0,1,2,1,1,1,1,0,1,},
                            {1,0,0,0,0,0,0,0,0,1,1,1,1,2,1,0,0,0,0,1,},
                            {1,1,1,1,1,1,0,1,1,1,2,2,2,2,1,0,1,1,1,1,},
                            {1,1,0,0,0,1,0,0,1,1,2,1,1,1,1,0,0,0,0,1,},
                            {1,0,0,1,0,0,0,0,0,1,2,2,2,2,1,1,1,1,0,1,},
                            {1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,0,0,0,0,1,},
                            {1,2,2,2,2,2,2,2,2,2,2,2,2,2,1,0,1,1,1,1,},
                            {1,2,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,},
                            {1,2,1,0,0,0,1,2,2,2,1,0,0,0,0,0,1,1,0,1,},
                            {1,2,1,1,1,1,1,2,1,2,1,1,1,0,1,0,0,0,0,1,},
                            {1,2,1,2,2,2,1,2,1,2,2,2,1,1,1,1,1,1,1,1,},
                            {1,2,1,2,1,2,1,2,1,0,1,2,2,2,2,2,2,2,2,1,},
                            {1,2,1,2,1,2,1,2,1,0,1,1,1,1,1,1,1,1,2,1,},
                            {1,2,1,2,1,2,1,2,1,0,0,0,0,0,0,0,0,0,2,1,},
                            {1,2,1,2,1,2,2,2,1,0,1,1,1,1,1,1,0,1,2,1,},
                            {1,2,1,2,1,1,1,1,1,0,0,0,1,0,1,0,0,1,2,1,},
                            {1,2,1,2,2,1,0,0,1,1,1,0,0,0,1,0,1,1,2,1,},
                            {1,2,1,1,2,1,1,0,0,0,0,0,1,0,1,0,0,1,2,1,},
                            {1,2,1,1,2,1,0,0,1,1,1,1,1,1,1,1,1,1,2,1,},
                            {1,2,1,1,2,1,1,0,1,2,2,2,2,2,2,2,2,2,2,1,},
                            {1,2,1,1,2,1,0,0,1,2,1,1,1,1,1,1,1,1,1,1,},
                            {1,2,1,1,2,1,0,1,1,2,1,1,1,1,1,1,1,1,2,2,},
                            {1,2,1,1,2,1,0,0,1,2,1,1,2,2,2,2,2,2,2,1,},
                            {1,2,1,1,2,1,0,1,1,2,1,1,2,1,1,1,1,1,1,1,},
                            {1,2,1,1,2,1,0,0,1,2,1,1,2,1,0,0,0,1,0,1,},
                            {1,2,2,2,2,1,0,1,1,2,2,2,2,0,0,1,0,0,0,1,},
                            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,}
        };
        for (int i = 0; i < 33; i++)
        {
            for (int j = 0; j < 20; j++)
            {
                if (mas[i][j] == 1)
                {
                    cout <<"j";
                    cout <<"j";
                } else{
                     cout << "  ";
                }
            }
            cout << endl;
        }
        return 0;
    }    
    Task:
    Keyboard. For this letter of the English alphabet, you need to print the letter on the right on a standard keyboard. At the same time, the keyboard is closed, i.e. to the right of the letter «p» is the letter «a», from the letter «l» is the letter «z», and from the letter «m» — the letter
    Input: Первая строка входного файла INPUT.TXT содержит один символ — маленькую букву английского алфавита.
    Output: В выходной файл OUTPUT.TXT следует вывести букву стоящую справа от заданной буквы, с учетом замкнутости клавиатуры.
    Decision:
    #include<iostream>
    #include<fstream>
    #include<cmath>
    using namespace std;
    ifstream in("input.txt");
    ofstream out("output.txt");
    int main()
    {
        const char massive=26;
        char a[massive]={
            'q','w','e','r','t','y','u','i','o','p','a',
            's','d','f','g','h','j','k','l','z','x','c',
            'v','b','n','m'
        };
        char symbol;
        in>>symbol;
        if(symbol=='m'){
            out<<a[0];
        }
        else{
            for(int i=0; i<massive; i++){
                if(symbol==a[i]){
                    out<<a[i+1];
                }

            }
        }
        return 0;
    }
    Task:
    Поиск числа в отсортированном массиве
    Decision:
    $ cat Cpp-SearchingForANumberInASortedArray.cpp
    #include<iostream>
    #include<fstream>
    using namespace std;
    int main(){
        
        fstream f("Cpp-SearchingForANumberInASortedArray.txt");
        const int n=100;
        int a[n];
        for (int i=0; i<n; ++i){
            f>>a[i];
        }
        int x;
        cout<<"VVedite iskonoe chislo";
        cin>>x;
        for (int i=0; i<n; ++i){
            if (x==a[i]){
                cout<<"chislo" << x << " nahoditsia po indeksu "
                    <<i;
                break;
            }
        }
    }
    $ cat Cpp-SearchingForANumberInASortedArray.txt
    23
    3234
    45345
    34
    534
    5
    345
    34
    54
    35
    34
    5
    345
    34
    534
    5
    34
    55
    435
    4
    45
    34
    534
    5
    34
    5
    34
    43545
    34
    5345
    34
    5
    345
    34454323
    3
    2
    2
    3
    1
    34234
    23
    324
    23
    43
    4
    234
    23
    423
    4
    324
    23
    432
    4
    234
    23
    4
    234
    23
    423
    4
    23
    423
    4
    234
    23
    4
    234
    23
    4
    23
    423
    4
    23
    423
    4
    23
    423
    4
    23
    423
    465
    43
    4
    654
    6
    456
    45
    645
    6
    456
    5
    656
    4
    56
    46
    457
    6
    7
    454
    Task:
    Часы
    Decision:
    $ cat Clock.cpp
    #include<GL/glut.h>
    #include<cmath>
    #include<ctime>
    void display(){
            glClear(GL_COLOR_BUFFER_BIT);
            glBegin(GL_LINES);
        for(int i=0; i<12; ++i){
            float x=sin(2*M_PI/12*i);
            float y=cos(2*M_PI/12*i);
            glVertex2f(400*x, 400*y);
            glVertex2f(380*x, 380*y);
        }
        time_t t=time(0);
        tm *lt=localtime(&t);//kosiyak
        int h=lt -> tm_hour;
        int m=lt -> tm_min;
        int s=lt -> tm_sec;
        float x=sin(2*M_PI*(h*60+m)/12/60);
            float y=cos(2*M_PI*(h*60+m)/12/60);
            glVertex2f(0, 0);
            glVertex2f(250*x, 250*y);
        x=sin(2*M_PI*m/60);
            y=cos(2*M_PI*m/60);
            glVertex2f(0, 0);
            glVertex2f(350*x, 350*y);
        x=sin(2*M_PI*s/60);
            y=cos(2*M_PI*s/60);
            glVertex2f(0, 0);
            glVertex2f(370*x, 370*y);
        glEnd();
            glutSwapBuffers();
    }
    void timer(int=0){
            display();
            glutTimerFunc(10,timer,0);
    }
    int main(int argc, char **argv){
        glutInit(&argc, argv);
            glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
            glutInitWindowSize(400,400);
            glutInitWindowPosition(20,1050-400-20);
            glutCreateWindow("Clock");
            glClearColor(0,0,0,1.0);
            glMatrixMode(GL_PROJECTION);
            glLoadIdentity();
            glOrtho(-400,400,-400,400,-400,400);
            glutDisplayFunc(display);
            timer();
            glutMainLoop();
    }
    $ g++ Clock.cpp -o main -lglut -lGLU -lGL
    $ ./main
    Task:
    День программиста отмечается в 255-й день года (при этом 1 января считается нулевым днем). Требуется написать программу, которая определит дату (месяц и число григорианского календаря), на которую приходится День программиста в заданном году.
    В григорианском календаре високосным является:
    1. год, номер которого делится нацело на 400
    2. год, номер которого делится на 4, но не делится на 100
    В единственной строке входного файла INPUT.TXT записано целое число от 1 до 9999 включительно, которое обозначает номер года нашей эры. В единственную строку выходного файла OUTPUT.TXT нужно вывести дату Дня программиста в формате DD/MM/YYYY, где DD — число, MM — номер месяца (01 — январь, 02 — февраль, ..., 12 — декабрь), YYYY — год в десятичной записи.
    Примеры
    №    INPUT.TXT    OUTPUT.TXT
    1    2000        12/09/2000
    2    2009        13/09/2009     
    Decision:
    #include <iostream>
    #include <fstream>
    #include <cmath>
    #include <vector>
    #include <ctime>
    #include <cstdlib>
    using namespace std;
    ifstream in("Cpp-ProgrammesDay.txt");
    ofstream out("output.txt");
    int main() {
        int y;
            in>>y;
            if((y%400==0)||(y%100!=0&&y%4==0)) {
                if(y<10) {
                    out<<"12"<<"/"<<"09/000"<<y;
                }
                else if(y<100) {
                    out<<"12"<<"/"<<"09/00"<<y;
                }
                else if(y<1000) {
                    out<<"12"<<"/"<<"09/0"<<y;
                }
                else if(y<10000) {
                    out<<"12"<<"/"<<"09/"<<y;
                }
            }
            else{
                if(y<10){
                    out<<"13"<<"/"<<"09/000"<<y;
                }
                else if(y<100) {
                    out<<"13"<<"/"<<"09/00"<<y;
                }
                else if(y<1000) {
                        out<<"13"<<"/"<<"09/0"<<y;
                }
                else if(y<10000) {
                    out<<"13"<<"/"<<"09/"<<y;
                }
            }
        return 0;
    }
    Task:
    Доработаем класс CppStudio так, чтобы в нём можно было хранить дату в формате дд.мм.гг. Для изменения и просмотра даты реализуем соответственно set и get функции.
    Decision:
    #include <iostream>
    using namespace std;
    class CppStudio // имя класса
    {
    private: // спецификатор доступа private
        int day, // день
            month, // месяц
            year; // год
    public: // спецификатор доступа public
        void message() // функция (метод класса) выводящая сообщение на экран
        {
            cout << "\nwebsite: cppstudio.comntheme: Classes and Objects in C + +\n";
        }
        void setDate(int date_day, int date_month, int date_year) // установка даты в формате дд.мм.гг
        {
            day   = date_day; // инициализация день
            month = date_month; // инициализация месяц
            year  = date_year; // инициализация год
        }
        void getDate() // отобразить текущую дату
        {
            cout << "Date: " << day << "." << month << "." << year << endl;
        }
    }; // конец объявления класса CppStudio
    int main(int argc, char* argv[])
    {
        int day, month, year;
        cout << "Введите текущий день месяц и год!\n";
        cout << "день: ";     cin >> day;
        cout << "месяц: ";    cin >> month;
        cout << "год: ";  cin >> year;
        CppStudio objCppstudio; // объявление объекта
        objCppstudio.message(); // вызов функции класса message
        objCppstudio.setDate(day, month, year); // инициализация даты
        objCppstudio.getDate(); // отобразить дату
        return 0;
    }
    Task:
    Пример с классом Counter, который представляет секундомер и хранит количество секунд
    Decision:
    #include <iostream>
    using namespace std;
    class Counter{
    public:
        Counter(int sec)
        {
            seconds = sec;
        }
        void display()
        {
            cout << seconds << " seconds" << endl;
        }
        int seconds;
    };
    Counter operator + (Counter c1, Counter c2){
        return Counter(c1.seconds + c2.seconds);
    }
    int main(){
        Counter c1(20);
        Counter c2(10);
        Counter c3 = c1 + c2;
        c3.display();   // 30 seconds
        return 0;
    }
    Decision:
    #include <iostream>
    using namespace std;
    class Counter{
    public:
        Counter(int sec){
            seconds = sec;
        }
        void display(){
            cout << seconds << " seconds" << endl;
        }
        Counter operator + (Counter c2){
            return Counter(this->seconds + c2.seconds);
        }
        int operator + (int s){
            return this->seconds + s;
        }
        int seconds;
    };
    int main(){
        Counter c1(20);
        Counter c2(10);
        Counter c3 = c1 + c2;
        c3.display();           // 30 seconds
        int seconds = c1 + 25;  // 45
        cout << seconds << endl;
        return 0;
    }
    Task:
    Минимум и максимум. Вывести из массива минимум и еще минимум
    Decision:
    #include <iostream>
    #include <stdlib.h>
    using namespace std;
    int main()
    {
        system("chcp 1251>0");
        const int arraysize = 5;
        int a [arraysize] = {18, 3, 4, 7, 7};
        int min=a[0], k=0, min2=a[1], k2=1, q;
        if (min>min2){
            q=min;
            min=min2;
            min2=q;

            q=k;
            k=k2;
            k2=q;
        }

        for (int i = 2; i < arraysize; i++){
            if (a[i]<min){
                min2=min;
                k2=k;
                min=a[i];
                k=i;
            }
            else{
                if(a[i]<min2){
                    min2=a[i];
                    k2=i;
                }

            }
        }
         cout << "min2=" << min2 << endl;
         cout << "k2=" << k2 << endl;
         cout << "min=" << min << endl;
         cout << "k=" << k << endl;
        return 0;
    }
    Task:
    Генерация. пытаемся отгадать число у компа
    Decision:
    #include<iostream>
    #include<cstdlib>
    #include<ctime>
    using namespace std;
    int main (){
            srand(time(0));
            bool done;
            do{
                    int j, i=rand()%100;
                    while (true){
                            cout<<"Какое число вы загадали?";
                            cin>>j;
                            if(i>j){
                                    cout<<"Мое число больше"<<endl;
                            }
                            else{
                                    if(i<j){
                                            cout<<"Мое число меньше"<<endl;
                                    }
                                    else{
                                            cout<<"Ты угадал"<<endl;
                                            break;
                                    }
                            }
                    }
                    cout<<"Продолжить? (y/n) ";
                    char c;
                    done=(c!='y');
                    cin>>c;
            }while(!done);
    }
    Task:
    Теперь наоборот комп пытаеmся угадать у нас число
    Decision:
    #include<iostream>
    #include<cmath>
    using namespace std;
    float f(float x){
            cout<<(int)x<<endl;
            while (true){
                    cout<<"Правильно? (+/-/=) ";
                    char c;
                    cin>>c;
                    switch (c){
                            case '+': return +1;
                            case '-': return -1;
                            case '=': return 0;
                    }
                    cout<<"Вы ввели не правильный символ, повторите"<<endl;
            }
    }
    float n(float x1, float x2){
            float x=(x1+x2)/2;
            float y=f(x);
            while(abs(y)>0.001){
                    if(y>0){
                            x1=x;
                    }else{
                            x2=x;
                    }
                    x=(x1+x2)/2;
                    y=f(x);
            }
            return x;
    }
    int main(){
            cout<<"Вы загадали "<< (int)n(0,100);
    }
    Task:
    Заполнить матрицу 6*6 случайными целыми числами в диапазоне от 0 до 200. Вывести матрицу на экран в виде таблицы. После этого вывести матрицу в транспонированном виде. 
    Decision:
    #include<stdio.h>
    #include<stdlib.h>
    void main()
    {
        int i,j,m[6][6];
        for(i=0;i<6;i++)
        {
            for(j=0;j<6;j++)
            {
                m[i][j]=rand()%200;
                printf("%d\t",m[i][j]);
            }
            printf("\n");
        }
        printf("\n");
            for(i=0;i<6;i++)
            {
                    for(j=0;j<6;j++)
                    {
                printf("%d\t",m[j][i]);
                    }
                    printf("\n");
            }
    }
    Decision:
    #include<stdio.h>
    #include<stdlib.h>
    void main()
    {
        int i,j,m[6][6];
        for(i=0;i<6;i++)
        {
            for(j=0;j<6;j++)
            {
                m[i][j]=rand()%200;
                printf("%d\t",m[i][j]);
            }
            printf("\n");
        }
        /*printf("\n");
            for(j=0;j<6;j++)
            {
                    for(i=0;i<6;i++)
                    {
                printf("%d\t",m[i][j]);
                    }
                    printf("\n");
            }*/
    }
    Decision:
    #include<stdio.h>
    void main()
    {
        int i,j, matrix[6][6];
        for(i=0;i<6;i++)
        {
            for(j=0;j<6;j++)
            {
                printf("x");
            }
            printf("\n");
        }
    }
    Task:
    Заполнить вещественный массив из 20 элементов случайными вещественными числами в диапазoне от - 3.0 до +3.0. Вывести на экран пронумерованный столбец значений элементов массива. Определить и вывести номер и значение наибольшего элемента массива.
    Decision:
    #include<stdio.h>
    #include<stdlib.h>
    void main()
    {
        double arr[20];
        int i;
        srand(time(0));
        for(i=0;i<20;i++){
            arr[i]=-3.0+6.0*rand()/(float)RAND_MAX;
            printf("%d %5.2lf\n",i+1,arr[i]);
        }
        printf("\n");
        float max=arr[0];
        int number;
        for(i=0;i<20;i++){
            if (max<arr[i])
            {
                max=arr[i];
                number=i+1;
            }
        }
        printf("%5.2lf\t%d\n",max,number);
    }    
    Decision:
    #include<stdio.h>
    #include<stdlib.h>
    void main()
    {
        float arr[20];
        int i;
        for(i=0;i<20;i++){
            arr[i]=rand()%(3+3+1)-3;
            printf("%d %5.2lf\n",i+1,arr[i]);
        }
        printf("\n");
        float max=arr[0];
        for(i=0;i<20;i++){
            if (max<arr[i])
            {
                max=arr[i];
            }
        }
        printf("%lf\n",max);
    }    
    Decision:
    #include<stdio.h>
    #include<stdlib.h>
    void main()
    {
        float arr[20];
        int i;
        for(i=0;i<20;i++){
            arr[i]=rand()%(3+3+1)-3;
            printf("%d %5.2lf\n",i,arr[i]);
        }
    } 
    Decision:
    #include<stdio.h>
    #include<stdlib.h>
    void main()
    {
        float arr[20];
        int i;
        for(i=0;i<20;i++){
            arr[i]=rand()%(3+3+1)-3;
            printf("Array=%5.2lf\n",arr[i]);
        }
    } 
    Task:
    Пользуясь только указателями, заполнить массив десятью целыми случайными числами в диапазоне от 0 до 10. Вывести пронумерованный массив значений в столбец на экран. После этого напечатать номера, значения и адреса тех элементов, которые оказались четными. Использовать операцию %.
    Decision:
    #include<stdio.h>
    #include<stdlib.h>
    void main()
    {
        int i, arr[10];
        for(i=0; i<10; i++){
            arr[i]=rand()%11;
            printf("%d\t%d\n",i+1,*(arr+i));
        }
    }    
    Decision:
    #include<stdio.h>
    #include<stdlib.h>
    void main()
    {
        int i, arr[10];
        for(i=0; i<10; i++){
            arr[i]=rand()%11;
            if ((arr[i]%2)==0)
            {
                printf("%d\t%d\t%p\n",i+1,*(arr+i),arr+i);
            }
        }
    }    
    Decision:
    #include<stdio.h>
    #include<stdlib.h>
    void main()
    {
        int i, arr[10];
        for(i=0; i<10; i++){
            arr[i]=rand()%11;
            printf("%d\n",arr[i]);
        }
    }    
    Decision:
    #include<stdio.h>
    #include<stdlib.h>
    void main()
    {
        int i, arr[10];
        for(i=0; i<10; i++){
            arr[i]=rand()%11;
            printf("%d\t%d\t%p\n",i+1,*(arr+i),arr+i);
        }
    }    
    Task:
    Генерация псевдослучайных чисел
    Decision:
    #include <iostream>
    #include <fstream>
    #include <cmath>
    #include <vector>
    #include <ctime>
    #include <cstdlib>
    using namespace std;
    int main() {
           time_t now = time(NULL); // сколько секунд прошло с 01.01.1970 до текущего момента
            srand(now);
        cout << rand() << endl; // генерация и печать случайного числа от 0 до   RAND_MAX
        return 0;
    }
    Task:
    Разработаем программу, в которой создадим одномерный динамический массив, заполненный случайными числами.
    Decision:
    #include <iostream>
    #include <ctime>
    using namespace std;
    int main()
    {
        srand(time(0)); // генерация случайных чисел
            int *ptrarray = new int [10]; // создание динамического массива вещественных чисел на десять элементов
            for (int count = 0; count < 10; count++)
                    ptrarray[count] = (rand() % 10 + 1) / int((rand() % 10 + 1)); //заполнение массива случайными числами с масштабированием от 1 до 10
            cout << "array = ";
            for (int count = 0; count < 10; count++)
                    cout << ptrarray[count] << "    ";
            delete [] ptrarray; // высвобождение памяти
            cout << endl;
        return 0;
    }
    Task:
    Заполнить выделенную память случайными целыми числами двумя способами:
    1. работая с выделенной памятью как с обычным массивом (переменными с индексом),
    2. используя только указатели. В обоих случаях вывести результат на экран.
    Освободить выделенную память и снова вывести массив на экран.
    Decision:
    #include <iostream>
    using namespace std;
    int main()
    {
        //Распределить динамически память под N чисел целого типа, где N – значение, вводимое с клавиатуры.
        int N, *block, i;
        cin >> N;
        block = new int[N];
        cout << block << endl;
        /*Заполнить выделенную память случайными целыми числами двумя способами (В обоих случаях вывести результат на экран):
        а) работая с выделенной памятью как с обычным массивом (переменными с индексом)*/
        for (i=0; i<N; i++)
        {
            block[i]=rand();
            cout << block[i] << endl;
        }
        //б) используя только указатели.
        for (int i=0; i<N; i++)
        {
            *(block+i)=rand();
            cout << *(block+i) << endl;
        }
        //Освободить выделенную память
        delete block;
        // и снова вывести массив на экран
        for (int i=0; i<N; i++)
        {
            cout << block[i] << "   ";
        }
        return 0;
    }
    Task:
    Функция ввода пароля.
    Decision:
    #include <iostream>
    #include <string>
    using namespace std;
    void check_pass (string password){
        string valid_pass="qwerty123";
        if (password==valid_pass){
            cout<<"Доступ разрешен." << endl;
        } else {
            cout << "Неверный пароль!" << endl;
        }
    }
    int main()
    {
        setlocale(LC_CTYPE, "rus");
        string user_pass;
        cout<< "Введите пароль: ";
        getline(cin, user_pass);
        check_pass(user_pass);
        return 0;
    }
    Task:
    Шифрование ключевых фраз с помощью функции crypt    
    Decision:
    $ ./project hunter2 '$1$42'
    $1$42$7l6Y3xT5282XmZrtDOF9f0
    $ ./project hunter2 '$6$42' $6$42$OqFFAVnI3gTSYG0yI9TZWX9cpyQzwIop7HwpG1LLEsNBiMr4w6OvLX1KDa./UpwXfrFk1i...
    $ ./project hunter2 '$1$hunter2'
    $1$hunter2$YVxrxDmidq7Xf8Gdt6qM2.
    $ gcc C-EncryptionOfKeyPhrasesUsingCrypt.c -o project -lcrypt
    $ ./project
    $ cat C-EncryptionOfKeyPhrasesUsingCrypt.c
    #include <stdio.h>
    #define __USE_XOPEN
    #include <unistd.h>
    int main(int argc, char** argv)
    {
     if(argc==3)
       {
           printf("%s\n", crypt(argv[1],argv[2]));
       }
       else
       {
           printf("Использование: MyCrypt $пароль $salt\n" );
       }
      return 0;
    }
    Task:
    Добавление и удаление имен в списке
    Decision:
    #include <iostream>
    #include <cmath>
    #include <fstream>
    #include <cstring>
    #include <vector>
    using namespace std;
    int main() {
        int q;
        string w;
        vector <string> name;
        for (;true;){ // besconechni cikl
            cout<<"1-dobavit\n"<<"2-udalit\n"<<"3-pechay\n";
            cin>>q;
            if(q==1){
                cout<<"vvedite imya:";
                cin>>w;
                name.push_back(w);
            }
            else{
                if(q==2){
                    cout<<"vvedite imya:";
                    cin>>q;
                    name.erase(name.begin() + (q-1));
                }
                else{
                    if(q==3){
                        for(int i=0;i<name.size();i++){
                            cout<<i+1<<" "<<name[i]<<endl;
                        }
                    }
                }
            }
        }
        return 0;
    }
    Task:
    Преобразовать следующую программу:
    #include<stdio.h>
    #include<conio.h>
    void main()
    {
     int j; char k; double a;
     j=21; k=’m’; a=3.1415926;
     printf("PRINT INTEGER j =%d\n",j);
     printf("PRINT SYMBOL k=%c\n" ,k);
     printf("PRINT LONG FLOAT a=%lf \n",a);
     printf("PRINT STRING");
     getch();
    }
    так, чтобы в первой строке было напечатано:
    Value of symbol k = R, Value of integer j = -14,
     во второй строке:
    Value of float variable а is 1.652730E+02
    в экспоненциальной форме (по формату %е), а в третьей строке текст:
     END of PROGRAMM.
    Decision:
    #include<stdio.h>
    #include<curses.h>
    void main()
    {
      int j; char k; double a;
      j=21; k='R'; a=1.652730E+02;
      printf("Value of symbol k=%c\n",k);
      printf("Value of float variable a is %e\n",a);
      printf("End of programm\n");
      getch();
    } 
    Task:
    Составить программу, печатающую таблицу факториалов от 0 до 7. В программе должна быть создана и использована функция, вычисляющая факториал своего аргумента
    Decision:
    #include<stdio.h>
    /*void main()
    {
        int n;
        for (int i=1;i<=7;i++)
        {
            //printf("%d\n",i);
            f=f*i;
            printf("%d!\t%d\n",i,f);
        }
    }*/
    int fact(int n, int j)
    {
        /*n=n*j;
        return n;*/
        return n*j;
    }
    void main(void)
    {
        int f=1, i;
        for (i=1;i<=7;i++)
        {
            f=fact(f,i);
            printf("%d!\t%d\n",i,f);
        }
    }
    Task:
    Составить программу вычисления факториала n! = 1*2*3*...*n тремя способами - с использованием цикла while, цикла do-while и цикла for.
    Decision:
    #include<stdio.h>
    void main()
    {
      int n,j=1,i=1;
      printf("Введите число: ");scanf("%d",&n);
      while (i<=n)
      {
        j*=i;
        i++;
      }
      printf("%d!=%d\n",n,j);
    } 
    Decision:
    #include<stdio.h>
    void main()
    {
      int n,j,i;
      printf("Введите число: ");scanf("%d",&n);
      for (j=1,i=1; i<=n; i++)
      {       
        j*=i;
      }
      printf("%d!=%d\n",n,j);
    }
    Decision:
    #include<stdio.h>
    void main()
    {
      int n,j=1,i=1;
      printf("Введите число: ");scanf("%d",&n);
      do
      {
        j*=i; i++;
      }
      while (i<=n);
      printf("%d!=%d\n",n,j);
    } 
    Task:
    Написать программу, которая формирует единичную матрицу и выводит ее на экран
    Decision:
    #include<stdio.h>
    #include<string.h>
    void main()
    {
        int i,j,M[5][5];
        for(i=0;i<5;i++){
            for(j=0;j<5;j++){
                if(i==j){
                    M[i][j]=1;
                } else{
                    M[i][j]=0;
                }
            }
        }
        for(i=0;i<5;i++){
            for(j=0;j<5;j++){
                printf("%d",M[i][j]);
            }
            printf("\n");
        }
    }
    Task:
    Напишите программу, которая отсортирует числа формата double хранящихся в текстовом файле размером 1Гб (одно число в одной строке).
    Пример
    ●   8.33891e+307
    ●   1.26192e+308
    ●   
    ●   8.19572e+307    
    ●   ...
    ●   0
    1.64584e+304
    Программа должна использовать не более 100Мб оперативной памяти, и работать не дольше 25-30 минут (на 2Гц современном одноядерном процессоре).
    Обязательные параметры: <имя файла не отсортированного> <имя файла отсортированного> 
    Также должен быть написан генератор не отсортированного 1Гб файла с числами формата double
    Task:
    Написать собственную реализацию shared_mutex поддерживающий рекурсию. Не используя C14. 
    Использовать платформонезависимый код – средства stl и boost (но не использовать  shared_mutex).
    Task:
    Написать алгоритм поиска текста по маске с wildcards (можно просто функцию куда передается два параметра - строка поиска и строка с маской). Wildcards содержит символы * и ?
    Task:
    Представим что есть интерфейс к БД: 
    struct i_db
    {
        bool begin_transaction();
        bool commit_transaction();
        bool abort_transaction();
        std::string get(const std::string& key);
        std::string set(const std::string& key, const std::string& data);
        std::string delete(const std::string& key);
    }
    Написать реализацию кеша для БД, обратить внимание на многопоточность и на транзакционную модель работы с БД. 
    Source:
    https://www.youtube.com/playlist?list=PLlqeq-isbP97wcBzq4YhOfaEHY59gGyQx
    https://www.youtube.com/playlist?list=PLvItDmb0sZw_l5qKMLTjePXX485CWKVNe
    https://www.youtube.com/watch?v=2Scwa8KuNQU&t=79s
    https://acmp.ru/index.asp?main=tasks
    https://www.youtube.com/playlist?list=PL30625C8F5ADD5BB4
    https://linuxconfig.org/how-to-install-g-the-c-compiler-on-ubuntu-20-04-lts-focal-fossa-linux
    http://www.codebind.com/linux-tutorials/install-opengl-ubuntu-linux/
    https://prognote.ru/articles/how-to-install-qt-5-on-linux-ubuntu

Django
  Task:
  Разработка сайта
	Task:
	Для улучшения своего сайта, в котором публиковал все решенные мной интересные задачи, разработал еще один проект с разработкой сайта, в котором применялись следующие инструменты и библиотеки: python, django, pillow, html, css, sqlite3. Также поменял домен в timeweb.
	Decision:
	$ mkdir djsite
	$ cd djsite/
	$ python3 -m venv venv
	$ source venv/bin/activate
	$ pip install django
	$ django-admin startproject coolsite
	$ cd coolsite/
	$ python manage.py runserver
	$ python manage.py runserver 4000
	$ python manage.py startapp women
	$ vim coolsite/settings.py
	$ cat coolsite/settings.py
	...
	INSTALLED_APPS = [
	    'django.contrib.admin',
	    'django.contrib.auth',
	    'django.contrib.contenttypes',
	    'django.contrib.sessions',
	    'django.contrib.messages',
	    'django.contrib.staticfiles',
	    'women.apps.WomenConfig'
	]
	...
	$ vim women/views.py
	$ cat women/views.py
	from django.http import HttpResponse
	from django.shortcuts import render
	# Create your views here.
	def index(request): #HttpRequest
		return HttpResponse("Страница приложения Women")
	def categories(request): #HttpRequest
		return HttpResponse("<h1>Статьи по категориям</h1>")
	$ vim coolsite/urls.py
	$ cat coolsite/urls.py
	...
	from django.contrib import admin
	from django.urls import path, include
	#from women.views import index
	from women.views import *
	urlpatterns = [
	    path('admin/', admin.site.urls),
	    #path('women/', index), #http://127.0.0.1:8000/women/
	    #path('', index), #http://127.0.0.1:8000/
	    #path('cats/', categories), #http://127.0.0.1:8000/cats/
	    path('women/', include('women.urls')), #http://127.0.0.1:8000/women/
	]
	$ touch women/urls.py
	$ vim women/urls.py
	$ cat women/urls.py
	from django.urls import path
	from .views import *
	urlpatterns = [
		path('', index), #http://127.0.0.1:8000/women/
		path('cats/', categories), #http://127.0.0.1:8000/women/cats/
	]
	$ python manage.py runserver
	$ vim coolsite/urls.py
	$ cat coolsite/urls.py
	...
	urlpatterns = [
	    path('admin/', admin.site.urls),
	    #path('women/', index), #http://127.0.0.1:8000/women/
	    #path('', index), #http://127.0.0.1:8000/
	    #path('cats/', categories), #http://127.0.0.1:8000/cats/
	    #path('women/', include('women.urls')), #http://127.0.0.1:8000/women/
	    path('', include('women.urls')), #http://127.0.0.1:8000/women/
	]
	handler404 = pageNotFound
	$ vim women/urls.py
	$ cat women/urls.py
	from django.urls import path, re_path
	from .views import *
	urlpatterns = [
		#path('', index), #http://127.0.0.1:8000/women/
		#path('home/', index, name='home'), #http://127.0.0.1:8000/
		path('', index, name='home'), #http://127.0.0.1:8000/
		#path('cats/', categories), #http://127.0.0.1:8000/women/cats/
		#path('cats/', categories), #http://127.0.0.1:8000/cats/
		path('cats/<int:catid>/', categories), #http://127.0.0.1:8000/cats/1/
		re_path(r'^archive/(?P<year>[0-9]{4})/', archive), #http://127.0.0.1:8000/archive/2020/
	]
	$ vim women/views.py
	$ cat women/views.py
	from django.http import HttpResponse, HttpResponseNotFound, Http404
	from django.shortcuts import render, redirect
	# Create your views here.
	def index(request): #HttpRequest
		return HttpResponse("Страница приложения Women")
	#def categories(request):
		#return HttpResponse("<h1>Статьи по категориям</h1>")
	def categories(request, catid):
		#print(request.GET) #http://127.0.0.1:8000/cats/1/?name=Gagarina&type=pop
		#if(request.GET):
			#print(request.GET) #http://127.0.0.1:8000/cats/1
		if(request.POST):
			print(request.POST) 
		return HttpResponse(f"<h1>Статьи по категориям</h1><p>{catid}</p>")
	def archive(request, year):
		if int(year)>2020:
			#raise Http404() #http://127.0.0.1:8000/archive/2022/
			#return redirect('/', )
			return redirect('home', permanent=True)
		return HttpResponse(f"<h1>Архив по годам</h1><p>{year}</p>") #http://127.0.0.1:8000/archive/2020/
	def pageNotFound(request, exception):
		return HttpResponseNotFound("<h1>Страница не найдена</h1>")
	$ vim coolsite/settings.py
	$ cat coolsite/settings.py
	...
	#DEBUG = True
	DEBUG = False
	#ALLOWED_HOSTS = []
	ALLOWED_HOSTS = ['127.0.0.1']
	...
	$ python manage.py runserver
	$ vim women/models.py
	$ cat women/models.py
	from django.db import models
	# Create your models here.
	class Women(models.Model):
		"""docstring for Women"""
		title=models.CharField(max_length=255)
		content=models.TextField(blank=True)
		photo=models.ImageField(upload_to="photos/%Y/%m/%d/")
		time_create=models.DateTimeField(auto_now_add=True)
		time_update=models.DateTimeField(auto_now=True)
		is_published=models.BooleanField(default=True)
	$ vim coolsite/settings.py
	$ cat coolsite/settings.py
	import os
	from pathlib import Path
	...
	DEBUG = True
	#DEBUG = False
	#ALLOWED_HOSTS = []
	...
	DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
	MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
	MEDIA_URL = '/media/'
	$ vim coolsite/urls.py
	$ cat coolsite/urls.py
	from django.conf.urls.static import static
	from django.contrib import admin
	from coolsite import settings
	from django.urls import path, include
	#from women.views import index
	from women.views import *
	...
	if settings.DEBUG:
	    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
	handler404 = pageNotFound
	$ python manage.py makemigrations
	$ python manage.py sqlmigrate women 0001
	$ python manage.py migrate
	$ sqlite3 db.sqlite3
	sqlite> SELECT * FROM sqlite_master where type='table';
	$ python manage.py shell
	>>> from women.models import Women
	>>> Women(title='Anjeline Joli', content='Биография Anjeline Joli')
	>>> w1=_
	>>> w1
	>>> w1.save()
	>>> w1
	>>> w1.id
	>>> w1.title
	>>> w1.time_create
	>>> w1.pk
	>>> from django.db import connection
	>>> connection.queries
	>>> w2.save()
	>>> connection.queries
	>>> w3=Women()
	>>> w3.title='Juli Roberts'
	>>> w3.content='Биография Juli Roberts'
	>>> w3.save()
	>>> connection.queries
	>>> # objects
	>>> Women.objects
	>>> w4=Women.objects.create(title='Uma Turman', content='Биография Uma Turman')
	>>> w4
	>>> Women.objects.create(title='Kira Nightly', content='Биография Kira Nightly')
	>>> Women.objects.all()
	>>> exit()
	$ vim women/models.py
	$ cat women/models.py
	...
		def __str__(self):
			return self.title
	$ python manage.py shell
	>>> from women.models import Women
	>>> Women.objects.all()
	>>> w=_
	>>> w[0]
	>>> w[1]
	>>> w[0].title
	>>> len(w)
	>>> for wi in w:
	...     print(wi.title)
	>>> Women.objects.filter(title='Enn Hatay')
	>>> from django.db import connection
	>>> connection.queries
	>>> Women.objects.filter(pk=2)
	>>> Women.objects.filter(pk__gte=2)
	>>> Women.objects.exclude(pk=2)
	>>> Women.objects.get(pk=2)
	>>> Women.objects.filter(pk__lte=4).order_by('title')
	>>> Women.objects.order_by('title')
	>>> Women.objects.order_by('time_update')
	>>> Women.objects.order_by('-time_update')
	>>> wu=Women.objects.get(pk=2)
	>>> wu.title='Margo Robbi'
	>>> wu.content='Биография Margo Robbi'
	>>> wu.save()
	>>> connection.queries
	>>> wd=Women.objects.filter(pk__gte=4)
	>>> wd
	>>> wd.delete()
	>>> exit()
	$ mkdir women/templates
	$ mkdir women/templates/women
	$ touch women/templates/women/index.html
	$ vim women/templates/women/index.html
	$ cat women/templates/women/index.html
	{% extends 'women/base.html' %}
	{% block content %}
	<h1>{{title}}</h1>
	<!--<p>Содержимое главной страницы</p>-->
	<ul>
		{% for p in posts %}
		<li>
			<h2>{{p.title}}</h2>
			<p>{{p.content}}</p>
			<hr>
		</li>
		{% endfor %}
	</ul>
	{% endblock %}
	$ touch women/templates/women/about.html
	$ vim women/templates/women/about.html
	$ cat women/templates/women/about.html
	{% extends 'women/base.html' %}
	{% block content %}
	<h1>{{title}}</h1>
	<p>Содержимое главной страницы</p>
	{% endblock %}
	$ touch women/templates/women/base.html
	$ vim women/templates/women/base.html
	$ cat women/templates/women/base.html
	<!DOCTYPE html>
	<html lang="en"><head><meta charset="utf-8">
		<title>{{ title }}</title>
	</head><body>
	{% block mainmenu %}
	<ul>
		{% for m in menu %}
		<li>{{m}}</li>
		{% endfor %}
	</ul>
	{% endblock mainmenu %}
	{% block content %}
	{% endblock %}
	</ul>
	</body></html>
	$ vim women/views.py
	$ cat women/views.py
	from django.http import HttpResponse, HttpResponseNotFound, Http404
	from django.shortcuts import render, redirect
	from .models import *
	# Create your views here.
	#def index(request): #HttpRequest
	#	return HttpResponse("Страница приложения Women")
	menu=["О сайте", "Добавить статью", "Обратная связь", "Войти"]
	def index(request):
		#return render(request, 'women/index.html', {'title':'Главная страница'})
		posts=Women.objects.all()
		return render(request, 'women/index.html', {'posts':posts, 'menu':menu, 'title':'Главная страница'})
	def about(request):
		return render(request, 'women/about.html', {'menu':menu, 'title':'О сайте'})
	...
	$ vim women/urls.py
	$ cat women/urls.py
	...
	urlpatterns = [
		#path('', index), #http://127.0.0.1:8000/women/
		#path('home/', index, name='home'), #http://127.0.0.1:8000/
		path('', index, name='home'), #http://127.0.0.1:8000/
		#path('cats/', categories), #http://127.0.0.1:8000/women/cats/
		#path('cats/', categories), #http://127.0.0.1:8000/cats/
		#path('cats/<int:catid>/', categories), #http://127.0.0.1:8000/cats/1/
		#re_path(r'^archive/(?P<year>[0-9]{4})/', archive), #http://127.0.0.1:8000/archive/2020/
		path('about/', about, name='about'), #http://127.0.0.1:8000/
	]
	$ python manage.py runserver	
	$ mkdir women/static
	$ mkdir women/static/women
	$ mkdir women/static/women/css
	$ touch women/static/women/css/style.css
	html, body {
		font-family: 'Arial';
		margin: 0;
		padding: 0;
		height: 100%;
		width: 100%;
		color: #444;
	}
	a {
		color: #0059b2;
		text-decoration: none;
	}
	a:hover {
		color: #CC0000;
		text-decoration: underline;
	}
	img {max-width: 600px; height: auto;}
	img.img-article-left {
		max-width: 300px;
		height: auto;
		float: left;
		padding: 0 10px 10px 0;
	}
	img.img-article-left.thumb {
		max-width: 150px;
		height: auto;
	}
	p.link-read-post {
		text-align: right;
	}
	p.link-read-post a {
		padding: 10px;
		min-width: 100px;
		background: #333671;
		color: #fff;
		text-decoration: none;
	}
	div.article-panel {
	    background: #eee;
	    padding: 5px 10px 5px 10px;
	    box-sizing: border-box;
	    overflow: hidden;
	    color: #555;
	}
	div.article-panel p.first {
	    margin: 0;
	    float: left;
	}
	div.article-panel p.last {
	    margin: 0;
	    float: right;
	}
	ul.list-articles {
		list-style: none;
		margin: 0;
		padding: 0;
	}
	ul.list-articles li {
		border-bottom: 1px solid #ccc;
	}
	.table-page {
		width: 100%;
		height: 100%;
		vertical-align: top;
	}
	.table-page tr {height: 100%;}
	.clear {clear: both;}
	.header {
		background: #3F4137;
		height: 60px;
	}
	.logo {
		background: url('../images/logo.png') no-repeat 10px 5px;
		width: 70px;
		height: 60px;
	}
	ul.mainmenu {
		list-style: none;
		margin: 0;
		padding: 0;
		height: 60px;
		color: #fdc073;
		font-size: 20px;
		overflow: hidden;
	}
	ul.mainmenu li {
		float: left;
		margin: 18px 40px 0 30px;
	}
	ul.mainmenu li.logo {margin: 0;}
	ul.mainmenu li.last {float: right;}
	ul.mainmenu li a {
		color: #fdc073;
		text-decoration: none;
	}
	ul.mainmenu li a:hover {
		color: #FDA83D;
	}
	.panelitems {
		text-align: center;
	}
	ul.langitem {
		list-style: none;
		display: inline-block;
		margin: 30px;
		padding: 0;
		max-width: 300px
	}
	ul.langitem li {
		margin: 10px 0 0 0;
		width: 100%;
	}
	ul.langitem li.image {
		margin: 0;
		text-align: center;
		width: 100%;
		height: 250px;
		overflow: hidden;
	}
	ul.langitem li.descr {
		color: #777;
		height: 170px;
		overflow: hidden;
	}
	ul.langitem li a {
		color: #fdc073;
		text-decoration: none;
		font-size: 20px;
	}
	ul.langitem li a:hover {
		color: #FDA83D;
	}
	div.button {
		background: #3F4137;
		max-width: 200px;
		margin: 0 auto;
		padding: 5px 20px 5px 20px;
		border-radius: 10px;
		font-size: 20px;
	}
	.table-content {
		width: 100%;
		min-height: 100%;
		height: 100%;
	}
	.left-chapters {
		margin: 0;
		background: #eee;
		border-right: 1px solid #ccc;
		min-height: 100%;
	}
	.left-chapters ul {
		width: 230px;
		min-height: 100%;
		margin: 0;
		padding: 20px 10px 10px 20px;
		list-style: none;
		font-size: 20px;
	}
	.left-chapters ul li {
		margin: 30px 0 0 0;
		color: #999;
	}
	.left-chapters ul li.selected {color: #0059b2; }
	.left-chapters ul li a {
		color: #444;
		text-decoration: none;
	}
	.left-chapters ul li a:hover { color: #CC0000; }
	.left-chapters ul li.share {margin: 60px 0 0 0;}
	.left-chapters ul li.share p {margin: 30px 0 30px 0;}
	.left-chapters ul li.share a {
		display: inline-block;
		width: 40px;
		height: 40px;
		margin: 0 20px 0 0;
	}
	.left-chapters ul li.share a.share-yt {
		width: 100%;
		height: 30px;
		background: url('../images/share_yt.png') no-repeat 0 0
	}
	.left-chapters ul li.share a.share-yt:hover {
		width: 100%;
		height: 30px;
		background: url('../images/share_yt.png') no-repeat 0 -30px
	}
	.content {
		padding: 40px 20px 20px 40px;
		width: 100%;
		box-sizing: border-box;
	}
	ul.breadcrumbs {
		margin: 0;
		padding: 0;
		list-style: none;
		font-size: 20px;
		font-family: Sans-serif, Arial, Tahoma;
	}
	ul.breadcrumbs li {
		display: inline-block;
	}
	ul.breadcrumbs li a {
		color: #0059b2;
		text-decoration: none;
	}
	ul.breadcrumbs li a:hover { color: #CC0000; }
	ul.breadcrumbs li:after{
		padding: 0 10px 0 10px;
		content: "\2192";
	}
	ul.breadcrumbs li.last:after {content: "";}
	ul.control {
		margin: 0;
		padding: 60px 0 0 0;
		list-style: none;
		font-family: Sans-serif, Arial, Tahoma;
		font-size: 18px;
		width: 100%;
	}
	ul.control li {	float: left; padding: 0 0 0 10px;}
	ul.control li.first:before {content: "\2190"; padding: 0 10px 0 0;}
	ul.control li.last {float: right; padding: 0 40px 0 0;}
	ul.control li.last:after {content: "\2192"; padding: 0 0 0 10px;}
	ul.control li a { color: #0059b2; text-decoration: none; }
	ul.control li a:hover { color: #CC0000; }
	ul.content-table {
		margin: 0;
		padding: 60px 0 0 30px;
		list-style: none;
		font-family: Sans-serif, Arial, Tahoma;
		font-size: 28px;
	}
	ul.content-table li {
		margin: 0 0 40px 0;
	}
	ul.content-table li a {
		color: #BB5715;
		text-decoration: none;
	}
	ul.content-table li a:hover {color: #F0711C;}
	.content-text {
		margin: 60px 0 0 30px;
		color: #000;
		font-size: 20px;
		font-family: Yandex Sans Display Light;
	}
	.content-text h1 {font-size: 32px;}
	ul.lang-list {
		list-style: none;
		margin: 0;
		padding: 14px 0 0 0;
		background: #3F4137;
		width: 100%;
		height: 50px;
		border-top: 1px solid #959A82;
		box-sizing: border-box;
		font-size: 18px;
		font-family: Sans-serif, Arial, Tahoma;
	}
	ul.lang-list li {
		display: inline-block;
		margin-left: 40px;
	}
	ul.lang-list li.selected {color: #fdc073; border-bottom: 1px solid #fdc073;}
	ul.lang-list li a {
		color: #eee;
		text-decoration: none;
	}
	ul.lang-list li a:hover {color: #fdc073;}
	.topic-subject .topic-line {
		border-bottom: 1px solid #CC0000;
		margin-top: -16px;
	}
	.topic-subject .topic-text {
		display: inline-block;
		font-size: 28px;
		color: #777;
		padding: 0 10px 0 10px;
		margin-left: 30px;
		background: #fff;
		font-family: Sans-serif, Arial, Tahoma;
	}
	.list-topic {
		margin: 40px 0 60px 0;
		font-family: Sans-serif, Arial, Tahoma;
	}
	.list-topic p {
		margin: 0;
		font-size: 28px;
	}
	.list-topic ol {
		columns: 2;
		-webkit-columns: 2;
		column-gap: 40px;
	}
	.list-topic ol li {
		display: list-item;
		margin: 10px 10px 0 0px;
		padding: 0 0 0 10px;
	}
	.list-topic ol li a {
		color: #0059b2;
		text-decoration: none;
	}
	.list-topic ol li a:hover {color: #CC0000;}
	.highlight {
		max-width: 350px;
		padding: 0 10px 0 10px;
		margin: 0;
		overflow: auto;
		overflow-y: hidden;
		background: #f0f0f0;
	}
	.highlight p { margin: 0; }
	.highlight .block {
		width: 100%;
		margin: 0;
	}
	.highlight .block p { margin: 0; }
	.quote {
		background: url('../images/blockquote.png') no-repeat 0 10px;
		padding: 5px 5px 5px 70px;
		font-family: Sans-serif, Arial, Tahoma;
		font-style: italic;
	}
	#footer {
		box-sizing: border-box;
		background: #3F4137;
		padding: 5px;
		color: #aaa;
		font-size: 14px;
		font-family: Verdana, Geneva, Arial, Helvetica;
		text-align: left;
		overflow: hidden;
	}
	#footer a {
		text-decoration: underline;
		color: #aaa;
	}
	.form-input {
	    width: 300px;
	    font-size: 16px;
	}
	.form-label {
	    display: inline-block;
	    min-width: 150px;
	    vertical-align: top;
	}
	.form-error ul {
	    list-style: none;
	    padding: 0;
	    color: #CC0000;
	}
	.form-button {
	    min-width: 200px;
	    font-size: 16px;
	}
	$ mkdir women/static/women/js
	$ mkdir women/static/women/images
	$ ls women/static/women/images
	blockquote.png  btn_yt.png  logo.png  main.ico  share_yt.png  smallmenu.png
	$ vim coolsite/settings.py
	$ cat coolsite/settings.py
	...
	# Static files (CSS, JavaScript, Images)
	# https://docs.djangoproject.com/en/4.2/howto/static-files/
	STATIC_URL = '/static/'
	STATIC_ROOT = os.path.join(BASE_DIR, 'static')
	STATICFILES_DIRS=[]
	# Default primary key field type
	...
	$ vim women/templates/women/base.html
	$ cat women/templates/women/base.html
	{% load static %}
	<!DOCTYPE html>
	<html>
	<head>
		<title>{{title}}</title>
		<link type="text/css" href="{% static 'women/css/style.css' %}" rel="stylesheet" />
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
		<link rel="shortcut icon" href="{% static 'women/images/main.ico' %}" type="image/x-icon"/>
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
	</head>
	<body>
	<table class="table-page" border=0 cellpadding="0" cellspacing="0">
	<tr><td valign=top>
	{% block mainmenu %}
			<div class="header">
				<ul id="mainmenu" class="mainmenu">
				<li class="logo"><a href="#"><div class="logo"></div></a></li>
	{% for m in menu %}
		{% if not forloop.last %}
				<li><a href="#">{{m.title}}</a></li>
		{% else %}
				<li class="last"><a href="#">{{m.title}}</a></li>
		{% endif %}
	{% endfor %}
				</ul>
				<div class="clear"></div>
			</div>
	{% endblock mainmenu %}
	<table class="table-content" border=0 cellpadding="0" cellspacing="0">
	<tr>
	<!-- Sidebar слева -->
		<td valign="top" class="left-chapters">
		<ul id="leftchapters">
			<li class="selected">Все категории</li>
			<li><a href="#">Актрисы</a></li>
			<li><a href="#">Певицы</a></li>
			<li><a href="#">Спортсменки</a></li>
			<li class="share">
			<p>Наш канал</p>
			<a class="share-yt" href="https://www.youtube.com/channel/UClJzWfGWuGJL2t-3dYKcHTA/playlists" target="_blank" rel="nofollow"></a>
			</li>
		</ul>
	</td>
	<!-- Конец Sidebar'а -->
	<td valign="top" class="content">
		<!-- Хлебные крошки -->
		{% block breadcrumbs %}
		{% endblock %}
	<!-- Блок контента -->
		<div class="content-text">
	{% block content %}
	{% endblock %}
		</div>
	<!-- Конец блока контента -->
	</td></tr></table>
	</td></tr>
	<!-- Footer -->
	<tr><td valign=top>
		<div id="footer">
			<p>&copy; 2021 Частичное или полное копирование информации с данного сайта для распространения на других ресурсах, в том числе и бумажных, строго запрещено.</p>
		</div>
	</td></tr></table>
	<!-- Конец footer'а и страницы -->
	</body>
	</html>
	$ vim women/templates/women/index.html
	$ cat women/templates/women/index.html
	{% extends 'women/base.html' %}
	{% block content %}
	<ul class="list-articles">
		{% for p in posts %}
				<li><h2>{{p.title}}</h2>
		{% autoescape on %}
		{{p.content|linebreaks|truncatewords:50}}
		{% endautoescape %}
				<div class="clear"></div>
				<p class="link-read-post"><a href="#">Читать пост</a></p>
				</li>
		{% endfor %}
	</ul>
	{% endblock %}
	$ python manage.py runserver
	$ vim women/templates/women/index.html
	$ cat women/templates/women/index.html
	...
		{% for p in posts %}
				<li><h2>{{p.title}}</h2>
		{% autoescape on %}
		{{p.content|linebreaks|truncatewords:50}}
		{% endautoescape %}
				<div class="clear"></div>
				<p class="link-read-post">
					<!--<a href="#">-->
					<!--<a href="{% url 'post' p.pk %}">-->
					<a href="{{ p.get_absolute_url }}">
						Читать пост
					</a>
				</p>
				</li>
		{% endfor %}
	...
	$ vim women/templates/women/base.html
	$ cat women/templates/women/base.html
	...
	{% block mainmenu %}
			<div class="header">
				<ul id="mainmenu" class="mainmenu">
				<li class="logo">
					<!--<a href="#">-->
					<a href="{% url 'home' %}">
						<div class="logo"></div>
					</a>
				</li>
	{% for m in menu %}
		{% if not forloop.last %}
				<li><a href="{% url m.url_name %}">{{m.title}}</a></li>
		{% else %}
				<li class="last"><a href="{% url m.url_name %}">{{m.title}}</a></li>
		{% endif %}
	{% endfor %}
				</ul>
				<div class="clear"></div>
			</div>
	{% endblock mainmenu %}
	...
	$ vim women/views.py
	$ cat women/views.py
	from django.http import HttpResponse, HttpResponseNotFound, Http404
	from django.shortcuts import render, redirect
	from .models import *
	# Create your views here.
	#def index(request): #HttpRequest
	#	return HttpResponse("Страница приложения Women")
	#menu=["О сайте", "Добавить статью", "Обратная связь", "Войти"]
	menu=[{'title':"О сайте", 'url_name':'about'}, 
		{'title':"Добавить статью", 'url_name':'add_page'},
		{'title':"Обратная связь", 'url_name':'contact'},
		{'title':"Войти", 'url_name':'login'}]
	def index(request):
		#return render(request, 'women/index.html', {'title':'Главная страница'})
		posts=Women.objects.all()
		context={'posts':posts, 
			'menu':menu, 
			'title':'Главная страница'}
		return render(request, 'women/index.html', context=context)
	def about(request):
		return render(request, 'women/about.html', {'menu':menu, 'title':'О сайте'})
	#def categories(request):
		#return HttpResponse("<h1>Статьи по категориям</h1>")
	#def categories(request, catid):
		#print(request.GET) #http://127.0.0.1:8000/cats/1/?name=Gagarina&type=pop
		#if(request.GET):
			#print(request.GET) #http://127.0.0.1:8000/cats/1
		#if(request.POST):
			#print(request.POST) 
		#return HttpResponse(f"<h1>Статьи по категориям</h1><p>{catid}</p>")
	#def archive(request, year):
		#if int(year)>2020:
			#raise Http404() #http://127.0.0.1:8000/archive/2022/
			#return redirect('/', )
			#return redirect('home', permanent=True)
		#return HttpResponse(f"<h1>Архив по годам</h1><p>{year}</p>") #http://127.0.0.1:8000/archive/2020/
	def pageNotFound(request, exception):
		return HttpResponseNotFound("<h1>Страница не найдена</h1>")
	def addpage(request):
		return HttpResponse("Добавление статьи")
	def contact(request):
		return HttpResponse("Обратная связь")
	def login(request):
		return HttpResponse("Авторизация")
	def show_post(request, post_id):
		return HttpResponse(f"Отображение статьи с id = {post_id}")
	$ vim women/urls.py
	$ cat women/urls.py
	...
	urlpatterns = [
		#path('', index), #http://127.0.0.1:8000/women/
		#path('home/', index, name='home'), #http://127.0.0.1:8000/
		path('', index, name='home'), #http://127.0.0.1:8000/
		#path('cats/', categories), #http://127.0.0.1:8000/women/cats/
		#path('cats/', categories), #http://127.0.0.1:8000/cats/
		#path('cats/<int:catid>/', categories), #http://127.0.0.1:8000/cats/1/
		#re_path(r'^archive/(?P<year>[0-9]{4})/', archive), #http://127.0.0.1:8000/archive/2020/
		path('about/', about, name='about'), #http://127.0.0.1:8000/
		path('addpage/', addpage, name='add_page'),
		path('contact/', contact, name='contact'),
		path('login/', login, name='login'),
		path('post/<int:post_id>/', show_post, name='post'),
	]
	$ vim women/models.py
	$ cat women/models.py
	from django.db import models
	from django.urls import reverse
	...
		def get_absolute_url(self):
			return reverse('post', kwargs={'post_id':self.pk})
	$ python manage.py runserver
	$ vim women/models.py
	$ cat women/models.py
	...
	class Women(models.Model):
		"""docstring for Women"""
		title=models.CharField(max_length=255)
		content=models.TextField(blank=True)
		photo=models.ImageField(upload_to="photos/%Y/%m/%d/")
		time_create=models.DateTimeField(auto_now_add=True)
		time_update=models.DateTimeField(auto_now=True)
		is_published=models.BooleanField(default=True)
		cat=models.ForeignKey('Category', on_delete=models.PROTECT, null=True)
		def __str__(self):
			return self.title
		def get_absolute_url(self):
			return reverse('post', kwargs={'post_id':self.pk})
	class Category(models.Model):
		name=models.CharField(max_length=100, db_index=True)
		def __str__(self):
			return self.name	
	$ python manage.py makemigrations
	$ python manage.py migrate
	$ sqlite3 db.sqlite3
	sqlite> SELECT * FROM sqlite_master where type='table';
	$ python manage.py shell
	>>> from women.models import *
	>>> Category.objects.create(name='Актрисы')
	>>> Category.objects.create(name='Певицы')
	>>> w_list=Women.objects.all()
	>>> w_list.update(cat_id=1)
	>>> exit()
	$ sqlite3 db.sqlite3
	sqlite> select * from women_women;
	sqlite> select * from women_category;
	$ python manage.py shell
	>>> from women.models import *
	>>> Women.title
	>>> w1=Women(title='t1',content='c1',cat_id=1)
	>>> type(w1.title)
	>>> type(Women.title)
	>>> type(w1.cat)
	>>> w1.pk
	>>> print(w1.id,w1.time_create,w1.time_update)
	>>> from django.db import connection
	>>> connection.queries
	>>> exit()
	$ python manage.py shell
	>>> from women.models import *
	>>> w1=Women(title='t1',content='c1',cat_id=1)
	>>> from django.db import connection
	>>> connection.queries
	>>> w1.cat
	>>> connection.queries
	>>> w2=Women.objects.get(pk=2)
	>>> connection.queries
	>>> w2.title
	>>> w2.cat
	>>> connection.queries
	>>> w2.cat.name
	>>> exit()
	$ vim women/models.py
	$ cat women/models.py
	from django.db import models
	from django.urls import reverse
	# Create your models here.
	class Women(models.Model):
		"""docstring for Women"""
		title=models.CharField(max_length=255)
		content=models.TextField(blank=True)
		photo=models.ImageField(upload_to="photos/%Y/%m/%d/")
		time_create=models.DateTimeField(auto_now_add=True)
		time_update=models.DateTimeField(auto_now=True)
		is_published=models.BooleanField(default=True)
		cat=models.ForeignKey('Category', on_delete=models.PROTECT, null=True)
		def __str__(self):
			return self.title
		def get_absolute_url(self):
			return reverse('post', kwargs={'post_id':self.pk})
	class Category(models.Model):
		name=models.CharField(max_length=100, db_index=True)
		def __str__(self):
			return self.name
		def get_absolute_url(self):
			return reverse('category', kwargs={'cat_id':self.pk})
	$ vim women/urls.py
	$ cat women/urls.py
	from django.urls import path, re_path
	from .views import *
	urlpatterns = [
		#path('', index), #http://127.0.0.1:8000/women/
		#path('home/', index, name='home'), #http://127.0.0.1:8000/
		path('', index, name='home'), #http://127.0.0.1:8000/
		#path('cats/', categories), #http://127.0.0.1:8000/women/cats/
		#path('cats/', categories), #http://127.0.0.1:8000/cats/
		#path('cats/<int:catid>/', categories), #http://127.0.0.1:8000/cats/1/
		#re_path(r'^archive/(?P<year>[0-9]{4})/', archive), #http://127.0.0.1:8000/archive/2020/
		path('about/', about, name='about'), #http://127.0.0.1:8000/
		path('addpage/', addpage, name='add_page'),
		path('contact/', contact, name='contact'),
		path('login/', login, name='login'),
		path('post/<int:post_id>/', show_post, name='post'),
		path('category/<int:cat_id>/', show_category, name='category'),
	]
	$ vim women/views.py
	$ cat women/views.py
	from django.http import HttpResponse, HttpResponseNotFound, Http404
	from django.shortcuts import render, redirect
	from .models import *
	# Create your views here.
	#def index(request): #HttpRequest
	#	return HttpResponse("Страница приложения Women")
	#menu=["О сайте", "Добавить статью", "Обратная связь", "Войти"]
	menu=[{'title':"О сайте", 'url_name':'about'}, 
		{'title':"Добавить статью", 'url_name':'add_page'},
		{'title':"Обратная связь", 'url_name':'contact'},
		{'title':"Войти", 'url_name':'login'}]
	def index(request):
		#return render(request, 'women/index.html', {'title':'Главная страница'})
		posts=Women.objects.all()
		cats=Category.objects.all()
		context={'posts':posts, 
			'cats':cats,
			'menu':menu, 
			'title':'Главная страница',
			'cat_selected':0}
		return render(request, 'women/index.html', context=context)
	def about(request):
		return render(request, 'women/about.html', {'menu':menu, 'title':'О сайте'})
	#def categories(request):
		#return HttpResponse("<h1>Статьи по категориям</h1>")
	#def categories(request, catid):
		#print(request.GET) #http://127.0.0.1:8000/cats/1/?name=Gagarina&type=pop
		#if(request.GET):
			#print(request.GET) #http://127.0.0.1:8000/cats/1
		#if(request.POST):
			#print(request.POST) 
		#return HttpResponse(f"<h1>Статьи по категориям</h1><p>{catid}</p>")
	#def archive(request, year):
		#if int(year)>2020:
			#raise Http404() #http://127.0.0.1:8000/archive/2022/
			#return redirect('/', )
			#return redirect('home', permanent=True)
		#return HttpResponse(f"<h1>Архив по годам</h1><p>{year}</p>") #http://127.0.0.1:8000/archive/2020/
	def pageNotFound(request, exception):
		return HttpResponseNotFound("<h1>Страница не найдена</h1>")
	def addpage(request):
		return HttpResponse("Добавление статьи")
	def contact(request):
		return HttpResponse("Обратная связь")
	def login(request):
		return HttpResponse("Авторизация")
	def show_post(request, post_id):
		return HttpResponse(f"Отображение статьи с id = {post_id}")
	#def show_category(request, cat_id):
		#return HttpResponse(f"Отображение категории с id = {cat_id}")
	def show_category(request, cat_id):
		posts=Women.objects.filter(cat_id=cat_id)
		cats=Category.objects.all()
		if len(posts)==0:
			raise Http404()
		context={'posts':posts,
			'cats':cats,
			'menu':menu,
			'title':'Главная страница',
			'cat_selected':cat_id,}
		return render(request, 'women/index.html', context=context)
	$ vim women/templates/women/base.html
	$ cat women/templates/women/base.html
	{% load static %}
	<!DOCTYPE html>
	<html>
	<head>
		<title>{{title}}</title>
		<link type="text/css" href="{% static 'women/css/style.css' %}" rel="stylesheet" />
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
		<link rel="shortcut icon" href="{% static 'women/images/main.ico' %}" type="image/x-icon"/>
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
	</head>
	<body>
	<table class="table-page" border=0 cellpadding="0" cellspacing="0">
	<tr><td valign=top>
	{% block mainmenu %}
			<div class="header">
				<ul id="mainmenu" class="mainmenu">
				<li class="logo">
					<!--<a href="#">-->
					<a href="{% url 'home' %}">
						<div class="logo"></div>
					</a>
				</li>
	{% for m in menu %}
		{% if not forloop.last %}
				<li><a href="{% url m.url_name %}">{{m.title}}</a></li>
		{% else %}
				<li class="last"><a href="{% url m.url_name %}">{{m.title}}</a></li>
		{% endif %}
	{% endfor %}
				</ul>
				<div class="clear"></div>
			</div>
	{% endblock mainmenu %}
	<table class="table-content" border=0 cellpadding="0" cellspacing="0">
	<tr>
	<!-- Sidebar слева -->
		<td valign="top" class="left-chapters">
		<ul id="leftchapters">
	{% if cat_selected == 0 %}
			<li class="selected">Все категории</li>
	{% else %}
			<li><a href="{% url 'home' %}">Все категории</a></li>
	{% endif %}
	{% for c in cats %}
		{% if c.pk == cat_selected %}
			<li class="selected">{{c.name}}</li>
		{% else %}
			<li><a href="{{ c.get_absolute_url }}">{{c.name}}</a></li>
		{% endif %}
	{% endfor %}
			<li class="share">
			<p>Наш канал</p>
			<a class="share-yt" href="https://www.youtube.com/channel/UClJzWfGWuGJL2t-3dYKcHTA/playlists" target="_blank" rel="nofollow"></a>
			</li>
		</ul>
	</td>
	<!-- Конец Sidebar'а -->
	<td valign="top" class="content">
		<!-- Хлебные крошки -->
		{% block breadcrumbs %}
		{% endblock %}
	<!-- Блок контента -->
		<div class="content-text">
	{% block content %}
	{% endblock %}
		</div>
	<!-- Конец блока контента -->
	</td></tr></table>
	</td></tr>
	<!-- Footer -->
	<tr><td valign=top>
		<div id="footer">
			<p>&copy; 2021 Частичное или полное копирование информации с данного сайта для распространения на других ресурсах, в том числе и бумажных, строго запрещено.</p>
		</div>
	</td></tr></table>
	<!-- Конец footer'а и страницы -->
	</body>
	</html>
	$ vim women/templates/women/index.html
	$ cat women/templates/women/index.html
	{% extends 'women/base.html' %}
	{% block content %}
	<ul class="list-articles">
		{% for p in posts %}
				<li>
					<div class="article_panel">
						<p class="first">Категория: {{p.cat}}</p>
						<p class="last">Дата: {{p.time_update|date:"d-m-Y H:i:s"}}</p>
					</div>
					<h2>{{p.title}}</h2>
		{% autoescape on %}
		{{p.content|linebreaks|truncatewords:50}}
		{% endautoescape %}
					<div class="clear"></div>
					<p class="link-read-post">
						<!--<a href="#">-->
						<!--<a href="{% url 'post' p.pk %}">-->
						<a href="{{ p.get_absolute_url }}">
							Читать пост
						</a>
					</p>
				</li>
		{% endfor %}
	</ul>
	{% endblock %}
	$ python manage.py runserver
	$ vim coolsite/settings.py
	$ cat coolsite/settings.py
	...
	# Internationalization
	# https://docs.djangoproject.com/en/4.2/topics/i18n/
	#LANGUAGE_CODE = 'en-us'
	LANGUAGE_CODE = 'ru'
	TIME_ZONE = 'UTC'
	USE_I18N = True
	USE_TZ = True
	...
	$ python manage.py createsuperuser
	$ vim women/admin.py
	$ cat women/admin.py
	from django.contrib import admin
	from .models import *
	# Register your models here.
	class WomenAdmin(admin.ModelAdmin):
	    list_display = ('id', 'title', 'time_create', 'photo', 'is_published')
	    list_display_links = ('id', 'title')
	    search_fields = ('title', 'content')
	class CategoryAdmin(admin.ModelAdmin):
	    list_display = ('id', 'name')
	    list_display_links = ('id', 'name')
	    search_fields = ('name',)
	admin.site.register(Women, WomenAdmin)
	admin.site.register(Category, CategoryAdmin)
	$ vim women/models.py
	$ cat women/models.py
	from django.db import models
	from django.urls import reverse
	# Create your models here.
	class Women(models.Model):
		"""docstring for Women"""
		title=models.CharField(max_length=255, verbose_name="Заголовок")
		content=models.TextField(blank=True, verbose_name="Текст статьи")
		photo=models.ImageField(upload_to="photos/%Y/%m/%d/", verbose_name="Фото")
		time_create=models.DateTimeField(auto_now_add=True, verbose_name="Время создания")
		time_update=models.DateTimeField(auto_now=True, verbose_name="Время изменения")
		is_published=models.BooleanField(default=True, verbose_name="Публикация")
		cat=models.ForeignKey('Category', on_delete=models.PROTECT, null=True, verbose_name="Категории")
		def __str__(self):
			return self.title
		def get_absolute_url(self):
			return reverse('post', kwargs={'post_id':self.pk})
		class Meta:
			verbose_name='Известные женщины'
			verbose_name_plural='Известные женщины'
			#ordering=['time_create','title']
			ordering=['-time_create','title']
	class Category(models.Model):
		name=models.CharField(max_length=100, db_index=True, verbose_name="Категория")
		def __str__(self):
			return self.name
		def get_absolute_url(self):
			return reverse('category', kwargs={'cat_id':self.pk})
		class Meta:
			verbose_name='Категория'
			verbose_name_plural='Категории'
			ordering=['id']
	$ vim women/apps.py
	$ cat women/apps.py
	from django.apps import AppConfig
	class WomenConfig(AppConfig):
	    default_auto_field = 'django.db.models.BigAutoField'
	    name = 'women'
	    verbose_name='Женщины мира'
	$ python manage.py makemigrations
	$ python manage.py migrate
	$ vim women/templates/women/index.html
	$ cat women/templates/women/index.html
	{% extends 'women/base.html' %}
	{% block content %}
	<ul class="list-articles">
		{% for p in posts %}
				<li>
					<div class="article_panel">
						<p class="first">Категория: {{p.cat}}</p>
						<p class="last">Дата: {{p.time_update|date:"d-m-Y H:i:s"}}</p>
					</div>
	{% if p.photo %}
					<p><img class="img-article-left thumb" src="{{p.photo.url}}"></p>
	{% endif %}
					<h2>{{p.title}}</h2>
		{% autoescape on %}
		{{p.content|linebreaks|truncatewords:50}}
		{% endautoescape %}
					<div class="clear"></div>
					<p class="link-read-post">
						<!--<a href="#">-->
						<!--<a href="{% url 'post' p.pk %}">-->
						<a href="{{ p.get_absolute_url }}">
							Читать пост
						</a>
					</p>
				</li>
		{% endfor %}
	</ul>
	{% endblock %}
	$ vim women/admin.py
	$ cat women/admin.py
	from django.contrib import admin
	from .models import *
	# Register your models here.
	class WomenAdmin(admin.ModelAdmin):
	    list_display = ('id', 'title', 'time_create', 'photo', 'is_published')
	    list_display_links = ('id', 'title')
	    search_fields = ('title', 'content')
	    list_editable = ('is_published',)
	    list_filter = ('is_published', 'time_create')
	class CategoryAdmin(admin.ModelAdmin):
	    list_display = ('id', 'name')
	    list_display_links = ('id', 'name')
	    search_fields = ('name',)
	admin.site.register(Women, WomenAdmin)
	admin.site.register(Category, CategoryAdmin)
	$ python manage.py runserver
	$ vim women/views.py
	$ cat women/views.py
	...
	def index(request):
		#return render(request, 'women/index.html', {'title':'Главная страница'})
		posts=Women.objects.all()
		#cats=Category.objects.all()
		context={'posts':posts, 
			#'cats':cats,
			'menu':menu, 
			'title':'Главная страница',
			'cat_selected':0}
		return render(request, 'women/index.html', context=context)
	...
	def show_category(request, cat_id):
		posts=Women.objects.filter(cat_id=cat_id)
		#cats=Category.objects.all()
		if len(posts)==0:
			raise Http404()
		context={'posts':posts,
			#'cats':cats,
			'menu':menu,
			'title':'Главная страница',
			'cat_selected':cat_id,}
		return render(request, 'women/index.html', context=context)
	$ mkdir women/templatetags
	$ touch women/templatetags/__init__.py
	$ touch women/templatetags/women_tags.py
	$ vim women/templatetags/women_tags.py
	$ cat women/templatetags/women_tags.py
	from django import template
	from women.models import *
	register=template.Library()
	@register.simple_tag(name='getcats')
	def get_categories(filter=None):
		#return Category.objects.all()
		if not filter:
			return Category.objects.all()
		else:
			return Category.objects.filter(pk=filter)
	@register.inclusion_tag('women/list_categories.html')
	#def show_categories():
	def show_categories(sort=None, cat_selected=0):
		#cats=Category.objects.all()
		#return {"cats": cats}
		if not sort:
			cats = Category.objects.all()
		else:
			cats = Category.objects.order_by(sort)
		return {"cats":cats, "cat_selected":cat_selected}
	$ vim women/templates/women/base.html
	$ cat women/templates/women/base.html
	...
	<!-- Sidebar слева -->
		<td valign="top" class="left-chapters">
			<ul id="leftchapters">
	{% if cat_selected == 0 %}
				<li class="selected">Все категории</li>
	{% else %}
				<li><a href="{% url 'home' %}">Все категории</a></li>
	{% endif %}
	{% show_categories cat_selected=cat_selected %}
				<li class="share"><p>Наш канал</p><a class="share-yt" href="https://www.youtube.com/channel/UClJzWfGWuGJL2t-3dYKcHTA/playlists" target="_blank" rel="nofollow"></a></li>
			</ul>
		</td>
	...
	$ touch women/templates/women/list_categories.html
	$ vim women/templates/women/list_categories.html
	$ cat women/templates/women/list_categories.html
	{% for c in cats %}
		{% if c.pk == cat_selected %}
			<li class="selected">{{c.name}}</li>
		{% else %}
			<li><a href="{{ c.get_absolute_url }}">{{c.name}}</a></li>
		{% endif %}
	{% endfor %}
	$ python manage.py runserver
	$ vim women/views.py
	$ cat women/views.py
	from django.http import HttpResponse, HttpResponseNotFound, Http404
	from django.shortcuts import render, redirect, get_object_or_404
	from .models import *
	...
	#def show_post(request, post_id):
	def show_post(request, post_slug):
		#return HttpResponse(f"Отображение статьи с id = {post_id}")
		#post=get_object_or_404(Women, pk=post_id)
		post=get_object_or_404(Women, slug=post_slug)
		context={'post':post,
			'menu':menu,
			'title':post.title,
			'cat_selected':post.cat_id,}
		return render(request, 'women/post.html', context=context)
	...
	$ touch women/templates/women/post.html
	$ vim women/templates/women/post.html
	$ cat women/templates/women/post.html
	{% extends 'women/base.html' %}
	{% block content %}
	<h1>{{post.title}}</h1>
	{% if post.photo %}
	<p><img class="img-article-left thumb" src="{{post.photo.url}}"></p>
	{% endif %}
	{{post.content|linebreaks}}
	{% endblock %}
	$ vim women/models.py
	$ cat women/models.py
	...
	class Women(models.Model):
		"""docstring for Women"""
		title=models.CharField(max_length=255, verbose_name="Заголовок")
		slug=models.SlugField(max_length=255, unique=True, db_index=True, verbose_name="URL")
		content=models.TextField(blank=True, verbose_name="Текст статьи")
		photo=models.ImageField(upload_to="photos/%Y/%m/%d/", verbose_name="Фото")
		time_create=models.DateTimeField(auto_now_add=True, verbose_name="Время создания")
		time_update=models.DateTimeField(auto_now=True, verbose_name="Время изменения")
		is_published=models.BooleanField(default=True, verbose_name="Публикация")
		#cat=models.ForeignKey('Category', on_delete=models.PROTECT, null=True, verbose_name="Категории")
		cat=models.ForeignKey('Category', on_delete=models.PROTECT, verbose_name="Категории")
		def __str__(self):
			return self.title
		def get_absolute_url(self):
			return reverse('post', kwargs={'post_slug':self.slug})
		...
	class Category(models.Model):
		name=models.CharField(max_length=100, db_index=True, verbose_name="Категория")
		slug=models.SlugField(max_length=255, unique=True, db_index=True, verbose_name="URL")
		...
	$ vim women/admin.py
	$ cat women/admin.py
	...
	class WomenAdmin(admin.ModelAdmin):
	    list_display = ('id', 'title', 'time_create', 'photo', 'is_published')
	    list_display_links = ('id', 'title')
	    search_fields = ('title', 'content')
	    list_editable = ('is_published',)
	    list_filter = ('is_published', 'time_create')
	    prepopulated_fields = {"slug": ("title",)}
	class CategoryAdmin(admin.ModelAdmin):
	    list_display = ('id', 'name')
	    list_display_links = ('id', 'name')
	    search_fields = ('name',)
	    prepopulated_fields = {"slug": ("name",)}
	...
	$ vim women/urls.py
	$ cat women/urls.py
	...
	urlpatterns = [
		#path('', index), #http://127.0.0.1:8000/women/
		#path('home/', index, name='home'), #http://127.0.0.1:8000/
		path('', index, name='home'), #http://127.0.0.1:8000/
		#path('cats/', categories), #http://127.0.0.1:8000/women/cats/
		#path('cats/', categories), #http://127.0.0.1:8000/cats/
		#path('cats/<int:catid>/', categories), #http://127.0.0.1:8000/cats/1/
		#re_path(r'^archive/(?P<year>[0-9]{4})/', archive), #http://127.0.0.1:8000/archive/2020/
		path('about/', about, name='about'), #http://127.0.0.1:8000/
		path('addpage/', addpage, name='add_page'),
		path('contact/', contact, name='contact'),
		path('login/', login, name='login'),
		#path('post/<int:post_id>/', show_post, name='post'),
		path('post/<slug:post_slug>/', show_post, name='post'),
		path('category/<int:cat_id>/', show_category, name='category'),
	]
	$ rm -rf women/migrations/000*.py
	$ rm -rf db.sqlite3
	$ python manage.py makemigrations
	$ python manage.py migrate
	$ python manage.py createsuperuser
	$ python manage.py runserver
	Decision:
	$ vim women/views.py
	$ cat women/views.py
	from django.http import HttpResponse, HttpResponseNotFound, Http404
	from django.shortcuts import render, redirect, get_object_or_404
	from .forms import *
	from .models import *
	...
		return HttpResponseNotFound("<h1>Страница не найдена</h1>")
	def addpage(request):
		#return HttpResponse("Добавление статьи")
		#return render(request, 'women/addpage.html', {'menu':menu, 'title':'Добавление статьи'})
		#form=AddPostForm()
		if request.method=='POST':
			form=AddPostForm(request.POST)
			if form.is_valid():
				#print(form.cleaned_data)
				try:
					Women.objects.create(**form.cleaned_data)
					return redirect('home')
				except:
					form.add_error(None,'Ошибка добавления поста')
		else:
			form=AddPostForm()
		return render(request, 'women/addpage.html', {'form':form,'menu':menu, 'title':'Добавление статьи'})
	def contact(request):
		...
	$ touch women/templates/women/addpage.html
	$ vim women/templates/women/addpage.html
	$ cat women/templates/women/addpage.html
	{% extends 'women/base.html' %}
	{% block content %}
	<h1>{{title}}</h1>
	<form action="{% url 'add_page' %}" method="post">
		{% csrf_token %}
		<div class="form-error">{{ form.non_field_errors }}</div>
		{% for f in form %}
		<p><label class="form-label" for="{{ f.id_for_label }}">{{f.label}}:</label>{{ f }}</p>
		<div class="form-error">{{ f.errors }}</div>
		{% endfor %}
		<button type="submit">Добавить</button>
	</form>
	{% endblock %}
	$ touch women/forms.py
	$ vim women/forms.py
	$ cat women/forms.py
	from django import forms
	from .models import *
	class AddPostForm(forms.Form):
	    title=forms.CharField(max_length=255, label="Заголовок", widget=forms.TextInput(attrs={'class':'form-input'}))
	    slug=forms.SlugField(max_length=255, label="URL")
	    content=forms.CharField(widget=forms.Textarea(attrs={'cols':60, 'rows':10}), label="Контент")
	    is_published=forms.BooleanField(label="Публикация", required=False, initial=True)
	    cat=forms.ModelChoiceField(queryset=Category.objects.all(), label="Категория", empty_label="Категория не выбрана")
	$ python manage.py runserver
	Decision:
	$ vim women/forms.py
	$ cat women/forms.py
	from django import forms
	from django.core.exceptions import ValidationError
	from .models import *
	#class AddPostForm(forms.Form):
	    #title=forms.CharField(max_length=255, label="Заголовок", widget=forms.TextInput(attrs={'class':'form-input'}))
	    #slug=forms.SlugField(max_length=255, label="URL")
	    #content=forms.CharField(widget=forms.Textarea(attrs={'cols':60, 'rows':10}), label="Контент")
	    #is_published=forms.BooleanField(label="Публикация", required=False, initial=True)
	    #cat=forms.ModelChoiceField(queryset=Category.objects.all(), label="Категория", empty_label="Категория не выбрана")
	class AddPostForm(forms.ModelForm):
	    def __init__(self, *args, **kwargs):
	        super().__init__(*args, **kwargs)
	        self.fields['cat'].empty_label="Категория не выбрана"
	    class Meta:
	        model=Women
	        #fields='__all__'
	        fields=['title', 'slug', 'content', 'photo', 'is_published', 'cat']
	        widgets={
	            'title':forms.TextInput(attrs={'class':'form-input'}),
	            'content':forms.Textarea(attrs={'cols':60,'rows':10}),
	        }
	    def clean_title(self):
	        title=self.cleaned_data['title']
	        if len(title)>200:
	            raise ValidationError('Длина превышает 200 символов')
	        return title
	$ vim women/views.py
	$ cat women/views.py
	...
	def addpage(request):
		#return HttpResponse("Добавление статьи")
		#return render(request, 'women/addpage.html', {'menu':menu, 'title':'Добавление статьи'})
		#form=AddPostForm()
		if request.method=='POST':
			#form=AddPostForm(request.POST)
			form=AddPostForm(request.POST, request.FILES)
			if form.is_valid():
				#print(form.cleaned_data)
				#try:
					#Women.objects.create(**form.cleaned_data)
				form.save()
				return redirect('home')
				#except:
				#	form.add_error(None,'Ошибка добавления поста')
		else:
			form=AddPostForm()
		return render(request, 'women/addpage.html', {'form':form,'menu':menu, 'title':'Добавление статьи'})
	...
	$ vim women/templates/women/addpage.html
	$ cat women/templates/women/addpage.html
	...
	<h1>{{title}}</h1>
	<form action="{% url 'add_page' %}" method="post" enctype="multipart/form-data">
		{% csrf_token %}
		...
	$ python manage.py runserver
	Decision:
	$ vim women/views.py
	$ cat women/views.py
	from django.http import HttpResponse, HttpResponseNotFound, Http404
	from django.shortcuts import render, redirect, get_object_or_404
	from django.urls import reverse_lazy
	from django.views.generic import ListView, DetailView, CreateView
	from .forms import *
	from .models import *
	...
	#def index(request):
		#return render(request, 'women/index.html', {'title':'Главная страница'})
		#posts=Women.objects.all()
		#cats=Category.objects.all()
		#context={'posts':posts, 
			#'cats':cats,
			#'menu':menu, 
			#'title':'Главная страница',
			#'cat_selected':0}
		#return render(request, 'women/index.html', context=context)
	class WomenHome(ListView):
		model=Women
		template_name='women/index.html'
		context_object_name='posts'
		#extra_context={'title':'Главная страница'}
		def get_context_data(self, *, object_list=None, **kwargs):
			context=super().get_context_data(**kwargs)
			context['menu']=menu
			context['title']='Главная страница'
			context['cat_selected']=0
			return context
		def get_queryset(self):
			return Women.objects.filter(is_published=True)
	...
	#def addpage(request):
		#return HttpResponse("Добавление статьи")
		#return render(request, 'women/addpage.html', {'menu':menu, 'title':'Добавление статьи'})
		#form=AddPostForm()
		#if request.method=='POST':
			#form=AddPostForm(request.POST)
			#form=AddPostForm(request.POST, request.FILES)
			#if form.is_valid():
				#print(form.cleaned_data)
				#try:
					#Women.objects.create(**form.cleaned_data)
				#form.save()
				#return redirect('home')
				#except:
				#	form.add_error(None,'Ошибка добавления поста')
		#else:
			#form=AddPostForm()
		#return render(request, 'women/addpage.html', {'form':form,'menu':menu, 'title':'Добавление статьи'})
	class AddPage(CreateView):
		form_class=AddPostForm
		template_name='women/addpage.html'
		success_url=reverse_lazy('home')
		def get_context_data(self, *, object_list=None, **kwargs):
			context=super().get_context_data(**kwargs)
			context['title']='Добав статьи'
			context['menu']=menu
			return context
	...
	#def show_post(request, post_slug):
		#return HttpResponse(f"Отображение статьи с id = {post_id}")
		#post=get_object_or_404(Women, pk=post_id)
		#post=get_object_or_404(Women, slug=post_slug)
		#context={'post':post,
			#'menu':menu,
			#'title':post.title,
			#'cat_selected':post.cat_id,}
		#return render(request, 'women/post.html', context=context)
	class ShowPost(DetailView):
		model=Women
		template_name='women/post.html'
		slug_url_kwarg='post_slug'
		context_object_name='post'
		def get_context_data(self, *, object_list=None, **kwargs):
			context=super().get_context_data(**kwargs)
			context['title']=context['post']
			context['menu']=menu
			return context
	...
	#def show_category(request, cat_id):
		#posts=Women.objects.filter(cat_id=cat_id)
		#cats=Category.objects.all()
		#if len(posts)==0:
			#raise Http404()
		#context={'posts':posts,
			#'cats':cats,
			#'menu':menu,
			#'title':'Главная страница',
			#'cat_selected':cat_id,}
		#return render(request, 'women/index.html', context=context)
	class WomenCategory(ListView):
		model=Women
		template_name='women/index.html'
		context_object_name='posts'
		allow_empty=False
		def get_queryset(self):
			return Women.objects.filter(cat__slug=self.kwargs['cat_slug'], is_published=True)
		def get_context_data(self, *, object_list=None, **kwargs):
			context=super().get_context_data(**kwargs)
			context['title']='Категория - ' + str(context['posts'][0].cat)
			context['menu']=menu
			context['cat_selected']=context['posts'][0].cat_id
			return context
	$ vim women/urls.py
	$ cat women/urls.py
	...
	urlpatterns = [
		#path('', index), #http://127.0.0.1:8000/women/
		#path('home/', index, name='home'), #http://127.0.0.1:8000/
		#path('', index, name='home'), #http://127.0.0.1:8000/
		path('', WomenHome.as_view(), name='home'), #http://127.0.0.1:8000/
		#path('cats/', categories), #http://127.0.0.1:8000/women/cats/
		#path('cats/', categories), #http://127.0.0.1:8000/cats/
		#path('cats/<int:catid>/', categories), #http://127.0.0.1:8000/cats/1/
		#re_path(r'^archive/(?P<year>[0-9]{4})/', archive), #http://127.0.0.1:8000/archive/2020/
		path('about/', about, name='about'), #http://127.0.0.1:8000/
		#path('addpage/', addpage, name='add_page'),
		path('addpage/', AddPage.as_view(), name='add_page'),
		path('contact/', contact, name='contact'),
		path('login/', login, name='login'),
		#path('post/<int:post_id>/', show_post, name='post'),
		#path('post/<slug:post_slug>/', show_post, name='post'),
		path('post/<slug:post_slug>/', ShowPost.as_view(), name='post'),
		#path('category/<int:cat_id>/', show_category, name='category'),
		path('category/<slug:cat_slug>/', WomenCategory.as_view(), name='category'),
	]
	$ vim women/models.py
	$ cat women/models.py
	...
		def get_absolute_url(self):
			#return reverse('category', kwargs={'cat_id':self.pk})
			return reverse('category', kwargs={'cat_slug':self.slug})
	...
	$ python manage.py runserver
	Decision:
	$ vim women/views.py
	$ cat women/views.py
	from django.http import HttpResponse, HttpResponseNotFound, Http404
	from django.shortcuts import render, redirect, get_object_or_404
	from django.urls import reverse_lazy
	from django.views.generic import ListView, DetailView, CreateView
	from django.contrib.auth.mixins import LoginRequiredMixin
	#from django.contrib.auth.decorators import login_required
	from .forms import *
	from .models import *
	from .utils import *
	...
	#menu=[{'title':"О сайте", 'url_name':'about'}, 
		#{'title':"Добавить статью", 'url_name':'add_page'},
		#{'title':"Обратная связь", 'url_name':'contact'},
		#{'title':"Войти", 'url_name':'login'}]
	...
	#class WomenHome(ListView):
	class WomenHome(DataMixin, ListView):
		model=Women
		template_name='women/index.html'
		context_object_name='posts'
		#extra_context={'title':'Главная страница'}
		def get_context_data(self, *, object_list=None, **kwargs):
			context=super().get_context_data(**kwargs)
			#context['menu']=menu
			#context['title']='Главная страница'
			#context['cat_selected']=0
			c_def = self.get_user_context(title="Главная страница")
			return dict(list(context.items())+list(c_def.items()))
		def get_queryset(self):
			return Women.objects.filter(is_published=True)
	...
	#@login_required
	def about(request):
		return render(request, 'women/about.html', {'menu':menu, 'title':'О сайте'})
	...
	#class AddPage(CreateView):
	class AddPage(LoginRequiredMixin, DataMixin, CreateView):
		form_class=AddPostForm
		template_name='women/addpage.html'
		success_url=reverse_lazy('home')
		login_url = reverse_lazy('home')
		raise_exception = True
		def get_context_data(self, *, object_list=None, **kwargs):
			context=super().get_context_data(**kwargs)
			c_def = self.get_user_context(title="Добавление статьи")
			return dict(list(context.items())+list(c_def.items()))
	...
	class ShowPost(DataMixin, DetailView):
		model=Women
		template_name='women/post.html'
		slug_url_kwarg='post_slug'
		context_object_name='post'
		def get_context_data(self, *, object_list=None, **kwargs):
			context=super().get_context_data(**kwargs)
			c_def = self.get_user_context(title=context['post'])
			return dict(list(context.items())+list(c_def.items()))
	...
	class WomenCategory(DataMixin, ListView):
		model=Women
		template_name='women/index.html'
		context_object_name='posts'
		allow_empty=False
		def get_queryset(self):
			return Women.objects.filter(cat__slug=self.kwargs['cat_slug'], is_published=True)
		def get_context_data(self, *, objecft_list=None, **kwargs):
			context=super().get_context_data(**kwargs)
			c_def = self.get_user_context(title='Категория - ' + str(context['posts'][0].cat), cat_selected=context['posts'][0].cat_id)
			return dict(list(context.items())+list(c_def.items()))
	$ touch women/utils.py
	$ vim women/utils.py
	$ cat women/utils.py
	from .models import *
	from django.db.models import Count
	menu=[{'title':"О сайте", 'url_name':'about'}, 
		{'title':"Добавить статью", 'url_name':'add_page'},
		{'title':"Обратная связь", 'url_name':'contact'},
		{'title':"Войти", 'url_name':'login'}]
	class DataMixin:
		def get_user_context(self, **kwargs):
			context = kwargs
			#cats = Category.objects.all()
			cats = Category.objects.annotate(Count('women'))
			#context['menu']=menu
			user_menu = menu.copy()
			if not self.request.user.is_authenticated:
				user_menu.pop(1)
			context['menu']=user_menu
			context['cats']=cats
			if 'cat_selected' not in context:
				context['cat_selected'] = 0
			return context
	$ vim women/templates/women/base.html
	$ cat women/templates/women/base.html
	...
	{% if cat_selected == 0 %}
				<li class="selected">Все категории</li>
	{% else %}
				<li><a href="{% url 'home' %}">Все категории</a></li>
	{% endif %}
	{% for c in cats %}
	{% if c.women__count > 0 %}
		{% if c.pk == cat_selected %}
				<li class="selected">{{c.name}}</li>
		{% else %}
				<li class=""><a href="{{ c.get_absolute_url }}">{{c.name}}</a></li>
		{% endif %}
	{% endif %}
	{% endfor %}
				<li class="share"><p>Наш канал</p><a class="share-yt" href="https://www.youtube.com/channel/UClJzWfGWuGJL2t-3dYKcHTA/playlists" target="_blank" rel="nofollow"></a></li>
	...
	$ python manage.py runserver
	Decision:
	$ python manage.py shell
	>>> from django.core.paginator import Paginator
	>>> women=['Nicol Kidman', 'Марго Робби', '']
	>>> women=['Nicol Kidman', 'Марго Робби', 'Анжелика Джоли']
	>>> p= Paginator(women, 3)
	>>> p.count
	3
	>>> p.num.pages
	>>> p.num_pages
	1
	>>> p.page_range
	range(1, 2)
	>>> p1=p.page(1)
	>>> p1.object_list
	['Nicol Kidman', 'Марго Робби', 'Анжелика Джоли']
	>>> p1.has_next()
	>>> p1.has_previous()
	>>> p1.has_other_pages()
	>>> p1.next_page_number()
	>>> p1.previous_page_number()
	>>> quit()
	$ vim women/views.py
	$ cat women/views.py
	from django.http import HttpResponse, HttpResponseNotFound, Http404
	from django.shortcuts import render, redirect, get_object_or_404
	from django.urls import reverse_lazy
	from django.views.generic import ListView, DetailView, CreateView
	from django.contrib.auth.mixins import LoginRequiredMixin
	#from django.contrib.auth.decorators import login_required
	from django.core.paginator import Paginator
	from .forms import *
	from .models import *
	from .utils import *
	...
	class WomenHome(DataMixin, ListView):
		#paginate_by = 2
		model=Women
		template_name='women/index.html'
		context_object_name='posts'
		#extra_context={'title':'Главная страница'}
		def get_context_data(self, *, object_list=None, **kwargs):
			context=super().get_context_data(**kwargs)
			#context['menu']=menu
			#context['title']='Главная страница'
			#context['cat_selected']=0
			c_def = self.get_user_context(title="Главная страница")
			return dict(list(context.items())+list(c_def.items()))
		def get_queryset(self):
			return Women.objects.filter(is_published=True)
	#@login_required
	def about(request):
		#return render(request, 'women/about.html', {'menu':menu, 'title':'О сайте'})
		contact_list=Women.objects.all()
		paginator=Paginator(contact_list,2)
		page_number=request.GET.get('page')
		page_obj=paginator.get_page(page_number)
		return render(request, 'women/about.html', {'page_obj':page_obj, 'menu':menu, 'title':'О сайте'})
	...
	class WomenCategory(DataMixin, ListView):
		#paginate_by=2
		model=Women
	...
	$ vim women/templates/women/about.html
	$ cat women/templates/women/about.html
	{% extends 'women/base.html' %}
	{% block content %}
	<h1>{{title}}</h1>
	{% endblock %}
	$ vim women/static/women/css/style.css
	$ cat women/static/women/css/style.css
	...
	.form-button {
		min-width: 200px;
		font-size: 16px;
	}
	.list-pages {
		text-align: center;
		margin: 0 0 20px 0;
	}
	.list-pages ul {
		margin: 20px 0 0 0;
		padding: 0;
		list-style: none;
	}
	.list-pages ul li {
		display: inline-block;
		margin: 0 20px 0 0;
	}
	.list-pages a {
		color: #000;
		font-size: 24px;
		text-decoration: none;
	}
	.list-pages .page-num, .page-num-selected {
		display: inline-block;
		width: 60px;
		height: 44px;
		padding: 16px 0 0 0;
		border: 1px solid #d0d0d0;
		border-radius: 30px;
	}
	.list-pages .page-num:hover {
		box-shadow: 3px 3px 1px #d0d0d0; 
	}
	.list-pages .page-num-selected {
		border: none;
		color: #000;
		font-size: 20px;
	}
	.list-pages .page-num-selected:hover {
		box-shadow: none; 
	}
	$ vim women/templates/women/base.html
	$ cat women/templates/women/base.html
	...
	{% endblock %}
			{% if page_obj.has_other_pages %}
			<nav class="list-pages">
				<ul>
					{% if page_obj.has_previous %}
					<li class="page-num"><a href="?page={{ page_obj.previous_page_number }}">&lt;</a></li>
					{% endif %}
					{% for p in paginator.page_range %}
					{% if page_obj.number == p %}
					<li class="page-num page-num-selected">{{ p }}</li>
					{% elif p >= page_obj.number|add:-2 and p <= page_obj.number|add:2 %}
					<li class="page-num"><a href="?page={{ p }}">{{ p }}</a></li>
					{% endif %}
					{% endfor %}
					{% if page_obj.has_next %}
					<li class="page-num"><a href="?page={{ page_obj.next_page_number }}">&gt;</a></li>
					{% endif %}
				</ul>
			</nav>
			{% endif %}
		</div>
	...
	$ vim women/utils.py
	$ cat women/utils.py
	...
	class DataMixin:
		#paginate_by=30
		paginate_by=2
		def get_user_context(self, **kwargs):
	...
	$ vim women/models.py
	$ cat women/models.py
	...
		class Meta:
			verbose_name='Известные женщины'
			verbose_name_plural='Известные женщины'
			#ordering=['time_create','title']
			#ordering=['-time_create','title']
			ordering=['id']
	class Category(models.Model):
	...
	$ python manage.py runserver
	Decision:
	$ vim women/templates/women/base.html
	$ cat women/templates/women/base.html
	...
	{% block mainmenu %}
			<div class="header">
				<ul id="mainmenu" class="mainmenu">
					<li class="logo"><a href="{% url 'home' %}"><div class="logo"></div></a></li>
					{% for m in menu %}
					<li><a href="{% url m.url_name %}">{{m.title}}</a></li>
					{% endfor %}
					<li class="last"><a href="{% url 'register' %}">Регистрация</a>|<a href="{% url 'login' %}">Войти</a></li>
				</ul>
				<div class="clear"></div>
			</div>
	{% endblock mainmenu %}
	...
	$ vim women/utils.py
	$ cat women/utils.py
	...
	menu=[{'title':"О сайте", 'url_name':'about'}, 
		{'title':"Добавить статью", 'url_name':'add_page'},
		{'title':"Обратная связь", 'url_name':'contact'}
		#{'title':"Войти", 'url_name':'login'}
		]
	...
	$ vim women/urls.py
	$ cat women/urls.py
	...
	[
		path('category/<slug:cat_slug>/', WomenCategory.as_view(), name='category'),
		#path('register/', login, name='register'),
		path('register/', RegisterUser.as_view(), name='register'),
	]
	$ vim women/views.py
	$ cat women/views.py
	...
	class RegisterUser(DataMixin, CreateView):
		form_class=UserCreationForm
		template_name='women/register.html'
		success_url=reverse_lazy('login')
		def get_context_data(self, *, object_list=None, **kwargs):
			context=super().get_context_data(**kwargs)
			c_def=self.get_user_context(title="Регистрация")
			return dict(list(context.items())+list(c_def.items()))
	$ touch women/templates/women/register.html
	$ vim women/templates/women/register.html
	$ cat women/templates/women/register.html
	{% extends 'women/base.html' %}
	{% block content %}
	<h1>{{title}}</h1>
	<form method="post">
		{% csrf_token %}
		{% for f in form %}
		<p><label class="form-label" for="{{ f.id_for_label }}">{{f.label}}:</label>{{ f }}</p>
		<div class="form-error">{{ f.errors }}</div>
		{% endfor %}
		<button type="submit">Регистрация</button>
	</form>
	{% endblock %}
	$ vim women/forms.py
	$ cat women/forms.py
	from django import forms
	from django.core.exceptions import ValidationError
	from django.contrib.auth.forms import UserCreationForm
	from django.contrib.auth.models import User
	from .models import *
	...
	class RegisterUserForm(UserCreationForm):
		username=forms.CharField(label='Логин', widget=forms.TextInput(attrs={'class':'form-input'}))
		email=forms.EmailField(label='Email', widget=forms.EmailInput(attrs={'class':'form-input'}))
		password1=forms.CharField(label='Пароль', widget=forms.PasswordInput(attrs={'class':'form-input'}))
		password2=forms.CharField(label='Повтор пароля', widget=forms.PasswordInput(attrs={'class':'form-input'}))
		class Meta:
			model=User
			fields=('username','email','password1','password2')
			#widgets={
			#    'username':forms.TextInput(attrs={'class':'form-input'}),
			#    'password1':forms.PasswordInput(attrs={'class':'form-input'}),
			#    'password2':forms.PasswordInput(attrs={'class':'form-input'}),
			#}
	$ python manage.py runserver
	Decision:
	$ vim women/views.py
	$ cat women/views.py
	from typing import Any
	from django.forms.models import BaseModelForm
	from django.http import HttpResponse, HttpResponseNotFound, Http404
	from django.shortcuts import render, redirect, get_object_or_404
	from django.urls import reverse_lazy
	from django.views.generic import ListView, DetailView, CreateView
	from django.contrib.auth.mixins import LoginRequiredMixin
	#from django.contrib.auth.decorators import login_required
	from django.core.paginator import Paginator
	#from django.contrib.auth.forms import UserCreationForm
	from django.contrib.auth.views import LoginView
	#from django.contrib.auth.forms import AuthenticationForm
	from django.contrib.auth import logout, login
	...
	#def login(request):
	#	return HttpResponse("Авторизация")
	...
			return dict(list(context.items())+list(c_def.items()))
		def form_valid(self, form):
			user=form.save()
			login(self.request, user)
			return redirect('home')
	class LoginUser(DataMixin, LoginView):
		form_class=AuthenticationForm
		template_name='women/login.html'
		def get_context_data(self, *, object_list=None, **kwargs):
			context=super().get_context_data(**kwargs)
			c_def=self.get_user_context(title="Авторизация")
			return dict(list(context.items())+list(c_def.items()))
		def get_success_url(self):
			return reverse_lazy('home')	
	def logout_user(request):
		logout(request)
		return redirect('login')
	$ vim women/forms.py
	$ cat women/forms.py
	from django import forms
	from django.core.exceptions import ValidationError
	from django.contrib.auth.forms import UserCreationForm
	from django.contrib.auth.models import User
	from django.contrib.auth.forms import AuthenticationForm
	...
	class LoginUserForm(AuthenticationForm):
		username=forms.CharField(label='Логин', widget=forms.TextInput(attrs={'class':'form-input'}))
		password=forms.CharField(label='Пароль', widget=forms.PasswordInput(attrs={'class':'form-input'}))
	$ touch women/templates/women/login.html
	$ vim women/templates/women/login.html
	$ cat women/templates/women/login.html
	{% extends 'women/base.html' %}
	{% block content %}
	<h1>{{title}}</h1>
	<form method="post">
		{% csrf_token %}
		<div class="form-error">{{ form.non_field_errors }}</div>
		{% for f in form %}
		<p><label class="form-label" for="{{ f.id_for_label }}">{{f.label}}:</label>{{ f }}</p>
		<div class="form-error">{{ f.errors }}</div>
		{% endfor %}
		<button type="submit">Войти</button>
	</form>
	{% endblock %}
	$ vim women/urls.py
	$ cat women/urls.py
	...
	urlpatterns = [
		#path('', index), #http://127.0.0.1:8000/women/
		#path('home/', index, name='home'), #http://127.0.0.1:8000/
		#path('', index, name='home'), #http://127.0.0.1:8000/
		path('', WomenHome.as_view(), name='home'), #http://127.0.0.1:8000/
		#path('cats/', categories), #http://127.0.0.1:8000/women/cats/
		#path('cats/', categories), #http://127.0.0.1:8000/cats/
		#path('cats/<int:catid>/', categories), #http://127.0.0.1:8000/cats/1/
		#re_path(r'^archive/(?P<year>[0-9]{4})/', archive), #http://127.0.0.1:8000/archive/2020/
		path('about/', about, name='about'), #http://127.0.0.1:8000/
		#path('addpage/', addpage, name='add_page'),
		path('addpage/', AddPage.as_view(), name='add_page'),
		path('contact/', contact, name='contact'),
		#path('login/', login, name='login'),
		#path('post/<int:post_id>/', show_post, name='post'),
		#path('post/<slug:post_slug>/', show_post, name='post'),
		path('post/<slug:post_slug>/', ShowPost.as_view(), name='post'),
		#path('category/<int:cat_id>/', show_category, name='category'),
		path('category/<slug:cat_slug>/', WomenCategory.as_view(), name='category'),
		#path('register/', login, name='register'),
		path('register/', RegisterUser.as_view(), name='register'),
		path('login/', LoginUser.as_view(), name='login'),
		path('logout/', logout_user, name='logout'),
	]
	$ vim coolsite/settings.py
	$ cat coolsite/settings.py
	...
	MEDIA_URL = '/media/'
	#LOGIN_REDIRECT_URL = '/'
	$ vim women/templates/women/base.html
	$ cat women/templates/women/base.html
	...
				<ul id="mainmenu" class="mainmenu">
					<li class="logo"><a href="{% url 'home' %}"><div class="logo"></div></a></li>
					{% for m in menu %}
					<li><a href="{% url m.url_name %}">{{m.title}}</a></li>
					{% endfor %}
					{% if request.user.is_authenticated %}
					<li class="last">{{user.username}} | <a href="{% url 'logout' %}">Выйти</a></li>
					{% else %}
					<li class="last"><a href="{% url 'register' %}">Регистрация</a>|<a href="{% url 'login' %}">Войти</a></li>
					{% endif %}
				</ul>
	...
	$ python manage.py runserver
	Decision:
	$ pip install django-debug-toolbar
	$ vim coolsite/settings.py
	$ cat coolsite/settings.py
	...
	INSTALLED_APPS = [
		'django.contrib.admin',
		'django.contrib.auth',
		'django.contrib.contenttypes',
		'django.contrib.sessions',
		'django.contrib.messages',
		'django.contrib.staticfiles',
		'debug_toolbar',
		'women.apps.WomenConfig'
	]
	MIDDLEWARE = [
		'django.middleware.security.SecurityMiddleware',
		'django.contrib.sessions.middleware.SessionMiddleware',
		'django.middleware.common.CommonMiddleware',
		'django.middleware.csrf.CsrfViewMiddleware',
		'django.contrib.auth.middleware.AuthenticationMiddleware',
		'django.contrib.messages.middleware.MessageMiddleware',
		'django.middleware.clickjacking.XFrameOptionsMiddleware',
		'debug_toolbar.middleware.DebugToolbarMiddleware',
	]
	...
	INTERNAL_IPS=[
		'127.0.0.1',
	]
	$ vim coolsite/urls.py
	$ cat coolsite/urls.py
	...
	if settings.DEBUG:
		import debug_toolbar
		urlpatterns = [
			path('__debug__/', include(debug_toolbar.urls)),
		] + urlpatterns
		urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
	handler404 = pageNotFound
	$ vim women/views.py
	$ cat women/views.py
	...
		def get_queryset(self):
			return Women.objects.filter(is_published=True).select_related('cat')
	#@login_required
	...
	class WomenCategory(DataMixin, ListView):
		#paginate_by=2
		model=Women
		template_name='women/index.html'
		context_object_name='posts'
		allow_empty=False
		def get_queryset(self):
			return Women.objects.filter(cat__slug=self.kwargs['cat_slug'], is_published=True).select_related('cat')
		def get_context_data(self, *, object_list=None, **kwargs):
			context=super().get_context_data(**kwargs)
			c = Category.objects.get(slug=self.kwargs['cat_slug'])
			#c_def = self.get_user_context(title='Категория - ' + str(context['posts'][0].cat), cat_selected=context['posts'][0].cat_id)
			c_def = self.get_user_context(title='Категория - ' + str(c.name), cat_selected=c.pk)
			return dict(list(context.items())+list(c_def.items()))
	...
	$ python manage.py runserver
	Decision:
	$ mkdir coolsite_cache
	$ vim coolsite/settings.py
	$ cat coolsite/settings.py
	...
	CACHES = {
		'default':{
			'BACKEND':'django.core.cache.backends.filebased.FileBasedCache',
			'LOCATION':os.path.join(BASE_DIR, 'coolsite_cache'),
		}
	}
	$ vim women/urls.py
	$ cat women/urls.py
	from django.urls import path, re_path
	from .views import *
	from django.views.decorators.cache import cache_page
	...
		path('', WomenHome.as_view(), name='home'), #http://127.0.0.1:8000/
		#path('', cache_page(60)(WomenHome.as_view()), name='home'),
	...
	$ vim women/utils.py
	$ cat women/utils.py
	from .models import *
	from django.db.models import Count
	from django.core.cache import cache
	...
			context = kwargs
			#cats = Category.objects.all()
			#cats = Category.objects.annotate(Count('women'))
			#context['menu']=menu
			cats = cache.get('cats')
			if not cats:
				cats = Category.objects.annotate(Count('women'))
				cache.set('cats', cats, 60)
			user_menu = menu.copy()
	...
	$ python manage.py runserver
	Decision:
	$ pip install django-simple-captcha
	$ vim women/views.py
	$ cat women/views.py
	...
	from django.views.generic import ListView, DetailView, CreateView, FormView
	...
	class ContactFormView(DataMixin, FormView):
		form_class = ContactForm
		template_name = 'women/contact.html'
		success_url = reverse_lazy('home')
		def get_context_data(self, *, object_list=None, **kwargs):
			context = super().get_context_data(**kwargs)
			c_def = self.get_user_context(title="Обратная связь")
			return dict(list(context.items()) + list(c_def.items()))
		def form_valid(self, form):
			print(form.cleaned_data)
			return redirect('home')
	$ vim women/forms.py
	$ cat women/forms.py
	...
	from django.contrib.auth.forms import AuthenticationForm
	from captcha.fields import CaptchaField
	...
	class ContactForm(forms.Form):
		name = forms.CharField(label='Имя', max_length=255)
		email = forms.EmailField(label='Email')
		content = forms.CharField(widget=forms.Textarea(attrs={'cols': 60, 'rows': 10}))
		capatcha = CaptchaField()
	$ vim women/urls.py
	$ cat women/urls.py
	from django.urls import path, re_path
	from .views import *
	from django.views.decorators.cache import cache_page
	...
		#path('contact/', contact, name='contact'),
		path('contact/', ContactFormView.as_view(), name='contact'),
	...
	$ touch women/templates/women/contact.html
	$ vim women/templates/women/contact.html
	$ cat women/templates/women/contact.html
	{% extends 'women/base.html' %}
	{% block content %}
	<h1>{{title}}</h1>
	<form method="post">
		{% csrf_token %}
		<div class="form-error">{{ form.non_field_errors }}</div>
		{% for f in form %}
		<p><label class="form-label" for="{{ f.id_for_label }}">{{f.label}}:</label>{{ f }}</p>
		<div class="form-error">{{ f.errors }}</div>
		{% endfor %}
		<button type="submit">Отправить</button>
	</form>
	{% endblock %}
	$ vim coolsite/settings.py
	$ cat coolsite/settings.py
	...
	INSTALLED_APPS = [
		'django.contrib.admin',
		'django.contrib.auth',
		'django.contrib.contenttypes',
		'django.contrib.sessions',
		'django.contrib.messages',
		'django.contrib.staticfiles',
		'debug_toolbar',
		'captcha',
		'women.apps.WomenConfig'
	]
	...
	$ vim coolsite/urls.py
	$ cat coolsite/urls.py
	...
		path('captcha/', include('captcha.urls')),
	]
	...
	$ python manage.py migrate
	$ python manage.py runserver
	Decision:
	$ mkdir templates
	$ mkdir templates/admin
	$ touch templates/admin/base_site.html
	$ vim templates/admin/base_site.html
	$ cat templates/admin/base_site.html
	{% extends "admin/base.html" %}
	{% load static %}
	{% block extrastyle %}
	<link rel="stylesheet" href="{% static 'css/admin.css' %}">
	{% endblock %}
	{% block title %}{% if subtitle %}{{ subtitle }} | {% endif %}{{ title }} | {{ site_title|default:_('Django site admin') }}{% endblock %}
	{% block branding %}
	<h1 id="site-name"><a href="{% url 'admin:index' %}">{{ site_header|default:_('Django administration') }}</a></h1>
	{% if user.is_anonymous %}
		{% include "admin/color_theme_toggle.html" %}
	{% endif %}
	{% endblock %}
	{% block nav-global %}{% endblock %}
	$ mkdir women/static/css
	$ touch women/static/css/admin.css
	$ vim women/static/css/admin.css
	$ cat women/static/css/admin.css
	#header, .module caption  {
		background: #5e3a00;
	}
	$ vim women/admin.py
	$ cat women/admin.py
	from django.contrib import admin
	from .models import *
	from django.utils.safestring import mark_safe
	...
	class WomenAdmin(admin.ModelAdmin):
		#list_display = ('id', 'title', 'time_create', 'photo', 'is_published')
		list_display = ('id', 'title', 'time_create', 'get_html_photo', 'is_published')
		list_display_links = ('id', 'title')
		search_fields = ('title', 'content')
		list_editable = ('is_published',)
		list_filter = ('is_published', 'time_create')
		prepopulated_fields = {"slug": ("title",)}
		fields = ('title', 'slug', 'cat', 'content', 'photo', 'get_html_photo', 'is_published', 'time_create', 'time_update')
		readonly_fields = ('time_create', 'time_update', 'get_html_photo')
		save_on_top = True
		def get_html_photo(self, object):
			if object.photo:
				return mark_safe(f"<img src='{object.photo.url}' width=50>")
		get_html_photo.short_description="Миниатюра"
	...
	admin.site.site_title='Админ-панель сайта о женщинах'
	admin.site.site_header='Админ-панель сайта о женщинах 2'
	$ vim coolsite/settings.py
	$ cat coolsite/settings.py
	...
	TEMPLATES = [
		{
			'BACKEND': 'django.template.backends.django.DjangoTemplates',
			'DIRS': [os.path.join(BASE_DIR, 'templates')],
			'APP_DIRS': True,
			'OPTIONS': {
				'context_processors': [
					'django.template.context_processors.debug',
					'django.template.context_processors.request',
					'django.contrib.auth.context_processors.auth',
					'django.contrib.messages.context_processors.messages',
				],
			},
		},
	]
	...
	$ python manage.py runserver
	Decision:
	$ deactivate
	Source:
	1. https://docs.python.org/3/tutorial/venv.html
	2. https://translated.turbopages.org/proxy_u/en-ru.ru.6b298518-64cb356b-c3e4f7d2-74722d776562/https/stackoverflow.com/questions/5334882/how-to-get-list-of-all-the-tables-in-sqlite-programmatically
	3. https://django-debug-toolbar.readthedocs.io/en/latest/
	4. https://pypi.org/project/django-recaptcha/#installation
    Task:
    Необходимо собрать с помощью bootstrap 5 и запустить новую страницу по макету 
    https://www.figma.com/file/csU67B0SQVZO1AkwvMZa3D/Тестовое-задание-N2?type=design&node-id=1-1012&mode=design&t=wz2qpqpXo6RochwT-0
    - сборку проекта осуществить с помощью python 3.9, Django 4.1 и MySQL
    - проект разместить в git репозитории
    - для сборки клиентской части страницы необходимо использовать bootstrap 5
    - для запуска слайдера необходимо использовать slick slider http://kenwheeler.github.io/slick/ (см. Slider Syncing)
    - по клику на большую фотографию на слайдере фотки должны открываться на весь экран и листаться галереей
    - необходимо чтобы slider заполнялся через админку django. Необходимо настроить визуально понятный admin.py, чтобы выводилась картинка и название в списке записей элементов слайдера.
    - для картинок модели слайдера необходимо использовать пакет django-filer и через него грузить картинки в слайдер
    - записи слайдера в админке должны сортироваться при помощи drag&drop, для этого необходимо использовать пакет django-admin-sortable2
    - все зависимости для запуска проекта расположить в файле req.pip в корне проекта.
    Тестовое задание проверяет поверхностно основные навыки кандидата необходимые для текущей вакансии:
    - умение работать с bootstrap 5;
    - базовые знания HTML, CSS, JavaScript;
    - умение запустить и собрать новый проект на Django, с подключением дополнительных пакетов;
    - базовые навыки работы с GIT;
    - базовые навыки работы с Figma.
    Decision:
    $ mkdir Python-SpaceAgency
    $ cd Python-SpaceAgency/
    $ sudo apt update
    $ sudo apt upgrade -y
    E: dpkg was interrupted, you must manually run 'sudo dpkg --configure -a' to correct the problem. 
    $ sudo dpkg --configure -a
    $ sudo apt upgrade -y
    Task:
    Check Mysql
    Decision:
    $ systemctl status mysql
    ● mysql.service - MySQL Community Server
        Loaded: loaded (/lib/systemd/system/mysql.service; enabled; vendor preset: enabled)
        Active: active (running) since Thu 2023-11-16 20:58:56 CST; 29min ago
        Process: 622 ExecStartPre=/usr/share/mysql/mysql-systemd-start pre (code=exited, status=0/SUCCESS)
    Main PID: 814 (mysqld)
        Status: "Server is operational"
        Tasks: 37 (limit: 2261)
        Memory: 382.8M
            CPU: 21.760s
        CGroup: /system.slice/mysql.service
                └─814 /usr/sbin/mysqld
    Nov 16 20:57:38 thost systemd[1]: Starting MySQL Community Server...
    Nov 16 20:58:56 thost systemd[1]: Started MySQL Community Server.
    $ mysql -u tuser -p
    mysql> show databases;
    +--------------------+
    | Database           |
    +--------------------+
    | information_schema |
    | performance_schema |
    | tbase              |
    +--------------------+
    3 rows in set (0.00 sec)
    Task:
    Install Figma
    Decision:
    $ wget https://github.com/Figma-Linux/figma-linux/releases/download/v0.11.0/figma-linux_0.11.0_linux_amd64.deb
    $ sudo dpkg -i figma-linux_0.11.0_linux_amd64.deb
    $ figma-linux &
    $ google-chrome https://www.figma.com/file/csU67B0SQVZO1AkwvMZa3D/%D0%A2%D0%B5%D1%81%D1%82%D0%BE%D0%B2%D0%BE%D0%B5-%D0%B7%D0%B0%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5-N2?type=design&node-id=1-1012&mode=design &
    Task:
    Figma to Bootstrap 5
    Decision:
    $ mkdir bootstrap
    $ cd bootstrap/
    $ wget https://github.com/twbs/bootstrap/releases/download/v5.3.2/bootstrap-5.3.2-dist.zip
    $ unzip bootstrap-5.3.2-dist.zip
    $ mkdir space/static/space/css
    $ mkdir js
    $ mkdir space/static/space/image
    $ cp bootstrap-5.3.2-dist/css/bootstrap.min.css space/static/space/css/
    $ cp bootstrap-5.3.2-dist/js/bootstrap.min.js js/
    $ touch index.html
    $ touch space/static/space/css/style.css
    $ wget https://github.com/kenwheeler/slick/archive/v1.8.1.zip
    $ unzip v1.8.1.zip 
    $ ls slick-1.8.1/slick
    ajax-loader.gif  config.rb  fonts  slick.css  slick.js  slick.less  slick.min.js  slick.scss  slick-theme.css  slick-theme.less  slick-theme.scss
    $ cp slick-1.8.1/slick/slick.min.js js/
    $ cp slick-1.8.1/slick/slick.css space/static/space/css/
    $ cp slick-1.8.1/slick/slick-theme.css space/static/space/css/
    Task:
    Install python 3.9
    Decision:
    $ cd ..
    $ python3 -V
    Python 3.10.12
    $ sudo apt install software-properties-common
    $ sudo add-apt-repository ppa:deadsnakes/ppa
    $ sudo apt install python3.9
    $ python3.9 -m venv venv
    Error: Command '['/home/tuser/Projects/Python-SpaceAgency/venv/bin/python3.9', '-Im', 'ensurepip', '--upgrade', '--default-pip']' returned non-zero exit status 1.
    $ sudo apt install python3.9-venv
    $ python3.9 -m venv venv
    $ source venv/bin/activate
    (venv) $ python3 -V
    Python 3.9.18
    Task:
    requirements.txt — это список внешних зависимостей
    Decision:
    (venv) $ vim req.pip
    (venv) $ cat req.pip
    Django==4.1.13
    django-filter
    django-admin-sortable2
    django-debug-toolbar
    django-simple-captcha
    mysqlclient
    (venv) $ pip install -r req.pip
    ...
    Getting requirements to build wheel ... error
    error: subprocess-exited-with-error
    × Getting requirements to build wheel did not run successfully.
    │ exit code: 1
    ╰─> [24 lines of output]
        /bin/sh: 1: pkg-config: not found
        /bin/sh: 1: pkg-config: not found
        Trying pkg-config --exists mysqlclient
        Command 'pkg-config --exists mysqlclient' returned non-zero exit status 127.
        Trying pkg-config --exists mariadb
        Command 'pkg-config --exists mariadb' returned non-zero exit status 127.
        Traceback (most recent call last):
            File "/home/tuser/Projects/Python-SpaceAgency/venv/lib/python3.9/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py", line 353, in <module>
            main()
            File "/home/tuser/Projects/Python-SpaceAgency/venv/lib/python3.9/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py", line 335, in main
            json_out['return_val'] = hook(**hook_input['kwargs'])
            File "/home/tuser/Projects/Python-SpaceAgency/venv/lib/python3.9/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py", line 118, in get_requires_for_build_wheel
            return hook(config_settings)
            File "/tmp/pip-build-env-7j30p2fh/overlay/lib/python3.9/site-packages/setuptools/build_meta.py", line 355, in get_requires_for_build_wheel
            return self._get_build_requires(config_settings, requirements=['wheel'])
            File "/tmp/pip-build-env-7j30p2fh/overlay/lib/python3.9/site-packages/setuptools/build_meta.py", line 325, in _get_build_requires
            self.run_setup()
            File "/tmp/pip-build-env-7j30p2fh/overlay/lib/python3.9/site-packages/setuptools/build_meta.py", line 341, in run_setup
            exec(code, locals())
            File "<string>", line 154, in <module>
            File "<string>", line 48, in get_config_posix
            File "<string>", line 27, in find_package_name
        Exception: Can not find valid pkg-config name.
        Specify MYSQLCLIENT_CFLAGS and MYSQLCLIENT_LDFLAGS env vars manually
        [end of output]
    note: This error originates from a subprocess, and is likely not a problem with pip.
    error: subprocess-exited-with-error
    × Getting requirements to build wheel did not run successfully.
    │ exit code: 1
    ╰─> See above for output.
    note: This error originates from a subprocess, and is likely not a problem with pip.
    (venv) $ sudo apt-get install pkg-config build-essential libmysqlclient-dev
    (venv) $ pip install -r req.pip
    ...
    Building wheels for collected packages: mysqlclient
    Building wheel for mysqlclient (pyproject.toml) ... error
    error: subprocess-exited-with-error
    × Building wheel for mysqlclient (pyproject.toml) did not run successfully.
    │ exit code: 1
    ╰─> [45 lines of output]
        Trying pkg-config --exists mysqlclient
        # Options for building extention module:
            extra_compile_args: ['-I/usr/include/mysql', '-std=c99']
            extra_link_args: ['-lmysqlclient']
            define_macros: [('version_info', (2, 2, 0, 'final', 0)), ('__version__', '2.2.0')]
        running bdist_wheel
        running build
        running build_py
        creating build
        creating build/lib.linux-x86_64-cpython-39
        creating build/lib.linux-x86_64-cpython-39/MySQLdb
        copying src/MySQLdb/_exceptions.py -> build/lib.linux-x86_64-cpython-39/MySQLdb
        copying src/MySQLdb/__init__.py -> build/lib.linux-x86_64-cpython-39/MySQLdb
        copying src/MySQLdb/connections.py -> build/lib.linux-x86_64-cpython-39/MySQLdb
        copying src/MySQLdb/cursors.py -> build/lib.linux-x86_64-cpython-39/MySQLdb
        copying src/MySQLdb/converters.py -> build/lib.linux-x86_64-cpython-39/MySQLdb
        copying src/MySQLdb/times.py -> build/lib.linux-x86_64-cpython-39/MySQLdb
        copying src/MySQLdb/release.py -> build/lib.linux-x86_64-cpython-39/MySQLdb
        creating build/lib.linux-x86_64-cpython-39/MySQLdb/constants
        copying src/MySQLdb/constants/CLIENT.py -> build/lib.linux-x86_64-cpython-39/MySQLdb/constants
        copying src/MySQLdb/constants/ER.py -> build/lib.linux-x86_64-cpython-39/MySQLdb/constants
        copying src/MySQLdb/constants/FIELD_TYPE.py -> build/lib.linux-x86_64-cpython-39/MySQLdb/constants
        copying src/MySQLdb/constants/__init__.py -> build/lib.linux-x86_64-cpython-39/MySQLdb/constants
        copying src/MySQLdb/constants/FLAG.py -> build/lib.linux-x86_64-cpython-39/MySQLdb/constants
        copying src/MySQLdb/constants/CR.py -> build/lib.linux-x86_64-cpython-39/MySQLdb/constants
        running egg_info
        writing src/mysqlclient.egg-info/PKG-INFO
        writing dependency_links to src/mysqlclient.egg-info/dependency_links.txt
        writing top-level names to src/mysqlclient.egg-info/top_level.txt
        reading manifest file 'src/mysqlclient.egg-info/SOURCES.txt'
        reading manifest template 'MANIFEST.in'
        adding license file 'LICENSE'
        writing manifest file 'src/mysqlclient.egg-info/SOURCES.txt'
        copying src/MySQLdb/_mysql.c -> build/lib.linux-x86_64-cpython-39/MySQLdb
        running build_ext
        building 'MySQLdb._mysql' extension
        creating build/temp.linux-x86_64-cpython-39
        creating build/temp.linux-x86_64-cpython-39/src
        creating build/temp.linux-x86_64-cpython-39/src/MySQLdb
        x86_64-linux-gnu-gcc -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -fstack-protector-strong -Wformat -Werror=format-security -g -fwrapv -O2 -fPIC "-Dversion_info=(2, 2, 0, 'final', 0)" -D__version__=2.2.0 -I/home/tuser/Projects/Python-SpaceAgency/venv/include -I/usr/include/python3.9 -c src/MySQLdb/_mysql.c -o build/temp.linux-x86_64-cpython-39/src/MySQLdb/_mysql.o -I/usr/include/mysql -std=c99
        src/MySQLdb/_mysql.c:46:10: fatal error: Python.h: No such file or directory
            46 | #include "Python.h"
                |          ^~~~~~~~~~
        compilation terminated.
        error: command '/usr/bin/x86_64-linux-gnu-gcc' failed with exit code 1
        [end of output]
    note: This error originates from a subprocess, and is likely not a problem with pip.
    ERROR: Failed building wheel for mysqlclient
    Failed to build mysqlclient
    ERROR: Could not build wheels for mysqlclient, which is required to install pyproject.toml-based projects
    (venv) $ sudo apt-get install python3.9-dev
    (venv) $ pip install -r req.pip
    Task:
    Развернуть django проект
    Decision:
    (venv) $ django-admin startproject spaceagency
    (venv) $ cd spaceagency/
    (venv) $ python manage.py startapp space
    (venv) $ python manage.py migrate
    (venv) $ mysql -u tuser -p
    mysql> use tbase;
    mysql> show tables;
    +----------------------------+
    | Tables_in_tbase            |
    +----------------------------+
    | auth_group                 |
    | auth_group_permissions     |
    | auth_permission            |
    | auth_user                  |
    | auth_user_groups           |
    | auth_user_user_permissions |
    | captcha_captchastore       |
    | django_admin_log           |
    | django_content_type        |
    | django_migrations          |
    | django_session             |
    | ttable1                    |
    | ttable2                    |
    +----------------------------+
    13 rows in set (0.01 sec)
    (venv) $ python manage.py runserver
    (venv) $ google-chrome http://127.0.0.1:8000/ &
    (не запускается проект)
    Source:
    https://itslinuxfoss.com/install-python-3-9-ubuntu-22-04/
    https://pypi.org/project/Django/4.1.13/#history
    https://sky.pro/media/udalenie-vseh-paketov-ustanovlennyh-cherez-pip/
    https://semakin.dev/2020/04/requirements_txt/?ysclid=lp2q25vn81790283417
    https://unixcop.com/install-figma-ubuntu-different-methods/
    https://github.com/Figma-Linux/figma-linux/releases/tag/v0.11.0
    https://www.youtube.com/watch?v=7EKg_IgTztU&t=160s
    https://www.youtube.com/playlist?list=PLgT76xw3dCIWO5WnLzhbrmwO6t85G68_b
    https://getbootstrap.com/docs/5.3/getting-started/download/
    http://kenwheeler.github.io/slick/
    https://pythonpip.ru/django/kak-podklyuchit-mysql-k-django-za-5-shagov?ysclid=lp2re296g690922035
    https://www.8host.com/blog/kak-xranit-izobrazheniya-v-mysql-s-pomoshhyu-blob/?ysclid=lp4zs7pdrh496783742
    https://stackoverflow.com/questions/51117503/python-3-7-failed-building-wheel-for-mysql-python
    https://stackoverflow.com/questions/76875507/can-not-install-apache-airflow-providers-mysql-pkg-config-error
    https://www.youtube.com/playlist?list=PLxjLT04EBKpN_8aiP0PzKUZYnNYANUekx
    https://github.com/luketamang/Dynamic-image-slider-in-django/blob/master/core/models.py

English
  Task:
  Phrases
  Decision:
  A
  B
  C
  D
  E
  F
  for the sake of simplicity - для простоты
  from within - извнутри
  G
  H
  I
  it does not get much simpler than that - проще уже просто невозможно
  J
  K
  L
  look for - искать
  M
  N
  O
  P
  Q
  R
  S
  T
  this way - таким образом
  U
  V
  W
  X
  Y
  Z
  Task:
  Dictionary
  Decision:
  A
  although - хотя
  allocate - выделять
  allow - позволять, разрешить
  among - среди
  assume - считать
  available - доступ
  awesome - потрясающий
  B
  baked - внедрение
  blob - блок 
  C
  case - случай
  complex - сложность
  comprise - содержать
  composed - состоять 
  consequently - следовательно
  constantly - постоянно
  confirm - подтвердить
  consider - учитывать
  content - содержание
  cover - получить, охватывать
  current - текущий
  currently - настоящий
  D
  defines - определять
  deploy - развернуть
  directly - напрямую 
  discusse - обсуждать
  during - происходить
  E
  each - каждый
  especially - особенность
  enough - достаточно
  environment - среда
  even - даже
  exactly - именно
  executable - исполняемый
  existing - существующие
  exit - выходить
  external - внешний
  F
  flat - прозрачный
  full-fledged - полноценный
  G
  H
  handeler - обработчик
  I
  immediate - сразу
  impressive - впечатляющий
  incredibly - невероятно
  include - включать
  inside - внутри
  instead - вместо этого
  introduction - сведения
  isolated - изолированный
  itself - самостоятельный
  J
  K
  keen - острый
  keep - держаться
  L
  leave - опустить
  list - перечислить
  look - выглядеть
  M
  multi-node - многоузловой
  multiple - несколько
  N
  necessary - обязательно
  node - узел
  nonced - обратить
  O
  once - после того
  oven - даже
  override - переопределить
  own - собственный
  P
  path - путь
  perform - выполнять
  point - указывать
  prove - доказывать
  providу - предоставлять
  pulled - извлечение
  push - переместить
  pushing - отправка
  Q
  R
  reffering - ссылаться
  registry - хранилище
  requier - требовать
  roughly - грубо говоря
  respond - отвечать
  S
  scale - масштабирование
  sequence - последовательность
  sharing - совместное использование
  shorthand - сокращениие
  single - единственный
  single-node - одноузловой
  somebody - кто-то
  spans - охватывать
  specity - указать
  suggest - предлагать
  T
  topic - тема
  truly - действительно
  U
  under - под
  unfamiliar - незнаком
  uploaded - закачивается
  V
  W
  way - способ
  X
  Y
  Z
  Task:
  Interview (Engineer)
  Task:
  Какой электронный прибор называется полупроводниковым диодом?
  Task:
  Сравните токи через полупроводниковый диод при прямом и обратном смещении по порядку величин. Объясните различие.
  Task:
  Что такое ток насыщения диода?
  Task:
  Interview (Soft)
  Task:
  Какой ip-адрес не существует?
  Decision:
  -192.168.34.23
  -110.120.15.93
  -13.1.0.109
  -14.8.256.12
  Task:
  Как посмотреть открытые порты локального компьютера?
  Decision:
  -Очевидно, что с помощью команды "netstat"
  -С помощью команды "ping"
  -С помощью команды "tracert"
  Task:
  Как применить групповые политики к компьютеру?
  Decision:
  -Передать запрос на системного администратора
  - Перезагрузить компьютер, при условии, что он подключен к ЛВС предприятия. 2. Выполнить команду "gpupdate /force" от имени привелигированного пользователя.
  -Выполнить команду "gpupdate /force" от имени привелигированного пользователя.
  -Нет правильного ответа
  Task:
  Ошибка вылезет на главном экране
  Decision:
  -Что делать, если брандмауэр Windows блокирует порт?
  -Отключить брандмауэр
  -Использовать другой порт
  -Создать разрешающее правило
  Task:
  Модель OSI в целом, на каком уровне какие протоколы работают и их особенности
  Task:
  За что отвечает файлик hosts
  Decision:
  -Разрешает доступ к ресурсам
  -Задает приоритет перед DNS
  -Позволяет попасть на сайт
  Task:
  Как проверить доступность удаленного компьютера?
  Decision:
  -С помощью команды “ping”
  -Подойти и включить его
  -Удаленно подключиться и проверить
  Task:
  Компьютер включен, загружен, подключен к сети, работает корректно, но не «пингуется», в чем может быть причина?
  Decision:
  -Роутер выключен
  -Брандмауэр (firewall) блокирует ICMP-трафик.
  -Требуется перезагрузка
  Task:
  Как проще всего удаленно проверить, открыт ли порт на компьютере?
  Decision:
  -С помощью команды "ping"
  -При помощи telnet-клиента.
  -с помощью команды "tracert"
  Task:
  Как удаленно штатными средствами подключиться с одного компьютера под управлением ОС Windows к другому компьютеру под управлением ОС Windows в ЛВС без использования Интернет?
  Decision:
  -При помощи программы «Подключение к удаленному рабочему столу» (mstsc).
  -Без интернета это сделать невозможно
  -Установить TeamViewer и подключиться
  Task:
  Для чего нужен UAC?
  Decision:
  -Для работы usb-службы
  -Для удаленного подключения к компьютеру
  -Для обеспечения безопасности, ограничения и контроля действий пользователя
  Task:
  Как посмотреть устновленные сертификаты компьютера в ОС Windows?
  Decision:
  -При помощи соответствующей оснастки консоли mmc
  -Через event log
  -Через управление компьютера, в разделе дисковая подсистема
  Task:
  Какое приложение из состава пакета MS Office предназначено для создания блок-схем, алгоритмов, карт сетей и т.д.?
  Decision:
  -Project
  -Visio
  -Excel
  -Word
  Task:
  В каких изданиях пакета MS Office в поставке идет приложение MS Outlook?
  Decision:
  -Во всех
  -MS Office
  -MS Office и MS Office Plus
  -Это дополнительный компонент, которого нет по умолчанию
  Task:
  Как добавить подпись по умолчанию ко всем исходящим письмам в MS Office Outlook?
  Decision:
  -Через параметры Outlook - Раздел "Почта" - "Подпись", выбрать подпись по умолчанию для новых сообщений, ответов и пересылаемых сообщений
  -Панель управления - Раздел "Почта" - "Подпись", выбрать подпись по умолчанию для новых сообщений, ответов и пересылаемых сообщений
  -Через клиент Outlook, кнопка "Подпись", выбрать подпись по умолчанию для новых сообщений, ответов и пересылаемых сообщений
  Task:
  Что делать, если процесс MS Office Word, MS Office Outlook или MS Office Excel постоянно зависает?
  Decision:
  -Закрыть все приложения, перезагрузить компьютер и запустить все заново
  -Отключить в расширенных настройках использование аппаратного графического ускорителя
  -Включить в расширенных настройках использование аппаратного графического ускорителя
  -Вызвать системного администратора
  Task:
  Можно ли установить Windows на Macbook?
  Decision:
  -Нет, установка Windows на данные компьютеры невозможна
  -Через Parallels Desktop
  -Через Boot Camp
  Task:
  Самый простой способ проверки работы принтера с компьютера пользователя?
  Decision
  -Что-то распечатать, например пробную страницу
  -Переподключить принтер
  -Подключить принтер по USB
  Task:
  Как подключить пользователю с ОС Windows подключить сетевой принтер?
  Decision:
  -По кабелю USB
  -По кабелю Ethernet
  -Через "Панель управления" - "Устройства и принтеры" добавить новый принтер
  -Все варианты правильные
  Task:
  Документы не уходят из очереди печати при отправке на сетевой принтер, в чем может быть проблема?
  Decision:
  -Отсутствует доступ к принтеру по сети
  -Проблема с USB кабелем
  -Принтер выключен, принтер завис
  -Много документов отправлено на печать
  Task:
  Как добавить сетевой принтер на принт-сервер под управлением ОС Windows?
  Decision:
  -Скачать официальное ПО с сайта производителя и следовать инструкции по установке
  -Нужно подключить принтер по USB проводу к серверу, после этого дать на него доступ
  -Добавить запись хоста на DNS-сервере. После установить на принт-сервер локальный принтер с портом TCP/IP
  -Все варианты неправильные
  Task:
  Исходя из опыта работы с Exchange как оптимально настроить хранение и очистку (если необходимо) transaction logs?
  Task:
  Контроллер домена с ролью Schema master безвозвратно утерян. Ваши действия? На сколько это важно? Что не будет работать до восстановления этой роли?
  Task:
  Какими инструментами производится patch management? Какими вы пользовались? Если работали с SCCM сервером – какие преимущества дает этот продукт в данном вопросе?
  Task:
  В каких случаях стоит прибегать к incremental backup, а в каких differential.
  Task:
  Необходимо установить причину возникновения bsod. Опишите последовательность действий для определения причины появления bsod.
  Task:
  Расскажите в нескольких предложениях для чего используется Event viewer. В каких случаях вы бы стали его использовать.
  Task:
  отличие Ansible ot Puppet, другие Системы управления конфигурациями
  Task:
  Для работы разъема PS/2
  Decision:
  -Как посмотреть есть ли ошибки в работе ОС?
  -Через редактор ошибок
  -Через журнал ошибок
  Task:
  Какая команда выводит полный путь к текущей директории?
  1. ls
  2. pwd
  3. cd
  Task:
  Какая из перечисленных команд используется для поиска в файле заданной строки и отображения её на экране?
  1. cat
  2. less
  3. grep
  4. cp
  Task:
  В чем разница между этими двумя операциями: ls > file.txt и ls >> file.txt?
  Task:
  Какие действия выполняет команда mv file1 file2?
  Task:
  Что будет являться результатом работы команды cat file1.txt | wc -l?
  Task:
  Что такое сигнал в Unix? Для чего применяются? В чем разница между 1, 9 и 15 сигналом?
  Task:
  Как работает traceroute?  
  Task:
  Какие инструменты для диагностики IP сети вы знаете?
  Task:
  Что такое DNS? Зачем он нужен? Какие есть инструменты для диагностики?
  Task:
  Какие типы RAID вы знаете? В чем их отличия?
  Task:
  Что такое системный вызов, какие они бывают, какой командой их можно посмотреть
  Task:
  Что такое hard link? в чем разница между Hard link и symbolic link. примеры их практического применения?
  Task:
  Что такое айнода? какая информация там хранится
  Task:
  какие состояния процессов вы знаете, что означает соястояние процесса «D» ?
  Task:
  что такое зомби процесс, можно ли самостоятельно сделать зомби? Убьет ли 9ка зомби
  Task:
  Что такое файловый дескриптор, какая информация там хранится
  Task:
  утилиты df и du что показывают, чем отличаются  
  Task:
  Как изменить язык по умолчанию экрана приветствия Windows?
  Decision:
  -Переустановить ОС, так как экран язык экрана приветствия можно задать только при установке
  -Через настройки BIOS
  -Через региональные настройки изменить язык по умолчанию текущего пользователя, после чего скопировать параметры для экрана 
  -Нет правильного ответа
  Task:
  Что вы знаете о CloudLinux?
  Task:
  Какие типы виртуализации вам известны?
  Task:
  Чем отличается OpenVZ и KVM?
  Task:
  VFS - виртуальная файловая система и Virtual memory
    Task:
    Выберите правильные утверждения
    Decision:
    +Управляемые базы данных относятся к PaaS
    Task:
    Что такое облачные технологии
    Decision:
    Облачные платформы позволяют арендовать IT-ресурсы: серверы, базы данных, IP-адреса, сетевую инфраструктуру или даже нейросети.
    Основные преимущества облачных платформ
    1. Разделение ответственности
    2. Масштабируемость
    3. Экономия
    Task:
    Вы вручную увеличили количество серверов в облаке, чтобы справиться с возросшей нагрузкой на сайт. Что произойдёт, когда нагрузка спадёт?
    Decision:
    Ресурсы выделены, их работа гарантирована, за это надо будет заплатить вне зависимости от нагрузки
    Task:
  Какие задачи можно решать с помощью Yandex Cloud?
  Decision:
  +Хранить бэкапы
  +Строить отказоустойчивые веб-приложения
  Task:
  Как называется сервис, отвечающий за иерархию ресурсов?
  Decision:
  +Yandex Resource Manager
  Task:
  Какой сервис отвечает за предоставление доступа к ресурсам?
  Decision:
  +Yandex Identity and Access Management
  Task:
  Как устроены ресурсы в Yandex.Cloud, от более крупных к более мелким?
  Decision:
  +Облако -> Каталог -> Ресурс
  Task:
  Какой тип аккаунта не используется для авторизации при доступе к ресурсам?
  Decision:
  +Платёжный аккаунт
  Task:
  В чём различия бизнес-аккаунта и личного аккаунта?
  Decision:
  +Бизнес-аккаунт — для юридических лиц, личный — для частных лиц
  Task:
  Как происходит переход на платную версию?
  Decision:
  +Нажатием специальной кнопки в консоли
  Task:
  Как можно передавать данные службе метаданных, обслуживающей виртуальные машины?
  Decision:
  +Из веб-консоли при создании и изменении виртуальной машины
  +С помощью Yandex Cloud CLI
  Task:
  Вы хотите использовать ВМ для запуска веб-сервера и размещения базы данных (БД). Как вам лучше сконфигурировать дисковую подсистему с точки зрения быстродействия и стоимости?
  Decision:
  +Разместить веб-сервер на HDD, потому что он грузится в оперативную память при запуске ОС, а базу данных — на SSD, потому что к ней идёт постоянное обращение.
  Task:
  Снимки дисков делаются, чтобы...
  Decision:
  +Сохранять состояние дисков с данными
  +Сохранять настройки операционной системы
  +Восстанавливать состояние дисков с данными
  Task:
  Вы разрабатываете веб-приложение на ВМ на ноутбуке и хотите перенести ВМ в облако. Для этого нужно:
  Decision:
  +Загрузить образ в бакет Yandex Object Storage.
  Task:
  Публичные адреса также называют
  Decision:
  +белыми
  +внешними
  Task:
  Статические IP-адреса
  Decision:
  +сохраняются при остановке ресурса
  +можно зарезервировать без привязки к ресурсу
  Task:
  Вы создали группу безопасности с открытым портом 80. Как зайти на ВМ по SSH?
  Decision:
  +Открыть порт 22
  Task:
  Преимущества балансировки — это
  Decision:
  +Абстрактность имён
  +Устойчивость к отказам
  +Повышение производительности
  Task:
  Какие задачи решает Yandex Network Load Balancer?
  Decision:
  +Обеспечивает отказоустойчивость
  +Распределяет веб-трафик
  Task:
  Возможно ли создать балансировщик без обработчика?
  Decision:
  +Да
  Task:
  Задача балансировщика — узнать:
  Decision:
  +о состоянии ресурсов целевой группы
  Task:
  ВМ пройдёт проверку, если...
  Decision:
  +ВМ отдала код 200 через 8 секунд при опросе раз в 10 секунд
  -ВМ отдала код 503 через 2 секунды при опросе раз в 10 секунд
  Task:
  Группы ВМ применяются, чтобы...
  Decision:
  +перезапускать машины, которые перестали откликаться на запросы
  +автоматически увеличивать число машин при пиковых нагрузках
  Task:
  Чтобы максимально защитить группу ВМ фиксированного размера от сбоев, нужно разрешить:
  Decision:
  +и уменьшение, и превышение целевого размера группы
  Task:
  Чтобы сервис не создавал ВМ на каждый всплеск активности, нужно правильно:
  Decision:
  +настроить период усреднения
  +задать целевое значение метрики
  Task:
  Какой вариант доступа к ВМ безопаснее, если в облаке несколько пользователей с одинаковыми правами?
  Decision:
  +По SSH
  Task:
  Прерываемыми называются виртуальные машины, которые:
  Decision:
  +могут быть принудительно остановлены, если в той же зоне доступности не хватает ресурсов для запуска обычных ВМ.
  Task:
  Прерываемые ВМ подойдут, чтобы…
  Decision:
  +решать задачи, связанные с пакетной обработкой данных.
  +повысить производительность веб-сервисов при пиковых нагрузках.
  Task:
  Ваша ВМ, у которой есть только загрузочный диск, находится в зоне доступности ru-central1-a. Какими способами можно создать копию этой ВМ в зоне доступности ru-central1-b?
  Decision:
  +Сделать образ диска ВМ, он автоматически реплицируется в остальные зоны доступности, создать из этого образа ВМ в зоне ru-central1-b.
  +Сделать снимок диска ВМ, он сам реплицируется в нужную зону доступности, создать ВМ в зоне ru-central1-b из этого снимка.
  Task:
  Ваша ВМ всегда должна быть доступна по одному и тому же публичному IP-адресу. Укажите все оптимальные варианты решения задачи.
  Decision:
  +Выбрать статический IP-адрес при создании ВМ.
  +Сделать динамический IP-адрес статическим, если ВМ уже настроена и работает.
  Task:
  Какой главный принцип работы групп безопасности?
  Decision:
  +Запрещено всё, что не разрешено напрямую.
  Task:
  На всех копиях ВМ за балансировщиком работает несколько приложений, каждое из которых использует несколько портов, причём все порты уникальны. Какая конфигурация балансировщика оптимальна?
  Decision:
  +Отдельный балансировщик на каждое приложение с обработчиками всех портов, используемых этим приложением.
  Task:
  На каждой машине в группе ВМ работает несколько «боевых» приложений. Как лучше настроить балансировщик?
  Decision:
  +Создать балансировщики на каждое приложение.
  Task:
  В работе одной из ВМ в группе произошёл сбой. Если при создании новой ВМ старая машина станет работоспособна, Instance Groups:
  Decision:
  +прекратит создавать ВМ.
  Task:
  Во время коротких всплесков активности на веб-сервисе Instance Groups автоматически создаёт ВМ. Когда нагрузка спадает — убирает их. Всплески происходят часто, и Instance Groups постоянно создаёт и удаляет ВМ. Какое решение обойдётся дешевле?
  Decision:
  +Увеличить период стабилизации, чтобы ВМ не удалялись слишком быстро.
  Task:
  Какие базы данных представлены в сервисах управляемых баз данных Yandex Cloud?
  Decision:
  +Redis
  +Greenplum
  Task:
  У сервисов управляемых баз данных есть преимущество перед базами данных поверх виртуальных машин. Какое?
  Decision:
  +Пользователю не придётся их администрировать
  Task:
  В каком окружении рекомендуется развернуть БД, если вы начинаете разрабатывать приложение?
  Decision:
  +PRESTABLE
  Task:
  База данных MongoDB входит в стек технологий:
  Decision:
  +MEAN
  Task:
  Какую базу данных стоит предпочесть для онлайн-обработки аналитических запросов?
  Decision:
  ClickHouse
  Task:
  Вы используете Yandex Object Storage для хранения архива аудиозаписей. Какой класс хранилища стоит выбрать?
  Decision:
  +Холодное
  Task:
  Имеет ли смысл положить в объектное хранилище файл с очень большой базой данных SQLite, если к ней идет много запросов на чтение и лишь немного на запись?
  Decision:
  +Нет
  Task:
  Метаданные объекта в объектном хранилище нужны, чтобы:
  Decision:
  +описывать свойства объекта
  Task:
  Пользователи с какими ролями могут перезаписывать объекты в бакете?
  Decision:
  +storage.uploader
  +storage.editor
  Task:
  Будет ли разрешён доступ к объекту, если запрос проходит проверку IAM, подпадает под правило Deny политики доступа и разрешается ACL?
  Decision:
  +нет
  Task:
  После приостановки версионирования бакета один из загруженных в него объектов перезаписан. Какое значение version_id будет у новой версии объекта?
  Decision:
  +null
  Task:
  Какой класс хранилища по умолчанию нужно выбрать для бакета, в котором вы размещаете файлы веб-сайта?
  Decision:
  +Стандартное
  Task:
  Вы хотите поместить в облако БД, которая обслуживает работающий микросервис с постоянной, но не очень высокой нагрузкой. Какой тип ВМ стоит выбрать при создании кластера?
  Decision:
  +standard
  Task:
  Можно ли для экономии использовать при создании кластера хосты с уровнем производительности vCPU меньше 5%?
  Decision:
  +Нет
  Task:
  Какие функции выполняют сервисы управляемых БД?
  Decision:
  +Обновление ПО
  +Мониторинг хостов и БД
  +Резервное копирование БД
  +Репликация данных
  Task:
  Что делать, если показатель загрузки CPU почти достиг максимального уровня?
  Decision:
  +Увеличить число хостов в кластере и распределить нагрузку между ними
  +Проверить в логах, есть ли медленные запросы к БД, и оптимизировать их
  +Выбрать другой класс хоста
  Task:
  Средняя скорость восстановления из резервной копии — 10 МБ/с на каждое ядро vCPU хоста БД. Вы восстанавливаете из резервной копии БД размером 1,2 ГБ в кластер с одним хостом класса s2.small. Сколько примерно времени займёт восстановление?
  Decision:
  +0,5 минуты
  Task:
  Синхронная репликация:
  Decision:
  +медленнее асинхронной
  +надёжнее для сохранения данных
  Task:
  Какой тип трансфера выбрать, чтобы добавлять в БД приёмника только текущие изменения БД источника?
  Decision:
  +Репликация
  -Копирование
  Task:
  Модель данных в MongoDB называется:
  Decision:
  +документо-ориентированной
  Task:
  Шардирование позволяет изолировать:
  Decision:
  +отказы хостов
  Task:
  Шард — это:
  Decision:
  +часть БД, хранящаяся на хосте
  Task:
  Выберите правильные утверждения. Ключ шардирования:
  Decision:
  +может быть причиной возникновения горячих точек
  +говорит БД о том, где найти или куда записать фрагмент данных
  +влияет на скорость чтения и записи данных
  Task:
  Вы используете для своего приложения управляемую базу данных MongoDB. Кластер состоит из одного хоста s2.large (12 vCPU, 48 ГБ) с быстрым сетевым хранилищем объёмом 50 ГБ.
  С учётом растущей нагрузки на кластер и далеко идущих планов по развитию приложения вы решаете разбить БД на два шарда, понизив при этом класс хостов до s2.medium (8 vCPU, 32 ГБ) и увеличив объём хранилища до 100 ГБ, а также сделать БД отказоустойчивой.
  Сколько хостов в кластере вам для этого понадобится?
  Decision:
  +6 (два хоста для шардов и еще по две реплики на каждый шард)
  Task:
  Сколько примерно времени займет восстановление кластера размером 10 ГБ из резервной копии?
  Decision:
  +17 минут
  Task:
  Какие особенности ClickHouse ускоряют работу с аналитическими запросами?
  Decision:
  +Поддержка приближенных вычислений
  +Шардирование БД
  +Распараллеливание выполнения запросов
  Task:
  Вы планируете поместить БД ClickHouse в облаке на четырех шардах и создаёте кластер с четырьмя хостами. Сколько хостов будет при этом создано? В поле ответа напишите число.
  Decision:
  7
  Task:
  Вы планируете создать кластер ClickHouse. Вы хотели бы минимизировать затраты и полагаете, что для вашей задачи достаточно одного хоста. Для вас важна скорость выполнения запросов, а отказоустойчивость — не очень (при этом вы, естественно, не хотите потерять данные). Какой тип хранилища стоит выбрать при создании кластера?
  Decision:
  +быстрое сетевое
  Task:
  Заходя на сайт Yahoo, посетители видят персонализированную новостную ленту. Алгоритмы компании автоматически категоризируют новостные статьи по мере появления, а также предсказывают, какие новости интересны каждому посетителю. Какую технологию работы с большими данными использует Yahoo?
  Decision:
  +Spark
  Task:
  Какие хосты входят в кластер Data Proc?
  Decision:
  +Master Node
  +Compute Node
  +Data Node
  Task:
  Какие источники данных подойдут для визуализации в DataLens?
  Decision:
  +Сервис AppMetrica
  +Сервис Яндекс.Метрика
  +Базы данных
  +Плоские файлы
  Task:
  Среди доступных в DataLens типов чартов есть географическая карта. Она позволяет создавать визуализации в виде точечной, фоновой и тепловой карты. На тепловой карте показаны:
  Decision:
  +географические точки с разной интенсивностью закрашивания
  Task:
  Выберите правильное утверждение. Вычисляемое поле может быть:
  Decision:
  +и полем-измерением, и полем-показателем
  Task:
  Выберите поля датасета, которые больше всего похожи на показатели и требуют указать правило агрегации:
  Decision:
  -Дата
  -Название продукта
  -Категория продукта
  -Бренд продукта
  -Продавец
  -Покупатель
  -Магазин
  -Тип оплаты
  -Тип доставки
  +Продажа без скидки, р
  +Продажа со скидкой, р
  Task:
  Представьте, что с помощью этого датасета вы хотите определить число потенциальных участников планирующейся рекламной акции «Разнообразное питание». Для этого нужно понять, сколько покупателей в прошлом месяце приобретали много разных продуктов. Дополнительный показатель из какого измерения понадобится определить?
  Decision:
  -Дата
  +Название продукта
  -Категория продукта
  -Бренд продукта
  -Продавец
  -Покупатель
  -Магазин
  -Тип оплаты
  -Тип доставки
  -Продажа без скидки, р
  -Продажа со скидкой, р
  Task:
  Выберите правильные утверждения. Отказоустойчивая система:
  Decision:
  +имеет избыточность ресурсов
  +способна работать даже в случае отказа на уровне дата-центра
  +продолжает работать при выходе из строя одного из ее компонентов
  Task:
  Управляемые БД снимают с пользователя большую часть задач по обслуживанию системы. В частности, они обеспечивают:
  Decision:
  +мониторинг работы хостов и БД
  +обновление ПО
  +репликацию данных между хостами кластера
  +резервное копирование БД
  Task:
  Вы создаете кластер управляемой БД в облаке и хотите, чтобы ваша БД могла выдержать высокую нагрузку. Какой тип хранилища данных вам следует выбрать?
  Decision:
  +local-ssd
  Task:
  Объектное хранилище может использоваться для хранения:
  Decision:
  +очень больших файлов размером в несколько терабайт
  +статических веб-сайтов
  +резервной копии БД
  Task:
  Шардирование позволяет:
  Decision:
  +распределить нагрузку на БД и повысить ее производительность
  +ускорить выполнение запросов к БД
  +повысить доступность БД
  Task:
  Для OLAP-сценариев работы с БД характерно, что:
  Decision:
  +большинство запросов — это операции чтения
  +данные добавляются в БД большими порциями
  +на выходе данные фильтруют или агрегируют
  Task:
  Технологии работы с большими данными основаны на необходимости:
  Decision:
  +горизонтальной масштабируемости используемых вычислительных ресурсов
  +обеспечения отказоустойчивости систем
  +распределенного хранения и обработки данных
  Task:
  В датасете, который вы используете для визуализации данных в DataLens, есть такие поля: «Название производителя», «Категория товара», «Бренд», «Год выпуска». Эти поля, как правило, являются:
  Decision:
  +измерениями
  Task:
  Вы разрабатываете приложение, для хранения данных в котором используется кластер управляемой БД MySQL c двумя хостами типа s2.large и быстрым локальным хранилищем размером 100 ГБ. Завершив очередной этап тестирования приложения, вы остановили кластер. За какие ресурсы будет продолжать начисляться оплата?
  Decision:
  +хосты БД
  +хранилище данных
  +хранение резервных копий
  Task:
  С помощью политик доступа к объектному хранилищу вы можете:
  Decision:
  +настроить дополнительные условия действий с бакетами и объектами
  Task:
  Утилита yc нужна, чтобы...
  Decision:
  +управлять сервисами Yandex Cloud
  Task:
  Как можно задавать параметры выполнения команд в yc?
  Decision:
  -С помощью профиля
  -С помощью глобальных флагов
  +Оба варианта верны
  Task:
  Packer нужен, чтобы ...
  Decision:
  +создавать образы ВМ для определенной платформы
  Task:
  Секция source в конфигурации служит для описания ...
  Decision:
  +Платформы, с которой может использоваться образ. В конфигурации может быть только одна секция source
  Task:
  Переменные в Terraform нужны, чтобы...
  Decision:
  +задавать значения, которые могут различаться в разных инсталляциях одной спецификации
  Task:
  Что делает команда terraform plan?
  Decision:
  +Проверяет правильность спецификации и формирует список элементов инфраструктуры, которые будут созданы, изменены или удалены
  Task:
  Контейнеризация эффективна, потому что:
  Decision:
  +оптимально использует ресурсы системы
  Task:
  С помощью Docker можно создавать образы ...
  Decision:
  -виртуальных машин
  +контейнеров
  -виртуальных машин и контейнеров (зависит от спецификации)
  Task:
  Образы, созданные в Docker, можно хранить ...
  Decision:
  -только в специальном публичном хранилище Docker Hub
  -в любом публичном хранилище образов, в том числе в Yandex Container Registry
  +в публичном или приватном хранилище образов, в том числе в Docker Hub и в Yandex Container Registry
  Task:
  Что такое репозиторий Yandex Container Registry?
  Decision:
  +Набор Docker-образов с одинаковыми именами
  Task:
  Что такое политика автоматического удаления?
  Decision:
  +Набор правил для автоматического удаления Docker-образов из Yandex Container Registry
  Task:
  Что такое Yandex Managed Kubernetes?
  Decision:
  -Сервис для управления трафиком и биллингом при использовании Yandex Cloud как облачного хранилища для кластеров Kubernetes
  +Сервис для управления контейнеризованными приложениями с помощью Kubernetes в инфраструктуре Yandex Cloud
  -Реестр образов контейнеров для развёртывания кластеров под управлением Kubernetes
  Task:
  Kubernetes нужен, чтобы ...
  Decision:
  -управлять большим количеством запущенных контейнеров
  -автоматизировать развёртывание
  -масштабировать приложения
  +все ответы верны
  Task:
  Чем отличаются сценарии автомасштабирования Horizontal Pod Autoscaler и Cluster Autoscaler?
  Decision:
  -Horizontal Pod Autoscaler наращивает поды, а Cluster Autoscaler — узлы
  -Horizontal Pod Autoscaler анализирует метрики потребления ресурсов процессора или оперативной памяти, а Cluster Autoscaler опирается на политики, описывающие ресурсы, которые необходимы для запуска подов
  +Оба ответа верны
  Task:
  Кому могут предоставляться роли в Yandex Managed Kubernetes? Отметьте все подходящие варианты.
  Decision:
  +пользователям
  +сервисам
  +сервисным аккаунтам
  -каталогам
  Task:
  Квота в Yandex Managed Kubernetes — это количество ...
  Decision:
  +ресурсов, которое пользователь с определённой ролью может употребить
  -ролей, которые можно создать в одном пространстве имён
  -пользователей, которых можно создать в одном облачном аккаунте
  Task:
  Отказоустойчивость — это:
  Decision:
  -Быстрый отклик системы в ответ на действия пользователя
  +Способность системы продолжить работу при неработоспособности одного или нескольких компонентов
  -Средняя доступность, выраженная как среднее число сбоев на период предоставления сервиса
  Task:
  Точка отказа — это:
  Decision:
  +Компонент системы, при выведении из строя которого система перестаёт работать корректно
  -Компонент системы, при выведении из строя которого уменьшается максимальная пропускная способность
  -Компонент системы, при выведении из строя которого увеличивается средний отклик пользователя
  Task:
  Что такое метрика?
  Decision:
  +Количественная характеристика системы, меняющаяся во времени.
  -Значение какого-то показателя на конкретный момент времени.
  -График на дашборде, который отображает изменение какого-то показателя во времени.
  Task:
  Что такое сервисный дашборд?
  Decision:
  +Дашборд, отражающий текущее состояние какого-то сервиса и доступный без дополнительных настроек, «из коробки».
  -Дашборд, доступный сотрудникам службы поддержки и пользователям с ролью service.
  -Дашборд, доступный за отдельную плату и предоставляемый по принципу SaaS.
  Task:
  Когда система мониторинга отправляет алерт администратору?
  Decision:
  +алерт отправляется при достижении порога предупреждения
  +алерт отправляется при достижении критического порога
  +алерт отправляется только если среднее значение за период достигает порога предупреждения или критического порога
  Task:
  Интерфейс командной строки Yandex.Cloud (CLI) — это:
  Decision:
  -сторонняя утилита, которую можно установить в ваш аккаунт Yandex Cloud. Её использование оплачивается в соответствии с тарифами Yandex Cloud
  -сервис, предоставляемый Yandex Cloud для управления ресурсами облака в случае, когда консоль управления недоступна
  +бесплатная утилита, которую можно установить на компьютер пользователя и использовать для управления ресурсами в Yandex Cloud. Использование CLI не тарифицируется
  Task:
  В чём заключаются преимущества подхода Infrastructure as Code (можно отметить несколько пунктов)?
  Decision:
  -любые объекты IT-инфраструктуры можно описать в едином стандартном формате
  +изменения, вносимые в спецификации, легко проконтролировать
  +для спецификаций можно хранить историю версий и при необходимости можно быстро извлечь и использовать нужную версию
  +описания отдельных объектов IT-инфраструктуры можно многократно использовать в разных инсталляциях, это ускоряет подготовку к развёртыванию и повышает надёжность за счет использования проверенных решений
  Task:
  Выберите правильное утверждение:
  Decision:
  +Packer создаёт образ виртуальной машины, готовый к использованию на конкретной облачной платформе
  -Packer создаёт универсальный образ виртуальной машины, готовый к использованию на любых облачных платформах
  -Packer создаёт образ-«полуфабрикат», который необходимо адаптировать для конкретной облачной платформы с помощью переменных, задаваемых при создании виртуальной машины из образа
  Task:
  Выберите правильное утверждение:
  Decision:
  -при развёртывании облачной инфраструктуры с помощью Terraform создаются новые ресурсы (то есть, те, которые есть в спецификации, но еще не существуют в облаке), а ресурсы, уже существующие в облаке, не изменяются и не удаляются
  -при развёртывании облачной инфраструктуры с помощью Terraform создаются новые ресурсы, а ресурсы, уже существующие в облаке, могут быть обновлены, но не удаляются
  +при развёртывании облачной инфраструктуры с помощью Terraform создаются новые ресурсы, а ресурсы, уже существующие в облаке, могут быть обновлены или удалены
  Task:
  Контейнеризация отличается от виртуализации тем, что:
  Decision:
  -контейнеры используют больше ресурсов, чем виртуальные машины, так как требуется дополнительное ПО для распределения ресурсов сервера между контейнерами
  +контейнеры используют меньше ресурсов, чем виртуальные машины: несколько контейнеров могут использовать одну хостовую ОС, тогда как для каждой виртуальной машины нужна отдельная ОС
  -контейнеры и виртуальные машины используют примерно одинаковые объёмы ресурсов, но контейнеры более стабильны, надёжны и защищены
  Task:
  Выберите верное утверждение:
  Decision:
  -Docker умеет создавать образы и виртуальных машин, и контейнеров — это указывается в спецификации
  +Docker создаёт образы контейнеров на основе готовых образов с определёнными операционными системами
  -Docker создаёт образы контейнеров на основе готовых образов виртуальных машин, которые называются Container Optimized Image
  Task:
  Где применяются кластеры Kubernetes:
  Decision:
  -кластеры полезны для управления только масштабной инфраструктурой с большим количеством взаимосвязанных приложений и сервисов
  +кластеры используются для управления даже небольшими системами, развёрнутыми в облаке
  Task:
  Что такое проактивный мониторинг (можно отметить несколько пунктов)
  Decision:
  -автоматический мониторинг, который отправляет уведомления администратору, когда параметры превышают критические значения
  +автоматический мониторинг, который отправляет уведомления администратору, когда параметры приближаются к критическим значениям
  +автоматический мониторинг, который при возникновении проблем включает систему аварийного восстановления
  Task:
  Отметьте признаки отказоустойчивой архитектуры (можно отметить несколько пунктов):
  Decision:
  -готовность к быстрому масштабированию
  -избыточность ресурсов
  +использование компонентов одного вендора, которые хорошо интегрируются между собой
  -наличие подсистемы проактивного мониторинга
  Task:
  Для чего нужны алерты:
  Decision:
  +для оповещения администраторов о возникновении критической ситуации в системе
  +для оповещения администраторов о приближающейся критической ситуации в системе
  Task:
  Отметьте ключевые особенности разработки приложений при использовании serverless-сервисов:
  Decision:
  -Вашему приложению не будут нужны сервера
  +Нет необходимости создавать и обслуживать виртуальные машины
  -Можно арендовать практически любой сервис в облаке, платя только за вызовы функций, запросы к БД, трафик и т.д.
  +Нет необходимости отслеживать утилизацию оборудования и добавлять или удалять ресурсы, чтобы инфраструктура обходилась дешевле и справлялась с повышенной нагрузкой
  +Можно писать приложения для Cloud Functions на любом удобном для вас языке программирования, для которого есть среда исполнения
  +Вы сможете написать и запустить приложение в интернете, обладая меньшими знаниями о серверах и операционных системах, чем при использовании виртуальных машин
  Task:
  Сервис Yandex Cloud Functions относится к модели:
  Decision:
  +FaaS
  -PaaS
  -SaaS
  Task:
  Как определить, сколько серверов и какой мощности нужно арендовать под сервер БД для моего приложения?
  Decision:
  +Это не нужно делать, для создания serverless БД Yandex Database нужно только указать её имя.
  -Нужно взять прогнозный профиль нагрузки, замерить максимальную производительность кластера из трёх серверов в разных зонах доступности на этом профиле, аппроксимировать результаты, заложить запас на непредвиденную нагрузку и постоянно отслеживать утилизацию серверов, чтобы не упустить момент, когда приложение окажется перегруженным. Также обязательно нужно отслеживать маркетинговые акции и готовиться к ним, так как они могут приводить к резким пикам нагрузки.
  -У меня маленькое приложение, я ничего не буду считать и возьму один самый маленький сервер. Потом я напишу ещё одно маленькое приложение и создам вторую БД на том же сервере. Ведь сколько бы я ни сделал приложений, ни одно из них никогда не станет популярным и не создаст сколько-нибудь значимой нагрузки.
  Task:
  Что такое Serverless?
  Decision:
  -Нет серверов
  -Сервер находится в Yandex Cloud
  +Клиент сервиса не занимается конфигурацией, администрированием или управлением ресурсами сервиса
  Task:
  В чём основное отличие модели тарификации между классическим и serverless сервисами?
  Decision:
  -Serverless дороже
  -Serverless дешевле
  -При использовании serverless оплата зависит от фактического использования сервиса в интересах клиента, а классические сервисы оплачиваются по часам за выделенные клиенту ресурсы
  Task:
  Что такое serverless functions?
  Decision:
  -Функция на Python, которая запущена на виртуальной машине. Сервера-то нет, всё в облаке.
  -Концепция облачных вычислений, при которой провайдер управляет и настраивает виртуальные машины, операционные системы и среды исполнения кода.
  -Скрипт на Bash.
  -Terraform-скрипт, разворачивающий виртуальную машину.
  Task:
  К какому типу сервисов относятся бессерверные вычисления?
  Decision:
  -IaaS
  +FaaS
  -SaaS
  -ГЛОНАСС 
  Task:
  Какие ограничения есть у serverless-функций?
  Decision:
  +Функции не хранят своего состояния
  -Функции не работают с базами данных
  -Функции не могут работать больше 1 секунды
  -Функции не могут работать с другими сервисами
  +Функция не может быть бесконечной
  Task:
  На что похожа функция в терминологии Yandex Cloud Functions?
  Decision:
  -На виртуальную машину
  -На объект в хранилище
  +На контейнер
  -На очередь
  Task:
  Какими способами можно добавить код функции (укажите все подходящие)?
  Decision:
  +В редакторе кода консоли управления
  +Загрузив ZIP-архив
  -Добавив ссылки на файлы
  +Указав объект в Yandex Cloud Storage
  Task:
  Как можно вызвать функцию сервиса Yandex Cloud Functions?
  Decision:
  +Используя HTTPS-запрос
  -Через WebSocket
  -C помощью TLS
  -Используя ABS
  Task:
  Какой среды исполнения НЕТ в сервисе Yandex Cloud Functions?
  Decision:
  -Go
  -Python
  -Bash
  +C++
  Task:
  Из каких параметров состоит функция в Yandex Cloud Functions?
  Decision:
  +Имя
  +Теги
  -Адреса воркеров
  +Среда выполнения
  -Почты аккаунтов с доступом на редактирование
  +Описание
  Task:
  Указать точку входа — обязательное требование для создания функции. Какие из имён точек входа соответствуют требованиям?
  Decision:
  -yacloud
  +alice-skill.myFunction
  +alice_skill.myFunction
  -162.198
  -alice-skill, myFunction
  -alice_skill_myFunction
  Task:
  Зачем нужны триггеры в сервисе Yandex Cloud Functions?
  Decision:
  -Чтобы функция могла писать данные в базу данных
  -Чтобы оповестить пользователя о том, что функция была вызвана
  +Чтобы автоматически вызывать функцию по тем или иным событиям
  -Чтобы упростить авторизацию
  Task:
  Какие метрики можно отслеживать в мониторинге сервиса?
  Decision:
  -Duration — среднее время выполнения функции
  -Workers — количество работающих воркеров
  -Invocations — количество вызовов функций
  -Functions — количество функций
  -Load — нагрузка на сервис
  +Errors — количество ошибок при выполнении
  Task:
  Какой фразой вас приветствует навык?
  Decision:
  +Hello! I'll repeat anything you say to me.
  -Привет! Я повторю всё, что вы мне скажете?
  -Привет! Рада вас видеть! Чем я могу помочь?
  -Hello! Glad to see you! How can I help you?
  Task:
  Код Cloud Functions выполняется:
  Decision:
  -На виртуальных машинах, и у вас есть к ним прямой доступ.
  +На виртуальных машинах, но они скрыты от пользователя высокоуровневой абстракцией.
  -На выделенных серверах, арендуемых у Yandex Cloud.
  Task:
  Для чего нужны триггеры:
  Decision
  +Чтобы не писать сложную систему создания и отправки HTTPS-запросов.
  -Чтобы упростить проверку прав доступа при вызове функций.
  +Чтобы автоматически вызывать функцию по тем или иным событиям.
  +Чтобы получить простую интеграцию с другими сервисами Yandex Cloud
  Task:
  Что из себя представляет сервис Yandex API Gateway?
  Decision:
  -Балансировщик запросов
  -Агрегатор запросов
  +Прокси-сервер
  -Сетевой тоннель
  Task:
  Что из нижеперечисленного НЕ УМЕЕТ делать Yandex API Gateway?
  Decision:
  +Отправлять почтовые сообщения
  -Вызывать функцию из Yandex Serverless Functions
  -Обращаться в Yandex Object Storage
  -Формировать статический ответ
  Task:
  Какими способами Yandex API Gateway может обработать запрос?
  Decision:
  +Обратиться к Yandex Object Storage
  +Вызвать функцию из Yandex Cloud Functions
  +Автоматически сформулировать статический ответ
  +Отправить запрос на другой URL
  Task:
  Что нужно сделать, чтобы настроить сервис?
  Decision:
  -Обратиться в службу поддержки за ID
  +Написать спецификацию
  +Создать экземпляр API-шлюза
  -Настроить доступы к шлюзу
  Task:
  С какого параметра должна начинаться спецификация сервиса?
  Decision:
  -info
  -paths
  +openapi
  -x-yc-apigateway
  Task:
  Зачем нужно указывать сервисный аккаунт в параметрах скрипта?
  Decision:
  -Чтобы записывать логи
  -Чтобы работал мониторинг
  Чтобы обращаться к функциям или Object Storage с авторизацией
  -Чтобы разрешить запросы к сервису сторонним пользователям
  Task:
  Что должен сделать сервис при том или ином типе пути?
  Decision:
  dummy - Выдать статический ответ
  cloud-functions - Вызвать функцию сервиса Yandex Cloud Functions
  http - Отправить http-запрос
  object-storage - Обратиться к сервису Yandex Object Storage
  Task:
  Что выдаёт наше тестовое API при вызове метода /hello без параметров?
  Decision:
  -Hello, User!
  +Hello, world!
  -Hello!
  -Username
  Task:
  Какой код ошибки выдаёт функция, если не указан секрет?
  Decision:
  -400
  +401
  -402
  -403
  Task:
  Среди способов обработки запросов API-шлюзом есть следующие:
  Decision:
  +Статический ответ
  +Динамический ответ
  +Вызов Cloud Function
  +Обращение в Object Storage
  +Перенаправление запроса на другой URL
  -Перенаправление запроса на устройство IoT
  Task:
  Для работы с API Gateway можно использовать:
  Decision:
  +Консоль управления
  -Любой терминал с установленным Yandex CLI
  +Yandex Cloud REST API
  Task:
  Спецификацию шлюза можно написать на основе спецификации:
  Decision:
  -OpenAPI 2.8
  +OpenAPI 3.0
  -OpenAPI 3.1
  -Все перечисленные варианты
  Task:
  Что такое RU для Serverless YDB?
  Decision:
  -Свидетельство того, что YDB разработана в России
  -Сумма в российских рублях, которую пользователь платит за использование YDB
  +Request Unit — универсальная единица измерения стоимости исполнения запроса YDB Serverless, к которой привязываются разные варианты тарификации
  Task:
  Что означает совместимость с AWS DynamoDB API? Выберите все правильные варианты:
  Decision:
  +Доступность документных таблиц
  -Возможность обращаться к таблицам, хранящимся в AWS DynamoDB.
  +Доступность совместимого API для работы с документными таблицами
  +Возможность использовать AWS CLI и AWS SDK для создания приложений
  Task:
  Как называется тип очередей, который сохраняет последовательность элементов?
  Decision:
  -LIFO
  +FIFO
  -UFO
  -Stack
  Task:
  В каких задачах полезны очереди?
  Decision:
  -Хранения данных
  -Обработки данных
  +Передачи данных
  -Генерации данных
  Task:
  Сколько поставщиков и потребителей может быть у очереди?
  Decision:
  -1
  -2
  -3
  +В теории — бесконечное количество. На практике — зависит от конкретной очереди
  Task:
  Что происходит с сообщением, когда получатель начал обрабатывать сообщение?
  Decision:
  -Передаётся другому получателю
  +Остаётся в очереди, но скрывается от других
  -Удаляется
  Task:
  Какие типы очередей поддерживает сервис YMQ?
  Decision:
  -Стандартные
  -По модели FIFO
  +Оба типа     
  Task:
  Очереди FIFO в Yandex Message Queue поддерживают:
  Decision:
  +Любое количество поставщиков и потребителей
  -Ограниченное количество поставщиков и потребителей
  -Ограниченное количество потребителей
  Task:
  Стандартные очереди в Yandex Message Queue:
  Decision:
  +Пытаются сохранять порядок полученных сообщений при передаче поставщикам, но не гарантируют его
  -Гарантируют сохранение порядка полученных сообщений при передаче поставщику
  -Всегда отдают сообщения поставщикам в произвольном порядке
  Task:
  Какие ключевые понятия бессерверных решений выделяются их поставщиками?
  Decision:
  -Знаю! Serverless используется для создания микросервисов на Go, разработка ведётся по Agile, без которой теряется весь смысл использования архитектуры с изолированными компонентами. Поэтому микросервисы, GoLang, Agile!
  +Единого определения нет, но чаще всего упоминают контейнеризацию, динамическую оркестрацию, микросервисы. Впрочем, спорить на эту тему можно бесконечно.
  Task:
  За что разработчик платит при использовании Cloud Functions? Выберите все правильные ответы.
  Decision:
  +Количество вызовов функции
  +Использованные вычислительные ресурсы
  -Резервирование ресурсов
  +Исходящий трафик
  Task:
  Какие концептуальные ограничения есть у сервиса? Выберите все правильные ответы.
  Decision:
  +Функции не могут бесконечно выполнять какую-то задачу.
  -Лог ограничен последней тысячей вызовов функции.
  +При вызове у функции нет информации о результате прошлых запусков.
  Task:
  Какие методы допустимо использовать в спецификации API-шлюза?
  Decision:
  -GET и POST.
  -GET, POST, PUT.
  -GET, POST, DELETE.
  +Можно использовать все HTTP-методы.
  Task:
  Можно ли использовать в спецификации свой домен?
  Decision:
  -Нет, эта функция пока недоступна.
  -Да, но сначала надо подтвердить права на домен в Certificate Manager.
  +Да, но эту функцию надо отдельно подключить, а затем подтвердить права на домен.
  Task:
  Ключевые отличия serverless-режима YDB от managed-режима:
  Decision:
  +Оплата идёт за фактические запросы к базе данных, а не за резервирование мощностей
  +Можно перенести своё приложение из AWS
  -Для использования в приложениях доступен только Document API, нельзя использовать YQL
  Task:
  Что учитывается при тарификации YDB в serverless-режиме:
  Decision:
  +стоимость использования CPU;
  -стоимость использования памяти;
  +хранение данных;
  +ввод и вывод данных.
  Task:
  Для работы с документными таблицами в YDB вы можете использовать:
  Decision:
  +HTTP API;
  +gRPC;
  +AWS CLI;
  +AWS SDK.
  Task:
  Сказывается ли тип очереди на производительности?
  Decision:
  -Да, в очередях FIFO гарантируется исходный порядок сообщений, она разбираются потребителями быстрее, чем стандартные очереди.
  +Да, стандартные очереди разбираются быстрее FIFO.
  -Технически — да, но разница в производительности незначительна и не является решающим фактором при выборе типа очереди.
  Task:
  Какую функцию выполняет таймаут видимости?
  Decision:
  +Скрывает сообщение от получателей на заданное пользователем время, чтобы первый забравший его получатель успел завершить обработку.
  -Определяет время, через которое сообщения отправляются в Dead Letter Queue.
  -Определяет время, на которое добавленное в очередь сообщение скрывается от получателей.
  Task:
  За какой из элементов обеспечения информационной безопасности всегда отвечает пользователь независимо от модели использования облачной инфраструктуры?
  Decision:
  -Резервное копирование данных
  -Обеспечение безопасности ОС
  +Управление правами доступа к ресурсам
  -Ведение журнала аудита
  Task:
  Что влияет на необходимый уровень защищённости информации по российскому законодательству:
  Decision:
  +Обрабатываются ли данные сотрудников или внешних пользователей
  -Перечень актуальных угроз безопасности
  +Категория персональных данных
  -Число сотрудников оператора персональных данных
  Task:
  К какой категории персональных данных относится состояние здоровья:
  Decision:
  +Специальные
  -Биометрические
  -Общедоступные
  -Иные
  Task:
  Какие действия должен выполнять пользователь для реализации третьего уровня защищённости при работе с персональными данными в облаке в соответствии с приказом ФСТЭК России от 18.02.2013 № 21?
  Decision:
  +Настраивать средства аутентификации внутри виртуальных машин
  +Контролировать доступ к виртуальным машинам
  +Обеспечивать антивирусную защиту виртуальных машин
  +Защищать данные от раскрытия и модификации при их передаче через интернет
  +Регистрировать события безопасности
  Task:
  Можно ли авторизоваться без предварительной аутентификации?
  Decision:
  +Можно. Если доступ к ресурсу или объекту открыт для всех пользователей интернета.
  -Нет
  Task:
  Какой тип аккаунтов лучше использовать для сотрудников компании, у которой есть своя система учёта пользователей?
  Decision:
  -Сервисный
  +Федеративный
  -Яндекс ID
  Task:
  Какие типы ролей есть в сервисе IAM Yandex.Cloud?
  Decision:
  -Администраторские
  +Сервисные
  -Пользовательские
  +Примитивные
  Task:
  Один из типов ролей в IAM называется сервисным, потому что:
  Decision:
  -такие роли предназначены только для сервисных аккаунтов
  +такие роли даются только на один сервис
  -они входят в ролевую модель сервиса IAM
  Task:
  Что такое DDoS-атака?
  Decision:
  -Атака типа «Отказ в обслуживании», которая выполняется за счёт распределения нагрузки между серверами
  +Атака типа «Отказ в обслуживании», которая основана на отправке большого числа пакетов TCP SYN или трафика прикладных протоколов
  -Атака типа «Человек посередине» за счёт перехвата ключей шифрования в распределённой инфраструктуре
  Task:
  В чём заключается основная идея принципа наименьших привилегий, используемого для обеспечения информационной безопасности инфраструктуры?
  Decision:
  +Каждый элемент должен иметь доступ только к той информации и ресурсам, которые необходимы для их функционирования
  -Каждая виртуальная машина должна запускаться с минимально необходимыми ресурсами
  -Каждый сервис должен запускаться под учётной записью с минимальными правами 
  Task:
  Какие типы сертификатов поддерживает Certificate Manager?
  Decision:
  +Пользовательские
  -Внешние
  +Let’s Encrypt
  Task:
  Происходит ли автоматическое обновление пользовательских сертификатов с помощью сервиса Certificate Manager?
  Decision:
  -Да
  +Нет
  Task:
  Каких целей информационной безопасности можно достичь с помощью сервиса KMS?
  Decision:
  +Целостность
  -Доступность
  +Конфиденциальность 
  Task:
  Как называется подход, при котором ключ шифрования данных шифруется дополнительным ключом?
  Decision:
  -secondary encryption
  -asymmetric encryption
  +envelope encryption
  Task:
  Можно ли расшифровать данные с использованием помеченной на удаление версии ключа?
  Decision:
  -Да
  +Нет
  Task:
  Чтобы назначить роли, необходимые для управления ключами шифрования, используется сервис:
  Decision:
  -KMS
  +IAM
  -RBAC
  Task:
  Может ли пользователь работать с ресурсами вашего облака, не имея в нем роли resource-manager.clouds.member?
  Decision:
  -Да, если у него есть роль admin
  +Да, если он имеет доступ только к публичным ресурсам
  -Нет
  Task:
  К привилегированным относятся пользователи, имеющие следующие роли:
  Decision:
  -resource-manager.clouds.member
  +billing.accounts.owner
  -container-registry.admin
  +resource-manager.clouds.owner
  Task:
  Какие правовые документы определяют требования к защите персональных данных?
  Decision:
  -ГОСТ Р 57580.1‑2017
  +GDPR
  +Федеральный закон №152-ФЗ Российской Федерации
  -PCI DSS
  +приказ ФСТЭК России от 18.02.2013 № 21
  Task:
  Федерация удостоверений позволяет:
  Decision:
  -Провести аутентификацию пользователя с учетной записью Яндекс ID
  +Предоставить доступ к облаку пользователю, который прошел аутентификацию через поставщика удостоверений
  -Выполнять операции с облачными ресурсами от имени приложений
  Task:
  Если ключ шифрования помечен, как запланированный к удалению, то:
  Decision:
  -воспользоваться им для расшифрования данных можно, пока он не удален
  -воспользоваться им для расшифрования можно, но только для тех данных, которые были им зашифрованы
  +воспользоваться им для расшифрования нельзя
  Task:
  Какие основные факторы влияют на стоимость ресурсов в Yandex.Cloud?
  Decision:
  +Количество ресурсов
  -Стоимость ресурсов Yandex.Cloud фиксированная и зависит только от установленных тарифов
  +Время использования ресурсов
  Task:
  Сколько облаков можно привязать к одному платёжному аккаунту?
  Decision:
  -Одно облако
  +Любое количество облаков
  -Бесплатно — три облака, потом любое количество за деньги
  Task:
  Вы физическое лицо из Киргизии. Какой тип платёжного аккаунта вы можете открыть?
  Decision:
  -Личный аккаунт. Он подходит для физических лиц.
  -Бизнес-аккаунт. Нерезидентам РФ и РК можно иметь только такой тип аккаунта.
  +Никакой. Yandex Cloud не работает с физическими лицами — нерезидентами РФ и РК.
  Task:
  Что произойдёт, если баланс лицевого счёта станет нулевым?
  Decision:
  +Начнётся использование кредитного лимита. Когда он будет исчерпан, Yandex Cloud попробует списать деньги с привязанной карты.
  -Ничего не произойдёт. С вами просто свяжется техподдержка.
  -Ресурсы будут заблокированы до пополнения лицевого счёта.
  Task:
  Какие бывают способы мониторинга затрат в Yandex.Cloud?
  Decision:
  +Просмотр детализации затрат в консоли
  -Просмотр истории платежей
  +DataLens
  +Отгрузка детализации в формате CSV
  -Калькулятор тарифов
  Task:
  Группировку по продуктам стоит использовать, если...
  Decision:
  +В облаке несколько продуктов одного сервиса, но с разными конфигурациями
  -В платёжном аккаунте несколько облаков, но с разными сервисами
  +Вы хотите узнать подробную детализацию по каждой SKU
  -Вы хотите посмотреть не только стоимость сервиса, но и его процент от общего потребления
  Task:
  В DataLens можно следить за потреблением:
  Decision:
  +По облакам
  +По каталогам
  +По сервисам
  +По ресурсам
  +Конкретной виртуальной машины
  Task:
  В чём преимущество экспорта детализации в CSV-файл?
  Decision:
  +Обработку CSV-файлов можно автоматизировать
  -Выгрузка детализации в Object Storage показывает потребление по продуктам
  -Данные о потреблении обновляются чаще, чем в консоли управления и DataLens
  Task:
  Что произойдёт, если бюджет будет превышен?
  Decision:
  -Потребление ресурсов остановится автоматически.
  -Средства с лицевого счёта перестанут списываться.
  -Облако будет заблокировано.
  +Вы получите уведомление. Больше ничего не случится.
  Task:
  Представьте, что у вас интернет-магазин купальников. Количество покупателей растёт летом и падает зимой. Что лучше всего поможет сэкономить?
  Decision:
  -Управляемые БД
  +Instance Groups
  -Прерываемые виртуальные машины
  Task:
  В каких случаях стоит использовать ВМ с гарантированной долей vCPU ниже 100%?
  Decision:
  +Для пилотного проекта.
  -Когда нагрузка на ВМ распределяется неравномерно по времени.
  -Если используются средства гранта.
  Task:
  Почему управляемые БД выгодны, даже если у вас есть сотрудники для их администрирования?
  Decision:
  -Так можно сэкономить на аренде ВМ.
  +Так можно освободить сотрудников для работы над продуктами компании, что принесёт больше прибыли.
  +Стоимость управляемых БД значительно меньше зарплат собственных специалистов.
  Task:
  От чего зависят затраты в Yandex.Cloud?
  Decision:
  +От количества ресурсов и продолжительности их потребления. Такая модель оплаты называется Pay as you go.
  -От тарифного плана. Это модель оплаты по подписке.
  Task:
  Вы создали две группы виртуальных машин: в первой группе 20 ВМ с 5% vCPU, а во второй — две ВМ с 50% vCPU. Будут ли отличаться затраты на эти группы?
  Task:
  -Нет: в модели Pay as you go на затраты влияет количество потреблённых ресурсов, а каждая группа ВМ в сумме потребляет по 100% vCPU.
  -Нет: стоимость сервиса Compute оплачивается сразу на месяц и не зависит от количества потреблённых ресурсов.
  +Да: итоговая стоимость складывается из стоимости всех SKU, каждая из которых тарифицируется по своим правилам.
  Task:
  В последнее время вы не успеваете следить за затратами в облаке, так как загружены техническими вопросами. Бухгалтер может отслеживать и оптимизировать расходы. Но вы боитесь давать ему доступ к облаку: вдруг он что-нибудь там сломает. Как лучше поступить?
  Decision:
  -Каждый день делать бухгалтеру скрины с детализацией и отправлять на email.
  +Предоставить бухгалтеру доступ к платёжному аккаунту облака с ролью admin, а в самом облаке оставить доступ с минимальными привилегиями — resource-manager.clouds.member.
  -Завести для бухгалтера отдельный платёжный аккаунт.
  Task:
  Как узнать потребление одного кластера Managed Service for MySQL?
  Decision:
  -Никак. Можно узнать только потребление всего сервиса.
  -Настроить группировку детализации в консоли по продуктам.
  +Подключить коннектор биллинга в DataLens, перейти на вкладку Resources и следить за потреблением кластера по его идентификатору.
  Task:
  У вашей компании десять ВМ. Пять из них вы используете для рендеринга видео одного клиента, пять других — для другого. Как автоматически генерировать счета на оплату услуг?
  Decision:
  -Завести для каждого клиента облако.
  -Завести для каждого клиента платёжный аккаунт.
  +Обозначить ВМ метками по принадлежности к клиенту и настроить генерацию счетов на основе CSV-файла.
  Task:
  В каких случаях пригодится функция Бюджеты?
  Decision:
  -Если у вас небольшой проект и вам необходим бюджетный тариф на услуги Yandex Cloud.
  +Если вы тестируете продукт и не знаете, сколько он может потребить ресурсов. Когда сумма бюджета будет достигнута, вы получите уведомление и сможете решить, продолжать ли тест.
  -Если вы хотите подстраховаться от переплаты при всплеске потребления ресурсов. Как только сумма бюджета будет достигнута, потребление ресурсов автоматически остановится.
  Task:
  Как экономить на виртуальных машинах?
  Decision:
  +Покупать долю vCPU меньше 100%.
  +Запускать прерываемые машины.
  +Использовать Instance Groups.
  -Ставить на ВМ свою ОС.
  Task:
  В чём преимущество резервирования ресурсов на длительный срок?
  Decision:
  +Цена на ресурсы формируется со скидкой.
  +Цена останется прежней, даже если изменятся тарифы Yandex Cloud.
  +Цена не зависит от колебаний курса рубля.
  Task:
  Выберите относящиеся к Git определения
  Decision:
  +Система с открытым исходным кодом
  +Считается современным стандартом в разработке ПО
  +Имеет распределенную структуру
  -Имеет единственную центральную копию VCS
  Task:
  Зачем нужна работа с ветками при разработке ПО?
  Decision:
  +Существует стабильная версия кода и ее необходимо сохранить
  +Идет параллельная разработка новой функциональности разными программистами
  +Отсутствие риска изменения своей части кода из-за чужих изменений
  +Возможность по разному реализовать одну и ту же идею и в дальнейшем сравнить
  Task:
  Interview (Developer)
  Task:
  Укажите верные утверждения о списках:
  Decision:
  +Изменяемая коллекция данных
  -Неизменяемая коллекция данных
  +Индексируемая коллекция
  -Неиндексируемая коллекция
  -Состоит только из уникальных элементов
  +Состоит из любых элементов
  Task:
  Укажите верные утверждения о кортежах:
  Decision:
  -Изменяемая коллекция данных
  +Неизменяемая коллекция данных
  +Индексируемая коллекция
  -Неиндексируемая коллекция
  -Состоит только из уникальных элементов
  +Состоит из любых элементов
  Task:
  В чем отличие списка от кортежа?
  Decision:
  +Список - изменяем, кортеж - нет
  -Кортеж изменяем, список - нет
  -Нет отличий, кроме обозначения
  Task:
  Как происходит процесс присваивания в Python?
  Decision:
  -Данные перемещаются не сохраняя предыдущую связку
  -Данные копируются
  +Данные связываются ссылками на объекты
  -Данные перемещаются сохраняя предыдущую связку
  Task:
  Чем отличаются set и frozenset?
  Decision:
  -set неизменяемые множества, frozenset – изменяемые
  +set изменяемые множества, frozenset – неизменяемые
  -ничем
  Task:
  Какую роль выполняет контекстный менеджер?
  Decision:
  +Позволяет закрывать файл по завершению работы вне зависимости от наличия ошибок внутри конструкции менеджера
  -Никакую, бесполезная конструкция
  -Позволяет обрабатывать ошибки в операторе except
  -Это единственная конструкция, в которой можно обойти файл при помощи цикла
  Task:
  Какая ошибка не допускает даже запуск программного кода?
  Decision:
  +Синтаксическая ошибка
  -Любое исключение
  -Логическая ошибка
  Task:
  Можно ли превратить псевдокод в язык программирования?
  Decision:
  -Нет, так как он кардинально отличается от языка программирования
  -Да, если построить специальный компьютер, работающий на псевдокоде
  +Да, если написать соответственный интерпретатор, выполняющий этот код
  -Нет, так как каждый программист будет писать псевдокод по-своему
  Task:
  Для чего используют блок-схемы?
  Decision:
  -Для визуального программирования
  -Для правильной постановки задач работникам
  +Для визуализации работы алгоритма
  -Для визуализации процесса принятия решений
  Task:
  Почему нет универсального псевдокода?
  Decision:
  -Универсальный стандарт псевдокода есть
  +Для каждой ситуации удобнее использовать свой вариант псевдокода
  -Программисты разных дисциплин не могут договориться
  -Стандарты псевдокода меняются слишком часто для универсальности одного вида псевдокода
  Task:
  Какие виды структур алгоритмов различают?
  Decision:
  +Линейная
  -Постепенная
  +Разветвленная
  +Циклическая
  -Упрощенная
  -Алгебраическая
  Task:
  В основу какой технологии были положены структуры алгоритмов?
  Decision:
  -Структур баз данных
  -Архитектуры компьютера
  +Структурного программирования
  -Структурного анализа
  Task:
  Что такое алгоритм?
  Decision:
  -Описание работы математической формулы
  +Формально описанная последовательность действий
  -Объяснение принципов работы логического неравенства
  -Перечисление вариантов развития событий
  Task:
  Что такое псевдокод?
  Decision:
  -Прототип языка программирования
  -Формальный язык реляционных баз данных
  -Символьная кодировка системы Windows
  +Неформальный язык для описания элементов программ
  Task:
  Какие типы базовых операций различают?
  Decision:
  +Арифметические
  +Операции сравнения
  +Логические
  -Алгебраические
  -Математические
  -Операции над данными
  Task:
  Что такое операция?
  Decision:
  +Действие или их совокупность для достижения определенной цели
  -Вид манипуляций над данными
  -Конверсия одного формата данных в другой
  -Алгебраическая закономерность решения проблемы
  Task:
  Что такое условное ветвление?
  Decision:
  +Базовая конструкция, обеспечивающая выполнение команд программы при истинности логического утверждения
  -Базовая конструкция, обеспечивающая направление потока данных в зависимости от выбора пользователя
  -Базовая конструкция, управляющая истинностью или ложностью некой последовательности действий
  -Базовая конструкция, управляющая порядком вызова программ операционной системой
  Task:
  Каким образом алгоритм сортировки по ведрам сортирует данные от меньшего к большему?
  Decision:
  +Распределяет данные по небольшим контейнерам, сортирует эти контейнеры, а затем скрепляет по порядку
  -Распределяет данные по небольшим контейнерам, сортирует эти контейнеры, а затем скрепляет в обратном порядке
  -Распределяет данные по небольшим контейнерам, сравнивает эти контейнеры между собой, а затем соединяет в нужном порядке
  -Соединяет данные из небольших контейнеров в массив, а затем распределяет по новым контейнерам
  Task:
  Каким образом алгоритм пузырьковой сортировки сортирует данные от большего к меньшему?
  Decision:
  +Путем сравнения каждого индекса массива со следующим по порядку. Если значение на следующем индексе больше, меняет их местами
  -Путем сравнения каждого индекса массива с предыдущим по порядку. Если значение на предыдущем индексе больше, меняет их местами
  -Путем сравнения каждого индекса массива со следующим по порядку. Если значение на следующем индексе меньше, меняет их местами
  -Путем разбития групп индексов на подгруппы и дальнейшей сортировки этих подгрупп
  Task:
  Зачем используются циклы в работе с массивами?
  Decision:
  +Для эффективного перебора каждого индекса массива
  -Как единственный способ доступа к элементам массива
  -Для создания массива нужного размера
  -Для изначальной нумерации индексов
  Task:
  Что такое набор данных?
  Decision:
  -Некое количество не связанной между собой информации
  +Множество элементов, объединенных в целое для решения задачи
  -Определенный объем однотипной информации с фиксированным размером
  -Элементы, соединенные в структуру для более простого и понятного доступа к ним
  Task:
  Что такое массив?
  Decision:
  -База данных больших размеров
  +Непрерывное хранилище однотипной информации
  -Непрерывное хранилище разнотипной информации
  -Упорядоченные участки разрозненной памяти
  Task:
  Укажите верные утверждения о множествах:
  Decision:
  +Изменяемая коллекция данных
  -Неизменяемая коллекция данных
  -Индексируемая коллекция
  +Неиндексируемая коллекция
  +Состоит только из уникальных элементов
  -Состоит из любых элементов
  Task:
  Инструменты VCS имеют два основных типа удаленной архитектуры:
  Decision:
  +Централизованный
  +Распределенный
  -Несвязанный
  -Циклический
  Task:
  В чем заключается ключевое отличие распределенной модели от централизованной?
  Decision:
  +Распределенная модель сохраняет полную копию исходного кода на каждой копии VCS
  -Распределенная модель имеет одну удаленную главную копию VCS
  Task:
  Interview (Sql)
  Task:
  У Вас есть MySQL-сервер, который обслуживает запросы большого числа пользователей. В какой-то момент Вы обнаруживаете, что на сервере периодически увеличивается значение переменной 'Aborted_connects', при этом в логах MySQL-сервера не появляются новые сообщения. Что может вызывать подобное поведение? Каковы будут Ваши шаги по устранению данной проблемы?
  Task:
  У Вас есть 2 датацентра, соединенные сетью. Опишите, как Вы бы организовали инфраструктуру БД для нового сервиса, в том числе репликацию, мониторинг и резервное копирование. Каковы будут Ваши действия в случае отказа одного из дата-центров?
  Task:
  СУБД - настройка репликации в Postgress или Mysql
  Task:
  индексы в СУБД, что такое, какие бывают их плюсы и минусы
  Task:
  Interview (Web)
  Task:
  Нагрузка на сайт так высока, что мощности одного сервера вас не хватает. Ваши действия?
  Task:
  Необходимо развернуть инфраструктуру для WordPress сайта. Какие технологии и подходы вы выберете, если в дальнейшем будет требоваться делать эту процедуру регулярно для других сайтов?
  Task:
  Необходимо организовать мониторинг работоспособности WordPress сайта. Что для этих целей вы предлагаете использовать? Опишите, какие технологии вы бы выбрали и как они работают. 
  Task:
  Необходимо организовать процедуру бекапа WordPress сайта. Опишите ваши действия, как вы будете это делать. Приведите пример скрипта, который автоматически с заданной периодичностью делает необходимые бекапы. 
  Task:
  Сайт под DDOS атакой. Ваши действия.
  Task:
  В DNS внезапно пропала A запись хоста. Системные администраторы не удаляли её. Ваши предположения, что могло послужить причиной этого?
  Task:
  Какие популярные web-серверы существуют под Linux?
  Task:
  Какие MPM Apache вы знаете? В двух словах опишите их преимущества.
  Task:
  Какие возможны режимы работы PHP в связке с web-сервером?
  Task:
  отличие Nginx от Apache, - подсказка- асинхронный принцип работы Nginx-а, ( одно из основных отличий от Apache и др. серверов приложений)

Helpdesk
  Task:
  (formal; 140-190 words) Your company provided some bad service for an end-customer; it was also done later than promised.
  In your letter, you should:
  1. Explain why work delivery delaying for a week because of technical complexity and thorough testing
  2. Explain why 5 of 30 services (let’s say VMs or some web-services) were down for more than 2 hours last night
  3. Describe the deliverable package (source code, documentation, test plans, etc.)
  4. Inform about full delivery and offer free monitoring of the whole infrastructure
  Task:
  Вопрос клиента: 
  "Мне необходимо продлить сервер и мой домен с сертификатом. Не помню у кого сервер арендовал. Подскажите что для этого сделать? Сайт sos38.ru"
  Необходимо дать клиентоориентированный ответ из той информации, что получится получить.

Tech
  Task:
  При нажатии на кнопку включения компьютера запуск не происходит, светодиод не загорается. Предложите на ваш взгляд способы решения проблемы, которые могут вернуть работоспособное состояние. 
  Task:
  Не тот адрес у принтера Epson WorkForce Pro WF-5690. у него был адрес 169.254... (это смотришь в самом принтере, возле значка wifi). А нужен адрес 10.38.(свой адрес). Поэтому не все компьютеры, которые подключены к принтеру не видят его. И из-за этого выдавало ошибку, что не подключен принтер к компьюетру.
  Decision:
  Нужно поменять айпи адрес. ->С компа заходим в сеть -> ищем наш принтер ->правой кнопкой просмотр веб-стр -> небезопасно -> вводим админский логин и пароль  -> заходим в network/wifi basi-c -> заполняем printer name: EPS5690-31 -> location: 31 (то есть кабинет) -> obtain ipadr: manual  -> ip adr:10.38.(свой адрес) (именно на этот адрес мы сейчас меняем)  -> subnet mask:255..(свой адрес)..  -> default gateway:10.38...,  -> DNS sever setting: manual  -> primary dns server:10.77.(свой адрес).  -> secondary dns server:10.77..(свой адрес).  -> dns host name setting: manual  -> dns domain name setting:manual  -> dns domain name: пишем доменное имя -> register the network interface addr to dns:disable  -> proxy serve setting: do not  use  -> ipv6 setting:enable  -> ipv6 privarty extention:disable -> продолжить  -> ок -> перезагрузим принтер ->Теперь должен быть правильный адрес и долно все работать
  Task:
  Компьютер не видит сетевой принтер Kyocera FS-6525 MFP
  Decision:
  Нужно поменять ip-адрес в самом принтере. Вводим админ и пароль, мастер установки, вводим нужный адрес 10.38...., маски - 255.255...., и основной шлюз - 10.38..., ок, перезагружаемся, включаем и выключаем
  Task:
  Sharp AR-6020 был подключен к моноблоку локально через usb. В кабинете появился новый сотрудник, а значит надо подключить новый ноутбук сотрудника к принтеру Sharp AR-6020. Можно подключать через соседнего компа.
  Decision:
  Для этого в ноутбуке откроем любую папку -> ищем через \\ в адресной строке папку нужного компьютера, который подключен к нашему принтеру  ->В нашем случае - ищем моноблок ->И в папке мы должны будем увидеть нужный принтер. -> В моем случае папка была пустая,так как Моноблок ограничивал доступ к нашему принтеру.  ->  в моноблоке зайти в панель управления  -> устройства и принтеры ->свойства нашего принтера ->доступ ->поставить галочки на общий доступ -> И обратно, подходим к нотбуку -> в адресной строке компьюетра \\ -> появится принтер  ->Правой кнопкой мыши и подключаемся -> Все, принтер после этого заработает на двух компьютерах - мононблок и ноутбук.
  Task:
  сбой аппарата со100 (кеосера  fs-3040mfp)
  Decision:
  застряла бумага
  Task:
  Настроить новый принтер Epson WorkForce Pro WF-5690
  Decision:
  включ без кабеля, настраиваем дата и время и язык. подкл кабель, а4, без факса, устанавл дрйвера - soft/epsonwf64, устанвл prtDRV, перезагр, возле часов появится ярлык EPSON, прав кнопка, обновл дрйвера, ок, настройка принтера, прав кнопка, сервис, обвнол ПО, на верх галочки дб, настнавл, 2х галочек больше нету, выход,Сначала делаем на компе своем прошивку через Epson software, обязательно выбираем правильный принтер. обновляем, распечает листовку (2, 3), чтобы узнать какой IP адрес стоит у принтера. Настройки - статус сети - состояние сети - печать (4 лист). IP адреса постоянно меняются, поэтому нужно новый поставить в серверной. был адрес tIp1, general information  9с:АЕ:... Идем в сервер - диспетчер сервера DHCP - резервирование - создать рез-ние - и что еще было ... - идем обратно в наш кабиент - у принтера меняем thost имя, ищем у себя на компе ту сеть - просмотр Web, страницы устройства: adminstrat settle - change - tPassword, contacts add  - name: библиотеки и студенты, адр tIp2\общ папка\библиотека\scan, tIp2\студент\scan 
  Task:
  Как протестировать жесткий диск на ошибки? На всех компах устаовлены Raid. Поэтому в биос надо сменить режим Raid на Ide
  Decision:
  Bios, integer, SATA [Raid], запустить с флешки образ, запустить Victoria, выбрать диск, smart, тестирование, убрать галки в grid, звук, hints, scan, смотреть на повреждения - оранжевый, красный. Если сообщения такого вида:
  Warning! block start at...
  Значит надо менять диск
  Task:
  Как протестировать блок питания?
  Decision:
  Тестер powersupply, 6-пин разъем распиновка
  Task:
  После отключения света и перезагрузки, пищит сервер и появляется такое сообщение на сервере.
  The following VDs are missing: 00. If you proceed (or load the configuration utility), these VDs will be removed from your configuration. If you wish to use them at a later time, they will have to be imported. If you believe these VDs should be present, please power off your system and check your cables to ensure all disks are present. Press any key to continue, or 'C' to load the configuration utility.
  Нажать пробел и зайти в программу C:\ПУТЬКПРОГРАММЕ\MegaRAID Storage Manager\startupui.bat 
  во вкладке \Physical\ видим статус:
  Slot: 7 Unconfigurate Bad 
  Нужно менять на новый диск, сервер в моем случае автоматически сделает rebuild. Но пока новго диска нету, настроим временно кнкфитгурацию программы
  Decision:
  Во вкладке \Logical\Unconfigurate Drivers\ выбрать Change to Unconfigured Good. 
  Во вкладке \Logical\LSI Mega raid выбрать Scan Foreign Configuration и перезагрузиться. Зайти в программу C:\ПУТЬКПРОГРАММЕ\MegaRAID Storage Manager\startupui.bat и посмотреть статусы. Если rebuild - смотреть во вкладке \Dashboard\Drive operations in progress
  Task:
  Один диск в программе megaraid C:\ПУТЬКПРОГРАММЕ\MegaRAID Storage Manager\startupui.bat показывает статус failed.
  Decision:
  Во вкладке Physical выбрать проблемный диск с ошибкой failed, пометить офлайн make drive offline и вернуть обратно в онлайн make drive online
  Task:
  Необходимо установить драйвер для неизвестного устройства (нет данных о необходимом драйвере). Предложите на ваш взгляд способы решения задачи. 

Применение материалов и компонентов для создания устройств
	Task:
	Основные формулы квантовой механики, используемые в наноэлектронике
	Task:
	Получите выражения для плотностей потока вероятности прошедших j2^(+), падающих j1^(+) и отраженных j1^(-) частиц при прохождении частицы над потенциальной ступенькой
	Task:
	Изучение сериальных закономерностей в спектре водорода, экспериментальное измерение длин волн серии Бальмера атома водорода, определение значения постоянной Ридберга
	Task:
	Квантовая частица в одномерной потенциальной яме. Проведение вычислительного эксперимента по изучению влияния параметров одномерной потенциальной ямы на уровни энергии, волновые функции и распределение электронной плотности для связанных состояний электрона
	Task:
	Изучение спектров атомов щелочных металлов
	Task:
	Спектральные линии щелочных металлов. нахождение положения линий в видимой области излучения паров натрия и измерение дублетного расщепления каждой линии.
	Task:
	Определение энергии диссоциации молекулы йода по спектру поглощения. Знакомство со структурой молекулярных спектров, типами энергии молекул, определение энергии диссоциации молекул йода по электронно-колебательному спектру поглощения и основных параметров этого спектра
	Task:
	Изучение простого эффекта Зеемана. Исследование расщепления спектральных линий в магнитном поле и определение спектроскопическим методом удельного заряда электрона и напряженности магнитного поля. Исследование поперечного эффекта Зеемана. Определение удельного заряда электрона.  Дисперсия и разрешающая способность интерферометра Фабри-Перо. Распределение интенсивности между расщеплёнными компонентами и построение контура спектральной линии. Измерение напряжённости магнитного поля.
	Task:
	Изучение спектрального состава излучения гелий-неонового лазера
	Task:
	Освоить методику градуировки теплового узла ростовой установки и изучить особенности выращивания монокристаллов из расплава методом Чохральского
	Task:
	Освоить методику градуировки теплового узла
	Task:
	Выращивание монокристаллов методом Чохральского. Изучение особенностей выращивания монокристаллов фторида лития из расплава методом Чохральского
	Task:
	Градуировка теплового узла ростовой установки. Выращивание монокристаллов фторида лития методом Чохральского на ростовой установке РЕДМЕТ - 10М. Ознакомиться с особенностями выращивания монокристаллов хлорида натрия из расплава методом Чохральского на открытом воздухе. Выращивание монокристаллов хлорида натрия на лабораторном стенде методом Чохральского на открытом воздухе.
	Task:
	Фотолюминесцентная спектроскопия: измерение спектров люминесценции твердых тел. Ознакомление с методом фотолюминесцентной спектроскопии путем измерения спектров люминесценции твердых тел при их облучении фотонами в ультрафиолетовой области спектра
	Task:
	Измерения электрофизических параметров полупроводника. определить тип проводимости, удельного электрического сопротивления (УЭС), подвижности и времени жизни носителей заряда (ННЗ) в образцах полупроводникового кремния и освоить базовые теоретические основы применяемых методов
	Task:
	Фотостимулированная люминесценция кристаллов BaFBr:Eu. Ознакомление с механизмом фотостимулированной люминесценции. Получение опыта работы на научной установке
	Task:
	Люминесценция кристаллов при возбуждении рентгеновским излучением (Рентгенолюминесценция). Ознакомление с механизмом возникновения свечения материалов при воздействии высокоэнергетичного фотонного излучения.Измерить спектры излучения кристаллов фторидов в ультрафиолетовой и видимой области спектра
	Task:
	Исследование примесных центров с помощью электронного парамагнитного резонанса. Ознакомление с методом электронного парамагнитного резонанса (ЭПР), изучение работы ЭПР - радиоспектрометра, получение спектров ЭПР исследуемых веществ, практическое закрепление вопросов квантовой механики, связанных с квантованием углового момента и спина
	Task:
	Изучение методов гамма-спектрометрии на примере измерения сцинтилляционных характеристик кристалла NaI-Tl. изучение основных характеристик сцинтилляционного детектора на основе кристалла NaI-Tl. Основными задачами работы являются: подготовка гамма-спектрометрического тракта к работе; изучение работы спектрометрического усилителя ORTEC 570; изучение программного комплекса Angamma для регистрации амплитудных спектров импульсов; измерение основных сцинтилляционных свойств кристалла NaI-Tl. Изучение зависимости амплитуды спектра от коэффициента усиления. Изучение зависимости амплитуды спектра от напряжения на ФЭУ. Изучение зависимости амплитуды спектра от shaping time усилителя. Анализ файла данных. Анализ полученных данных. Определение неизвестного источника гамма-излучения по калибровочному спектру, полученному с помощью источника 137Cs. Зависимость энергетического разрешения сцинтиллятора от поглощенной энергии
	Task:
	Люминесценция кристаллов при возбуждении рентгеновским излучением (Рентгенолюминесценция). Ознакомится с механизмом возникновения свечения материалов при воздействии высокоэнергетичного фотонного излучения. Измерить спектры излучения кристаллов фторидов в ультрафиолетовой и видимой области спектра
	Task:
	Термолюминесцентная дозиметрия: измерение поглощенной дозы ионизирующего излучения. освоить методику измерения поглощенной дозы ионизирующего излучения с использованием твердотельных монокристаллических детекторов ДТГ-4. Изучение кривых термовысвечивания. Определение поглощенной дозы.  

Излучение и распространение радиоволн
    Decision:
    Декаметровые радиоволны отражаются на высотах 80-400км
    Decision:
    Концентрация свободных электронов в максимуме ионизации ионосфере составляет 10^6 см^(-3)
    Decision:
    Групповая скорость радиоволны при вертикальном зондировании ионосферы меньше скорости света
    Decision:
    Максимальная дальность скачка радиоволны при отражении от ионосферы составляет 4000 км
    Decision:
    Глубокая засветка теневой зоны при односкачковом распространении декаметровых радиоволн может быть за счет рассеяния на ионосферных неоднородностях
    Decision:
    Лучи Педерсена распространяются в окрестностях максимума ионосферной ионизации
    Decision:
    Дифракция радиовоон вдоль поверхности Земли более эффективна в киллометровом диапозоне
    Decision:
    Орбиты GPS спутников находятся на высотах, порядка 20000 км
    Decision:
    Подповерхностное зондирование на большие глубины более эффективно с помощью радиоволн километрового диапазона
    Decision:
    Чем больше рабочая частота декаметрового радиосигнала, тем больше дальность зоны молчания
    Task:
	Радар некогерентного рассеяния (НР). Познакомиться с методом НР для изучения ионосферы. Ознакомиться с приборами и методами обработки полученных сигналов.
    Decision:
    Нам подробно рассказывали о методе НР, показывали принятые сигналы до обработки и после. Были представлены различные презентации с результатами данных и их графиками. Показали спектр сигнала НР, из которого можно легко определить различные параметры, такие как температура ионов и электронов, ионный состав и скорость дрейфа плазмы.
	Мы увидели, что данный метод является достаточно эффективным и может использоваться в различных целях, например, можно увидеть поведение ионосферы и предсказать её влияние на спутники.
	Вывод: Данная работа показала, что ионосфера нуждается в подробном изучении, так как есть множество факторов, по-разному влияющих на неё. Существуют различные инструменты по изучению ионосферы, например, множество различных радаров. В данной работе использовался радар НР. С помощью этой установки были получены спектры НР, на основе которых мы получили необходимую информацию о среде
    Task:
    GPS радиозондирование ионосферы. Познакомиться с GPS радиозондированием ионосферы. Ознакомиться с приборами. Проанализировать наблюдаемые эффекты.
    Decision:
    нам показали оборудование GPS, которое принимает сигнал со спутников, программу, которая показывает расположение видимых спутников. Поднявшись на крышу здания ИСЗФ, мы увидели антенну GPS.
    Далее, мы работали в программе Grapher 7 и, ознакомившись с полученными данными, строили по ним графики зависимости групповой скорости от времени (слева) и зависимость фазовой скорости от времени (справа).
    Затем построили график траектории движения спутника, используя данные азимута и угла места.
    Построили график глобального электронного содержания за год.
    Ознакомились с динамикой глобального и регионального электронного содержания, рассчитанными по данным станции CODG
    Наблюдали на карте Земли на разных участках изменение электронной концентрации от времени.
    На данном примере я верно определил, что в местах повышения концентрации электронов наблюдалась вспышка на Солнце.
    В данной работе мы увидели, как хорошо наблюдается зависимость ионной и электронной концентрации от солнечной активности. С увеличением солнечной активности увеличивается полное электронное содержание. Данный способ радиозондирования хорошо показывает изменение концентрации ионов и электронов в ионосфере и является полезным для её изучения.
    Task:
    Ионозонд вертикального зондирования ионосферы. Познакомиться с методом вертикального зондирования ионосферы, ознакомиться с приборами, обработать полученные данные и проанализировать их.
    Decision:
    нам рассказали о приборах зондирования и показали их. Мы ознакомились с приёмником, передатчиком и блоком управления и обработки данных.
    Нам продемонстрировали полученные ионограммы, на которых хорошо видны E- и F-слои.
    Передатчик излучает фаза-манипулированный код, и на приёмник приходит отражённый сигнал, совпадающий с плазменной частотой. Прибор работает всё время и строит ионограммы каждые 15 минут.
    На графике можно увидеть раздвоенный F-слой. Это происходит из-за обыкновенной и необыкновенной мод (о- и х-компоненты). Так же на графике присутствует сигнал, похожий на F-слой, который находится выше. Этот сигнал называется кратником (сигнал, отражённый от земли и снова от ионосферы, он возвращается на приёмник с двойной задержкой).
    Далее, мы интерактивно обрабатывали данные, работая с ионограммами. Можно проследить изменение ионосферы в течение суток.
    Из результатов обработки были получены такие данные:
    Слой F2: критическая частота - 6,9 МГц в 10:00 UT, max высота - 380 км в 18:00 UT.
    Слой E: критическая частота - 3,3 МГц в 05:45 UT, max высота - 111 км в 02:45 UT.
    На ионограммах можно наглядно увидеть отражённые сигналы и границу ионосферы. Но на самом деле истинная граница рассчитывается немного по-другому, учитывая некоторые параметры, и поэтому нужно вручную обрабатывать полученные данные, и тогда можно найти истинные значения. Данная работа является полезной, так как она достаточно детально показывает, как изменяется ионосфера, и с помощью неё можно получить необходимые нам параметры.

Радиоэлектроника
	Task:
	RC - генератор. Исследование частотных характеристик усилителя и моста Вина. Наблюдение колебаний генератора. Определение колебательной характеристики усилителя с инерционной нелинейностью и без нее. Наблюдение влияния инерционной нелинейности на генерацию. Наблюдение процесса установления колебаний на фазовой плоскости
	Task:
	Воздействие гармонического сигнала на RС-цепи. Для заданной RС цепи рассчитать формулы для амплитудно-частотной и фазочастотной характеристик. Номиналы элементов цепей задаются преподавателем. Определить амплитудно- и фазочастотную характеристики экспериментально. Для этого на макете собрать требуемую цепь и подать на вход сигнал от низкочастотного генератора. В качестве индикатора применять осциллограф. Построить графически в логарифмическом масштабе рассчитанные и экспериментальные амплитудно-частотные и фазочастотные характеристики. При построении в логарифмическом масштабе иметь в виду, что рассчитанные точки уже вычислены в логарифмическом масштабе, то есть на шкале   они равно отстоят друг от друга. Сравнить результаты расчета и эксперимента. 
	Task:
	ГЕНЕРАТОР КВАЗИГАРМОНИЧЕСКИХ КОЛЕБАНИЙ С РЕЗОНАНСНЫМ КОНТУРОМ. В работе изучается воздействие обратных связей на резонансный усилитель и условия возбуждения колебаний (генерация). Исследование влияния обратной связи на усиление и полосу пропускания. Изучение мягкого и жесткого режимов возбуждения. Проверка условия баланса амплитуд. Наблюдение процесса установления колебаний на фазовой плоскости.
	Task:
	Изучение импульсных характеристик транзисторов
	Цель работы - изучение переходных процессов в транзисторе; исследование зависимости длительности нарастания и спада тока коллектора от параметров прибора и схемы; определение влияния барьерной ёмкости коллектора Ск на переходные процессы; измерение длительности времени рассасывания неосновных носителей базы и установление связи этого явления с процессом рекомбинации в базе.
	Task:
	Изучение импульсных частотных характеристик диодов. изучение переходных процессов в диоде, определение времени жизни неосновных носителей тока базы диода, сопротивление базы, контактной разности потенциалов. Переключение диода из прямого направления в обратное. Включение и выключение диода. Частотные свойства диодов.
	Task:
	Обратные связи в усилителе. Исследовать влияние последовательной обратной связи на свойства усилителя. Исследовать влияние параллельной обратной связи на свойства усилителя. Проверить зависимость влияния обратной связи различного типа от сопротивления генератора. Пронаблюдать стабилизирующее действие отрицательной обратной связи.
	Task:
	Составной транзистор. Исследование основных параметров составного транзистора, включенного по схеме  с общим эмиттером, определение коэффициента передачи тока, входного и выходного сопротивления  и предельной частоты усиления.
	Task:
	ПРЕОБРАЗОВАНИЕ ЧАСТОТЫ. АМПЛИТУДНАЯ МОДУЛЯЦИЯ И АМПЛИТУДНОЕ ДЕТЕКТИРОВАНИЕ. Реализовать преобразование частоты. Установить оптимальный режим преобразования. Снять характеристику преобразования в оптимальном режиме. Выделить линейный участок характеристики преобразователя. Снять семейство статических модуляционных характеристик. Получить динамическую модуляционную характеристику. Снять статическую детекторную характеристику - зависимость Io(U~), где U~ - амплитуда переменного напряжения на входе детектора, Io - постоянный ток, возникающий в детекторе. Пронаблюдать амплитудное детектирование. 
	Task:
	Резонанс в последовательном и паралльлном контуре. Исследовать резонансные свойства последовательного контура. Исследовать резонансные свойства параллельного контура. 
	Task:
	Резонанвское усиление и умножение частоты. Исследование усилительных свойств резонансного усилителя в различных режимах. Проверка влияния режима усиления на коэффициент полезного действия. Изучение умножения частоты. 
	Task:
	Спектр сигналов
	Task:
	Три схемы включения транзистора
	Task:
	Усиление сигналов и умножение частоты. Исследование процессов усиления в линейном и нелинейном режимах, изучение процесса умножения частоты. Получение оптимальных режимов. Исследуйте работу резонансного усилителя в линейном и нелинейном режимах. Исследуйте работу умножителя частоты при постоянной величине амплитуды импульса тока стока или при постоянной амплитуде входного сигнала (по указанию преподавателя).
	Task:
	Какова роль полевого транзистора в схеме линейного усилителя?
	Почему в качестве нагрузки в линейном усилителе применяются резистор, колебательный контур?
	Как выбрать рабочую точку на характеристике усилительного элемента линейного усилителя?
	Каковы преимущества нелинейных усилителей?
	Какова связь между формой напряжения на входе и выходе нелинейного резонансного усилителя?
	Какова роль избирательной нагрузки в схемах нелинейных усилителей?
	Как выбрать рабочую точку на характеристике усилительного элемента нелинейного усилителя?
	Изобразить схемы усилителей и умножителей частоты.
	С какой целью применяются усилители?
	С какой целью применяются умножители частоты?
	Как выбрать оптимальный режим работы усилителя?
	Как выбрать оптимальный режим работы умножителя частоты?
	Какова роль нелинейного элемента в схеме умножителя частоты?
	Какова роль избирательной нагрузки в схеме умножителя частоты?
	Как получить осциллограмму тока, протекающего через колебательный контур?
	Какое влияние оказывает выбор напряжения смещения на работу умножителя частоты?
	Decision:
	Для того чтобы в спектре тока появились гармоники, саму форму этого сигнала надо сделать несинусоидальной, используя для этого нелинейный или параметрический элемент.
	Для выделения нужной гармоники из сложного спектра тока можно использовать фильтр, в простейшем варианте – параллельный колебательный контур, настроенный на частоту нужной гармоники.
	Положение рабочей точки выбирается на середине линейного участка сток-затворной характеристики, аппроксимированной отрезками прямых линий.
	Таким образом, усилительные каскады, работающие в нелинейном режиме, обладают большим КПД.
	Несмотря на то, что усилитель работает в нелинейном режиме и форма тока имеет вид косинусоидальных импульсов, выходное напряжение имеет практически синусоидальную (квазигармоническую) форму, т.к. контур в нагрузке каскада, настроенный на несущую частоту, подавляет все высшие гармоники.
	Изменение резонансных свойств контура достигается с помощью кнопки "Rш", которая подключает шунтирующий резистор (Rш=10 кОм) параллельно LC контуру, уменьшая его добротность.
	Положение рабочей точки выбирается так, чтобы угол отсечки был равен 90°. Для этого устанавливается Есм=u0 (напряжение отсечки на графике кусочно-линейной аппроксимации стокзатворной характеристики).
	Task:
	Усилитель на транзисторе. Определение параметров транзистора. Исследовать влияние нагрузки на свойства усилителя. 
	Task:
	ЧАСТОТНАЯ МОДУЛЯЦИЯ И ЧАСТОТНОЕ ДЕТЕКТИРОВАНИЕ
	1. Снять статическую модуляционную характеристику - зависимость частоты генератора от управляющего напряжения смещения. Смещение регулируется, как и в остальных работах, потенциометром макета и измеряется вольтметром, также входящим в макет. Переменное модулирующее напряжение при выполнении этого задания не подается.
	Частота генератора при каждом значении напряжения смещения измеряется измерителем частоты или с помощью фигур Лиссажу. Колебания с исследуемого генератора и с лабораторного генератора подаются соответственно на Х и Y входы осциллографа. Строится статическая модуляционная характеристика - зависимость частоты генератора от напряжения смещения. На полученной характеристике выделяется участок линейного хода, пригодный для модуляции.
	2. Проконтролировать наличие паразитной амплитудной модуляции. Для этого снять и построить график зависимости амплитуды выходного напряжения от смешения. Сопоставив с результатами задания 1, сделать вывод, на сколько процентов меняется амплитуда в пределах линейного хода модуляционной характеристики.
	3. Снять статическую детекторную характеристику частотного детектора - зависимость постоянного тока на выходе детектора от частоты поданного на его вход сигнала. Частота входного сигнала подается с исследуемого ЧМ генератора. Его частота изменяется смещением. При этом непосредственно отсчитывается смещение, а соответствующая частота определяется по графику задания 1. Измерения следовало бы проводить с постоянной амплитудой сигнала генератора. Однако, как уже отмечалось, это условие может нарушаться из-за паразитной амплитудной модуляции. Поэтому, прежде чем строить график детекторной характеристики, следует по результатам задания 2 оценить, насколько менялась амплитуда в диапазоне частот, соответствующем детекторной характеристике. Если отклонение превышает 15%, в результаты измерений следует внести поправку, то есть если амплитуда генератора на какой-то частоте увеличивается в k раз, нужно уменьшить результат измерения тока детектора на этой частоте во столько же раз.
	После внесения соответствующих поправок, если они необходимы, строится график детекторной характеристики L(f).
	4. Пронаблюдать частотную модуляцию и детектирование. Установить смещение, соответствующее середине линейного участка детекторной характеристики. Подать на затворы полевых транзисторов генератора ЧМ модулирующее напряжение с лабораторного генератора. При этом следует иметь в виду, что модулирующая частота должна быть гораздо меньше несущей.
	Пронаблюдать на осциллографе частотно-модулированные колебания на входе детектора и восстановленные низкочастотные на его выходе. Отметить и зарисовать, как изменяется картина на выходе детектора при изменении девиации частоты (амплитудой модулирующего напряжения) и отстройке несущей (величиной напряжения смещения).
	Task:
	Определение времени жизни неосновных носителей заряда
	Цель работы - измерение времени жизни неосновных носителей заряда методом модуляции проводимости точечного контакта. Измерения проводятся на образцах германия при комнатной температуре.
	В работе рассмотрен вопрос о времени жизни неосновных носителей заряда и изложена теория механизма рекомбинации через локальные 

Электронные Вычислительные Устройства И Системы
	Task:
	Сколько времени занимает считывание диска с 800 цилиндрами,каждый из которых содержит 5 дорожек по 32сектора? Сначала считываются все сек-тора дорожки0,начиная с сектора0,затем все сектора дорожки1,начиная с сектора0 и т.д. Оборот совершается за 20мс, поиск между соседними цилиндрами занимает10мс, а в случае расположения считываемых данных в разных частях диска—до 50мс. Переход от одной дорожки цилиндра к другой происходит мгновенно.
	Decision:
	5дорожек *20мс= 100 мс –время считывания одного цилиндра.100мс *800=80с = t время считывания всех цилиндров
	Время считывания диска будет лежать в пределах от t+tmin до t+tmax. Следовательно,считывание диска занимает от 87,99с до 119,95с2.
	Task:
	Система адресации LBA использует 24 битадля обращения к сектору. Каков максимальный объем диска,с которым она можетработать?
	Decision:
	2^24=16777216 кол-во секторов. Один сектор как правило содержит 512 Мбайт. Следовательно,максимальный объём дискасоставляет кол-во секторов*объём одного сектора =8589934592 Мбайт = 8388608Гбайт = 8192 Тбайт = 8 Пбайт
	Task:
	Чтобы вместить фильм длительностью 133 минуты на односторонний DVDс одним слоем, требуется небольшая компрессия. Вычислите, насколько нужно сжать фильм. Предполагается, что для записи дорожки изображения нужно 3,5 Гбайт, разрешающая способность изображения 720x480 пикселов с 24-битным цветом и в секунду меняется 30 кадров.
	Decision:
	Кол-во пикселей (разрешение) N= 720*480 = 345600
	Размер одногокадра R=N*размер(вес) одного пикселя = 345600*24бит = 8294400бит = 1036800байт = 1012,5Кбайт
	Размер одной секунды изображения V= R*30кадров = 30375Кбайт
	Размер изображения фильма X= V*133*60c= 242392500Кбайт ≈ 231Гбайт
	Фильм надо сжать на 231-3,5 = 227,5Гбайт, но обычно вычисляется величина отношение размеров (она более информативна). Следовательно, фильм необходимо сжать в 231/3,5 = 66 раз.
	Task:
	Предположим, что центральный процессор (CPU) содержит кэш-память первого и второго уровня со временем доступа 5нcи 10 нcсоответственно. Время доступа к основной памяти составляет 50нc.Если 20% от всех обращений к памяти приходится на долю кэш-памяти первого уровня, а 60%—на долю кэш-памяти второго уровня, то каково среднее время доступа?
	Decision:
	р1–вероятность при запросе оказаться в кэше первого уровня. р1= 1 т.к. при любом запросе мы сначала оказываемся на кэш-пямяти первого уровня.
	р2–вероятность при запросе оказаться в кэше второго уровня. р2= 1 -0.2 = 0.8 кэш-память первого уровня обрабатывает только 20% запросов, остальные попадают в кэш-память второго уровня.
	р3–вероятность при запросе оказаться в основной памяти. р3= р2–0.6 = 0.2 если запрос был не найден в кэш-памяти то он попадает в основную память.
	<t> = t1*p1+ t2*p2+ t3*p3= 5нс*1 + 10нс*0.8 + 50нс*0.2 = 23нс
	Task:
	Компьютер содержит двухуровневую кэш-память. Предположим, что 80% обращений к памяти—удачные обращения в кэш-память первого уровня, 15%—в кэш-память второго уровня, а 5%—промахи кэша. Время доступа составляет 5нс, 15нс и 60нс соответственно, причем время доступа в кэш-память второго уровня и в основную память отсчитывается с того момента, как стало известно, что они нужны (например, доступ к кэш-памяти второго уровня не может начаться, пока не произойдет npoмаx кэш-памяти первого уровня). Каково среднее время доступа?
	Decision:
	Решение данной задачи аналогично решению задачи 5. Следовательно <t> = t1*p1+ t2*p2+ t3*p3=5нс*1 + 15нс*0.2 + 60нс*0.05 = 11нс
	Task:
	Вычислите логическое выражение (А & В) ˅ С для:
	А -1101000010101101
	В -111 1111100001111
	С -0000000000100000
	Task:
	Компьютер имеет 16 страниц виртуального адресного пространства и только 4 страничных кадра. Изначально память пуста. Программа обращается к виртуальным страницам в следующем порядке: 0,7,2,7,5,8,9,2,4
	Какие из обращений вызовут ошибку с алгоритмом LRU?
	Какие из обращений вызовут ошибку с алгоритмом FIFO?
	Decision:
	ВС –виртуальная страница. О№ -номер ошибки(fault’а). Цифрами 1,2,3,4 обозначены номера заполненных страничных кадров
	Task:
	1% определенной программы отвечает за 50% времени выполнения этой программы. Сравните следующие три стратегии с точки зрения времени программирования и времени выполнения. Предположим, что для написания программы на языке С потребуется 10 0 человеко-месяцев, а программу на языке ассемблера написать в 10 раз труднее, но зато она работает в 4 раза эффективнее.
	Вся программа написана на языке С.
	Вся программа написана на ассемблере.
	Программа сначала написана на С, а затем нужный 1% программы переписан на ассемблере.
	Task:
	Cisc- и Risc-архитектуры процессоров, их характернык признаки. Особенности Risc-процессоров и их влияние на производительность
	Decision:
	Справедливости ради стоит отметить, что эти две архитектуры определяют разновидности двух основных видов процессоров, при этом существуют еще менее распространенные архитектуры, например:
	    архитектура MISC — эта архитектура свойственна нетребовательным процессорам устройств с минимальным набором команд, например: роутеры, миникомпьютеры, IoT и др.;
	    архитектура VLIW — данная архитектура рассчитана для «очень длинных машинных команд», что по факту дает процессору возможность выполнять инструкции с несколькими параллельными операциями;
	    виртуальная архитектура — это своеобразный вид архитектуры, который эмулируется на реальных компьютерах; под такой архитектурой работает Java-виртуальная машина (JVM) и .NET CIL;
	    прочие специфические архитектуры, которые очень узко специализированы, иногда даже под конкретное устройство.
	Сегодня же остановимся подробнее на самых популярных решениях и разберемся, чем отличаются RISC- и CISC-архитектуры между собой. Однако бытует мнение, что сегодня разница между этими архитектурами практически незаметна, по сравнению с периодом их возникновения. Со временем границы между этими архитектурами немного размылись, потому что в процессе своего развития они очень многое переняли друг от друга.
	Архитектура CISC (Complex Instruction Set Computer) — это специальный тип архитектуры процессора, который, во-первых, поддерживает нефиксированную длину команд, а во-вторых, содержит внутри себя большое количество сложных инструкций процессора, которые могут выполнять большое количество действий.
	Хочется сразу отметить, что архитектура CISC настолько популярна, что на ее основе выпускают много разных процессоров, и дать их точное описание сложно, так как они разнообразны по своим свойствам. Но попробовать дать описание философии, которую несет в себе архитектура CISC, можно.
	Архитектура CISC предполагает:
	    минимальное количество регистров общего характера;
	    максимальный объем простых машинных инструкций;
	    присутствие сложных инструкций, которые функционально напоминают операторы высокоуровневых языков программирования;
	    различные варианты адресации инструкций;
	    принятие различных форматов инструкций;
	    присутствие возможности обрабатывать команды «регистр-память».
	Применение архитектуры CISC делает компиляцию программ намного проще за счет уменьшения исполняемых модулей. Но такая архитектура имеет один существенный недостаток — она не дает реализовать новейшие подходы для ускорения работы процессоров, например, такие, которые позволяют организовать в процессоре в определенный момент времени несколько одновременно выполняемых инструкций.
	Архитектура CISC с технической стороны выглядит намного сложнее, чем архитектура RISC, отсюда и вытекают ее плюсы и минусы, например:
	    она является более «мощной», так как позволяет заменять несколько похожих простых инструкций на одну аналогичную, но сложную, при этом не дает возможность ускорять производительные процессы за счет внедрения новых технологий обработки инструкций;
	    процессоры с архитектурой CISC будут немного дороже, чем процессоры с архитектурой RISC с аналогичными параметрами.
	Наиболее яркими процессорами с такой архитектурой являются:
	    х86 (IA-32);
	    x86_64 (AMD64).
	Архитектура RISC появилась уже после CISC, так как технологии шагнули вперед: открывались новые возможности, поэтому пришла необходимость что-то менять и в процессорах.
	Многие разработчики стали замечать, что потенциал архитектуры CISC не использовался полностью, поэтому множество ее сложных инструкций просто оставались без дела. Плюс была явная сложность в правильном выборе нужной инструкции для компилирования конкретной программы — это также вводило в ступор. Поэтому было принято решение создать процессор с архитектурой, в основе которой будет находиться множество простых инструкций.
	То есть основной подход архитектуры RISC заключается в том, чтобы заменить сложные инструкции набором простых, соответственно, сократить объем сложных команд для самого процессора. При этом «длина» простых инструкций является постоянной, а время на их выполнение примерно одинаковым. За счет этого в архитектуре RISC удалось внедрить процесс конвейеризации.
	Конвейеризация процессора позволяет выполнять несколько инструкций одновременно, но в разных тактах. Объясним, как это работает, на примере работы кассы в супермаркете.
	Допустим, чтобы покупатель совершил покупку на кассе, ему нужно выполнить 3 такта:
	    Выложить товар на ленту.
	    Оплатить товар через терминал.
	    Сложить товар в свой пакет.
	Без внедрения конвейеризации процесс будет происходить следующим образом: пока один покупатель не пройдет все три такта на кассе — следующий будет ждать. То есть, пока один покупатель не сложит свой оплаченный товар в пакет, другой не начнет выкладывать свой товар на ленту. Но если внедрить конвейеризацию, то все будет происходить по-другому.
	Первый покупатель выкладывает товар на ленту и переходит ко второму такту — оплате через терминал. Пока он оплачивает, второй покупатель начинает выкладывать товар на ленту. Первый покупатель оплачивает товар и начинает складывать его в пакет. Пока он это делает, второй покупатель начинает оплачивать свой товар через терминал, а третий уже начинает выкладывать свой товар на ленту.
	Точно так же происходит и с инструкциями в процессорах с архитектурой RISC. За счет конвейеризации архитектура RISC работает намного быстрее, чем архитектура CISC. Это заметно, даже если архитектура RISC должна выполнить 5-6 инструкций вместо одной в CISC.
	Архитектуру RISC применяют ARM-процессоры. Кстати, в 2020-м году с большим отрывом по производительности среди всех суперкомпьютеров мира победил суперкомпьютер, который использовал в качестве своей «начинки» ARM-процессоры с архитектурой RISC.
	Может возникнуть резонный вопрос: «Если архитектура RISC настолько хороша и работает быстрее, то почему ее не применяют во всех современных компьютерах?». Объясняется все очень просто: исторически так сложилось. То есть до какого-то времени в компьютерах применяли только архитектуру CISC, а это значит, что все старые и многие новые программы были написаны именно для этой архитектуры и они не будут работать в RISC. Огромное количество такого ПО является проприетарными программами, а это значит, что, для того чтобы они заработали в RISC — этого должны захотеть их создатели и, соответственно, их переделать.
	В итоге получается, что если сейчас использовать компьютер с RISC-процессором, то для него будет очень ограниченное количество программного обеспечения, что доставит массу неудобств пользователям. Поэтому смену архитектуры разом должны захотеть и производители процессоров, и производители ПО. Пока до этого далеко, но все к этому идет.
	Source:
	1. https://codernet.ru/articles/drugoe/cisc_i_risc_proczessoryi_arxitektura_ierarxiya_raznovidnosti/
	Task:
	Факторы, виляющие на производительность процессора. Измерение производительности. MIPS и MFLOPS. Смеси команд их использование при оценке производительности.
	Decision:
	Высокая производительность МП (микропроцессора)– один из ключевых факторов в конкурентной борьбе производителей процессоров.
	Производительность процессора напрямую связана с количеством работы, вычислений, которые он может выполнить за единицу времени.
	Очень условно:    Производительность = Кол-во инструкций / Время
	Мы будем рассматривать производительность процессоров на базе архитектур IA32 и IA32e. (IA32 with EM64T).
	Факторы влияющие на производительность процессора:
	    Тактовая частота процессора.
	    Объем адресуемой памяти и скорость доступа к внешней памяти.
	    Скорость выполнения и набор инструкций.
	    Использование внутренней памяти, регистров.
	    Качество конвейеризации.
	    Качество предсказания переходов.
	    Качество упреждающей выборки.
	    Суперскалярность.
	    Наличие векторных инструкций.
	    Многоядерность.
	Поскольку процессор имеет много различных электронных компонент, которые работают независимо, то для того, чтобы синхронизировать их работу, чтобы они знали, в какой момент надо начать работать, когда нужно выполнить свою работу и ждать, существует таймер, который посылает синхроимпульс. Частота, с которой посылается синхроимпульс – и есть тактовая частота процессора. Есть устройства, которые успевают две операции выполнить за это время, тем не менее, к этому синхроимпульсу работа процессора привязана, и, можно сказать, что если мы эту частоту увеличим, то мы заставим все эти микросхемы работать с большим напряжением сил и меньше простаивать.
	Объем памяти - необходимо, чтобы памяти хватало для нашей программы и наших данных. То есть, технология EM64T позволяет адресовать огромное количество памяти и на данный момент вопрос с тем, что нам не хватает адресуемой памяти не стоит.
	CISC,RISC (complex, reduced instruction set computing)
	Современные процессоры Intel® представляют собой гибрид CISC и RISC процессоров, перед исполнением преобразуют CISC инструкции в более простой набор RISC инструкций.
	По сути дела, когда архитекторы проектируют процессоры, они постоянно работают с целью улучшить его производительность. Одной из их задач является сбор статистики, для определения , какие инструкции или последовательности инструкций являются ключевыми с точки зрения производительности. Пытаясь улучшить производительность, архитекторы пытаются самые горячие инструкции сделать быстрее, для каких-то наборов инструкций сделать специальную инструкцию, которая заменит этот набор и будет работать эффективнее. От архитектуры к архитектуре изменяются характеристики инструкций, появляются новые инструкции, которые позволяют добиться лучшей производительности. Т.е. можно считать что от архитектуры к архитектуре базовый набор инструкций постоянно совершенствуется и расширяется. Но если вы не указываете на каких архитектурах будет выполняться ваша программа, то в вашем приложении будет задействован некий умолчательный набор инструкций, который поддерживают все последние микропроцессоры. Т.е. наилучшей производительности мы можем добиться только если будем четко специфицировать тот микропроцессор, на котором будет выполняться задача.
	Регистры – самые быстрые элементы памяти, они находятся непосредственно на ядре, и доступ к ним практически мгновенный. Если ваша программа делает какие-то вычисления, хотелось бы, чтобы все промежуточные данные хранились на регистрах. Понятно, что это невозможно. Одна из возможных проблем производительности– это проблема вытеснения регистров. Когда вы под каким-нибудь анализатором производительности смотрите на ассемблерный код, вы видите, что у вас очень много движения со стека в регистры и обратно выгрузка регистров на стек. Стоит вопрос – как оптимизировать код так, чтобы самые горячие адреса, самые горячие промежуточные данные, лежали именно на системных регистрах.
	Следующая часть памяти – это обычная оперативная память. С ростом производительности процессоров стало ясно, что самым узким местом производительности является доступ к оперативной памяти. Для того, чтобы добраться до оперативной памяти, нужны сотня, а то и две сотни тактов процессора. То есть, запросив какую-то ячейку памяти в оперативной памяти, мы будем ждать двести тактов, а процессор будет простаивать.
	Существует две характеристики для описания свойств памяти – это время отклика, то есть число циклов процессора, необходимое для передачи единицы данных из памяти, и пропускная способность — сколько элементов данных могут быть отправлены процессором из памяти за один цикл. Встретившись с проблемой, что у нас узким местом является доступ к памяти, мы можем решать эту проблему двумя путями – либо уменьшением времени отклика, либо делать упреждающие запросы нужной памяти. То есть, в данный момент нам значение какой-то переменной неинтересно, но мы знаем, что оно скоро нам понадобится, и мы его уже запрашиваем.
	Кэш-память служит для уменьшения времени доступа к данным.
	Для этого блоки оперативной памяти отображаются в более быструю кэш-память.
	Если адрес памяти находится в кэше – происходит "попадание" и скорость получения данных значительно увеличивается.
	В противном случае – "промах" (cache miss)
	В этом случае блок оперативной памяти считывается в кэш-память за один или несколько циклов шины, называемых заполнением строки кэш-памяти.
	Можно выделить следующие виды кэш-памяти:
	    полностью ассоциативная кэш-память (каждый блок может отображаться в любое место кэша)
	    память с прямым отображением (каждый блок может отображаться в одно место)
	    гибридные варианты (секторная память, память с множественно-ассоциативным доступом)
	Множественно-ассоциативный доступ – по младшим разрядам определяется строка кэша, куда может отображаться данная память, но в этой строке может находиться только несколько слов основной памяти, выбор из которых проводится на ассоциативной основе.
	Качество использования кэша – ключевое условие быстродействия.
	Дополнительная информация: в современных IA32 системах размер кэш-линии 64 байта.
	Уменьшение времени доступа было достигнуто введением кэш-памяти. Кэш-память – это буферная память, находящаяся между оперативной памятью и микропроцессором. Она реализована на ядре, то есть доступ к ней гораздо быстрее чем к обычной памяти, но она намного дороже, поэтому при разработке микроархитектуры нужно найти точный баланс между ценой и производительностью. Если вы посмотрите на описания предлагаемых в продаже процессоров, вы увидите, что всегда в описании пишется, сколько кэша памяти того или иного уровня на данном процессоре есть. Эта цифра серьезно влияет на цену данного изделия. Кэш-память устроена так, что обычная память отображается на кэш-память, отображение идет блоками. Вы, запрашивая в оперативной памяти какой-то адрес, делаете проверку, отображен ли этот адрес в кэш-памяти. Если этот адрес уже есть в кэш-памяти, то вы экономите время на обращение к памяти. Вы считываете эту информацию из быстрой памяти, и у вас время отклика существенно уменьшается, если же этого адреса в кэш-памяти нет, то мы должны обратиться к обычной памяти, чтобы этот необходимый нам адрес вместе с каким-то блоком, в котором он находится, отобразился в эту кэш-память.
	Существуют разные реализации кэш-памяти. Бывает полностью ассоциативная кэш-память, когда каждый блок может отображаться в любое место кэша. Существует память с прямым отображением, когда каждый блок может отображаться в одно место, также существуют различные гибридные варианты – например кэш с множественно-ассоциативным доступом. В чем разница? Разница во времени и сложности проверки на наличие нужного адреса в кэш-памяти. Предположим, что нам нужен определенный адрес. В случае с ассоциативной памятью нам нужно проверить весь кэш – убедиться, что этого адреса в кэше нет. В случае с прямым отображением нам нужно проверить только одну ячейку. В случае с гибридными вариантами, например, когда используется кэш с множественно-ассоциативным доступом, нам нужно проверить, к примеру, четыре или восемь ячеек. То есть, задача определить есть ли адрес кэша – тоже важна. Качество использования кэша – важное условие быстродействия. Если нам удастся написать программу так, чтобы как можно чаще те данные, с которыми мы собирались работать, находились в кэше, то такая программа будет работать гораздо быстрее.
	Характерные времена отклика при обращении к кэш памяти для Nehalem i7:
	    L1 - latency 4
	    L2 - latency 11
	    L3 - latency 38
	Время отклика для оперативной памяти > 100
	Упреждающий механизм доступа к памяти реализован при помощи механизма упреждающей выборки (hardware prefetching).
	Есть специальный набор инструкций, позволяющий побудить процессор загрузить в кэш память расположенную по определенному адресу (software prefetching).
	Для примера возьмем наш последний процессор Nehalem: i7.
	Здесь мы имеем не просто кэш, а некий иерархический кэш. Долгое время он был двухуровневый, в современной системе Nehalem он трехуровневый – совсем немного очень быстрого кэша, чуть побольше кэша второго уровня и достаточно большое количество кэша третьего уровня. При этом, эта система построена так, что если какой-то адрес находится в кэше первого уровня, он автоматически находится во втором и в третьем уровнях. Это и есть иерархическая система. Для кэша первого уровня задержка – 4 такта, для второго – 11, третьего – 38 и время отклика оперативной памяти – больше 100 тактов процессора.
	Принцип локальности. Качество упреждающей выборки.
	Локальность ссылки (locality of reference) – повторное использование переменных или взаимосвязанных данных. Различают временную локальность (temporal locality) – когда речь идет об одних и тех же данных и пространственную локальность (spatial locality) – использование различных данных, имеющих относительно близкие области хранения.
	Механизм кэширования использует принцип временной локальности. (Стремится сохранять в кэше наиболее часто используемые данные).
	Механизм упреждающей выборки использует принцип пространственной локальности. (Стремится определить закономерность в доступе к памяти, чтобы заранее подгружать в кэш необходимую память). При этом, чем выше пространственная локальность (элементы расположены ближе в памяти), тем меньше данных требуется загружать в кэш и меньше нагрузка на системную шину.
	Кэш aliasing – из-за неудачного расположения в памяти различных объектов, участвующих в вычислении, происходит вытеснению из кэш памяти одних адресов другими.
	Второй вариант улучшения быстродействия и работы с памятью, про который мы упомянули – это подкладывать в кэш заранее необходимые адреса – упреждающий механизм доступа к памяти (Hardware Prefetching). Этот механизм выявляет закономерности, с которыми вы обращаетесь к памяти, и заранее закачивает в кэш адреса, которые могут вам понадобиться. Если вы обрабатываете несколько массивов, движетесь по ним последовательно или с каким-то постоянным шагом, то, скорее всего, этот механизм начнет эти адреса заранее подгружать. Есть специальный набор инструкций, позволяющий загрузить в кэш память, расположенную по определенному адресу. (Software Prefetching)
	Кэш имеет внутренние алгоритмы работы. Введем несколько понятий.
	Локальность ссылки – переиспользование переменных или взаимосвязанных данных. Различают временную локальность – переиспользование определенных данных и ресурсов и пространственную локальность - использование данных, имеющих относительно близкие области хранения.
	Механизм кэширования использует механизм временной локальности. Он пытается отследить те адреса, которые чаще всего используются, и сохранять их в кэше, а те, которые больше не используются – из кэша удалять. То есть каждый раз, когда вы запрашиваете из памяти какой-то новый адрес, механизм кэширования оценивает, какие блоки у него есть, какой из имеющихся у него блоков давно не использовался, и удаляет этот блок, заменяя его на новый. Этот механизм пытается сохранять только те данные, с которыми ведется активная работа.
	Механизм упреждающей выборки использует принцип пространственной локальности, то есть подгружает соседние элементы.
	При работе механизма кэширования могут происходить неприятные моменты. Например, вы работаете с двумя массивами, но они расположены в памяти так, что взяв адреса одного массива, которые вам нужны, вы вытесняете из кэша адреса другого массива, которые будут вам нужны. Формально, ничего не мешает расположить эти массивы в памяти по-другому и избежать этой проблемы.
	Конвейеризация предполагает, что последовательные инструкции будут перекрываться при выполнении.
	Выполнение типичной команды можно разделить на следующие этапы:
	    выборка команды – IF;
	    декодирование команды / выборка операндов из регистров - ID;
	    выполнение операции / вычисление эффективного адреса памяти - EX;
	    обращение к памяти - MEM;
	    запоминание результата - WB.
	Конвейеризация улучшает пропускную способность процессора, но если инструкции зависят от результатов выполнения предыдущих инструкций, то возникают задержки. Таким образом, польза от конвейеризации определяется уровнем инструкционного параллелизма.
	    Качество конвейеризации.
	Было время, когда процессор выполнял одновременно одну инструкцию. После введения конвейеризации процесс обработки инструкции разбит на несколько этапов. Один из вариантов, который широко используется, приведен:
	    выборка команды;
	    декодирования команды;
	    выполнение операции;
	    обращение к памяти;
	    запоминание результатов.
	Использование конвейера позволяет процессору одновременно обрабатывать несколько инструкций. Это невозможно в случае если инструкция зависит от результатов другой, поэтому чем больше у вас независимых инструкций, тем лучше работает конвейер. Если у вас все инструкции не зависят от результатов предыдущих, то он должен работать оптимально.
	Измерение производительности – довольно сложная тема. Как вы должны были догадаться из предыдущих рассуждений производительность зависит от двух факторов: от непосредственной качественной работы микропроцессора (МП) и от качества работы оптимизирующего компилятора. То есть качество работы оптимизирующего компилятора влияет непосредственно на результаты измерения производительности. Есть специальная организация – Standard Performance Evaluated Corporation — некоммерческая организация, которая делает аудиторскую независимую оценку производительности разных вычислительных систем. Она занимается сбором типичных задач, предоставляет своим пользователям некую универсальную систему тестирования и гарантирует независимое мнение о производительности микропроцессоров.
	Соответственно, если вас интересует вопрос о производительности, вы можете зайти на сайт этой организации, заплатить небольшие деньги и скачать оттуда пакет для измерения производительности, получить доступ к двум различным вычислительным системам, взять этот пакет, инсталлировать его. Пакет позволяет построить и прогнать специальные программы, получить цифры и сказать: "с использованием представительной выборки задач из сюиты такой-то мы получили результат, что вот эта система в таких-то задачах эту систему превосходит, а на таких задачах немного проигрывает". В мире существуют аналитики, которые на этом зарабатывают деньги. Перед публикацией в научных компьютерных журналах своих отчетов, они используют этот пакет. Есть различные пакеты CPU2006, OMP2001 и так далее для тестирования различных аспектов производительности. Поскольку производительность зависит от микропроцессора и от компилятора, то компилятор — это важная часть в борьбе за признание высокой производительностей изделий. Если появляется новый микропроцессор, которые реализует какие-то новые команды, трудно показать улучшение его производительности из-за этих команд если не будет компилятора способного использовать эти команды в исполняемой программе. Другой фактор влияния компилятора на производительность связан с тем, что если в процессе эксплуатации процессора обнаружены какие-то инструкции, которые на процессоре почему-либо выполняются медленно, то с помощью компилятора мы можем каким-то образом заменить плохие инструкции на хорошие. Компилятор также активно используется при тестировании и разработке новых архитектур.
	Т.е. с точки зрения разработки и продвижения процессоров компилятор очень важный инструмент.
	Можно провести некую аналогию на использование компилятора. Например, выполнение какой-то расчетной задачи мы можем сравнить с прохождением человеком некоего маршрута по пересеченной местности из точки А в точку В. Примерную схему маршрута и контрольные точки определил разработчик, написавший алгоритм и запрашивающий результаты рассчетов. Процессор в данном случае будет отвечать за физические кондиции того человека, который пойдет через лес. То есть он может быть очень сильный и может идти по ровной местности со скоростью 6 км/ч. Другой процессор может идти со скоростью 5 км/ч. А дальше вопрос стоит в выборе маршрута. Умный компилятор найдет места, где мы можем срезать путь и пойти более короткой дорогой. Формально, может случиться так, что процессор, который обеспечивает меньшую скорость, за счет компилятора данную задачу по перемещению из точки А в точку В выполнит быстрее.
	С подходом, основанным на сравнении производительности микропроцессоров по их рабочим частотам, тесно связан подход по оценке производительности системы по тому, насколько быстро система может выполнять команды процессора.
	Однако это весьма расплывчатый показатель. Скорость работы процессора, обычно выражаемая в миллионах операций в секунду (millions of INsTRuctions per second - MIPS ), сильно привязана к его тактовой частоте.
	Кроме того, оценка производительности в MIPS существенно зависит от системы команд микропроцессора: одна команда в микропроцессоре одного типа может быть эквивалентна по вычислительной мощности нескольким командам другого МП. К тому же различные операции, особенно в CISC-микропроцессорах, требуют разного времени для их выполнения. Следовательно, MIPS -оценка существенно зависит от того, какие команды принимаются в расчет. Таким образом, MIPS является полезным показателем лишь при сравнении процессоров одного производителя. Такие процессоры должны поддерживать одинаковую систему команд. Кроме того, следует применять одинаковые компиляторы. Существенная слабость MIPS как показателя производительности часто являлась поводом для шутки: MIPS - это аббревиатура выражения "MeanINgless INdicator of Processor Speed" ("бессмысленный показатель скорости процессора").
	Аналогичным подходом является измерение производительности работы процессора в миллионах операций с плавающей точкой в секунду (millions of floatINg-poINT operations per second - MFLOPS ). Обычно скорость в MFLOPS вычисляют для смеси операций сложений и умножений с плавающей точкой. Но поскольку микропроцессоры становятся все быстрее и быстрее, значение максимума MFLOPS перестает быть полезным в качестве разумной меры производительности операций с плавающей точкой: ограничивающим фактором становится пропускная способность каналов памяти (насколько быстро данные можно перемещать из процес сора и в процессор).
	Source:
	1. https://intuit.ru/studies/courses/707/563/lecture/12566
	2. https://intuit.ru/studies/courses/604/460/lecture/10355
	Task:
	Способы адресации. Формирование исполнительного адреса операнда при относительной адресации с помощью базирования. Использование базирования при организации виртуальной памяти.
	Decision:
	Следует различать понятия «адресный код в команде Ак» и «исполнительный (физический адрес) адрес Аи».
	    Адресный код — это информация об адресе операнда, содержащаяся в команде.
	    Исполнительный адрес — это номер ячейки памяти, к которой производится фактическое обращение.
	Таким образом, способ адресации можно определить как способ формирования исполнительного адреса операнда Аи по адресному коду команды Ак.
	В системах команд современных ЭВМ часто предусматривается возможность использования нескольких способов адресации операндов для одной и той же операции. Для указания способа адресации в некоторых системах команд выделяется специальное поле в команде — поле «метод» (указатель адресации, УА), рис. 4.13, а.
	В этом случае любая операция может выполняться с любым способом адресации, что значительно упрощает программирование.
	Классификация способов адресации по наличию адресной информации в команде:
	    явная адресация - в команде есть поле адреса этого операнда, в котором задается адресный код Ак. Большинство методов адресации являются явными;
	    неявная адресация - адресное поле в команде отсутствует, адрес операнда подразумевается кодом операции..
	Классификация способов адресации по кратности обращения в память. Широко используются следующие методы адресации операнда с различной кратностью обращения (г) в память:
	Непосредственная адресация операнда (/*= 0) - Обращение к регистровой памяти (РП) или ОП не производится (R = 0). Таким образом уменьшается время выполнения операции, сокращается объем памяти;  
	Прямая адресация операндов (r= 1) - При этом способе (рис. 4.13) адресации обращение за операндом в РП или ОП производится по адресному коду в поле команды, т.е. исполнительный адрес операнда совпадает с адресным кодом команды (Аисп = Ак). Обеспечивая простоту программирования, этот метод имеет существенные недостатки, так как для адресации к ячейкам памяти большой емкости требуется «длинное» адресное поле в команде;
	Косвенная адресация операндов (г> 2). Адресный код команды указывает адрес ячейки памяти, в которой находится не сам операнд, а лишь адрес операнда, называемый указателем операнда. Адресация к операнду через цепочку указателей (косвенных адресов) называется косвенной. Адрес указателя остается неизменным, а косвенный адрес может изменяться в процессе выполнения программы. Это обеспечивает переадресацию данных, т.е. упрощает обработку массивов и списковых структур данных, упрощает передачу параметров подпрограммам, но не обеспечивает перемещаемость программ в памяти (рис. 4.15, а).
	Source:
	1. https://studref.com/660861/informatika/struktura_formaty_komand
	Task:
	Формат команды микропроцессора. Назначение основных полей команды. Особенности основных тиопв команд: 1-, 2- и 3-адресных.
	Decision:
	По характеру выполняемых операций различают следующие основные группы команд:
	    команды арифметических операций над числами с фиксированной и плавающей точками;
	    команды десятичной арифметики;
	    команды логических операций и сдвигов;
	    команды передачи кодов;
	    команды операций ввода/вывода;
	    команды передачи управления;
	    команды векторной обработки;
	    команды задания режима работы машины и др.
	Форматом команды называют ее структуру с разметкой номеров разрядов (битов), определяющих границы отдельных полей команды, или с указанием числа битов в определенных полях.
	Важной и сложной проблемой при проектировании вычислительных машин является выбор структуры и форматов команды, т.е. ее длины, назначения и размерности отдельных ее полей. Естественно стремление разместить в команде в возможно более полной форме информацию о предписываемой командой операции. Однако в условиях, когда в современных ЭВМ значительно возросло число выполняемых различных операций и соответственно команд (в системе команд х86 более 500 команд) и значительно увеличилась емкость адресуемой основной памяти (4, 6 Гбайт), это приводит к недопустимо большой длине формата команды.
	Действительно, число двоичных разрядов, отводимых под код операции, должно быть таким, чтобы можно было представить все выполняемые машинные операции. Если ЭВМ выполняет Мразличных операций, то число разрядов в коде операции
	    nкоп>=log2(M)
	Например, при М= 500 якоп = 9.
	Если основная память содержит S адресуемых ячеек (байтов), то для явного представления только одного адреса необходимо в команде иметь адресное поле для одного операнда с числом разрядов
	    nA>=log2(S)
	Например, при 5=4 Гбайт пА = 32.
	Отмечавшиеся ранее характерные для процесса развития ЭВМ расширение системы (наборы) команд и увеличение емкости основной памяти, а особенно создание микроЭВМ с коротким словом, потребовали разработки методов сокращения длины команды. При решении этой проблемы существенно видоизменилась структура команды, получили развитие различные способы адресации информации.
	Проследим изменения классических структур команд.
	Чтобы команда содержала в явном виде всю необходимую информацию о задаваемой операции, она должна, как это показано на рис. 4.12, б, содержать следующую информацию:
	    Aj, A2 — адреса операндов;
	    A3 — адрес результата;
	    A4 —адрес следующей команды (принудительная адресация команд). Такая структура приводит к большой длине команды (например, при М= 500, S = 4 Гб длина команды — 137 бит) и неприемлема для прямой адресации операндов основной памяти. В компьютерах с RISC-архитектурой четырехадресные команды используются для адресации операндов, хранящихся в регистровой памяти процессора.
	Можно установить, что после выполнения данной команды, расположенной по адресу К (и занимающей L ячеек), выполняется команда из (К + Т)-й ячейки. Такой порядок выборки команды называется естественным. Он нарушается только специальными командами передачи управления. В таком случае отпадает необходимость указывать в команде в явном виде адрес следующей команды.
	В одноадресной команде (рис. 4.12, д) подразумеваемые адреса имеют уже и результат операции, и один из операндов. Один из операндов указывается адресом в команде, в качестве второго используется содержимое регистра процессора, называемого в этом случае регистром результата или аккумулятором. Результат операции записывается в тот же регистр. Наконец, в некоторых случаях возможно использование безадресных команд (рис. 4.12, е), когда подразумеваются адреса обоих операндов и результата операции, например при работе со стековой памятью.
	В трехадресной команде (рис. 4.12, в) первый и второй адреса указывают ячейки памяти, в которых расположены операнды, а третий определяет ячейку, в которую помещается результат операции. Можно условиться, что результат операции всегда помещается на место одного из операндов, например первого. Получим двухадресную команду (рис. 4.12, г), т.е. для результата используется подразумеваемый адрес.
	Source:
	1. https://studref.com/660861/informatika/struktura_formaty_komand
	Task:
	Типовая структура микропроцессора и ее основные блоки
	Decision:
	В данном случае под структурой следует понимать не только набор компонентов рабочей системы, но и средства соединения между ними, а также устройства, обеспечивающие их взаимодействие. Как и в функциональной классификации, содержание структуры можно выразить через три оставляющих – операционное наполнение, средства коммуникации с шиной и управляющую инфраструктуру.
	Устройство операционной части определяет характер декодирования команд и обработки данных. В этот комплекс могут входить арифметико-логические функциональные блоки, а также резисторы для временного хранения информации – в том числе о состоянии микропроцессора. В логической структуре предусматривается использование 16-разрядных резисторов, которые выполняют не только логические и арифметические процедуры, но и операции сдвига. Работа регистров может быть организована по разным схемам, определяющим в том числе их доступность программисту. Отдельный регистр отводится для обеспечения функции аккумуляторного блока.
	Устройства сопряжения с шиной отвечают за соединения с периферийной аппаратурой. В спектр их задач также входит осуществление выборки данных из памяти и формирование очереди команд. В типовую структуру микропроцессора входит указатель IP-команд, сумматоры адресов, сегментные регистры и буферы, посредством которых обслуживаются связки с шинами адреса.
	Управляющее устройство, в свою очередь, формирует управляющие сигналы, выполняет дешифровку команды, а также обеспечивает работу вычислительной системы, отдавая микрокоманды по внутренним операциям МП.
	В упрощенной структуре данного микропроцессора предусматриваются две функциональные части:
	Операционная. В этот блок входят средства управления и обработки данных, а также микропроцессорная память. В отличие от полной конфигурации, структура базового микропроцессора исключает наличие сегментных регистров. Некоторые исполнительные устройства объединяются в один функциональный блок, что также подчеркивает оптимизированный характер данной архитектуры.
	Интерфейсная. В сущности, средство обеспечения связи с главной магистралью. В этой части содержатся регистры внутренней памяти и сумматор адреса.
	На внешних выводных каналах базовых МП часто используется принцип мультиплексирования сигналов. Это означает, что передача сигналов происходит по общим каналам с разделением времени. Помимо этого, в зависимости от текущего режима функционирования системы один и тот же вывод может применяться для передачи сигналов разного назначения.
	Source:
	1. https://abc-import.ru/jelektronika/5397-klassifikacija-i-struktura-mikroprocessorov/#:~:text=%D0%92%20%D1%82%D0%B8%D0%BF%D0%BE%D0%B2%D1%83%D1%8E%20%D1%81%D1%82%D1%80%D1%83%D0%BA%D1%82%D1%83%D1%80%D1%83%20%D0%BC%D0%B8%D0%BA%D1%80%D0%BE%D0%BF%D1%80%D0%BE%D1%86%D0%B5%D1%81%D1%81%D0%BE%D1%80%D0%B0%20%D0%B2%D1%85%D0%BE%D0%B4%D0%B8%D1%82,%D0%BC%D0%B8%D0%BA%D1%80%D0%BE%D0%BA%D0%BE%D0%BC%D0%B0%D0%BD%D0%B4%D1%8B%20%D0%BF%D0%BE%20%D0%B2%D0%BD%D1%83%D1%82%D1%80%D0%B5%D0%BD%D0%BD%D0%B8%D0%BC%20%D0%BE%D0%BF%D0%B5%D1%80%D0%B0%D1%86%D0%B8%D1%8F%D0%BC%20%D0%9C%D0%9F
	Decision:
	https://github.com/David138it/MyPortfolio/tree/main/TaskDecision/Engineer-Isu/Engineer/ЭлектронныеВычислительныеУстройстваИСистемы/
	Task:
	Соотнесите знаки оформления с их значением
	Decision:
	! - "НЕ"
	|| - "ИЛИ"
	&& - "И"
	Task:
	Какие значения соответствуют "истинно" и "ложно"?
	Decision:
	-+ и —
	-1 и -1
	+1 и 0
	-0 и 1
	Task:
	В каком случае утверждение с операндом "&&" при переменных А и В верно?
	Decision:
	-Если верно либо А, либо В
	-Если и А, и В не верны
	-Строго если верно А
	+Если верны и А, и В
	Task:
	((X > Y) && ( X <= Z)) = 1 при каких значениях X, Y и Z?
	Decision:
	-X = 0, Y = 0, Z = 0
	-X = 0, Y = 0, Z = 1
	-X = 0, Y = 1, Z = 0
	-X = 0, Y = 1, Z = 1
	-X = 1, Y = 0, Z = 0
	+X = 1, Y = 0, Z = 1
	-X = 1, Y =1, Z = 0
	-X = 1, Y = 1, Z = 1
	Task:
	((( X != Y) != Z) || X) = 0 при каких значениях X, Y и Z?
	Decision:
	+X = 0, Y = 0, Z = 0
	-X = 0, Y = 0, Z = 1
	-X = 0, Y = 1, Z = 0
	+X = 0, Y = 1, Z = 1
	-X = 1, Y = 0, Z = 0
	-X = 1, Y = 0, Z = 1
	-X = 1, Y = 1, Z = 0
	-X = 1, Y = 1, Z = 1
	Task:
	В каком случае утверждение с операндом "!=" при переменных А и В верно?
	Decision:
	-Если и А, и В верны
	-Если и А, и В не верны
	-Если верно либо А, либо В
	+Если А и В неодинаковы
	Task:
	(X && !Y) = 1 при каких значениях Х и Y?
	Decision:
	-X = 0, Y = 0
	-X = 0, Y = 1
	+X = 1, Y = 0
	-X = 1, Y = 1
	Task:
	Какой элемент ветвления выполняет все неконтролируемые ситуации?
	Decision:
	-if
	-else — if
	+else
	-Ветвление всегда контролирует все ситуации
	Task:
	В какой последовательности сформирована конструкция ветвления?
	Decision:
	-else — if — else if
	-else if — if — else
	-if — else — else if
	+if — else if — else
	Task:
	В каких случаях утверждение с операндом ">=" при переменных А и В верно?
	Decision:
	-Если верно А или B
	-Если A и В неодинаковы
	-Если B больше А
	-Если А и В одинаковы
	+Если А истинно
	Task:
	В каком из случаев утверждение A > В верно?
	Decision:
	+Если А истинно, а B != A
	-Если A и В неодинаковы
	-Если А и В одинаковы
	-Если А истинно
	Task:
	((X && Y) != (X | | Y )) = 0 при
	Decision:
	? Х = 0, Y = 0
	? Х = 0, Y = 1
	? Х = 1, Y = 0
	? Х = 1, Y = 1
	Task:
	(!(!(!X == Y))) = 1 при
	Decision:
	-Х = 0, Y = 0
	Х = 0, Y = 1
	+Х = 1, Y = 0
	-Х = 1, Y = 1
	Task:
	((X < Z) && Y) = 0 при
	Decision:
	+X = 0, Y = 0, Z = 0
	+X = 0, Y = 0, Z = 1
	+X = 0, Y = 1, Z = 0
	-X = 0, Y = 1, Z = 1
	+X =1, Y = 0, Z = 0
	+X = 1, Y = 0, Z = 1
	+X = 1, Y = 1, Z = 0
	+X = 1, Y = 1, Z = 1
	Task:
	((X != Y) && ((Z != Z) || (!X <= Z))) = 1 при
	Decision:
	?X = 0, Y = 0, Z = 0
	?X = 0, Y = 0, Z = 1
	?X = 0, Y = 1, Z = 0
	?X = 0, Y = 1, Z = 1
	?X = 1, Y = 0, Z = 0
	?X = 1, Y = 0, Z = 1
	?X = 1, Y = 1, Z = 0
	?X = 1, Y = 1, Z = 1

Цифровые Элементы Информационно Измерительной Техники
	Task:
	Исследование характеристик полупроводниковых диодов
	Task:
	Исследование работы сумматора
	Decision:
	2. Установите на входах «СО», «АО», «А1», «А2», «АЗ», «ВО», «В1», «В2» и «ВЗ» — значения сигналов, приведенные в первой строке табл.5.2. Логический уровень изменяется при однократном нажатии с помощью манипулятора мышь на кнопку квадратной формы, расположенную около соответствующего входа. При этом на кнопке отображается состояние входа («О» — синий цвет или «1» — оранжевый цвет). На индикаторах круглой формы, расположенных около выходов «SO», «SI», «S2», «S3» и«С4» сумматора, будет отображено состояние его выходных сигналов.
	3. Занесите логические состояния входов и выходов сумматора в таблицу истинности. Для этого на лицевой панели ВП нажмите на кнопку «Добавить состояние в таблицу».
	4. Повторите пп.2 — 3 для остальных строк
	5. Скопируйте полученные таблицу истинности и диаграмму состояний в отчет. Сначала скопируйте таблицу истинности в буфер обмена, для чего щелкните правой кнопкой мыши на изображении таблицы и выберите из контекстного меню команду «Сору Data». Затем перейдите в редактор MS W ord и вставьте изображение таблицы из буфера обмена на страницу отчета.
	6. Проверьте полученные результаты сложения двоичных чисел с помощью уравнения:
	C0+(2^0)*(A0+B0)+(2^1)*(A1+B1)+(2^2)*(A2+B2)+(2^3)*(A3+B3)=2^0*S0+2^1*S1+2^2*S2+2^3*S3+2^4*C4,
	выполнив расчеты вручную. Результаты проверки занесите в отчет.
	7. Выключите ВП, для чего нажмите на панели ВП кнопку «За вершить работу».
	Task:
	Исследование работы мультиплексора
	Decision:
	2. Установите на входе разрешения «Е» и адресных входах «АО» и «А1» мультиплексора значения сигналов.
	Логический уровень изменяется при однократном нажатии с помощью манипулятора мышь на кнопку квадратной формы, расположенную около соответствующего входа. При этом на кнопке отображается состояние входа («0» — синий цвет или «1» — оранжевый цвет).
	3. При установленном значении адреса (АО, А1) определите, какой из входов «ХО» — «ХЗ» мультиплексора подключен к выходу Y. Для этого нужно поочередно нажимать и отпускать манипулятором мышь кнопки квадратной формы, расположенные около информационных входов «ХО» — «ХЗ». Активным является тот вход, изменение сигнала на котором будет сопровождаться переключением индикатора круглой формы, расположенного около выхода мультиплексора «Y». Отметьте активный вход мультиплексора, нажав мышью на одну из пяти радиокнопок «Активный вход», расположенных слева напротив входов «ХО» — «ХЗ» мультиплексора.
	4. Занесите логические состояния входов и выходов дешифратора в таблицу истинности и на диаграмму состояний. Для этого на лицевой панели ВП нажмите на кнопку «Добавить состояние в таблицу и на диаграмму».
	5. Повторите пп.2 — 4 для остальных строк табл.2.
	6. Скопируйте полученные таблицу истинности и диаграмму состояний в отчет. Сначала скопируйте таблицу истинности в буфер обмена, для чего щелкните правой кнопкой мыши на изображении таблицы и выберите из контекстного меню команду «Сору Data». Затем перейдите в редактор MS W ord и вставьте изображение таблицы из буфера обмена на страницу отчета. Повторите те же действия с диаграммой соcтояний.
	7. По таблице истинности и временной диаграмме определите, какой логический уровень на входе управления «Е» дешифратора является активным.
	8. Выключите ВП, для чего нажмите на панели ВП кнопку «Завершить работу»
	Task:
	Исследование вольтамперной характеристики выпрямительного диода
	1. Установите переключатель «К» модуля Ml в положение «1». При этом к схеме будет подключен выпрямительный диод типа S1M.
	2. Постройте прямую ветвь ВАХ выпрямительного диода. Для этого с помощью элементов управления ВП Uвх.min и U вх.max выберите диапазон изменения напряжения на входе схемы (рекомендуемые пределы от О В до 10 В), после чего нажмите на лицевой панели ВП кнопку «Измерение». На графическом индикаторе ВП будет построена ВАХ выпрямительного полупроводникового диода.
	3. Измерьте координаты точек на полученной ВАХ. Для этого, изменяя напряжение на входе схемы с помощью ползункового регулятора, установите сначала ток через диод примерно равным 5 мА, а затем примерно равным 8 мА. Запишите в отчет показания амперметра Iд и вольтметра Uд для этих точек ВАХ диода.
	4. Используя полученные в 3 данные, вычислите статическое сопротивление диода в указанных точках по формуле Rct = Unp/lnp и дифференциальное сопротивление диода на исследуемом участке ВАХ.
	5. Повторите исследования, предусмотренные 3 и 4 для точек ВАХ, соответствующих токам через диод 1 мА и 2 мА.
	6. По ВАХ диода определите напряжение изгиба. Напряжение изгиба определяется по прямой ветви характеристики для точки, где характеристика претерпевает резкий излом. Сравните полученное значение со справочными данными. Результаты запишите в отчет.
	7. Постройте полную ВАХ диода, для чего установите пределы изменения напряжения на входе схемы от -10 В до 10 В и нажмите на лицевой панели ВП кнопку «Измерение».
	8. С помощью ползункового регулятора установите на входе схемы напряжение примерно равное -8 В. Сравните величину падения напряжения на диоде с входным напряжением схемы. Обратите внимание на показание амперметра. Сделайте вывод о сопротивлении диода, смещенного в обратном направлении.
	Decision:
	Мы находили напряжения в 2 случаях, при 5 и 8 мВ:
	1. При Uвх = 8,69В, U = 0,68 В, I = 8 мА
	2. При Uвх = 5.66В, U = 0.66 В, I = 5 мА
	Используя данные из 1.3, посчитали R – статическое сопротивление на диоде и r – дифференциальное сопротивление на диоде
	1. Rст = 0.08 Ом
	2. Rст = 0.13 Ом
	3. Rдиф = 66 Ом
	Так же были построены такие же измерения для 1 и 2 мА
	1. Uвх = 1,59 В, Uд = 0,58 В, Iд = 1 мА
	2. Uвх = 2,62 В, Uд = 0,61 В, Iд = 2 мА
	3. Rдиф = 3 Ом
	Падение напряжение на диоде совпадает с входным напряжение схемы. Ток через диод практически не течёт, т.к. диод имеет большое сопротивление при обратном подключении полярностей
	Task:
	Исследование вольтамперной характеристики импульсного диода
	1. Установите переключатель «К» модуля M1 в положение «2». При этом к схеме будет подключен импульсный диод типа BAV70.
	2. Повторите исследования, предусмотренные пп.4.1.2 — 4.1.8 задания 1, для получения характеристик импульсного диода.
	Decision:
	2. Находим стационарное и дифференциальное сопротивление:
	    Uвх = 5,68 В, Uд = 0,67 В, Iд = 5 мА, Rст = 0,13 кОм
	    Uвх = 8,7 В, Uд = 0,7 В, Iд = 8 мА, Rст = 0,0875 кОм
	    Rдиф = 10 Ом
	    Uвх = 1,6 В, Uд = 0,59 В, Iд = 1 мА, Rст = 0,59 кОм
	    Uвх = 2,63 В, Uд = 0,63 В, Iд = 2 мА, Rст = 0,3 кОм
	    Rдиф = 30 Ом
	Падение напряжение на диоде совпадает с входным напряжение. Ток через диод практически не течёт, т.к. диод имеет большое сопротивление при обратном подключении полярностей
	1. Вольт-амперная характеристика диода меняется по экспоненте
	2. Чем больше напряжение на входе, тем больше ток на диоде
	3. Чем меньше ток на диоде, тем больше стационарное сопротивление
	4. На участке от 0 до -10В ток практически не менялся. Это связано с тем, что ток не течет в эту сторону.
	Task:
	Исследование работы однополупериодального выпрямителя
	Decision:
	Task:
	Исследование работы однополупериодного полупроводникового выпрямителя
	1. Установите переключатель «К» модуля M1 в положение «1».
	2. Получите осциллограммы напряжений на входе и выходе однополупериодного выпрямителя. Для этого, на лицевой панели ВП нажмите кнопку «Измерение» и с помощью элемента управления Uвx.m установите амплитуду входного сигнала Uвx такой величины, чтобы выходной сигнал Uвыx не имел видимых искажений и был удобен для наблюдения.
	Измерьте и запишите в отчет максимальное мгновенное значение напряжения на выходе выпрямителя Uвыx.mах Для измерения используйте горизонтальную линию курсора, положение которой изменяется ползунковым регулятором «У» (рис.1.1). По цифровому индикатору ползункового регулятора «У» определите измеряемое значение напряжения.
	4. Вычислите средневыпрямленное значение напряжения на выходе выпрямителя. Для вычислений используйте формулу: Uвыx.ср=Uвыx.mах/pi=2,62 V
	5. Используя полученные осциллограммы, измерьте максимальное обратное напряжение на диоде. Сравните периоды изменения сигналов на входе и выходе выпр
	Decision:
	Обратное напряжение : 0,82 V
	Амплитуда колебаний напряжения, входного и выходного сигнала одинакова
	Выходное максимальное значение меньше входного максимального значения примерно на 10%. Это значение называется величина падения напряжения
	Чем больше напряжение на входе, тем больше ток на диоде
	Максимальное обратное напряжение такое же как и прямое напряжение
	Период и частота сигнала совпадают. Т.е , совпадают периоды входного и выходного напряжения.
	Task:
	Исследование работы однофазного мостового выпрямителя
	1. Установите переключатель «К» модуля М2 в положение «1», при котором емкостной сглаживающий фильтр С отключен от выхода выпрямителя.
	2. С помощью элементов управления на лицевой панели ВП установите следующий режим измерения: форма сигнала — синусоидальная, частота сигнала — 100 Гц. Амплитуду сигнала на входе схемы установите такой величины, чтобы сигналы на осциллограмме не имели видимых искажений и были удобны для наблюдения и измерений.
	3. На графическом индикаторе будут отображены осциллограммы входного и выходного сигналов выпрямителя. Скопируйте полученные осциллограммы в отчет. 4.1.4. Используя полученные осциллограммы, сравните периоды изменения сигналов на входе и выходе выпрямителя. Выводы запишите в отчет.
	5. Измерьте и запишите в отчет максимальное значение напряжения на выходе выпрямителя Uвых.max. Для измерения используйте горизонтальную линию курсора, положение которой изменяется ползунковым регулятором «Y». По цифровому индикатору ползункового регулятора «Y» определите измеряемое значение напряжения.
	6. Вычислите и запишите в отчет среднее значение напряжения на выходе выпрямителя. Для вычислений используйте формулу: Uвыx.cp =2*Uвых.мах/pi. Сравните вычисленное значение напряжения с величиной, отображаемой на цифровом индикаторе «Uвых.ср»> расположенном на лицевой панели ВП. Выводы и результаты запишите в отчет.
	Decision:
	3. Период в 2 раза меньше.
	5. 
	Uвх, В	Uвых мах, В	Uвых ср, В	Uвых ср индикатор, В
	3	1,878	1,196	0,96
	6. Uвых.ср=2*Uвых.мах/pi=1,196 V
	Task:
	Исследование работы однофазного мостового выпрямителя с емкостным сглаживающим фильтром
	1. Установите переключатель «К» модуля М2 в положение «2», при котором на выходе выпрямителя параллельно сопротивлению нагрузки (Rн — 2 кОм) подключается емкостной сглаживающий фильтр (Сф = 4,7 мкФ).
	2. С помощью элементов управления на лицевой панели ВП установите следующий режим измерения: форма сигнала — синусоидальная, частота сигнала — 100 Гц. Амплитуду сигнала на входе схемы установите такой величины, чтобы сигналы на осциллограмме не имели видимых искажений и были удобны для наблюдения и измерений.
	3. На графическом индикаторе будут отображены осциллограммы входного и выходного сигналов выпрямителя. Скопируйте полученные осциллограммы в отчет.
	4. Используя полученные осциллограммы, сравните периоды изменения сигналов на входе и выходе выпрямителя. Выводы запишите в отчет.
	5. Измерьте и запишите в отчет максимальное Uвых.mах и минимальное Uвых .min значения напряжения на выходе выпрямителя. Для измерения используйте горизонтальную линию курсора, положение которой изменяется ползунковым регулятором «Y». По цифровому индикатору ползункового регулятора «У» определите измеряемое значение напряжения. Для удобства измерений масштаб шкалы для вертикальной оси графика может быть изменен с помощью цифровых элементов управления, задающих ее начальное и конечное значения.
	6. Запишите в отчет среднее значение напряжения на выходе выпрямителя, отображаемое на цифровом индикаторе « Uвых.ср», расположенном на лицевой панели ВП.
	7. Вычислите коэффициент пульсаций на выходе выпрямителя с емкостным фильтром по формуле:
	Сравните полученное значение с коэффициентом пульсаций двухполупериодного выпрямителя (к ~ 0,67). Выводы и результаты запишите в отчет.
	8. Повторите исследования, предусмотренные пп.4.2.2 — 4.2.7 при частоте сигнала 400 Гц. Сравните работу выпрямителя с емкостным сглаживающим фильтром при разных частотах входного напряжения. Вывод запишите его в отчет.
	9. Установите переключатель «К» модуля М2 в положение «3», при котором на выходе выпрямителя параллельно сопротивлению нагрузки (Rн = 2 кОм) подключается емкостной сглаживающий фильтр (Сф = 47 мкФ).
	10. Повторите исследования, предусмотренные пп.4.2.2. — 4.2.8. при новом значении емкости конденсатора фильтра. Сделайте вывод о влиянии емкости конденсатора фильтра на работу выпрямителя.
	11. Исследуйте работу мостового выпрямителя при других формах входного сигнала: прямоугольной, треугольной и пилообразной. Результаты занесите в отчет.
	Decision:
	4. Период в 2 раза меньше.
	5. 
	ν, Гц	Uвх, В	Uвых мах, В	Uвых min, В	Uвых ср, В	K
	100	3,0	1,787	1,224	1,53	0,37
	7. K=(Uвых.max- Uвых.min)/ Uвых.ср=0.37
	8. 
	ν, Гц	Uвх, В	Uвых мах, В	Uвых min, В	Uвых ср, В	K
	400	3,0	1,697	1,561	1,64	0,08
	К=( Uвых.max- Uвых.min)/Uвых.ср=0,08
	10. 
	ν, Гц	Uвх, В	Uвых мах, В	Uвых min, В	Uвых ср, В	K
	400	3,0	1,742	1,606	1,67	0,08
	К=( Uвых.max- Uвых.min)/ Uвых.ср=0,08
	11. Проделываем то же самое, только с пилообразной формой сигнала Без сглаживающего фильтра
	ν, Гц	Uвх, В	Uвых мах, В	Uвых ср, В	Uвых ср индикатор, В
	100	4,5	3,33	2,12	1,29
	Со сглаживающим фильтром
	ν, Гц	Uвх, В	Uвых мах, В	Uвых min, В	Uвых ср, В	k
	100	4,5	3,24	1,45	2,24	0,8
	ν, Гц	Uвх, В	Uвых мах, В	Uвых min, В	Uвых ср, В	k
	400	4,5	3,06	2,4	2,72	0,25
	ν, Гц	Uвх, В	Uвых мах, В	Uвых min, В	Uвых ср, В	k
	100	4,5	2,9	2,65	2,77	0,09
	ν, Гц	Uвх, В	Uвых мах, В	Uвых min, В	Uвых ср, В	k
	400	4,5	2,8	2,71	2,75	0,03
	Общая таблица:
	ν, Гц	Uвх, В	Uвых мах, В	Uвых min, В	Uвых ср, В	k	С, мкФ
	100	3	1,787	1,224	1,53	0,37	4, 7
	400	3	1,697	1,561	1,64	0,08	4,7
	400	3	1,742	1,606	1,67	0,08	47
	100	4,5	3,33	2,12	1,29	0.93	 
	100	4,5	3,24	1,45	2,24	0,8	4,7
	400	4,5	3,06	2,4	2,72	0,25	4,7
	100	4,5	2,9	2,65	2,77	0,09	47
	400	4,5	2,8	2,71	2,75	0,03	47
	Task:
	Исследование характеристик стабилитрона. 
	Построение ВАХ стабилитрона для диапазонов входного сигнала от  -10В до 4В
	Определяем напряжение стабилизации стабилитрона , для этого устанавливаем силу тока на стабилитроне примерно равную Iст=-5мА
	Определяем дифференциальное сопротивление стабилитрона , для этого устанавливаем силу тока =-2мА и =-8мА .
	рассчитать дифференциально сопротивление стабилитрона по формуле rд=ΔUст/ΔIст =0,1 ОМ
	Построение ВАХ участка схемы, состоящей из параллельно соединенных стабилитрона и сопротивления нагрузки. Для этого с помощью элементов управления Uвxmin и Uвxmax на лицевой панели ВП установите диапазон изменения входного напряжения от — 10 В до 4 В и нажмите на лицевой панели ВП кнопку «Измерение». ВП выполнит серию измерений и на его графическом индикаторе будет построена вольтамперная характеристика.
	С помощью ползункового регулятора установили напряжение Uвх=-8В. Значения ток при этом I=-3.24 А  протекающий через балластовый резистор, и величину выходного напряжения. 
	С помощью ползункового регулятора установить на входе напряжения  примерно U=-9 В.
	Рассчитываем коэффициент стабилизации. Используя формулы (4.2) и (4.6) используя величины токов  и напряжений
	Task:
	Исследование характеристик тиристора
	2. Создание условия для включения тиристора. Тиристор в открытом состоянии. Резкое увеличение тока Ia в цепи анода до максимального значения.
	Видно резкое увеличение тока Ia в цепи анода до максимального значения Ia=9,27мА.
	3. Тиристор в закрытом состоянии. произойдет скачкообразное уменьшение тока анода тиристора Iа.
	Линия красного цвета соответствует режиму монотонного увеличении анодного напряжения U от О В до 10 В, а линия синего цвета — режиму монотонного уменьшения анодного напряжения Ua от 10 В до 0 В.
	5. По ВАХ тиристора определили значения анодного тока и напряжения в момент включения тиристора: Iвкл=0,14 мА, Uвкл=7,56 В
	6. Определение падение напряжения на открытом тиристоре Uпр=0,68 В
	7. Определение анодного тока и анодного напряжения в момент выключения тиристора. Iвыкл=6мА, Uвыкл=0,72В
	8. Значения напряжения и тока на управляющем электроде  тиристора, при которых на ВАХ отсутствует пологий участок равны: UУпр=0,692 В,  IУпр=-0,068мА.
	Decision:
	1. В тиристоре есть диапазон напряжений подаваемых на управляющий электрод, при которых тиристор будет сначала закрыт, а потом открыт, если монотонно увеличивать анодное напряжение.
	2. Если управляющий потенциал слишком мал или равен нулю, то тиристор будет находится в запертом состоянии. Если управляющий потенциал будет достаточным, то тиристор практически при любом анодном напряжении будет открыт.
	Task:
	Исследование характеристик биполярного транзистора
	2. Зависимость входного тока Iб транзистора от входного напряжения Uбэ
	3. Представлены следующие данные: напряжение источника питания в цепи базы, значение тока базы и напряжение база-эмиттер
	4. Определение дифференциального входного сопротивления транзисторапо формуле
	2.2. На рисунке изображен результат измерения зависимостей коллекторного тока Iк от напряжения коллектор-эмиттер Uкэ Измерения выполняются при фиксированных значениях напряжения источника питания в цепи базы ЕБ, которые представлены на лицевой панели ВП слева от схемы измерений в виде таблицы. В процессе измерений напряжение источника питания в цепи коллектора Ек плавно изменяется от 0 до 10 В. На экране графического индикатора отображаются графики  полученных зависимостей, а также соответствующие им значения тока базы IБ в виде таблицы.
	2.4. В таблице для каждой полученной выходной характеристики представлены значение тока коллектора, соответствующее напряжению Uкэ =5 В, а также напряжение источника питания в цепи базы и значение тока базы.
	2.5.  Расчет коэффициента передачи тока 
	Decision:
	3.
	Eб, В	IБ, мкА	UБЭ, В
	0,76	10	0,66
	1,12	40	0,72
	4. 0,06/0,00003=2000 Ом.
	2.4.
	Iк, мА	0,27	1,58	3,44	5,57	7,96
	Eб, В	0,57	0,65	0,71	0,77	0,83
	IБ, мкА	0,5	3,2	6,9	11,3	16,2
	2.5
	Усредняя результат: βAC = 489,9
	B результате проделанной работы было получено значение коэффициента передачи тока βAC = 489,9, что является довольно большим значением и соответствует схеме включения транзистора с общим эмиттером, при этом дифференциальное входное сопротивление транзистора rВХ=2000 Ом также является большим.
	Task:
	Исследование работы транзисторного каскада с общим эмиттером. Yстановка рабочей точки и исследование работы транзисторного каскада с общим эмиттером
	2. Построение вольтамперных характеристик транзистора:
	3. Далее мы установили амплитуду напряжения источника входного сигнала U = 0 и величину напряжения источника питания в цепи коллектора Ек = 5 В На графике выходных характеристик транзистора построена линия нагрузки:
	4. Так же мы установили значение тока базы, при котором рабочая точка находится в середине линии нагрузки, это видно на предыдущем рисунке
	Параметры статического режима транзисторного каскада :
	Uвх min = 0,615, Uвх max = 0,685, Uвых min = 2,18, Uвых max = 4,7
	входные и выходные сигналы полностью отличаются, как амплитудой, так и фазой и длиной волны
	Далее были измерены амплитуды входных и выходных сигналов
	U вх = 0.03 В, U вых = 1,3 В
	6. Далее был определён коэффициент усиления транзисторного каскада.определить коэффициент усиления
	Затем мы исследовали зависимость положения рабочей точки на работу транзисторного каскада с общим эмиттером. Для этого регулировав напряжения источника питания в цепи базы Eб изменили значение тока базы примерно на 30 – 40% от величины Iб сначала в сторону уменьшения, затем в сторону увеличения.
	Был переставлен переключатель К в положение 2, тем самым в цепь коллектора транзистора включено сопротивление 510 Ом  (Были повторены все те же действия что и в предыдущих задачах )
	Далее мы установили амплитуду источника входного сигнала U = 0 и величину напряжения источника питания в цепи коллектора Ек = 5 В
	10. Так же мы установили значение тока базы, при котором рабочая точка находится в середине линии нагрузки
	Параметры статического режима транзисторного каскада :
	Uвх min = 0,615, Uвх max = 0,685, Uвых min = 0,48, Uвых max = 4,46
	11. Далее мы увеличивали амплитуду напряжения источника входного сигнала
	Как видно из графиков входные и выходные сигналы полностью отличаются, как амплитудой, так и фазой и длиной волны
	Далее были измерены амплитуды входных и выходных сигналов
	Uвх = 0.07 В, Uвых = 3,98 В
	12. Далее был определён коэффициент усиления транзисторного каскада
	13. Затем мы исследовали зависимость положения рабочей точки на работу транзисторного каскада с общим эмиттером. Для этого регулировав напряжения источника питания в цепи базы Eб изменили значение тока базы примерно на 30 – 40% от величины Iб сначала в сторону уменьшения, затем в сторону увеличения.
	14. Был переставлен переключатель К в положение 3, тем самым в цепь коллектора транзистора включено сопротивление 1 кОм
	Далее мы установили амплитуду источника входного сигнала U = 0 и величину напряжения источника питания в цепи коллектора Ек = 5 В. На графике выходных характеристик транзистора построена линия нагрузки:
	15. Так же мы установили значение тока базы, при котором рабочая точка находится в середине линии нагрузки, это видно на предыдущем рисунке
	Параметры статического режима транзисторного каскада :
	Uвх min = 0,614, Uвх max = 0,662, Uвых min = 0,7, Uвых max = 4,07
	16. Далее мы увеличивали амплитуду напряжения источника входного сигнала
	Как видно из графиков входные и выходные сигналы полностью отличаются, как амплитудой, так и фазой и длиной волны
	Далее были измерены амплитуды входных и выходных сигналов
	U вх = 0.024 В, U вых = 1,682 В
	17. Далее был определён коэффициент усиления транзисторного каскада
	Так же определить коэффициент усиления:
	18. Затем мы исследовали зависимость положения рабочей точки на работу транзисторного каскада с общим эмиттером. Для этого регулировав напряжения источника питания в цепи базы Eб изменили значение тока базы примерно на 30 – 40% от величины Iб сначала в сторону уменьшения, затем в сторону увеличения.
	Decision:
	1. Как видно из графиков амплитуда входного и выходного сигнала отличается в несколько десятков раз, как и длина волны, а фаза сдвинута на pi (3.14).
	2. При увеличении сопротивления коллектора увеличивается коэффициент усиления транзисторного каскада (в справочных данных для каждого типа транзистора значение коэффициента усиления варьируется от 50 до 200)
	3. При увеличении сопротивления коллектора коэффициент усиления увеличивался
	Task:
	Исследование характеристик полевого транзистора
	Получение зависимости сопротивления каналаполевого транзистора от напряжения затвор-исток
	Получение семейства выходных характеристи полевого транзистора в схеме с общим истоком
	Decision:
	2 Построена зависимость выходного тока Ic транзистора от входного напряжения и ЗИ
	3 Значение порогового напряжения затвор-исток Uзи=1,32 В
	4 Uзи1=1,84 В, Uзи2=1,97 В.
	Используя полученные в п.4.1.4 значения тока стока и напряжения затвор-исток, вычислим крутизну передаточной характеристики полевого транзистора по формуле:
	S=(Ic2-Ic1)/ (Uзи2- Uзи1)=11.15
	3. Изменяя напряжение источника питания в цепи затвора с помощью ползункового регулятора Eh расположенного на лицевой панели ВП, установим значение тока стока Ic примерно равным 0,01 мА. Значение сопротивления Rkmax, соответствующее закрытому состоянию транзистора R kmax=1301 kOm
	4. R kmin=0,00284 kOm
	3. При необходимости с помощью кнопок изменения значений цифровых элементов управления можно задать другие величины напряжения Ез. После нажатия на кнопку «Измерение» выходные характеристики бут построены заново.
	4. Для каждой полученной выходной характеристики определим значение тока стока Iс, соответствующее напряжению Ucи=5 В. Для этого с помощью ползункового регулятора «X» установим вертикальную линию курсора напротив деления «5 В» горизонтальной оси графика. Затем, поочередно совмещая горизонтальную линию курсора с точками пересечения вертикальной линии курсора с выходными характеристиками, определим соответствующие значения тока стока по цифровому индикатору ползункового регулятора ≪У≫.
	Task:
	Исследование характеристик инвертирующего усилителя. Получение передаточной характеристики инвертирующего усилителя
	Decision:
	Сопротивление резистора в цепи обратной связи	R3=30 кОм	R3=100 кОм
	Uогр+	7.3 В	7.3 В
	Uогр-	-8.1 В	-8.1 В
	Uвх1	-2 В	-0.5 В
	Uвх2	1.07 В	0.34 В
	Uвых1	6 В	4.84 В
	Uвых2	-3.2 В	-2.94 В
	Кус	3	9.3
	Task:
	Исследование работы инвертирующего усилителя
	Decision:
	Сопротивление резистора в цепи обратной связи	R3=30 кОм	R3=100 кОм
	Uвхm	1.58 В	0.57 В
	Uвыхm	4.5 В	5.1 В
	Разница фазы	Π	π
	Кус	2.83	8.94
	К теоретич	3	10
	6%	11%
	в ходе работы было установлено, что коэффициент передачи, вычисленный теоретически — через отношение сопротивлений, приблизительно равен коэффициенту, вычисленному экспериментально. Были получены осциллограммы, на которых видно смещение входных и выходных сигналов по фазе на π, что соответствует теоретическому описанию.
	Task:
	Исследование работы интегратора напряжения
	Decision:
	Скорость изменения выходного сигнала, используя измерения максимального (Umax)и минимального (Umin) мгновенного значения выходного сигнала:=3024 В/с
	Скорость изменения выходного сигнала, используя формулу идеального интегратора: 3030 В/с
	в данной работе было выполнено исследование работы интегратора напряжения на основе ОУ. Для различных значений параметров интегратора (емкость в цепи ООС) вычислена скорость изменения напряжения на выходе интегратора с помощью экспериментальных данных, а также по формулам, применяемым к идеальным интеграторам. При с=0,015мкФ скорость, вычисленная по формуле для идеального интегратора на 1,5% больше, чем полученная эмпирически. При с=0,033 мкФ аналогичная величина равна 0,2%. Также была выявлена разница фаз вх. и вых. напряжения для синусоидальной формы сигнала. Она равна п/2
	Task:
	Исследование работы логических элементов. исследование работы цифровых логических элементов.
	В состав лабораторного стенда входят:
	1. базовый лабораторный стенд;
	2. лабораторный модуль dLab для исследования работы сумматора.
	Установите лабораторный модуль dLab на макетную плату лабораторной станции N1ELVIS. 
	Загрузите файл dLab.vi. На экране появится изображение ВП, необходимого для выполнения работы (рис.1.2). Запустите программу, щелкнув левой кнопкой мыши на экранной кнопке RUN 0 .
	2. Выберите логический элемент «НЕ». Для этого щелкните мышью на кнопке раскрытия списка элемента управления «Тип элемента». В раскрывшемся списке выберите строку с надписью «НЕ». В левой части рабочего окна появится условное графическое изображение логического элемента НЕ.
	3. Установите на входе «ХО» исследуемого логического элемента логический сигнал «О». Логический уровень изменяется при однократном нажатии с помощью манипулятора мышь на кнопку квадратной формы, расположенную около входа логического элемента. При этом на кнопке отображается состояние входа («О» — синий цвет или «1» — оранжевый цвет). На индикаторе круглой формы, расположенном около выхода логического элемента, будет отображено состояние выходного сигнала в соответствии с логической функцией исследуемого элемента.
	4. Занесите логические состояния входа и выхода логического элемента «НЕ» в таблицу истинности и на диаграмму состояний. Для этого нажмите на кнопку «Добавить состояние в таблицу и на диаграмму».
	5. Установите на входе «ХО» исследуемого логического элемента логический сигнал «1», и с помощью кнопки «Добавить состояние в таблицу и на диаграмму» занесите логические состояния входа и выхода логического элемента «НЕ» в таблицу истинности и на диаграмму состояний.
	6. Скопируйте полученные таблицу истинности и диаграмму состояний в отчет. Сначала скопируйте таблицу истинности в буфер обмена, для чего щелкните правой кнопкой мыши на изображении таблицы и выберите из контекстного меню команду «Сору Data». Затем перейдите в редактор MS Word и вставьте изображение таблицы из буфера обмена на страницу отчета. Повторите те же действия с диаграммой состояний.
	2.1. Нажмите на кнопку «Очистить таблицу и диаграмму».
	2.2. Выберите логический элемент И. Для этого щелкните мышью на кнопке раскрытия списка элемента управления «Тип элемента». В раскрывшемся списке выберите строку с надписью «И». В левой части рабочего окна появится условное графическое изображение логического элемента И.
	2.3. Установите на входах «ХО» и «X1» логического элемента значения сигналов, приведенные в первой строке табл.1.3.
	2.4. Занесите логические состояния входов и выходов дешифратора в таблицу истинности и на диаграмму состояний. Для этого на лицевой панели ВП нажмите на кнопку «Добавить состояние в таблицу и на диаграмму».
	2.5. Повторите пп.4.2.3 — 4.2.4 для остальных строк табл. 1.3.
	2.6. Скопируйте полученные таблицу истинности и диаграмму со стояний в отчет.
	2.7. По таблице истинности и диаграмме состояний исследуемого логического элемента определите, какой логический сигнал является для него активным.
	2.8. В отчете приведите схему реализации функции исследуемого логического элемента на основе базовых логических элементов «2И-НЕ», и на основе базовых логических элементов «2ИЛИ-НЕ».
	2.9. Повторите пп. 4.2.1 — 4.2.8 для логических элементов «И-НЕ», «ИЛИ», «ИЛИ-HE», «Искл.ИЛИ».
	2.10. Выключите ВП, для чего нажмите на панели ВП кнопку «Завершить работу».
	Task:
	Исследование работы шифратора
	2. Установите на входе «Е» шифратора логический сигнал «О», а на входах «ХО», «XI», «Х2», «ХЗ», «Х4», «Х5», «Х6», и «Х7» — значения сигналов, приведенные в первой строке табл.2.2. Логический уровень из меняется при однократном нажатии с помощью манипулятора мышь на кнопку квадратной формы, расположенную около соответствующего входа. При этом на кнопке отображается состояние входа («О» — синий цвет или «1» — оранжевый цвет). На индикаторах круглой формы, расположенных около выходов «YO», «Yl», «Y2», «G» и «ЕО» шифратора, будет отображено состояние выходных сигналов.
	3. Занесите логические состояния входов и выходов шифратора в таблицу истинности и на диаграмму состояний. Для этого на лицевой панели ВП нажмите на кнопку «Добавить состояние в таблицу и на диаграмму».
	4. Повторите пп.4.2 — 4.3 для остальных строк табл.2.2.
	5. Скопируйте полученные таблицу истинности и диаграмму состояний в отчет. Сначала скопируйте таблицу истинности в буфер обмена, для чего щелкните правой кнопкой мыши на изображении таблицы и выберите из контекстного меню команду «Сору Data». Затем перейдите в редактор MS W ord и вставьте изображение таблицы из буфера обмена на страницу отчета. Повторите те же действия с диаграммой состояний.
	6. Установите на входе «Е» шифратора логический сигнал «1» и повторите исследование работы шифратора в соответствии с указаниями, приведенными в пп. 4.1 — 4.5.
	7. По таблице истинности и временной диаграмме определите, какой логический сигнал на входе управления «Е» дешифратора является активным.
	8. По таблице истинности и временной диаграмме определите, при каких условиях активный низкий уровень появляется на выходах GS (групповой сигнал) и ЕО (разрешение от выхода.
	9. Проверьте, что исследуемый шифратор является приоритетным. Для этого сначала установите вход управления «Е» в состояние «0», а все информационные входы в состояние «1». Затем переключите любые два информационных входа, например, «Х6» и «ХЗ» в состояние «0». Определите, сопоставив выходной сигнал шифратора с полученной ранее таблицей истинности, какой вход из двух задействованных имеет больший приоритет.
	10. Выключите ВП, для чего нажмите на панели ВП кнопку «Завершить работу».

Методы обработки сигналов и данных
    Task:
    Корреляционный анализ. Корреляционная и автокорреляционная функции
    Decision:
    Корреляционный анализ — метод обработки статистических данных, с помощью которого измеряется теснота связи между двумя или более переменными. Корреляционный анализ тесно связан с регрессионным анализом (также часто встречается термин «корреляционно-регрессионный анализ», который является более общим статистическим понятием), с его помощью определяют необходимость включения тех или иных факторов в уравнение множественной регрессии, а также оценивают полученное уравнение регрессии на соответствие выявленным связям (используя коэффициент детерминации).
    Применение возможно при наличии достаточного количества наблюдений для изучения. На практике считается, что число наблюдений должно не менее чем в 5-6 раз превышать число факторов (также встречается рекомендация использовать пропорцию, не менее чем в 10 раз превышающую количество факторов). В случае если число наблюдений превышает количество факторов в десятки раз, в действие вступает закон больших чисел, который обеспечивает взаимопогашение случайных колебаний.
    Необходимо, чтобы совокупность значений всех факторных и результативного признаков подчинялась многомерному нормальному распределению. В случае если объём совокупности недостаточен для проведения формального тестирования на нормальность распределения, то закон распределения определяется визуально на основе корреляционного поля. Если в расположении точек на этом поле наблюдается линейная тенденция, то можно предположить, что совокупность исходных данных подчиняется нормальному закону распределенияю
    Исходная совокупность значений должна быть качественно однородной.
    Сам по себе факт корреляционной зависимости не даёт основания утверждать, что одна из переменных предшествует или является причиной изменений, или то, что переменные вообще причинно связаны между собой, а не наблюдается действие третьего фактора.
    Данный метод обработки статистических данных весьма популярен в экономике, астрофизике и социальных науках (в частности в психологии и социологии), хотя сфера применения коэффициентов корреляции обширна: контроль качества промышленной продукции, металловедение, агрохимия, гидробиология, биометрия и прочие. В различных прикладных отраслях приняты разные границы интервалов для оценки тесноты и значимости связи.
    Популярность метода обусловлена двумя моментами: коэффициенты корреляции относительно просты в подсчете, их применение не требует специальной математической подготовки. В сочетании с простотой интерпретации, простота применения коэффициента привела к его широкому распространению в сфере анализа статистических данных.
    Автокорреляционная функция — зависимость взаимосвязи между функцией (сигналом) и её сдвинутой копией от величины временного сдвига.
    Для детерминированных сигналов автокорреляционная функция (АКФ) сигнала f(t)  определяется интегралом:
        Ψ(τ)=∫f(t)*(f∗)*(t−τ)dt
    и показывает связь сигнала (функции f(t) с копией самого себя, смещённого на величину τ. Звёздочка означает комплексное сопряжение.
    Для случайных процессов АКФ случайной функции X(t) имеет вид:
        K(τ)=E{X(t)*(X∗)*(t−τ)},
    где E {} — математическое ожидание, звёздочка означает комплексное сопряжение.
    Если исходная функция строго периодическая, то на графике автокорреляционной функции тоже будет строго периодическая функция. Таким образом, из этого графика можно судить о периодичности исходной функции, а, следовательно, и о её частотных характеристиках. Автокорреляционная функция применяется для анализа сложных колебаний, например, электроэнцефалограммы человека.
    Зависящая от времени корреляция двух случайных функций X(t) и Y(t)определяется как:
        C(t, t′)=⟨X(t)*Y(t′)⟩
    где угловые скобки обозначают процедуру усреднения.
    Если корреляционная функция вычисляется для одного и того же процесса, она называется автокорреляционной:
        Cauto(t,t′)=⟨X(t)*X(t′)⟩
    Аналогично можно вычислить корреляционную функцию для процессов, происходящих в разных точках пространства в различные моменты времени:
        C(t,r,t′,r′)=⟨X(t,r)*Y(t′,r′)⟩
    Корреляционные функции широко используются в статистической физике и других дисциплинах, изучающих случайные (стохастические) процессы.
    В статистической физике корреляционная функция описывает, как микроскопические переменные (например, скорости движения атомов) связаны в различных точках пространства в различные моменты времени. Наиболее общее определение имеет следующий вид:
        G(r,R,t,τ)=⟨f1(R,t)*f2(R+r,t+τ)⟩
    где f1,f2 - функции, корреляции которых мы хотим изучить, угловые скобки означают усреднение по статистическому ансамблю (например, по каноническому).
    Если мы интересуемся тем, скореллировано ли меняются микроскопические переменные в один и тот же момент времени в различных точках пространства, мы можем рассматривать функции f1, f2 в один и тот же момент времени, тогда их корреляционная функция запишется в виде:
        G(r,R,t)=⟨f1(R,t)f2(R+r,t)⟩
    такая корреляционная функция называется одновременной.
    Аналогично можно ввести одновременную корреляционную функцию для случая, когда функций f1, f2 не две, а s штук:
        G^(s)(r1,...,rn)=⟨f1(r1,t) ... fs(rn,t)⟩
    Иногда требуется рассмотреть временную эволюцию микроскопических переменных. Для этого используется пространственная корреляционная функция:
        G(R,t,τ)=⟨f1(R,t)f2(R,t+τ)⟩
    При этом важно понимать, что несмотря на то, что в равновесии некоторые макроскопические переменные не зависят от времени, микроскопические переменные (такие, как, например, вектор скорости частицы) могут зависеть от времени и поэтому подобные корреляционные функции, являющиеся по сути макроскопическими величинами, тоже могут зависеть от времени. 
    Task:
    Дискретизация сигналов. Ошибка квантования. Теорема Котельникова. Дискретизация и наложение спектров.
    Decision:
    Дискретизацией называется замена непрерывного сигнала дискретными  отсчетными значениями (отсчетами), взятыми через определенный интервал времени – интервал дискретизации TД.
    Дискретный сигнал x (t) Д с математической точки зрения можно рассматривать как результат перемножения функций x(t) и u(t).
    Операция квантования сводится к тому, что всем отсчетам входного сигнала x, попавшим в некоторый интервал, приписывается одно и то же значение x ,
    выражаемое двоичной кодовой комбинацией. Если кодовая комбинация содержит r разрядов, то число дискретных уровней
    выходного сигнала квантователяравно 2^r .
    Для взаимно однозначного соответствия весь диапазон изменения входного сигнала
        X=xmax–xmin
    должен быть разбит на такое же количество уровней.
    Величина интервала разбиения - шаг квантования - представляет собой значение аналоговой величины, на которую отличаются уровни входного сигнала,
    представленные двумя соседними кодовыми комбинациями.
    При наиболее распространенном равномерном квантовании шаг квантования равен
        Δ=X/(2^r)
    Характеристикой квантования называется зависимость квантованного значения xi от значения непрерывной величины x.
    Типичная характеристика квантователяс постоянном шагом квантования:
    Временная последовательность ошибок квантования случайного сигнала  представляет собой случайный процесс с равномерным законом распределения.
    Этот случайный процесс называют шумом квантования. Абсолютное значение  ошибки квантования не превышает Δ/2.
    Фундаментальной основой теории обработки сигналов служит теорема Котельникова (теорема Найквиста, теорема отсчетов), которая доказывает,  что если fm – самая высокая частота в спектре функции x(t), то функция полностью определяется последовательностью своих значений, если выборка осуществляется с частотой не меньшей, чем 2*fm.
    Эффекты частотной неоднозначности при неправильном выборе частоты дискретизации.
    В восстановленном сигнале будут отсутствовать искажения, если:
            АЧХ фильтра равномерна в интервале частот от F1 до Fmax,
            ФЧХ линейна в том же диапазоне частот,
            коэффициент передачи равен нулю на частотах F >= FД - Fmax
    Реализовать такой фильтр можно только при условии FД - Fmax >= Fmax
    Из приведенного неравенства вытекает известное соотношение Котельникова, позволяющее выбрать частоту дискретизации FД  >= 2 Fmax
    Если это условие не выполняется, то возникает наложениеспектров.
    Эффект наложения спектров иллюстрируется рисунком выше. Из него видно, что в полосу пропускания фильтра неизбежно попадает спектральная составляющая, которой нет в спектре исходного аналогового сигнала. Это вызывает искажение восстановленного сигнала
    Task:
    Спектральное представление сигналов. Дискретное и непрерывное преобразование Фурье
    Decision:
    Любой сигнал можно разложить на составляющие. Такое разложение сигнала называется спектральным. При этом сигнал можно представить в виде графика зависимости параметров сигнала от частоты, такая диаграмма называется спектральной или спектром сигнала.
    Спектр сигнала — это совокупность простых составляющих сигнала с определенными амплитудами, частотами и начальными фазами.
    Между спектром сигнала и его формой существует жесткая взаимосвязь: изменение формы сигнала приводит к изменению его спектра и наоборот, любое изменение спектра сигнала приводит к изменению его формы. Это важно запомнить, поскольку при передаче сигналов в системе передачи, они подвергаются преобразованиям, а значит, происходит преобразование их спектров.
    Различают два вида спектральных диаграмм:
            спектральная диаграмма амплитуд;
            спектральная диаграмма фаз.
    В спектральной диаграмме амплитуд — отображаются все составляющие со своими амплитудами и частотами.
    В спектральной диаграмме фаз — отображаются все составляющие со своими начальными фазами и частотами.
    Любой сигнал имеет одну спектральную диаграмму амплитуд и одну спектральную диаграмму фаз, в составе которых может содержаться множество составляющих.
    Не зависимо от того, какой спектр (амплитуд или фаз), он изображается в виде множества линий — составляющих. В спектре амплитуд высота спектральной линии равна амплитуде составляющей сигнала, а в спектре фаз — начальной фазе составляющей. Причем: в спектре амплитуд все составляющие имеют положительные значения, а в спектре фаз как положительные, так и отрицательные. Если амплитуда спектральной составляющей имеет отрицательный знак, то в спектре амплитуд она берется по модулю, а в спектре фаз знак составляющей изменяется на противоположный.
    Непрерывное преобразование само фактически является обобщением более ранней идеи рядов Фурье, которые определены для 2 π {\displaystyle 2\pi } 2\pi -периодических функций и представляют собой разложение таких функций в (бесконечную) линейную комбинацию гармонических колебаний с целыми частотами:
        f(x)= Σ(fn*e^(i*n*x)
    Разложение в ряд Фурье применимо также к функциям, заданным на ограниченных промежутках, поскольку такие функции могут быть периодически продолжены на всю прямую.
    Ряд Фурье является частным случаем преобразования Фурье, если последнее понимать в смысле обобщённых функций. Для любой 2*π-периодической функции имеем
        f(ω)=sqrt(2*π)Σ(fn*δ*(ω−n))
    Иными словами, преобразование Фурье периодической функции представляет собой сумму точечных нагрузок в целых точках и равно нулю вне их.
    Дискретное преобразование Фурье - преобразование конечных последовательностей (комплексных) чисел, которое, как и в непрерывном случае, превращает свёртку в поточечное умножение. Используется в цифровой обработке сигналов и в других ситуациях, где необходимо быстро выполнять свёртку, например, при умножении больших чисел.
    Пусть x0, x1, … , xn−1 - последовательность комплексных чисел. Рассмотрим многочлен f(t)=x0+x1*t+x2*t^2+...+(xn-1)*t^(n-1). Выберем какие-нибудь n точек на комплексной плоскости z0, z1, ... , zn-1. Теперь многочлену f(t) мы можем сопоставить новый набор из n чисел: f0:=f(z0), f1:=f(z1), ..., (fn-1):=f(zn-1). Заметим, что это преобразование обратимо: для любого набора чисел f0, f1, ...,fn−1 существует единственный многочлен f(t) степени не выше n-1 с такими значениями в z0, ..., zn-1 соответственно.
    Набор {fk} и называется дискретным преобразованием Фурье исходного набора {xk}. В качестве точек zk обычно выбирают корни n-й степени из единицы:
        zk=e^(2*πi*k/n).
    Такой выбор продиктован тем, что в этом случае обратное преобразование принимает простую форму, а также тем, что вычисление преобразования Фурье может быть выполнено особенно быстро. Так, в то время как вычисление свёртки двух последовательностей длины n напрямую требует порядка n^2 операций, переход к их преобразованию Фурье и обратно по быстрому алгоритму может быть выполнен за O(n*logn) операций. Для преобразований Фурье свёртке соответствует покомпонентное умножение, которое требует лишь порядка n операций.
    Task:
    Среднее и среднеквадратическое отклонение. Распределение Гаусса. Проверка статистических гипотез.
    Decision:
    Среднеквадратическое отклонение равно квадратному корню из дисперсии: σ=sqrt(D). При определении среднего квадратического отклонения при достаточно большом объеме изучаемой совокупности (n > 30) применяются формулы:
    σ=sqrt(Σ((х1-x)^2)/n) - среднее квадратическое отклонение простое (или невзвешенное);
    σ=sqrt(Σ((х1-x)^2*fi)/Σfi) - среднее квадратическое отклонение взвешенное, где: xi – значения изучаемого признака (варианты); n – объем статистической совокупности; x – средняя арифметическая величина.
    Среднее квадратическое отклонение характеризует разброс значений относительно среднего (математического ожидания). Обозначается как σ(x) или s(x).
    Свойства среднего квадратическоо отклонения:
        σ(const)=0
        σ(x)≥0
        σ(k*x)=k*σ(x)
        Среднее квадратическое отклонение суммы или разности двух независимых случайных величин равна квадратному корню от суммы квадратов квадратических отклонений этих величин.
        σ(X1+X2+...+Xn)=sqrt((σ^2)*X1+(σ^2)*X2+...+(σ^2)*Xn)
    Рассчитать среднеквадратическое отклонение можно разными калькуляторами, в зависимости от исходных данных. Ниже представлены наиболее распространенные из них.
    Среднее квадратическое отклонение в рядах распределения:
            Равномерное распределение. Дисперсия: D[X]=((b-a)^2)/12. Среднеквадратическое отклонение: σ=sqrt(D)
            Нормальное распределение / Распределение Гаусса. Дисперсия: D[X] = σ^2. σ^2=Σ((х1-x)^2*ni)/Σni. Среднеквадратическое отклонение: σ=sqrt(D)
            Показательное распределение. Дисперсия: D[X] = 1/(λ^2). Среднеквадратическое отклонение: σ=sqrt(D)
            Распределение Пуассона. Дисперсия: D[X]=Σ((х1-λ)^2*ni)/Σni. Среднеквадратическое отклонение: σ=sqrt(D)
            Биномиальное распределение. Дисперсия: D[X]=∑(xi^2)*Pi-M[x]^2. Среднеквадратическое отклонение: σ=sqrt(D)
    В современном мире мы обладаем все большим и большим объемом данных о событиях, происходящих вокруг. Зачастую у нас появляются вопросы, на которые хотелось бы быстро ответить на основе имеющейся информации, для этого как нельзя лучше подходит процесс, связанный с проверкой статистических гипотез. Однако, многие считают, что это занятие подразумевает под собой большое число вычислений и в принципе довольно сложно для понимания. На самом деле, алгоритм проверки гипотез достаточно прост, а для осуществления расчетов с каждым годом появляется все больше и больше готовых инструментальных средств, не требующих от человека глубоких познаний в области. Далее я попытаюсь показать, что мало того, что процесс проверки гипотез может быть полезным, так и осуществляется достаточно быстро и без серьезных усилий.
    Статистическая гипотеза - это предположение о каких-либо характеристиках случайной величины. Например: существенно ли изменение числа AI-стартапов в Европе в два разных года и т. д.
    Проверка статистических гипотез является важнейшим классом задач математической статистики. С помощью данного инструмента можно подтвердить или отвергнуть предположение о свойствах случайной величины путем применения методов статистического анализа для элементов выборки. Если в предыдущем предложении какие-либо термины являются не совсем понятными, ниже можно найти пояснение на простом языке.
    Случайная величина - это величина, которая в зависимости от той или иной ситуации принимает конкретные значения с определенными вероятностями. Примеры: отметка на экзамене; результат игры в кости; количество AI-стартапов по странам Европы. В общем, почти все что угодно!
    Генеральная совокупность - совокупность всех объектов для анализа. Например: все AI-стартапы в Европе в 2019-м году.
    Выборка - часть данных из генеральной совокупности. Например: официально зарегистрированные AI-стартапы в некоторых странах Европы в 2019-м году.
    Статистический анализ - использование различных методов для того, чтобы определить свойства генеральной совокупности по выборке.
    Для проверки статистических гипотез зачастую применяются статистические тесты, о которых будет рассказано далее.
    В обобщенном виде алгоритм выглядит таким образом:
            Формулировка основной (H0) и альтернативной (H1) гипотез
            Выбор уровня значимости
            Выбор статистического критерия
            Определения правила принятия решения  
            Итоговое принятие решения на основе исходной выборки данных
    Данные шаги являются унифицированными и схему можно использовать почти во всех случаях. Далее подробнее рассмотрим пример работы данного алгоритма на конкретных данных.
    Source:
    https://math.semestr.ru/group/standard-deviation.php
    https://habr.com/ru/post/558836/
    https://conture.by/post/592
    https://ru.wikipedia.org/wiki/%D0%9F%D1%80%D0%B5%D0%BE%D0%B1%D1%80%D0%B0%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5_%D0%A4%D1%83%D1%80%D1%8C%D0%B5#%D0%A0%D1%8F%D0%B4%D1%8B_%D0%A4%D1%83%D1%80%D1%8C%D0%B5
    https://fks.mirea.ru/wp-content/uploads/Items/%D0%90%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F_%D1%8D%D0%BA%D1%81%D0%BF%D0%B5%D1%80%D0%B8%D0%BC%D0%B5%D0%BD%D1%82%D0%B0/9_Auto_Phy_9-quantdiscr_18.pdf
    https://ru.wikipedia.org/wiki/%D0%9A%D0%BE%D1%80%D1%80%D0%B5%D0%BB%D1%8F%D1%86%D0%B8%D1%8F#%D0%9A%D0%BE%D1%80%D1%80%D0%B5%D0%BB%D1%8F%D1%86%D0%B8%D0%BE%D0%BD%D0%BD%D1%8B%D0%B9_%D0%B0%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7
    https://ru.wikipedia.org/wiki/%D0%90%D0%B2%D1%82%D0%BE%D0%BA%D0%BE%D1%80%D1%80%D0%B5%D0%BB%D1%8F%D1%86%D0%B8%D0%BE%D0%BD%D0%BD%D0%B0%D1%8F_%D1%84%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D1%8F
    https://ru.wikipedia.org/wiki/%D0%9A%D0%BE%D1%80%D1%80%D0%B5%D0%BB%D1%8F%D1%86%D0%B8%D0%BE%D0%BD%D0%BD%D0%B0%D1%8F_%D1%84%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D1%8F

Термодинамика и статистическая физика
    Task:
    Термодинамические величины классической плазмы. Радиус Дебая. Плазменна частота. Ионизационное равновесие.
    Task:
    Распределение Ферми и Бозе. Температура вырождения. Вырожденный электронный газ при нулевой температуре. Излучение черного тела. Формула Планка, законы Вина и Стефана-Больцмана.
    Task:
    Кинетическая теория газов. Уравнение состояния идеального газа (с выводом с помощью распределения Максвелла). Уравнение Ван-де-Ваальса.
    Decision:
    Кинетическая теория газов изучает свойства газов статистич. методами на основе представлений об их молекулярном (атомном) строении и определённом законе взаимодействий частиц газа. Осн. объекты изучения К. т. г. – газы, их смеси, а также плазма. Основы К. т. г. заложены в трудах Дж. Максвелла и Л. Больцмана во 2-й пол. 19 в.
    В газах ср. расстояние между молекулами много больше их размеров, что позволяет им двигаться почти свободно в промежутках между столновениями, при которых резко меняется величина и направление скорости. Время столкновения много меньше времени движения молекул между столкновениями – времени их свободного пробега.
    В К. т. г. наблюдаемые макроскопич. явления – давление газа, диффузия, теплопроводность и т. п. – представляются как результат усреднённого движения всех его молекул. Для вычисления давления и соответствующих кинетических коэффициентов нужно знать функцию распределения f(v,r,t) молекул газа по скоростям и пространственным координатам. Произведение f(v,r,t)dvdr определяет вероятностное число молекул, находящихся в момент времени t в элементе объёма dr=dxdydz вблизи точки r и обладающих скоростями, близкими к значению v. Плотность частиц в точке r в момент времени t равна
        n(r,t)=∫f(v,r,t)dv
    Осн. задача К. т. г. – определение явного вида функции f(v,r,t), позволяющей вычислять ср. значения характеристик газа и процессов переноса в нём. Для газа, подчиняющегося законам классич. механики, в состоянии статистич. равновесия функция f представляет собой Максвелла распределение:
        f(v)=n(m/2*π*k*T)^(2/3)*exp((−m*v^2)/(2*k*t)),
    где m – масса молекулы, T – абсолютная темп-ра газа, k – постоянная Больцмана.
    Процессы переноса энергии, импульса, массы и т. п. происходят гл. обр. при парных столкновениях молекул (атомов). Расчёт числа парных столкновений основан на гипотезе «молекулярного хаоса», предполагающей отсутствие корреляций между скоростями этих молекул, т. е. для газов малой плотности. Важную роль в этих процессах играет ср. длина свободного пробега молекул l, т. е. расстояние, которое проходит молекула за ср. время между столкновениями, двигаясь со ср. скоростью v1: l=v1/ν, где ν=n^(−1)∫dv.
    Последовательная К. т. г. основана на решении кинетического уравнения Больцмана, с помощью которого можно получить уравнение переноса импульса (Навье – Стокса уравнение), уравнения теплопроводности, диффузии и вычислить их коэффициенты. Кинетич. уравнение Больцмана при отсутствии внешних сил описывает эволюцию системы к состоянию равновесия. При решении кинетич. уравнения Больцмана для определённых задач исходят из модельных представлений о взаимодействии молекул (модель жёстких упругих молекул, модель молекул как центров сил притяжения–отталкивания и т. д.). Наиболее часто используют метод Чепмена – Энскога, его равновесным стационарным решением является распределение Максвелла.
    В плазме, где существенными становятся кулоновские взаимодействия частиц друг с другом, нельзя говорить о парных столкновениях, т. к. каждая частица одновременно взаимодействует с большим числом частиц. Однако и в этом случае можно получить кинетич. уравнение, если учесть, что, как правило, изменение импульса частицы при столкновении малo (см. Кинетические уравнения для плазмы).
    Это уравнение, связывающее основные термодинамические величины в модели газа Ван-дер-Ваальса.
    Хотя модель идеального газа хорошо описывает поведение реальных газов при низких давлениях и высоких температурах, в других условиях её соответствие с опытом гораздо хуже. В частности, это проявляется в том, что реальные газы могут быть переведены в жидкое и даже в твёрдое состояние, а идеальные — не могут.
    Для более точного описания поведения реальных газов при низких температурах была создана модель газа Ван-дер-Ваальса, учитывающая силы межмолекулярного взаимодействия. В этой модели внутренняя энергия U становится функцией не только температуры, но и объёма.
    Уравнение Ван-дер-Ваальса — это одно из широко известных приближённых уравнений состояния, описывающее свойства реального газа, имеющее компактную форму и учитывающее основные характеристики газа с межмолекулярным взаимодействием.
    Термическим уравнением состояния (или, часто, просто уравнением состояния) называется связь между давлением, объёмом и температурой.
    Для одного моля газа Ван-дер-Ваальса оно имеет вид:
        (p+a/(Vm^2))*(Vm−b)=R*T,
    где
           p — давление,
           Vm — молярный объём,
           T — абсолютная температура,
           R — универсальная газовая постоянная.
    Видно, что это уравнение фактически является уравнением состояния идеального газа с двумя поправками. Поправка a учитывает силы притяжения между молекулами (давление на стенку уменьшается, так как есть силы, втягивающие молекулы приграничного слоя внутрь), поправка b — суммарный объём молекул газа.
    Для ν молей газа Ван-дер-Ваальса уравнение состояния выглядит так:
        (p + (a*ν^2)/V^2)(V−b*ν)=ν*R*T,
    где
        V — объём.
    Изотермы газа ван дер Ваальса:
    P — давление;
    V — объём;
    K — критическая точка;
    abKcd — бинодаль (граница области двухфазного равновесия; область под колоколом бинодали — область двухфазного равновесия жидкость — пар);
    eKf — спинодаль (граница между областями метастабильных и термодинамически неустойчивых состояний; область под колоколом спинодали — нереализуемые состояния);
    bc — коннода (линия конденсации);
    abKe — область перегретой жидкости;
    dcKf — область переохлаждённого пара;
    площади закрашенных фигур под изобарой bc и над ней равны (правило Максвелла, 1875)
    Из рисунка, на котором изображены изотермы газа Ван-дер-Ваальса, видно, что ниже некоторой температуры зависимость p(V) перестаёт быть монотонной: образуется петля Ван-дер-Ваальса, в которой увеличению давления соответствует увеличение объёма, что противоречит законам термодинамики. Появление петли означает, что уравнение Ван-дер-Ваальса в данной области изменения p и V перестаёт описывать действительную ситуацию, когда имеет место фазовый переход газ — жидкость и реальная изотерма представляет собой отрезок прямой — конноду (ноду), соединяющую две фигуративные точки на бинодали.
    Task:
    Закон возрастания энтропии. Формула Больцмана для энтропии.
    Decision:
    В  рамках  равновесной  термодинамики  можно  сделать  ряд  выводов об  общих  закономерностях, приводящих  к  равновесию неравновесную  систему.  Пусть  неравновесная  замкнутая  система  обладает энергией  E.  Разобьем  эту  систему  на  подсистемы – квазизамкнутые  макроскопические  подсистемы  с энергиями Ei. При этом энергия замкнутой системы равна:
        Е=Е1+Е2+...+Ei+...=const (1)
    Маленькие подсистемы достигают равновесия быстрее, чем большие. Поэтому возможна ситуация, когда каждая из малых подсистем достигла своего равновесия, но между подсистемами равновесия еще нет. Большая замкнутая система при этом еще не равновесна.
    Макроскопическое  состояние  каждой  квазизамкнутой  равновесной  подсистемы  описывается вероятностью ΔPEi и выражается через энтропию  подсистемы Si(<Ek>). Данное состояние неравновесной замкнутой системы  по теореме об умножении вероятностей определяется вероятностью  
        ΔPE(E1,E2,...)=ΔPE(Ek).
    где Еk определяет  некоторый  набор  энергий  подсистем.  Тогда  вероятность  неравновесной  замкнутой системы иметь некоторый набор энергий подсистем равна произведению всех ΔPEi:
        ΔPE(Ek)~ΔPE1*ΔPE2*...*ΔPEi*... (2)
        ΔPE(Ek)~exp[S1(<E1>)+S2(<E2>)+...Si(<Ei>)+...] (3)
    Здесь exp[Si(<Ei>)] – быстро меняющаяся функция энергии <Ei> , а все остальные опущенные множители меняются  слабо  с  энергией  и  на  фоне  резкой  экспоненциальной  зависимости  их  можно  считать постоянными.
    Нас  интересует  процесс  установления  равновесия  между  подсистемами,  приводящий  замкнутую систему в равновесие. Здесь средние энергии подсистем <Ei> рассматриваем как переменные энергии, по которым устанавливается равновесие между подсистемами. Наиболее вероятное равновесное состояние системы достигается при максимальном значении суммы энтропии подсистем, стоящих в экспоненте. Если сумма энтропии растет, то соответствующая вероятность ΔPE растет очень быстро.
    В  рамках  классической  термодинамики  нельзя  получить информацию  о  скорости достижения равновесия, т.е. нельзя найти время релаксации. Однако можно установить общее направление процессов, которое приводит к росту вероятности. Процессы, связанные с уменьшением энтропии, маловероятны, т.к. ΔPE резко убывает (по экспоненциальному закону).
    Итак, вывод:  если замкнутая макроскопическая система находится в неравновесном состоянии, то наиболее вероятным следствием для нее будет монотонное возрастание энтропии.  
    Закон возрастания энтропии для замкнутых систем – это второе начало термодинамики:
        dS/dt>=0 (4)
    Второе начало  было введено сначала Клаузиусом, а затем вероятностное толкование закона возрастания энтропии было дано Больцманом (1870). Больцман писал:  “...всегда имеются флуктуационные состояния,  соответствующие уменьшению энтропии, и поэтому чрезвычайно маловероятные. Вероятность их настолько
    мала, что для макроскопических тел эти флуктуации не наблюдаются”.
    Во всех имеющихся в природе замкнутых системах энтропия никогда самопроизвольно не убывает, она  увеличивается  или  остается  постоянной dS/dt>=0.  Закон  возрастания  энтропии  (4)  устанавливает определенное направление течения процессов в природе.
    Определение энтропии
    Энтропия термодинамической системы определяется как величина, пропорциональная натуральному логарифму от числа различных микросостояний P, соответствующих данному макроскопическому состоянию (например, состоянию с заданной полной энергией).
        S=k*ln(P), k = R/N = 1,38*10-23 Дж/К,        (1)
    Коэффициент пропорциональности k и есть постоянная Больцмана. Это выражение, определяющее связь между микроскопическими (P) и макроскопическими состояниями (S), выражает центральную идею статистической механики. R = 8,31 Дж/(моль*К) - молярная газовая постоянная; N = 6,06*10^23 моль^(-1) - число Авогадро;
    Р - статистический вес: число способов осуществления данного состояния.
    Параметр S - энтропия - служит мерой рассеяния энергии Вселенной, а Р - характеризует любые самопроизвольные изменения, эта величина относится к миру атомов, определяющих скрытый механизм изменения. Итак, формула (1), вывод которой дан отдельно, связывает энтропию с хаосом.
    В условиях равновесия энтропия - функция состояния системы, которую можно измерить или вычислить теоретически. Но стоит изолированной системе отклониться от равновесия - возникает свойство энтропии - она только возрастает.
    Представим формулу (1) в виде
        P = e^(S/K)
    и обратим внимание на то, что статистический вес состояния системы P экспоненциально растет с ростом S. Иными словами, менее упорядоченное состояние (больший хаос) имеет больший статистический вес*, т. к. оно может быть реализовано большим числом способов. Следовательно, энтропия - мера неупорядоченности системы.
    Из-за случайных перекладываний растет беспорядок на столе, в комнате. Порядок создается искусственно, беспорядок - самопроизвольно, т. к. ему отвечает большая вероятность, большая энтропия. Разумная деятельность человека направлена на преодоление разупорядоченности.
    Обратим внимание на то, что первое начало термодинамики (закон сохранения энергии) - закон абсолютно строгий, это детерминированный закон. Второе начало термодинамики - закон возрастания энтропии - закон статистический (вероятностный).
    Существует даже вероятность того, что молекулы, находящиеся в кубике размером 1 см^3 могут все собраться в одной половине этого кубика. Вероятность для одной молекулы находиться в правой части кубика: q1=1/2. При нормальных условиях в 1 см^3 содержится число молекул 2,7*10^19 (число Лошмидта), тогда вероятность того, что все молекулы соберутся в правую половину кубика равна (1/2)^(2,7*10)^19. Это исчезающе малая величина.
    Работа Больцмана - прорыв в совершенно новую область: в физику вошла вероятность, статистические законы. Это значит, что хотя и редко, но энтропия может и убывать.
    Task:
    Распределение Максвелла и его свойства. Распределение Больцмана. Барометрическая формула
    Decision:
    Распределение Максвелла — общее наименование нескольких распределений вероятности, которые описывают статистическое поведение параметров частиц идеального газа. Вид соответствующей функции плотности вероятности диктуется тем, какая величина: скорость частицы, проекция скорости, модуль скорости, энергия, импульс и т. д. — выступает в качестве непрерывной случайной величины. В ряде случаев распределение Максвелла может быть выражено как дискретное распределение по множеству уровней энергии.
    Наиболее значимое распределение Максвелла записывается для модуля скорости частицы v в непрерывном случае и имеет плотность:
        fv(x) = B*x^2*exp[−β*x^2](x ≥ 0) и fv(x) = 0 ( x < 0 ) ,
    где x — формальная переменная, фактор β > 0 определяется типом частиц и температурой, а множитель B подбирается в зависимости от β для обеспечения нормировки. Именно это выражение считается максвелловским распределением в математике, хотя для других параметров частиц аналитический вид распределения Максвелла будет иным.
    Распределение Максвелла лежит в основе кинетической теории газов, объясняющей многие фундаментальные свойства газов, включая давление и диффузию. С его помощью вычисляются средние и наиболее вероятные скорости и энергии молекул газа. Оно также применимо для описания электронных процессов переноса и других явлений в физике и химии. Распределение Максвелла может быть получено при помощи статистической механики (см. происхождение статсуммы). Данное распределение является реализующимся с наивысшей вероятностью распределением изучаемого параметра.
    1). При v = 0 множитель v^2 функции F(v) обращает ее в ноль. Это означает, что нет молекул, которые не двигались бы.
    2). При v > 0 функция F(v) растет за счет множителя v^2. Кривая имеет максимум. Это означает, что существует определенная скорость движения молекул, такая, что вблизи нее на данный интервал dV приходится наибольшая часть молекул. Эта скорость называется наиболее вероятной Vвер.:
        Vвер=sqrt(2*k*T/m0)     (1.27)
    Из распределения Максвелла вытекает, что средняя квадратичная скорость выражается
        V=sqrt(3*k*T/m0)    (1.28)
    Если учесть, что p*V = RT, R = k*NA, μ = m0NA, а ρ = μ/Vμ, то из получим другую формулу для средней квадратичной скорости – через макроскопические величины – давление p и плотность ρ:
        V=sqrt((3*p)/ρ)     (1.29)
    Средняя кинетическая энергия поступательного движения молекул определяется средней квадратичной скоростью.
    Средняя арифметическая скорость движения молекул, исходя из распределения Максвелла:
        <v>=sqrt(8*k*T/m0*π)     (1.31)
    3.) При v → ∞ кривая быстро стремится к нулю за счет экспоненциального множителя. То есть кривая не симметрична: спад кривой в одну сторону больше, чем в другую.
    Как видно из формулы (1.26) и рис. 1.5 вероятность dWv равна площади заштрихованной полоски. Ясно, что вероятность того, что молекула имеет любую скорость, равна сумме площадей всех тонких полосок и, таким образом, площади, ограниченной графиком F(v) и осью скоростей. А площадь этой фигуры не что иное, как интеграл, который, согласно условию нормировки (1.19) и соотношению(1.26), равен единице:
        ∫F(v)dv=∫dWv=1     (1.32)
    Распределение Максвелла сильно зависит от температуры (рис. 1.6): при увеличении температуры максимум функции F(v) смещается вправо Vвер~sqrt(T) и становится ниже F(Vвер)~1/sqrt(T).
    Распределение Больцмана определяет распределение частиц в силовом поле в условиях теплового равновесия.
    Пусть идеальный газ находится в поле консервативных сил в условиях теплового равновесия. При этом концентрация газа будет различной в точках с различной потенциальной энергией, что необходимо для соблюдения условий механического равновесия. Так, число молекул в единичном объеме n убывает с удалением от поверхности Земли, и давление, в силу соотношения P = n*k*T, падает.
    Если известно число молекул в единичном объеме, то известно и давление, и наоборот. Давление и плотность пропорциональны друг другу, поскольку температура в нашем случае постоянна. Давление с уменьшением высоты должно возрастать, потому что нижнему слою приходится выдерживать вес всех расположенных сверху атомов.
    Исходя из основного уравнения молекулярно-кинетической теории: P = n*k*T, заменим P и P0 в барометрической формуле на n и n0 и получим распределение Больцмана для молярной массы газа:
        n=n0*e^(-μ*g*h/R*T),     (2.5.1)
    где n0 и n - число молекул в единичном объёме на высоте h = 0 и h.
    Так как μ=m*Na, а R=Na*k, то (2.5.1) можно представить в виде
          n=n0*e^(-m*g*h/K*T).      (2.5.2)
    С уменьшением температуры число молекул на высотах, отличных от нуля, убывает. При T = 0 тепловое движение прекращается, все молекулы расположились бы на земной поверхности. При высоких температурах, наоборот, молекулы оказываются распределёнными по высоте почти равномерно, а плотность молекул медленно убывает с высотой. Так как m*g*h – это потенциальная энергия U, то на разных высотах U = m*g*h – различна. Следовательно, (2.5.2) характеризует распределение частиц по значениям потенциальной энергии:
          n=n0*e^(U/(k*T)),           (2.5.3)
    – это закон распределения частиц по потенциальным энергиям – распределение Больцмана. Здесь n0 – число молекул в единице объёма там, где U = 0.
    На рисунке 2.11 показана зависимость концентрации различных газов от высоты. Видно, что число более тяжелых молекул с высотой убывает быстрее, чем легких.
    Из (2.5.3) можно получить, что отношение концентраций молекул в точках с U1 и i>U2 равно:
          n1/n2=e^(-(U1-U2)/(k*T)).           (2.5.4)
    Больцман доказал, что соотношение (2.5.3) справедливо не только в потенциальном поле сил гравитации, но и в любом потенциальном поле, для совокупности любых одинаковых частиц, находящихся в состоянии хаотического теплового движения.
    Рассмотрим ещё один очень важный закон.
    Атмосферное давление на какой-либо высоте h обусловлено весом слоёв газа, лежащих выше. Пусть P – давление на высоте h , а P+dP – на высоте h+dh(рис. 2.9).
    Причём, dh >0, а dР < 0, так как на большей высоте давление меньше. Разность давления P-(P+dP) равна весу газа, заключённого в объёме цилиндра с площадью основания равного единице и высотой dh.
    Т.к. P=ρ*g*h где ρ=(P*μ)/(R*T) - плотность газа на высоте h, медленно убывающая с высотой, то можно записать:
        P-(P+Dp)=ρ*gdh.           
    Отсюда можно получить барометрическую формулу:
          P=P0*e^((μ*g*h)/(R*T))(2.4.1)
    где P0 – давление на высоте h = 0.
    Из формулы (2.4.1) следует, что P убывает с высотой тем быстрее, чем тяжелее газ (чем больше μ) и чем ниже температура (например, на больших высотах концентрация легких газов Не и Н2 гораздо больше, чем у поверхности Земли).
    На рисунке 2.10 изображены две кривые, которые можно трактовать, либо как соответствующие разным μ (при одинаковой Т), либо как отвечающие разным Т, при одинаковых μ.
    Таким образом, чем тяжелее газ (больше μ) и чем ниже температура, тем быстрее убывает давление.
    Task:
    Фазовое пространство. Теорема Лиувилля.
    Task:
    Элементы теории вероятностей в применении к молекулярной физике. Плотность вероятности. Эргодическая гипотеза. Распределения Пуассона и Гаусса.
    Task:
    Термодинамические величины. Основные законы термодинамики. Термодинамические потенциалы. Адиабатические процессы.
    Source:
    https://wiki/%D0%A2%D0%B5%D1%80%D0%BC%D0%BE%D0%B4%D0%B8%D0%BD%D0%B0%D0%BC%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5_%D0%B2%D0%B5%D0%BB%D0%B8%D1%87%D0%B8%D0%BD%D1%8B
    https://reshit.ru/zakony-termodinamiki
    https://ru.wikipedia.org/wiki/%D0%A2%D0%B5%D1%80%D0%BC%D0%BE%D0%B4%D0%B8%D0%BD%D0%B0%D0%BC%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5_%D0%BF%D0%BE%D1%82%D0%B5%D0%BD%D1%86%D0%B8%D0%B0%D0%BB%D1%8B
    https://ru.wikipedia.org/wiki/%D0%90%D0%B4%D0%B8%D0%B0%D0%B1%D0%B0%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B9_%D0%BF%D1%80%D0%BE%D1%86%D0%B5%D1%81%D1%81
    http://moodle32.lms.tpu.ru/pluginfile.php/4620/mod_resource/content/1/%D0%BC%D0%BE%D0%B4.2%20%D0%AD%D0%9B%D0%95%D0%9C%D0%95%D0%9D%D0%A2%D0%AB%20%D0%A1%D0%A2%D0%90%D0%A2%D0%98%D0%A1%D0%A2%D0%98%D0%A7%D0%95%D0%A1%D0%9A%D0%9E%D0%99%20%D0%A4%D0%98%D0%97%D0%98%D0%9A%D0%98.pdf
    https://ru.wikipedia.org/wiki/%D0%9F%D0%BB%D0%BE%D1%82%D0%BD%D0%BE%D1%81%D1%82%D1%8C_%D0%B2%D0%B5%D1%80%D0%BE%D1%8F%D1%82%D0%BD%D0%BE%D1%81%D1%82%D0%B8
    https://deru.abcdef.wiki/wiki/Ergodenhypothese
    https://ru.wikipedia.org/wiki/%D0%AD%D1%80%D0%B3%D0%BE%D0%B4%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B0%D1%8F_%D0%B3%D0%B8%D0%BF%D0%BE%D1%82%D0%B5%D0%B7%D0%B0
    https://ru.wikipedia.org/wiki/%D0%A0%D0%B0%D1%81%D0%BF%D1%80%D0%B5%D0%B4%D0%B5%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5_%D0%9F%D1%83%D0%B0%D1%81%D1%81%D0%BE%D0%BD%D0%B0
    https://ru.wikipedia.org/wiki/%D0%9D%D0%BE%D1%80%D0%BC%D0%B0%D0%BB%D1%8C%D0%BD%D0%BE%D0%B5_%D1%80%D0%B0%D1%81%D0%BF%D1%80%D0%B5%D0%B4%D0%B5%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5
    https://docviewer.yandex.ru/view/895416477/?page=3&*=XgudmN86Xx4uU4qqXh3DwninXG97InVybCI6Imh0dHA6Ly93d3cubGliLnVubi5ydS9zdHVkZW50cy9zcmMvR2F2cmlsZW5rbyZHcmFjaC5wZGYiLCJ0aXRsZSI6IkdhdnJpbGVua28iLCJub2lmcmFtZSI6dHJ1ZSwidWlkIjoiODk1NDE2NDc3IiwidHMiOjE2MzE2NzUwMTgzMDgsInl1IjoiNjQ3NzgwMDg3MTYyMTU1ODcyMSIsInNlcnBQYXJhbXMiOiJ0bT0xNjMxNjc1MDExJnRsZD1ydSZsYW5nPXJ1Jm5hbWU9R2F2cmlsZW5rbyZHcmFjaC5wZGYmdGV4dD0lRDElODQlRDAlQjAlRDAlQjclRDAlQkUlRDAlQjIlRDAlQkUlRDAlQjUrJUQwJUJGJUQxJTgwJUQwJUJFJUQxJTgxJUQxJTgyJUQxJTgwJUQwJUIwJUQwJUJEJUQxJTgxJUQxJTgyJUQwJUIyJUQwJUJFKyVEMSU4MiVEMCVCNSVEMSU4MCVEMCVCQyVEMCVCRSVEMCVCNCVEMCVCOCVEMCVCRCVEMCVCMCVEMCVCQyVEMCVCOCVEMCVCQSVEMCVCMCZ1cmw9aHR0cCUzQS8vd3d3LmxpYi51bm4ucnUvc3R1ZGVudHMvc3JjL0dhdnJpbGVua28lMjZHcmFjaC5wZGYmbHI9NjMmbWltZT1wZGYmbDEwbj1ydSZzaWduPTZmZGQyNjU4MWFkMTcyN2IwZDgzYjFmZTU4MDAzYTliJmtleW5vPTAifQ%3D%3D&lang=ru
    https://ru.wikipedia.org/wiki/%D0%A0%D0%B0%D1%81%D0%BF%D1%80%D0%B5%D0%B4%D0%B5%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5_%D0%9C%D0%B0%D0%BA%D1%81%D0%B2%D0%B5%D0%BB%D0%BB%D0%B0
    https://studopedia.ru/7_42235_svoystva-raspredeleniya-maksvella.html
    http://ens.tpu.ru/POSOBIE_FIS_KUSN/%D0%9C%D0%BE%D0%BB%D0%B5%D0%BA%D1%83%D0%BB%D1%8F%D1%80%D0%BD%D0%B0%D1%8F%20%D1%84%D0%B8%D0%B7%D0%B8%D0%BA%D0%B0.%20%D0%A2%D0%B5%D1%80%D0%BC%D0%BE%D0%B4%D0%B8%D0%BD%D0%B0%D0%BC%D0%B8%D0%BA%D0%B0/02-5.htm
    http://ens.tpu.ru/POSOBIE_FIS_KUSN/%D0%9C%D0%BE%D0%BB%D0%B5%D0%BA%D1%83%D0%BB%D1%8F%D1%80%D0%BD%D0%B0%D1%8F%20%D1%84%D0%B8%D0%B7%D0%B8%D0%BA%D0%B0.%20%D0%A2%D0%B5%D1%80%D0%BC%D0%BE%D0%B4%D0%B8%D0%BD%D0%B0%D0%BC%D0%B8%D0%BA%D0%B0/02-4.htm
    https://physics.spbstu.ru/userfiles/files/molec1-09.pdf
    http://fn.bmstu.ru/data-physics/library/physbook/evg/ch3/texthtml/ch3_9.htm
    https://ru.wikipedia.org/wiki/%D0%92%D1%82%D0%BE%D1%80%D0%BE%D0%B5_%D0%BD%D0%B0%D1%87%D0%B0%D0%BB%D0%BE_%D1%82%D0%B5%D1%80%D0%BC%D0%BE%D0%B4%D0%B8%D0%BD%D0%B0%D0%BC%D0%B8%D0%BA%D0%B8
    https://docviewer.yandex.ru/view/895416477/?page=8&*=h10fMS5iw%2FmndUiwXY1too2TYIV7InVybCI6Imh0dHA6Ly9wcm9mYmVja21hbi5uYXJvZC5ydS9JbmZvcm1MZWtjLmZpbGVzL0luZjA1LnBkZiIsInRpdGxlIjoiSW5mMDUucGRmIiwibm9pZnJhbWUiOnRydWUsInVpZCI6Ijg5NTQxNjQ3NyIsInRzIjoxNjMyMjczODI4Njg3LCJ5dSI6IjY0Nzc4MDA4NzE2MjE1NTg3MjEiLCJzZXJwUGFyYW1zIjoidG09MTYzMjI3MzgyMCZ0bGQ9cnUmbGFuZz1ydSZuYW1lPUluZjA1LnBkZiZ0ZXh0PSVEMSU4NCVEMCVCRSVEMSU4MCVEMCVCQyVEMSU4MyVEMCVCQiVEMCVCMCslRDAlQjElRDAlQkUlRDAlQkIlRDElOEMlRDElODYlRDAlQkMlRDAlQjAlRDAlQkQlRDAlQjArJUQwJUI0JUQwJUJCJUQxJThGKyVEMSU4RCVEMCVCRCVEMSU4MiVEMSU4MCVEMCVCRSVEMCVCRiVEMCVCOCVEMCVCOCslRDAlQjIlRDElOEIlRDAlQjIlRDAlQkUlRDAlQjQmdXJsPWh0dHAlM0EvL3Byb2ZiZWNrbWFuLm5hcm9kLnJ1L0luZm9ybUxla2MuZmlsZXMvSW5mMDUucGRmJmxyPTYzJm1pbWU9cGRmJmwxMG49cnUmc2lnbj1hNDJmZDU4NmRlODdlN2JjODJmZDU4OTc3NzM0MzhkNCZrZXlubz0wIn0%3D&lang=ru
    https://ru.wikipedia.org/wiki/%D0%9F%D0%BE%D1%81%D1%82%D0%BE%D1%8F%D0%BD%D0%BD%D0%B0%D1%8F_%D0%91%D0%BE%D0%BB%D1%8C%D1%86%D0%BC%D0%B0%D0%BD%D0%B0
    https://de.ifmo.ru/bk_netra/page.php?tutindex=13&index=7
    https://bigenc.ru/physics/text/2064619
    https://www.omgtu.ru/general_information/faculties/radio_engineering_department/department_of_quot_physics_quot/File/mechanics/molekul_lex.pdf
    https://ru.wikipedia.org/wiki/%D0%A3%D1%80%D0%B0%D0%B2%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5_%D0%92%D0%B0%D0%BD-%D0%B4%D0%B5%D1%80-%D0%92%D0%B0%D0%B0%D0%BB%D1%8C%D1%81%D0%B0
    https://studizba.com/lectures/73-fizika/1064-osnovy-statisticheskoy-fiziki/19454-33-termodinamicheskie-velichiny-klassicheskoy-plazmy.html
    https://ru.wikipedia.org/wiki/%D0%94%D0%B5%D0%B1%D0%B0%D0%B5%D0%B2%D1%81%D0%BA%D0%B0%D1%8F_%D0%B4%D0%BB%D0%B8%D0%BD%D0%B0
    https://ru.wikipedia.org/wiki/%D0%9F%D0%BB%D0%B0%D0%B7%D0%BC%D0%B5%D0%BD%D0%BD%D0%B0%D1%8F_%D1%87%D0%B0%D1%81%D1%82%D0%BE%D1%82%D0%B0
    http://www.astronet.ru/db/msg/1188300
    http://heritage.sai.msu.ru/ucheb/Zemcov/Part_3_Hydrogen/Chapter_17/Chapter_17.htm
    https://studref.com/620265/matematika_himiya_fizik/raspredeleniya_fermi_boze
    https://docviewer.yandex.ru/view/895416477/?*=KSPbIyVowK2B9Gz7H9%2Bn2r%2F%2Fjxt7InVybCI6Imh0dHA6Ly9mbi5ibXN0dS5ydS9maWxlcy9GTjQvbGVjXzRzZW0vNHNlbV9sZWNfMTRfMTUucGRmIiwidGl0bGUiOiI0c2VtX2xlY18xNF8xNS5wZGYiLCJub2lmcmFtZSI6dHJ1ZSwidWlkIjoiODk1NDE2NDc3IiwidHMiOjE2MzIyNzk5NzYxMDcsInl1IjoiNjQ3NzgwMDg3MTYyMTU1ODcyMSIsInNlcnBQYXJhbXMiOiJ0bT0xNjMyMjc5OTQ5JnRsZD1ydSZsYW5nPXJ1Jm5hbWU9NHNlbV9sZWNfMTRfMTUucGRmJnRleHQ9JUQxJTgyJUQwJUI1JUQwJUJDJUQwJUJGJUQwJUI1JUQxJTgwJUQwJUIwJUQxJTgyJUQxJTgzJUQxJTgwJUQwJUIwKyVEMCVCMiVEMSU4QiVEMSU4MCVEMCVCRSVEMCVCNiVEMCVCNCVEMCVCNSVEMCVCRCVEMCVCOCVEMSU4RiZ1cmw9aHR0cCUzQS8vZm4uYm1zdHUucnUvZmlsZXMvRk40L2xlY180c2VtLzRzZW1fbGVjXzE0XzE1LnBkZiZscj02MyZtaW1lPXBkZiZsMTBuPXJ1JnNpZ249ZTU0Y2Q4OGE2YTM1ZDJkNmRkOTdlNTZmMzQ1NDk5OGQma2V5bm89MCJ9&lang=ru
    https://elementy.ru/trefil/25/Izluchenie_chernogo_tela
    https://docviewer.yandex.ru/view/895416477/?page=9&*=F35zvhI4ipMytKSryrY%2FeoIb4sp7InVybCI6Imh0dHBzOi8va2FwaXR6YS5yYXMucnUvfmdsYXprb3YvaHNlL21pbm9yLzAzLnBkZiIsInRpdGxlIjoiMDMucGRmIiwibm9pZnJhbWUiOnRydWUsInVpZCI6Ijg5NTQxNjQ3NyIsInRzIjoxNjMyMjgxMDM0NzY4LCJ5dSI6IjY0Nzc4MDA4NzE2MjE1NTg3MjEiLCJzZXJwUGFyYW1zIjoidG09MTYzMjI4MDkzNyZ0bGQ9cnUmbGFuZz1ydSZuYW1lPTAzLnBkZiZ0ZXh0PSVEMCVCOCVEMCVCNyVEMCVCQiVEMSU4MyVEMSU4NyVEMCVCNSVEMCVCRCVEMCVCOCVEMCVCNSslRDElODclRDAlQjUlRDElODAlRDAlQkQlRDAlQkUlRDAlQjMlRDAlQkUrJUQxJTgyJUQwJUI1JUQwJUJCJUQwJUIwJnVybD1odHRwcyUzQS8va2FwaXR6YS5yYXMucnUvfmdsYXprb3YvaHNlL21pbm9yLzAzLnBkZiZscj02MyZtaW1lPXBkZiZsMTBuPXJ1JnNpZ249ZTcxOWYxNDc1N2RiMmEwNGU1ZTc2ZTBkZDE3MTMxY2Ema2V5bm89MCJ9&lang=ru
    https://ru.wikipedia.org/wiki/%D0%90%D0%B1%D1%81%D0%BE%D0%BB%D1%8E%D1%82%D0%BD%D0%BE_%D1%87%D1%91%D1%80%D0%BD%D0%BE%D0%B5_%D1%82%D0%B5%D0%BB%D0%BE#%D0%92%D1%82%D0%BE%D1%80%D0%BE%D0%B9_%D0%B7%D0%B0%D0%BA%D0%BE%D0%BD_%D0%B8%D0%B7%D0%BB%D1%83%D1%87%D0%B5%D0%BD%D0%B8%D1%8F_%D0%92%D0%B8%D0%BD%D0%B0

Теория колебаний и волн
    Task:
    Плоские волны. Плоские акустические волны, упругие продольные и поперечные волны в твердом теле. волны на поверхности жидкости
    Task:
    Волновое уравнение. Собственные моды. Понятие дисперсионного уравнения.
    Task:
    Уравнение колебаний, его вывод для различных систем. Свободные и вынужденные колебания. Закон сохранения энергии для колебаний. Резонанс. Затухание колебаний. Инкримент. Добротность.
    Decision:
    Source:
    https://ru.wikipedia.org/wiki/%D0%93%D0%B0%D1%80%D0%BC%D0%BE%D0%BD%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5_%D0%BA%D0%BE%D0%BB%D0%B5%D0%B1%D0%B0%D0%BD%D0%B8%D1%8F
    https://synergy.ru/assets/upload/news/articles_ege/ege/fizika/%D1%82%D0%B5%D0%BE%D1%80%D0%B8%D1%8F/%D0%9A%D1%80%D0%B0%D1%82%D0%BA%D0%B0%D1%8F%20%D1%82%D0%B5%D0%BE%D1%80%D0%B8%D1%8F%20%D0%95%D0%93%D0%AD%20%D0%BF%D0%BE%20%D1%84%D0%B8%D0%B7%D0%B8%D0%BA%D0%B5%20%D0%9C%D0%B5%D1%85%D0%B0%D0%BD%D0%B8%D0%BA%D0%B0.pdf.pdf#:~:text=%D0%A3%D1%80%D0%B0%D0%B2%D0%BD%D0%B5%D0%BD%D0%B8%D1%8F%20%D0%BA%D0%BE%D0%BB%D0%B5%D0%B1%D0%B0%D0%BD%D0%B8%D0%B9.%20%D1%85%20%3D%20%D0%A5%D0%BC%D1%81%D0%BEs(%CF%89t,%CF%86%200)%20%D1%83%D1%80%D0%B0%D0%B2%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5%20%D1%83%D1%81%D0%BA%D0%BE%D1%80%D0%B5%D0%BD%D0%B8%D1%8F%2C%20%D0%B3%D0%B4%D0%B5
    https://ru.wikipedia.org/wiki/%D0%9A%D0%BE%D0%BB%D0%B5%D0%B1%D0%B0%D0%BD%D0%B8%D1%8F
    https://www.calc.ru/Zatukhayushchiye-Kolebaniya.html
    https://docviewer.yandex.ru/view/0/?page=2&*=I0FkCME1cw6fP6wISVPImqX58e17InVybCI6Imh0dHBzOi8vcGh5cy5ic3B1LmJ5L3N0YXRpYy91bS9waHlzL21laC9sZWtjaWkvbGVrbWV4cGRmL2xla21leF8yNy5wZGYiLCJ0aXRsZSI6Imxla21leF8yNy5wZGYiLCJub2lmcmFtZSI6dHJ1ZSwidWlkIjoiMCIsInRzIjoxNjI5OTQ1MzMwNDMzLCJ5dSI6Ijc5OTU0Mjk3MTE2MTUzNjc3MTciLCJzZXJwUGFyYW1zIjoidG09MTYyOTk0NDg5NyZ0bGQ9cnUmbGFuZz1ydSZuYW1lPWxla21leF8yNy5wZGYmdGV4dD0lRDAlQjQlRDAlQkUlRDAlQjElRDElODAlRDAlQkUlRDElODIlRDAlQkQlRDAlQkUlRDElODElRDElODIlRDElOEMrJUQwJUJBJUQwJUJFJUQwJUJCJUQwJUI1JUQwJUIxJUQwJUIwJUQwJUJEJUQwJUI4JUQwJUI5JnVybD1odHRwcyUzQS8vcGh5cy5ic3B1LmJ5L3N0YXRpYy91bS9waHlzL21laC9sZWtjaWkvbGVrbWV4cGRmL2xla21leF8yNy5wZGYmbHI9NjMmbWltZT1wZGYmbDEwbj1ydSZzaWduPTJjOWQyN2VmN2ZiODIzM2I1YTcwMjc3ZGQyZTY0MWJmJmtleW5vPTAifQ%3D%3D&lang=ru
    https://physics.belstu.by/mechanics_lk/mechanics_lk7.html
    https://docviewer.yandex.ru/view/0/?page=1&*=8v3%2FRZIhon7WfYoHfaluZ%2FUhHQ57InVybCI6Imh0dHBzOi8vcG9ydGFsLnRwdS5ydS9TSEFSRUQvay9LUkFWQ0hFTktPTlMvcmFib3RhL0lLL0ZpemlrYTMyL1RhYi9sZWs1LnBkZiIsInRpdGxlIjoibGVrNS5wZGYiLCJub2lmcmFtZSI6dHJ1ZSwidWlkIjoiMCIsInRzIjoxNjI5OTQ1ODUzMjUxLCJ5dSI6Ijc5OTU0Mjk3MTE2MTUzNjc3MTciLCJzZXJwUGFyYW1zIjoidG09MTYyOTk0NTc2MCZ0bGQ9cnUmbGFuZz1ydSZuYW1lPWxlazUucGRmJnRleHQ9JUQwJUIyJUQwJUJFJUQwJUJCJUQwJUJEJUQwJUJFJUQwJUIyJUQwJUJFJUQwJUI1KyVEMSU4MyVEMSU4MCVEMCVCMCVEMCVCMiVEMCVCRCVEMCVCNSVEMCVCRCVEMCVCOCVEMCVCNSslRDElODIlRDAlQjUlRDAlQkUlRDElODAlRDAlQjglRDElOEYrJUQwJUIyJUQwJUJFJUQwJUJCJUQwJUJEJnVybD1odHRwcyUzQS8vcG9ydGFsLnRwdS5ydS9TSEFSRUQvay9LUkFWQ0hFTktPTlMvcmFib3RhL0lLL0ZpemlrYTMyL1RhYi9sZWs1LnBkZiZscj02MyZtaW1lPXBkZiZsMTBuPXJ1JnNpZ249OTIxMWI5NzRmNTZlZTlmMzE0ZTczMGJiODRkODNhMTIma2V5bm89MCJ9&lang=ru
    https://ru.wikipedia.org/wiki/%D0%9D%D0%BE%D1%80%D0%BC%D0%B0%D0%BB%D1%8C%D0%BD%D1%8B%D0%B5_%D0%BA%D0%BE%D0%BB%D0%B5%D0%B1%D0%B0%D0%BD%D0%B8%D1%8F
    http://www.femto.com.ua/articles/part_1/1041.html
    https://docviewer.yandex.ru/view/0/?page=3&*=KidOwhJP6TCRa6sjY%2B8F%2Bao6gld7InVybCI6Imh0dHA6Ly93aW5kb3cuZWR1LnJ1L3Jlc291cmNlLzQzMi8yODQzMi9maWxlcy91c3R1MDM5LnBkZiIsInRpdGxlIjoidXN0dTAzOS5wZGYiLCJub2lmcmFtZSI6dHJ1ZSwidWlkIjoiMCIsInRzIjoxNjI5OTQ4OTYxMTI4LCJ5dSI6Ijc5OTU0Mjk3MTE2MTUzNjc3MTciLCJzZXJwUGFyYW1zIjoidG09MTYyOTk0ODc5OCZ0bGQ9cnUmbGFuZz1ydSZuYW1lPXVzdHUwMzkucGRmJnRleHQ9JUQwJUJGJUQwJUJCJUQwJUJFJUQxJTgxJUQwJUJBJUQwJUI4JUQwJUI1KyVEMCVCMCVEMCVCQSVEMSU4MyVEMSU4MSVEMSU4MiVEMCVCOCVEMSU4NyVEMCVCNSVEMSU4MSVEMCVCQSVEMCVCOCVEMCVCNSslRDAlQjIlRDAlQkUlRDAlQkIlRDAlQkQlRDElOEImdXJsPWh0dHAlM0EvL3dpbmRvdy5lZHUucnUvcmVzb3VyY2UvNDMyLzI4NDMyL2ZpbGVzL3VzdHUwMzkucGRmJmxyPTYzJm1pbWU9cGRmJmwxMG49cnUmc2lnbj02ZThkOWEwZDE0Y2JjODk4OTczYjE5NjE2ZGNhMDI0OCZrZXlubz0wIn0%3D&lang=ru
    https://ru.wikipedia.org/wiki/%D0%9F%D0%BB%D0%BE%D1%81%D0%BA%D0%B0%D1%8F_%D0%B2%D0%BE%D0%BB%D0%BD%D0%B0
    https://docviewer.yandex.ru/view/0/?page=2&*=yS72vMpY8iUdLvUlJ4aXqjZzVrZ7InVybCI6Imh0dHBzOi8vcG9ydGFsLnRwdS5ydS9TSEFSRUQvay9LUkFWQ0hFTktPTlMvcmFib3RhL0lLL0ZpemlrYTMyL1RhYi9sZWs1LnBkZiIsInRpdGxlIjoibGVrNS5wZGYiLCJub2lmcmFtZSI6dHJ1ZSwidWlkIjoiMCIsInRzIjoxNjI5OTUzMTcxOTk0LCJ5dSI6Ijc5OTU0Mjk3MTE2MTUzNjc3MTciLCJzZXJwUGFyYW1zIjoidG09MTYyOTk1MjkyOCZ0bGQ9cnUmbGFuZz1ydSZuYW1lPWxlazUucGRmJnRleHQ9JUQwJUJGJUQwJUJCJUQwJUJFJUQxJTgxJUQwJUJBJUQwJUI4JUQwJUI1KyVEMCVCMiVEMCVCRSVEMCVCQiVEMCVCRCVEMSU4QislRDAlQkElRDAlQkUlRDAlQkIlRDAlQjUlRDAlQjElRDAlQjAlRDAlQkQlRDAlQjglRDElOEYrJUQwJUI4KyVEMCVCMiVEMCVCRSVEMCVCQiVEMCVCRCVEMSU4QiZ1cmw9aHR0cHMlM0EvL3BvcnRhbC50cHUucnUvU0hBUkVEL2svS1JBVkNIRU5LT05TL3JhYm90YS9JSy9GaXppa2EzMi9UYWIvbGVrNS5wZGYmbHI9NjMmbWltZT1wZGYmbDEwbj1ydSZzaWduPTU5YTEzZGMyZjlhNGNjYjVjYmIwMjg2OGJkNzAxM2NjJmtleW5vPTAifQ%3D%3D&lang=ru
    https://docviewer.yandex.ru/view/0/?page=10&*=F920SWGLWF1Gq%2BgjfuMxnEwzCT97InVybCI6Imh0dHBzOi8vTUlQVC5ydS9lZHVjYXRpb24vY2hhaXIvcGh5c2ljcy9rbWYvbVBoXzQvcHJlc2VudGlhdG9uL3kyMDE1LyVEMCU5QiVEMCVCNSVEMCVCQSVEMSU4NiVEMCVCOCVEMSU4Rl8xMl8lRDAlOUElRDAlQTRfMV8yMDE1LnBkZiIsInRpdGxlIjoi0JvQtdC60YbQuNGPXzEyX9Ca0KRfMV8yMDE1LnBkZiIsIm5vaWZyYW1lIjp0cnVlLCJ1aWQiOiIwIiwidHMiOjE2Mjk5NTQ3ODU3OTEsInl1IjoiNzk5NTQyOTcxMTYxNTM2NzcxNyIsInNlcnBQYXJhbXMiOiJ0bT0xNjI5OTU0NzczJnRsZD1ydSZsYW5nPXJ1Jm5hbWU9JUQwJTlCJUQwJUI1JUQwJUJBJUQxJTg2JUQwJUI4JUQxJThGXzEyXyVEMCU5QSVEMCVBNF8xXzIwMTUucGRmJnRleHQ9JUQxJTgzJUQwJUJGJUQxJTgwJUQxJTgzJUQwJUIzJUQwJUI4JUQwJUI1KyVEMCVCRiVEMSU4MCVEMCVCRSVEMCVCNCVEMCVCRSVEMCVCQiVEMSU4QyVEMCVCRCVEMSU4QiVEMCVCNSslRDAlQjIlRDAlQkUlRDAlQkIlRDAlQkQlRDElOEIrJUQwJUIyKyVEMSU4MiVEMCVCMiVEMCVCNSVEMSU4MCVEMCVCNCVEMCVCRSVEMCVCQyslRDElODIlRDAlQjUlRDAlQkIlRDAlQjUmdXJsPWh0dHBzJTNBLy9NSVBULnJ1L2VkdWNhdGlvbi9jaGFpci9waHlzaWNzL2ttZi9tUGhfNC9wcmVzZW50aWF0b24veTIwMTUvJTI1RDAlMjU5QiUyNUQwJTI1QjUlMjVEMCUyNUJBJTI1RDElMjU4NiUyNUQwJTI1QjglMjVEMSUyNThGXzEyXyUyNUQwJTI1OUElMjVEMCUyNUE0XzFfMjAxNS5wZGYmbHI9NjMmbWltZT1wZGYmbDEwbj1ydSZzaWduPTJlZmY3Y2M2M2ZmOWFmMzA4NzM1M2RjMTM5M2Y0ZTIyJmtleW5vPTAifQ%3D%3D&lang=ru
    https://siblec.ru/estestvennye-nauki/volny/1-uprugie-volny

Mechanics
    Task:
    Элементы гидродинамики. Уравнение Эйлера. Уравнение Бернулли
    Task:
    Неинерциальные системы отсчета. Силы инерции. Центробежная сила, сила Кориолиса
    Релятивистская динамика. Энергия, масса, импульс в специальной теории относительности. Формулы связи между ними.
    Task:
    Движение в центральном поле. Кеплерова задача. Законы Кеплера
    Энергия. Импульс. Момент импульса. Законы сохранения энергии, импульса и момента импульса.
    Task:
    Принцип относительности Галилея. Преобразования Галилея
    Task:
    Системы отсчета. Законы Ньютона
    Source:
    https://www.sites.google.com/site/systemofreference/home
    https://elementy.ru/trefil/22/Zakony_mekhaniki_Nyutona#:~:text=%D0%97%D0%B0%D0%BA%D0%BE%D0%BD%D1%8B%20%D0%BC%D0%B5%D1%85%D0%B0%D0%BD%D0%B8%D0%BA%D0%B8%20%D0%9D%D1%8C%D1%8E%D1%82%D0%BE%D0%BD%D0%B0.%20%D0%92%20%D0%BE%D1%82%D1%81%D1%83%D1%82%D1%81%D1%82%D0%B2%D0%B8%D0%B5,%D0%B8%20%D0%BE%D0%B1%D1%80%D0%B0%D1%82%D0%BD%D0%BE%D0%B5%20%D0%BF%D0%BE%20%D0%BD%D0%B0%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D
    https://docviewer.yandex.ru/view/0/?page=4&*=hed0a5bLaXZLpF9SWG3uIvB10aV7InVybCI6Imh0dHBzOi8vcG9ydGFsLnRwdS5ydS9TSEFSRUQvYS9BTlQuTUFLL0VkdWNhdGlvbi9MZWN0aW9uL2xrMTAucGRmIiwidGl0bGUiOiJsazEwLnBkZiIsIm5vaWZyYW1lIjp0cnVlLCJ1aWQiOiIwIiwidHMiOjE2MjQ1MDAzMTUyMDksInl1IjoiNzk5NTQyOTcxMTYxNTM2NzcxNyIsInNlcnBQYXJhbXMiOiJ0bT0xNjI0NTAwMDE4JnRsZD1ydSZsYW5nPXJ1Jm5hbWU9bGsxMC5wZGYmdGV4dD0lRDAlQkYlRDElODAlRDAlQjg
    https://www.poznavayka.org/fizika/printsip-otnositelnosti-galileya-formulirovka-primeryi/    
    https://foxford.ru/wiki/fizika/energiya#:~:text=%D0%AD%D0%BD%D0%B5%D1%80%D0%B3%D0%B8%D1%8F.%20%D1%81%D0%BA%D0%B0%D0%BB%D1%8F%D1%80%D0%BD%D0%B0%D1%8F%20%D0%B2%D0%B5%D0%BB%D0%B8%D1%87%D0%B8%D0%BD%D0%B0%2C%20%D1%85%D0%B0%D1%80%D0%B0%D0%BA%D1%82%D0%B5%D1%80%D0%B8%D0%B7%D1%83%D1%8E%D1%89%D0%B0%D1%8F%20%D0%BC%D0%B0%D0%BA%D1%81%D0%B8%D0%BC%D0%B0%D0%BB%D1%8C%D0%BD%D1%83%D1%8E,%D0%B4%D0%B2%D0%B8%D0%B6%D0%B
    https://vlab.wikia.org/ru/wiki/%D0%9C%D0%BE%D0%BC%D0%B5%D0%BD%D1%82_%D0%B8%D0%BC%D0%BF%D1%83%D0%BB%D1%8C%D1%81%D0%B0
    https://mgh.do.am/publ/temy_po_fizike/mekhanika/moment_impulsa/2-1-0-19
    https://ru.wikipedia.org/wiki/%D0%97%D0%B0%D0%BA%D0%BE%D0%BD_%D1%81%D0%BE%D1%85%D1%80%D0%B0%D0%BD%D0%B5%D0%BD%D0%B8%D1%8F_%D0%BC%D0%BE%D0%BC%D0%B5%D0%BD%D1%82%D0%B0_%D0%B8%D0%BC%D0%BF%D1%83%D0%BB%D1%8C%D1%81%D0%B0
    https://lektsii.org/5-20747.html
    https://helpiks.org/4-60648.html
    https://studopedia.ru/4_109752_zakon-vzaimosvyazi-massi-i-energii.html
    http://ru.solverbook.com/spravochnik/fizika/osnovy-gidrodinamiki/  

Волновая оптика
    Task:
    Эффект Доплера
    Task:
    Поляризация света. Частично поляризованный свет.
    Task:
    Временная и пространственная дисперсия. Поглощение света. Гиротропия.
    Task:
    Законы отражения и преломления света. Полное внутреннее отражение, угол Брюстера
    Task:
    Распространение света в веществе
    Decision:
    Распространяясь в веществе электромагнитное поле световой волны вызывает вынужденные колебания связанных зарядов (электронов, ионов). Колеблющиеся с частотой вынуждающей силы заряды являются источником вторичных волн. Если среда однородна и изотропна, то в результате наложения первичной и вторичной волн образуется проходящая волна, фазовая скорость которой зависит от частоты. Если в среде имеются неоднородности, то дополнительно происходит рассеяние света. На границе раздела двух сред в результате интерференции первичной и вторичной волн образуется отраженная и преломленная волна.
    Прохождение света через вещество также сопровождается поглощением света, т.е. потерей энергии волны.
    Поглощение света в веществе связано с преобразованием энергии электромагнитного поля волны в тепловую энергию вещества (или в энергию вторичного фотолюминесцентного излучения). Закон поглощения света (закон Бугера) имеет вид: I=I0 exp(-ax), где I0, I -интенсивности света на входе (х=0) и выходе из слоя среды толщины х, a-коэффициент поглощения, он зависит от l.
    Для диэлектриков a=10^(-1)¸ 10^(-5) м^(-1), для металлов a=10^5 - 10^7 м^(-1), поэтому металлы непрозрачны для света.
    Зависимостью a (л(lambda)) объясняется окрашенность поглощающих тел. Например, стекло, слабо поглощающее красный свет, при освещении белым светом будет казаться красным.
    Дифракция света может происходить в оптически неоднородной среде, например в мутной среде(дым, туман, запыленный воздух и т.п.). Дифрагируя на неоднородностях среды, световые волны создают дифракционную картину, характеризующуюся довольно равномерным распределением интенсивности по всем направлениям.
    Такую дифракцию на мелких неоднородностях называют рассеянием света.
    Это явление наблюдается, если узкий пучок солнечных лучей проходит через запыленный воздух, рассеивается на пылинках и становится видимым.
    Если размеры неоднородностей малы по сравнению с длиной волны (не более чем 0,1 л(lambda)), то интенсивность рассеянного света оказывается обратно пропорциональна четвертой степени длины волны
    Рассеяние света наблюдается также и в чистых средах, не содержащих посторонних частиц. Например, оно может происходить на флуктуациях (случайных отклонениях) плотности, анизотропии или концентрации. Такое рассеяние называют молекулярным. Оно объясняет, например, голубой цвет неба. Действительно, согласно (2) голубые и синие лучи рассеиваются сильнее, чем красные и желтые, т.к. имеют меньшую длину волны, обуславливая тем самым голубой цвет неба.
    В оптике показатель преломления (иначе - коэффициент преломления, индекс преломления) n оптической среды является безразмерной величиной, которая описывает прохождение света или любого другого излучения через эту среду. Определяется как n=c/v, где с- это скорость света в вакууме, а v – скорость света в среде.
    Например, показатель преломления воды 1.33 означает, что свет распространяется в вакууме в 1.33 раза быстрее, чем в воде.
    От показателя преломления зависит, как изменится направление луча света при прохождении границы двух сред.
    Исторически сложилось, что первым определением понятия "показатель преломления" было значение, полученное из закона Снеллиуса, представленного в виде n1sinθ1=n2sinθ2, где θ1 и θ2  - углы падения и преломления света проходящего между двумя средами с показателями преломления и соответственно.
    Показатели преломления двух сред также определяют, какая доля света отражается от границы двух прозрачных сред. Также, показателями преломления определяется критический угол для полного внутреннего отражения и угла Брюстера.
    Показатель преломления показывает, во сколько раз скорость света и длина волны в среде отличаются от скорости света в вакууме: скорость света в среде v=c/n. а длина волны в такой среде λ = λ0/n , где λ0 - длина волны света в вакууме. Это подразумевает, что у вакуума показатель преломления равен 1, и что частота (f=v/λ) волны не зависит от показателя преломления.
    Показатель преломления различен для разных длин волны света. Это свойство называют дисперсией. Дисперсия вызывает разложение белого света на составляющие, что объясняет разложение света призмой, внешний вид радуги и хроматическую аберрацию в линзах. Распространение света в абсорбирующих материалах может быть описано с использованием комплексного показателя преломления. Мнимая часть тогда становится отрицательной, в то время как реальная часть будет приниматься за то, что мы обычно считаем показателем преломления.
    Понятие "показатель преломления" широко используется для описания прохождения электромагнитных волн через среду во всем электромагнитном спектре от рентгена до радиоволн. Термин "показатель преломления" может также использоваться с такими волновыми явлениями, как звук. В этом случае вместо скорости света используется скорость звука в некоторой среде.
    Task:
    Дифракция света
    Task:
    Интерференция света
    Source:
    https://ru.wikipedia.org/wiki/%D0%98%D0%BD%D1%82%D0%B5%D1%80%D1%84%D0%B5%D1%80%D0%B5%D0%BD%D1%86%D0%B8%D1%8F_%D1%81%D0%B2%D0%B5%D1%82%D0%B0
    https://interneturok.ru/lesson/physics/11-klass/boptikab/volnovaya-optika-interferentsiya-sveta
    http://ivk/Fizika/2_kurs/Tushev_Shizika/TUSHEV2/18.html   
    http://msk.edu.ua/ivk/Fizika/2_kurs/Tushev_Shizika/TUSHEV2/19.html
    http://physic/physics/students/allowances/allowance3/lection6/1/1.htm
    http://content_1099/
    https://online.mephi.ru/courses/physics/optics/data/course/3/3.2.html
    https://z5h64q92x9.net/proxy_u/en-ru.ru.b758d211-613046ec-8293e757-74722d776562/https/en.wikipedia.org/wiki/Total_internal_reflection
    https://translate.yandex.ru/translate?lang=en-ru&url=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FBrewster%26%2339%3Bs_Law&view=c
    https://pandia.ru/text/80/314/854.php
    https://scask.ru/l_book_inv.php?id=15
    http://msk.edu.ua/ivk/Fizika/2_kurs/Tushev_Shizika/TUSHEV2/21-3.html
    http://www.femto.com.ua/articles/part_1/0799.html
    http://msk.edu.ua/ivk/Fizika/2_kurs/Tushev_Shizika/TUSHEV2/20.html
    https://pandia.ru/text/78/231/52216.php 

Квантовая механика и строение вещества
    Task:
    Ядерные и термоядерные реакции. Дефект массы.
    Decision:
    Ядерные реакции  – это превращение ядер атомов, вызванные воздействием на них элементарных частиц или других ядер. Так, под действием нейтронов происходит самопроизвольное (спонтанное) деление ядер радиоактивных элементов с большими атомными массами (урана-235, тория-232, протактиния-231, плутония-239). Ядра урана-235 и плутония-239 делятся нейтронами любых энергий, но особенно хорошо медленными нейтронами. Ядра урана-238 делятся только быстрыми нейтронами (с энергиями, не меньшими 1 МэВ). Деление тяжелых ядер может быть вызвано и другими частицами – протонами, дейдронами, альфа-частицами. При делении ядер урана-235 образуются осколки деления, которые представляют собой ядра элементов со средними массовыми числами в соотношении 2:3, а также свободные нейтроны (2-3) и γ-излучение. При этом выделяется значительная энергия (= 200 МэВ). Всего образуется около 80 различных осколков, которые разлетаются со скоростью, равной скорости света.
        23592U + 10n→14055Cs + 9437Rb + 2 10n;    23592U + 10n→14054Xe + 9438Sr + 210n
        23592U + 10n→14456Ba + 8936Kr + 3 10n.
    Полученные осколки притерпевают ядерные превращения, в основном бета-распад
        14054Xe → 14055Sr →14056Ba→14057Za→14058Ce (стабильный)
        9437Rb→9438Sr→9439Y→9440Zn (стабильный).
    Каждый из 2-3 образовавшихся при делении ядер урана нейтронов способен вызвать новый акт деления и т.д. Количество нейтронов нарастает в геометрической прогрессии – возникает ценная реакция деления, приобретающая взрывной характер.
    Цепная реакция деления может начаться и происходить, если масса урана-235 достигает определенной величины. Наименьшее количество вещества, в котором возможна цепная ядерная реакция деления называется критической массой. Для урана-235 – это десятки кг, для урана-233 – 5-6 кг, для калифорния – около 1г. На этом основано устройство атомной бомбы. Ядерный заряд такой бомбы представляет 2 куска урана-235 или плутония-239 с докритической массой. При взрыве обычного взрывчатого вещества обе части соединяются, давая сверхкритическую массу. В земной атмосфере всегда имеется некоторое количество нейтронов за счет космических лучей. Их достаточно для начала реакции деления и запуска цепной реакции взрывного характера. Всего смесь продуктов деления содержит более 200 изотопов 36 элементов (большинство из них с небольшими периодами полураспада).
    При использовании цепной реакции деления в ядерных  реакторах создаются такие условия, что только один из нейтронов, образующихся при делении урана, будет вызывать акт деления. Количество делящихся в каждый момент ядер будет примерно одинаковым и количество выделяющейся энергии будет поддерживаться на каком-то определенном уровне, и выделяющееся тепло может быть использовано для получения электроэнергии (1г урана дает такое же количество энергии, как 2,5т угля). На этом основана работа атомных электростанций.
    Термоядерные реакции. Кроме процесса деления тяжелых ядер, существует и другой способ получения энергии – синтез тяжелых ядер из более легких. Такие реакции протекают при очень высоких температурах (многие миллионы градусов), поэтому их называют термоядерными. При такой температуре кинетическая энергия ядер достаточна для преодоления их кулоновских сил отталкивания. В этих условиях ядра легких элементов, двигаясь с высокой кинетической энергией, будут сближаться на очень малые расстояния – порядка 10-15 м и объединяться в ядра более тяжелых элементов. Примером таких реакций является синтез ядер гелия из ядер дейтерия и трития:
        21Н+21Н→32Не+10n; 31H+21Н→42He+10n; 21Н+21Н→31H+11р;
        32 Не+32 Не→42He+211р.
    В приведенных реакциях выделение энергии, рассчитанное на один нуклон, превышает выделение энергии при реакциях деления тяжёлых ядер.
    На основе реакции синтеза ядер гелия из ядер дейтерия и трития основано действие водородной бомбы. Необходимая для начала этой реакции температура обеспечивается взрывом атомной бомбы, которая выполняет роль своеобразного запала. В водородной бомбе термоядерная реакция носит неконтролируемый характер. Осуществить управляемую термоядерную реакцию пока не удается.   
    Дефект массы - разность между суммой масс покоя нуклонов, составляющих ядро данного нуклида, и массой покоя атомного ядра этого нуклида (зарубежная номенклатура). Советская номенклатура: дефект массы в случае атома — разность между массой покоя ядра данного изотопа, выраженной в атомных единицах массы, и массовым числом данного изотопа. В современной науке для обозначения этой разницы пользуются термином избыток массы (англ. mass excess). В атомной физике избыток массы как правило выражается в а. е. м. или в электронвольтах. В связи с различием между советской и зарубежной номенклатурами понятие дефекта масс не является однозначно определённым.
    Обозначается обычно как Δm.
        Δm=[Z*mp+N*n]-mnuc,
    где mp — масса протона, mn — масса нейтрона, mnuc — масса ядра, Z — количество протонов (атомный номер), N — количество нейтронов. Поскольку масса ядра атома всегда меньше суммы масс составляющих его нуклонов (mnuc<[Z*mp+N*n]), величина Δm всегда положительная.
    Массы протона и нейтрона являются справочными величинами.
    Сам дефект массы в своём роде характеризует устойчивость ядра.
    Task:
    Элементы теории атомных спектров.
    Decision:
    В атоме водорода только один электрон и его спектр испускания относительно прост. В спектрах испускания атомов других элементов число линий больше. Еще до появления модели Бора физики научились различать в таких спектрах близко расположенные линии, отличающиеся по внешнему виду. Одни из них (очень узкие) получили название "резких" (от англ. sharp). Наиболее яркие линии назвали "главными" (от англ. principle). Наблюдались более широкие линии - их назвали "размытыми" (diffuse). Еще один сорт линий имеет название "фундаментальных" (от англ. fundamental). По первым буквам английских названий говорили о наличии в спектрах испускания s-, p-, d- и f-линий. Применительно к модели Бора это означает, что в спектрах атомов более сложных, чем водород, постоянные электронные уровни могут состоять из нескольких близко расположенных подуровней:
        1. s-подуровень назван по "резкой" (sharp) линии,
        2. p-подуровень назван по "главной" (principal) линии,
        3. d-подуровень назван по "диффузной", “размытой” (diffuse) линии,
        4. f-подуровень назван по "фундаментальной" (fundamental) линии.
    С помощью спектров выяснилось, что первый уровень (n = 1) не содержит каких-либо подуровней, кроме s. Второй уровень состоит из двух подуровней (s и p), 3-й уровень - из трех подуровней (s, p, и d) и т.д. Как мы видим, подуровни обозначаются по первым буквам английских названий соответствующих линий в спектрах. В дальнейшем более высокие подуровни стали обозначать, просто продолжая латинский алфавит: g-подуровень, h-подуровень и т.д.
    На рис. 2-16 показана диаграмма части энергетических переходов электронов в атоме лития, полученная из спектра испускания раскаленных паров этого металла.
    Можно заметить, что на рис. 2-16 некоторые подуровни изображены состоящими из нескольких одинаковых по энергии "полочек". Например, p-подуровни состоят из трех одинаковых по энергии частей, d-подуровни - из пяти, f-подуровни - из семи. Откуда это стало известно? Еще в 1896 году немецкий физик П. Зееман поместил в сильное магнитное поле устройство, аналогичное водородной лампе, но наполненное парами раскаленного натрия. Обнаружилось, что в магнитном поле число линий в спектрах испускания возрастает (эффект Зеемана). Аналогичное явление наблюдается и в сильном электрическом поле. Пока на электроны действуют только внутренние силы ядра, часть из них может находиться в состоянии с одинаковой энергией. Но когда появляется дополнительное, внешнее поле, эта энергия уже не может оставаться одинаковой. Анализ спектров Зеемана значительно позже привел физика-теоретика Вольфганга Паули к мысли о том, что на одной энергетической "полочке" может помещаться не больше двух электронов. А чтобы противостоять мощным силам отталкивания, такие электроны должны обладать разным спином (к этому свойству мы вернемся чуть позже). Получается, что в атоме не может быть двух электронов в одинаковом состоянии. Этот вывод известен как принцип (или запрет) Паули.
    Физические эксперименты позволяют определить заселенность электронами уровней и подуровней. Для этого надо измерять энергию ионизации атомов, т.е. энергию отрыва от него электронов. Сначала измерить энергию, необходимую для удаления из атома первого электрона, затем 2-го, 3-го и т.д. Оказалось, что во всех атомах есть электроны, для которых энергии ионизации близки. Например, для аргона (в его электронной оболочке 18 электронов) обнаруживаются пять таких групп с близкими энергиями ионизации. В них 2, 2, 6, 2 и 6 электронов. Но 5 самых нижних энергетических уровней атома соответствуют подуровням 1s, 2s, 2p, 3s и 3p (это известно из спектров испускания). В таком случае s-подуровень должен состоять только из одной орбитали (на ней 2 электрона), p-подуровень - из трех орбиталей (там 6 электронов - по два на каждую орбиталь). Можно показать, что d-подуровень в обычных условиях (без внешнего поля) состоит из пяти орбиталей с одинаковой энергией, а f-подуровень - из семи.
    Модель Бора постепенно уточнялась. Ученых она привлекала тем, что с её помощью можно было делать довольно точные расчеты. Например, можно было вычислить энергию атома водорода в основном и возбужденном состояниях, определить его радиус, вычислить энергию ионизации и т.д. Для этих целей модель была снабжена ясным и понятным для многих исследователей математическим аппаратом, который разработали в основном сам Н. Бор и его последователь А. Зоммерфельд. Для проведения расчетов требовалось описывать состояние электрона в атоме, т.е. указывать его точный "адрес" в электронной оболочке (точнее - в модели электронной оболочки) с помощью так называемых квантовых чисел. Мы уже знаем, что каждый электрон существует на каком-либо уровне (1, 2, 3, и т.д.). Этот уровень обозначается числом n, которое получило название главного квантового числа. Понятно, что число n может принимать только целые значения.
    Поскольку уровням уже присвоено главное квантовое число n, для подуровней было введено вспомогательное квантовое число l. Если главное квантовое число n - это “адрес” уровня, то число l - “адрес” подуровня:
        l = 0 – это s-подуровень,
        l = 1 – это p-подуровень,
        l = 2 – это d-подуровень,
        l = 3 – это f-подуровень,
    Давайте попробуем разобраться, почему были выбраны именно такие, а не иные значения l для разных подуровней. Для этого посмотрим на уже знакомую нам орбитальную диаграмму на рис. 2-17.
    Значения l тесно связаны с числом орбиталей на каждом подуровне. Например, в значении l = 2 “скрыты” пять орбиталей d-подуровня: -2, -1, 0, +1, +2. Значение l = 1 дает три орбитали p-подуровня: -1, 0, +1. А при l = 0 орбиталь на s-подуровне только одна. Нетрудно вычислить, что в значении l = 3 “зашифрованы” семь орбиталей f-подуровня: -3, -2, -1, 0, +1, +2, +3.
    Далее требовалось обозначить "адреса" орбиталей на каждом подуровне. Поскольку орбитали атома становятся "видны" только в магнитном поле, очередное квантовое число, записывающее “адрес” орбитали в атоме, назвали магнитным квантовым числом m. Это квантовое число принимает значения от -l до +l, то есть имеет ровно столько значений, сколько орбиталей существует на каждом подуровне.
    Давайте с помощью уже известных нам трех квантовых чисел n, l и m запишем “адрес”, орбитали, которая на рис. 2-17 выделена красным цветом. Потом мы сможем этим же способом записывать “адреса” любых других орбиталей и находящихся на них электронов.
    Выделенная орбиталь находится на 3-м уровне: следовательно, ее главное квантовое число n = 3. Эта орбиталь находится на d-подуровне: следовательно, ее вспомогательное квантовое число l = 2. Наконец, для этой орбитали магнитное квантовое число m = -2. Итак, “адрес” выделенной орбитали: n = 3, l = 2, m = -2.
    Последнее квантовое число, которое потребовалось для описания электрона в атоме, называется спиновым квантовым числом s. Спин (по английски - веретено), можно представить как вращение заряда электрона вокруг собственной оси - по часовой стрелке и против часовой стрелки. Спиновое квантовое число может принимать, следовательно, только два значения и в квантовой механике они приняты такими: s = +1/2 и s = -1/2. В современной волновой модели строения атома (о ней - в конце этого параграфа) уже затруднительно рассматривать электрон как вращающуюся частицу конечных размеров. Следует признать, что прежняя трактовка спина в значительной мере утратила смысл. Спин связан с движением заряда внутри самого электрона и не зависит от перемещения электрона в трехмерном пространстве. Здесь нам важно понимать, что существует некое фундаментальное различие между электронами (спин электрона), которое позволяет им существовать на одной орбитали в состоянии с одинаковой энергией, несмотря на сильнейшее отталкивание одноименных зарядов этих электронов.
    В качестве примера давайте запишем полный набор квантовых чисел для электрона, обведенного красным кружком в орбитальной диаграмме атома азота. Этот электрон характеризуется набором квантовых чисел: n = 2 (находится на 2-м уровне), l = 1(находится на p-подуровне), m = +1 (находится на последней из трех одинаковых p-орбиталей, s = +1/2 (этот электрон заселился первым на данную p-орбиталь).
    Заметим, что это справедливо для атома, в котором первым занял место в электронной оболочке на 1s-подуровне электрон со спином +1/2. Но таких атомов в природе ровно половина, а другая половина начинает заселение своей оболочки электроном со спином -1/2. Для простоты дальше мы будем рассматривать только те 50% атомов любых элементов, где самым первым в оболочку попал электрон с s = +1/2.
    Можно решать и обратную задачу. Допустим, последним электронную оболочку некоего элемента заселяет электрон с набором квантовых чисел: n = 3, l = 2, m = -2, s = +1/2.
    Какой это элемент? Какова его полная электронная формула? Решение заключается в том, что данный электрон находится на 3-м уровне (n = 3), причем на d-подуровне (l = 2). Полезно нарисовать все пять d-орбиталей и расположить над ними значения магнитного квантового числа m от -2 до +2. У нас это уже сделано на рис. 2-17, причем нужная орбиталь (m = -2) выделена красным цветом. Расположив на ней единственный электрон (стрелка вверх, т.к. s = +1/2) и зная, что он последний, мы приходим к выводу, что остальные d-орбитали пусты. Теперь мы уже можем записать сокращенную электронную формулу элемента: …3d1. Этот элемент легко найти в периодической таблице - это скандий 21Sc. Если вы еще не совсем уверенно обращаетесь с Периодической таблицей, то можно заполнить электронами на рис. 2-17 все нижние уровни и подуровни вплоть до первой 3d-орбитали, поместив на нее единственный d-электрон. Всего на орбитальной диаграмме элемента поместится ровно 21 электрон (проверьте!), следовательно, в его ядре 21 протон и его порядковый номер в таблице Менделеева тоже 21 (Sc). Орбитальная диаграмма помогает записать и полную электронную формулу для скандия: 1s^2 2s^2 2p^6 3s^2 3p^6 4s^2 3d^1.
    Как мы видим, каждый электрон в атоме имеет свой собственный “адрес”, записанный набором из четырех квантовых чисел. Например, если два электрона находятся на одном и том же уровне (имеют одинаковое число n), и даже на одном подуровне (например, p-подуровне), то они обязательно расположатся на разных орбиталях - то есть будут отличаться числом m. А если орбитали уже полностью заполнены, то два находящиеся на них электрона обязательно должны отличаться друг от друга спиновым квантовым числом s. Таким образом, теперь мы можем дать более строгую формулировку принципа или запрета Паули: Никакие два электрона в одном атоме не могут характеризоваться одинаковым набором всех четырех квантовых чисел n, l, m, s.
    Внимательный читатель мог заметить, что на рисунке 2-16, показывающем электронные переходы в атоме лития, порядок заполнения уровней и подуровней вполне логичный: 1s, 2s, 2p, 3s, 3p, 3d, 4s … . Как показали спектры испускания, это характерно только для атомов c небольшим числом электронов. Впрочем, об этом редко вспоминают, потому что у самых легких элементов на 3-м и 4-м уровнях вообще нет электронов. С увеличением числа электронов в атоме подуровень 4s, как мы уже знаем, начинает заполняться раньше, чем 3d. А на более высоких уровнях такие "нарушения" становятся правилом. Можно воспользоваться уже освоенными нами квантовыми числами для того, чтобы уметь воспроизводить ряд заполнения электронами уровней и подуровней большинства атомов (1s 2s 2p 3s 3p 4s 3d 4p 5s 4d 5p 6s 4f 5d 6p 7s 5f 6d …) с помощью правила Клечковского: Энергия уровней и подуровней возрастает в порядке увеличения суммы n + l, а при одном и том же значении этой суммы ниже располагаются уровни с меньшим n.
    В модели Бора электрон рассматривался как частица. Его положение в пространстве, орбита и скорость описывались теми же методами, которые используются при вычислении траекторий планет. Но для космических тел не бывает "разрешенных" и "неразрешенных" орбит, а в атоме Бора могли быть только разрешенные (стационарные) орбиты. Находясь на этих орбитах, электрон почему-то не излучает энергию при движении вокруг заряженного ядра. Эта устойчивость электрона на стационарных орбитах так и оставалась необъяснимой.
    В 20-х годах прошлого века французский физик Л. де Бройль выдвинул гипотезу о том, что электрон обладает свойствами не только частицы, но и волны. Впоследствии это удалось подтвердить экспериментально. Гипотеза де Бройля позволила изящно объяснить, почему электрон в атоме может существовать только на стационарных орбитах. Стационарными орбитами в атоме могут быть только такие орбиты, в которые укладывается целое число длин волн электрона. Такая волна называется "стоячей" (рис. 2-18).
    Появление гипотезы де Бройля открыло принципиальную возможность описывать электрон в атоме уже не как частицу, а как волну. Это в 1926 году сделал австрийский физик Э. Шредингер. Он применил к электрону в атоме математический аппарат, описывающий движение волны в трехмерном пространстве. Такое движение описывается математической функцией (её называют "пси"-функцией), в которую входят координаты трехмерного пространства x, y, z. Оказалось, что квадрат этой функции описывает уже не движение волны, а вероятность обнаружить эту волну в точке пространства с координатами x, y, z. Так появилась возможность рассчитывать вероятность нахождения электрона-волны в разных точках пространства вокруг ядра.
    Результаты решения уравнения Шредингера для атома водорода обычно приводятся в виде уже знакомых нам "электронных облаков": это сферические s-облака (s-орбитали), гантелеобразные p-облака (p-орбитали) и т.д.
    На рисунке 2-19 изображена волновая модель электронной оболочки таких атомов, как, например, бор, углерод, азот, кислород, фтор, неон. Мы видим, что p-орбитали и s-орбитали в этой модели "пронизывают" друг друга. Но разве могут области существования разных электронов пересекаться? Как может, например, p-электрон существовать "внутри" s-электрона? И могут ли 1s-электроны находиться "внутри" 2s-электронов? Объяснение заключается в том, что до сих пор не удается решить уравнение Шредингера для атомов с двумя и более электронами, поэтому мы вынуждены пользоваться результатами расчетов для одноэлектронных атомов - атома водорода, ионов He+, Li^(2+), С^(5+) и т.д. В этих системах электрон находится либо на s-орбитали, либо на p-орбиталях и никогда не встречается ситуация с одновременным нахождением нескольких электронов на разных орбиталях. Таким образом, для описания многоэлектронных атомов приходится применять одноэлектронное приближение волновой модели, не учитывающее взаимное влияние электронов. Это вынужденный и одновременно смелый шаг. Впрочем, он оказался оправданным - модель хорошо "работает" не только при описании свойств многоэлектронных атомов, но и в теории химической связи. Именно такое представление атомных орбиталей весьма пригодится вам при изучении органической химии - для описания электронного строения органических соединений и объяснения их химических свойств.
    Но можно ли считать электрон исключительно волной? Разумеется, нет. Термин "корпускулярно-волновой дуализм" предполагает обязательное наличие у объекта (электрона) как свойств частицы, так и свойств волны. Интересно об этом рассуждали крупнейшие физики, стоявшие у истоков квантовой механики. Вот, например, выдержка из воспоминаний нобелевского лауреата В. Гейзенберга: «…Электрон всегда рисовался моему воображению в виде маленькой сферы. Я бывало говорил только одно: «Иногда, конечно, можно с пользой назвать его волной, но это не более чем способ разговора, а физическая реальность тут ни при чем». Характерно мнение другого замечательного физика - А. Зоммерфельда, высказанное в лекции «Современное состояние атомной физики» в Гамбургском университете в феврале 1927 года: «…В трехмерном пространстве электрон нельзя локализовать. Это подчеркивает Гейзенберг, а Шредингер иллюстрирует это, «размазывая» заряд электрона в сплошную пространственную массу. Лично я не верю в этот размазанный, растекающийся электрон уже потому, что вне атома электроны-корпускулы, обладающие большой скоростью, с несомненностью могут быть установлены экспериментом. С другой стороны, неоспоримый факт, что сплошные плотности Шредингера при расчете физических и химических действий атома оказывают неоценимую помощь и в этом смысле реальны в большей степени, нежели точечно локализованный электрон старой теории».
    Нам необходимо понимать, что изображения орбиталей волновой модели - это не внешний вид электронов в атоме, а области вероятности найти s-, p- или какой-либо другой электрон в пространстве вокруг ядра. Для того, чтобы такие области имели не слишком размытые границы, на рисунках показывают области с 95%-ной вероятностью обнаружить здесь электрон. Надо также помнить, что это области вероятности, рассчитанные в рамках данной модели атома. Поэтому, когда вы читаете в учебнике, что вспомогательное (оно же орбитальное, побочное, азимутальное) квантовое число l определяет форму электронного облака, то должны при этом понимать, что такое облако - не более чем абстрактное математическое построение в рамках волновой модели атома. Например, сейчас уже мало кто вспоминает, что в модели Бора-Зоммерфельда квантовое число l "заставляло" s-электроны двигаться по наиболее вытянутым, эллиптическим орбитам, в то время как орбиты p- и d-электронов оказывались близкими к круговым.
    Модель Бора-Зоммерфельда очень красива и до сих пор используется художниками для создания символики, отражающей достижения современной физической науки. Ниже вы видите несколько таких примеров: герб города Дубна (здесь расположен один из крупнейших российских исследовательских центров), эмблема физического факультета Новосибирского университета, ледокол "Россия" с изображением электронной оболочки атома гелия в рамках "устаревшей" модели Бора-Зоммерфельда. Интересно, знал ли эту подробность художник, создававший эмблему? Для моряков встречных судов такой рисунок на борту ледокола означает лишь, что этот могучий корабль оснащен атомной силовой установкой.
    Следует все же помнить, что термин "орбита" (из модели Бора) в волновой модели теперь полностью уступил место термину "орбиталь". Орбиталь имеет чисто вероятностный смысл и её просят не путать с орбитой, т.е. траекторией движения электрона.
    Task:
    Взаимодействие вещества и излучения. Ионизация и рекомбинация.
    Decision:
    Все рассматриваемые в настоящем разделе виды излучения производят, в конечном счете, ионизацию вещества и поэтому называются ионизирующими излучениями.
    Ионизирующим излучением называется любое излучение, взаимодействие которого с веществом приводит к образованию ионов разных знаков.
    Видимый свет и ультрафиолетовое излучение в это понятие не включают.
    Различают непосредственно ионизирующее и косвенно ионизирующее излучение.
    Непосредственно ионизирующее излучение представляет собой поток заряженных частиц, кинетическая энергия которых достаточна для ионизации при столкновении с атомами вещества.
    Косвенно ионизирующее излучение представляет собой поток незаряженных частиц (нейтронов, фотонов), которые могут создавать непосредственно ионизирующее излучение и (или) вызывать ядерные превращения при взаимодействии со средой.
    Ионизирующее излучение, представляющее собой частицы с ненулевой массой покоя, называют корпускулярным.
    К фотонному ионизирующему излучению относится гамма-излучение и рентгеновское излучение.
    Энергией ионизирующего излучения называют суммарную энергию ионизирующих частиц (без учета энергии покоя), испущенную, переданную или поглощенную. Единицей энергии ионизирующего излучения в СИ является джоуль (Дж). Кроме того, рекомендуется применять уже упоминавшуюся внесистемную единицу электрон-вольт и десятичные кратные ей единицы для измерения энергии отдельных ионизирующих частиц.
    Корпускулярное и фотонное излучения, испускаемые атомным ядром, могут быть обнаружены только по их взаимодействию с веществом. Если это взаимодействие незначительно, то обнаружение такого излучения, например излучения нейтрино, представляет собой чрезвычайно трудную задачу.
    Излучение взаимодействует преимущественно с электронами атомов. При этом может происходить происходит возбуждение атомов, но в основном идет процесс ионизации атомов, который состоит в отрыве от атома по крайней мере одного электрона:
        М→М^(+)+e^(-)
    (стрелкой здесь обозначено воздействие ионизирующего излучения).
    Взаимодействие излучения с атомными ядрами используют только для обнаружения незаряженных, нейтронов, не обладающих ионизирующим действием: при упругих столкновениях нейтронов с ядрами водорода образуются протоны отдачи, которые могут быть обнаружены как заряженные частицы.
    Проникающую способность различных видов излучения принято характеризовать толщиной слоя вещества, при котором интенсивность излучения уменьшается наполовину, причем толщину обычно выражают массой вещества на единицу поверхности, г/см2 или мг/см2 (масса на единицу поверхности равна плотности, умноженной на толщину слоя.)
    a-частицы сильно взаимодействуют с различными веществами, т. е. легко поглощаются ими. Тонкий лист бумаги или слой воздуха толщиной несколько сантиметров достаточны для того, чтобы полностью поглотить a-частицы.
    При прохождении через вещество a-частицы почти полностью отдают свою энергию в результате электростатического взаимодействия с электронами оболочек атомов.
    Энергия a-частиц идет на ионизацию и возбуждение атомов поглощающей среды (ионизационные потери). Этот процесс может рассматриваться как упругое столкновение a-частицы с электронами, при котором a-частица теряет часть своей энергии.
    Поток a-частиц - это сильно ионизирующее излучение.
    Энергия образования одной пары ионов в воздухе составляет около 35 эВ, так что при прохождении a-частицы с энергией Еa=4,2 МэВ до момента ее поглощения образуется около 10^5 пар ионов. В конце пробега, когда энергия а-частицы уменьшается и становится недостаточной, чтобы производить ионизацию, она, присоединив к себе два электрона, превращается в атом гелия.
    Соударения с электронами практически не изменяют траекторию движения тяжелой a-частицы (масса равна 4 а.е.м.), поэтому можно считать, что она движется практически прямолинейно.
    Метод определения энергии a-излучения по пробегу a-частиц слишком сложен и неточен. Точные значения энергии получают с помощью магнитного спектрометра. Этот метод основан на том, что a-частицы в зависимости от их энергии по-разному отклоняются в магнитном поле.
    Принцип действия обычных a-спектрометров основан на использовании прямопропорциональной зависимости между энергией a-частиц и числом образующихся пар ионов.
    Вследствие сильного взаимодействия a-частиц с веществом толщина измеряемых радиоактивных препаратов не должна превышать нескольких микрограммов на 1 см^2, а сами измерения приходится проводить в вакууме.
    При измерении препаратов с большой толщиной или при проведении измерений в атмосфере воздуха получаются сильно заниженные значения энергии - вследствие самопоглощения и соответственно поглощения a-излучения.
    Подобно a-частицам. взаимодействуют с веществом протоны и тяжелые ионы.
    b-частицы - это электроны (или позитроны), испускаемые ядрами радонуклидов при b-распаде. b-частицы обладают сплошным энергетическим спектром.
    В зависимости от энергии б-частиц различают:
        1. мягкое b-излучение (нескольких десятков кэВ);
        2. жесткое b-излучение (до нескольких единиц МэВ).
    Вероятность взаимодействия b-частиц с веществом меньше, чем для a-частиц, так как b-частицы имеют в два раза меньший заряд и приблизительно в 7300 раз меньшую массу.
    Удельная ионизация для b-частицы составляет 4-8 пар ионов на 1 мм пути, т.е. пробег b-частиц намного больше пробега a-частиц с той же энергией. Максимальные пробеги b-частиц с энергией 1 МэВ составляет в воздухе около 4 м, в воде - 4,4 м, в алюминии - 2 мм.
    При взаимодействии b-частиц с электронами атомов массы соударяемых частиц можно считать одинаковыми, поэтому b-частицы при столкновении отклоняются гораздо сильнее, в результате чего при торможении траектория движения b-частиц имеет вид ломаной линии.
    Скорость b-частиц сравнима со скоростью света.
    Взаимодействие электронов и позитронов с веществом качественно одинаково и складывается из трех основных процессов:
        1. упругого рассеяния на атомных ядрах;
        2. рассеяния на орбитальных электронах;
        3. неупругих столкновений с атомным ядром.
    Упругое рассеяние b-частиц происходит в основном на ядрах, но могут также происходить и на атомных оболочках. Вследствие малой массы, b-частицы могут отклоняться на большие углы. Чем меньше энергия b-частиц, тем больше (в среднем) отклонение, которое она испытывает.
    Поэтому при радиометрических измерениях неюбходимо учитывать эффект обратного рассеяния, который может привести к увеличению счета.
    Рассеяние b-частиц на орбитальных электронах среды является наиболее важным процессом для регистрации b-частиц. Потерянная при столкновении энергия b-частицы передается орбитальному электрону, что ведет к возбуждению или ионизации атома.
    При ионизации b-частицы выбивают орбитальные электроны, которые могут производить вторичную ионизацию. Полная ионизация равна сумме первичной и вторичной ионизации. На 1 мкм пути в веществе b-частица создает несколько сотен пар ионов.
    При неупругом столкновении электронов с ядрами атомов происходит торможение электронов в поле ядра. Уменьшение энергии электронов в результате торможения приводит к испусканию тормозного рентгеновского излучения.
    Потери энергии тем больше, чем больше энергия b-частицы и атомный номер элемента поглотителя. Поэтому для снижения тормозного излучения защиту для b-источников выполняют из материалов с малым атомным номером - алюминий, органическое стекло и др.
    В случае применения тяжелых материалов возникает тормозное (вторичное) излучение, которое является рентгеновским и обладает большой проникающей способностью.
    Взаимодействие g-квантов с веществом существенно отличается от взаимодействия a- и b-частиц. В то время как заряженные частицы передают свою энергию электронам атомов при многократных процессах соударения, g-кванты отдают всю или, по крайней мере, большую часть своей энергии при однократном взаимодействии. Однако вероятность этого взаимодействие очень низка, поэтому g-кванты обладают гораздо большей проникающей способностью, чем заряженные частицы.
    Проникающая способность излучения характеризуется чаще всего толщиной слоя поглотителя (в г/см2), при которой интенсивность излучения уменьшается наполовину. Эту величину называют толщиной слоя полупоглощения.
    При семикратной (по отношению к указанной выше величине) толщине слоя интенсивность уменьшается до 1% от первоначального значения; при десятикратной - до 0,1%.
    Поглощение g-квантов вызывается тремя независимыми друг от друга процессами с различной физической природой:
        1. фотоэффектом;
        2. эффектом Комптона;
        3. образованием электрон-позитронных пар,
    Фотоэффект - это процесс, при котором g-квант передает всю свою энергию орбитальному электрону и прекращает свое существование.
    Энергия выбрасываемого при фотоэффекте электрона Ее равна разности между энергией g-кванта Еg и энергией связи электрона Есв:
        Ее = Еg - Есв; в большинстве случаев Еg>Есв.
    Эффектом Комптона называют процесс, при котором g-квант отдает электрону только часть своей энергии, т. е. g-квант рассеивается.
    Это упругое столкновение фотонного излученияс электронами внешней оболочки атома. g-Квант передает часть своей энергии электрону и изменяет направление своего движения. Отраженный g-квант называется вторичным, или рассеянным.
    Электроны, выбрасываемые в процессе эффекта Комптона, имеют сплошной энергетический спектр.
    Комптон-эффект является основным процессом взаимодействия с веществом фотонного излучения в диапазоне энергий 0,5-10 МэВ. С ростом энергии фотонов вероятность комптоновского рассеяния убывает. Многократный процесс рассеяния за счет Комптон-эффекта приводит в конечном счете к тому, что рассеянный фотон в результате фотоэффекта поглотится атомом.
    Образование электрон-позитронных пар - это такое взаимодействие фотонного излучения с веществом, при котором энергия фотона в поле ядра переходит в энергию массы покоя и кинетическую энергию электрона и позитрона.
    Так как энергия покоя как электрона, так и позитрона равна 0,51 МэВ, то образование пар возможно лишь при энергии фотона большей 1,02 МэВ. Образование пар возможно только в поле ядра. Ядро в соответствии с законом сохранения импульса принимает на себя часть импульса фотона. Часть энергии фотона, превышающая 1,02 МэВ, передается электрону и позитрону в виде кинетической энергии. Позитрон через короткое время аннигилирует с образованием двух вторичных фотонов, каждый из которых имеет энергию 0,51 МэВ и поэтому не может образовывать пары.
    Поглощение фотонного излучения в результате образования пар наблюдается в основном на атомах тяжелых элементов. Этот процесс является преобладающим при энергии фотонов более 10 МэВ.
    Вклад каждого из трех рассмотренных процессов в общий процесс поглощения зависит в первую очередь от энергии g-квантов и порядкового номера поглотителя. При низких значениях энергии (<0,5 МэВ) поглощение g-квантов свинцом обусловлено в основном фотоэффектом, при энергии выше 4 МэВ - образованием электрон-позитронных пар, а в области средних значений энергий - эффектом Комптона. Для элементов с меньшим порядковым номером (исключая очень низкие значения энергии g-квантов) эффект Комптона является доминирующим в общем процессе поглощения и при более высоких значениях энергии g-квантов, например для алюминия - до 10 МэВ.
    Поглощение g-квантов сильно зависит от порядкового номера элементов. Свинец является наилучшим поглотителем g-квантов. во всех областях энергии.
    Для определения энергии g-квантов в настоящее время используют главным образом сцинтилляционные и полупроводниковые детекторы. По положению "фотопика", используя калибровочную кривую, можно определить энергию g-квантов. Полупроводниковые детекторы, позволяющие получать более узкие линии, обладают значительно большей разрешающей способностью, что особенно важно при регистрации g-квантов с близкими энергиями.
    Нейтроны представляющие собой поток незаряженных частиц, которые при прохождении через вещество взаимодействуют только с ядрами атомов. Нейтроны обладают широким диапазоном энергий - от долей до десятков миллионов электрон-вольт.
    В зависимости от энергии нейтроны могут по-разному взаимодействовать с ядрами атомов. Характер взаимодействия может быть упругим и неупругим.
    Упругое рассеяние. Упругое взаимодействие нейтрона с ядрами аналогично столкновению бильярдных шаров. Если бильярдный шар, движущийся с большой скоростью, столкнется с неподвижным шаром, он передаст ему большую или меньшую часть энергии в зависимости от параметров удара, а сам изменит направление движения. Суммарная энергия обоих шаров до и после взаимодействия не изменится.
    Из закона механики известно, что чем больше масса неподвижного шара, по сравнению с массой движущегося, тем меньшая доля энергии будет ему передана при столкновении. Если массы сталкивающихся шаров равны, то при каждом столкновении движущийся шар будет терять в среднем половину своей энергии.
    Аналогичным образом нейтроны, обладающие определенным запасом энергии, взаимодействуя с ядрами атомов, передают им часть энергии, а сами изменяют направление своего движения. Этот процесс называется упругим рассеянием.
    Ядра атомов, получившие в результате столкновения определенный запас кинетической энергии, - ядра отдачи - "выскакивают" из электронной оболочки и, проходя через вещество, производят ионизацию (поскольку они обладают зарядом). Чем меньше масса ядер среды, через которые проходят нейтроны, тем большую долю энергии они теряют в процессе упругого рассеяния. При каждом акте рассеяния на ядрах водорода нейтрон теряет в среднем половину энергии, при рассеянии на ядрах углерода - примерно 14 - 17 %, а при рассеянии на ядрах аргона - не более 8 - 9 %. Поэтому в качестве замедлителей нейтронов лучше всего использовать водородосодержащие или легкие вещества - обычную или тяжелую воду, парафин, бериллий, углерод.
    В процессе упругого рассеяния энергия нейтрона постепенно уменьшается и приближается к энергии теплового движения атомов и молекул среды, равной примерно 0,025 эВ. Такие нейтроны называются тепловыми. Чтобы нейтрон с первоначальной энергией 1 МэВ стал тепловым, число столкновений с ядрами водорода должно быть n = 25. В углероде энергия этого нейтрона достигает 0,025 эВ после 100 столкновений, а при взаимодействии с ядрами урана - после 2100 столкновений. Этот процесс завершается примерно через 10-6 секунды.
    Радиационный захват. При достаточной тепловой скорости нейтрон может быть захвачен одним из ядер атомов среды. Ядро переходит при этом в возбужденное состояние. Возврат ядра в основное состояние сопровождается испусканием g-квантов.
    При радиационном захвате происходит следующая ядерная реакция:
    т.е. образуется изотоп исходного элемента, а избыточная энергия, полученная ядром вследствие такой перестройки, испускается в виде g-кванта. В ядерных реакторах, где создаются мощные потоки тепловых нейтронов, ядерная реакция указанного типа используется для получения искусственных радионуклидов.
    Не только тепловые, но и быстрые нейтроны могут быть захвачены ядрами атомов. В результате произойдет ядерная реакция с вылетом a-частицы, протона и т.д. и образуется ядро другого элемента:
    Радиационный захват нейтрона возможен при любой его энергии и на любых ядрах, но более вероятен на медленных нейтронах и тяжелых ядрах, что следует учитывать при выборе материала защиты.
    Неупругое рассеяние. При захвате нейтрона ядром может произойти ядерная реакция, в процессе которой образуется ядро исходного нуклида, но при этом энергия испущенного нейтрона меньше энергии захваченного.
    В этом случае говорят о процессе неупругого рассеяния, поскольку суммарная энергия системы (нейтрон + ядро) до взаимодействия не равна энергии системы после взаимодействия. Процесс неупругого рассеяния имеет большую вероятность для атомных ядер середины и конца периодической системы элементов.
    Таким образом, при прохождении нейтронов через вещество происходят следующие взаимодействия с ядрами: упругое и неупругое рассеяния, радиационный захват и различного типа ядерные реакции. Вероятность различного типа взаимодействий зависит от энергии нейтронов.
    Поэтому по характеру взаимодействия нейтроны условно разделены на четыре группы:
        1. Тепловые нейтроны: 0 - 0,5 эВ
        2. Промежуточные нейтроны: 0,5 - 200 кэВ
        3. Быстрые нейтроны: 200кэВ - 20 МэВ
        4. Релятивистские нейтроны: Свыше 20 МэВ
    Для быстрых нейтронов доминирующим процессом взаимодействия является упругое рассеяние, хотя, как для всех других групп, возможны (со значительно меньшей вероятностью) и другие процессы взаимодействия (неупругое рассеяние, ядерные реакции, радиационный захват). Для релятивистских нейтронов возрастает роль неупругого рассеяния по сравнению с упругим, существенный вклад дают ядерные реакции.
    Для промежуточных нейтронов наиболее характерным процессом взаимодействия является неупругое рассеяние, а также радиационный захват.
    Для тепловых нейтронов наиболее вероятный процесс взаимодействия - радиационный захват. Вероятность этого процесса пропорциональна 1/(E^(1/2)), т.е. возрастает с уменьшением энергии (скорости) нейтронов. Наиболее вероятная скорость движения тепловых нейтронов при температуре 295К (22 °С) составляет 2200 м/сек, а соответствующая энергия - 0,025 эВ.
    Таким образом, при всех процессах взаимодействия нейтронов с веществом образуются либо заряженные частицы - ядра отдачи, непосредственно производящие ионизацию, либо g-излучение, которое также производит ионизацию в результате вторичных процессов.
    В процессе ядерных реакций под воздействием нейтронов образуются также другие заряженные частицы (протоны, дейтроны и т.д.).
    В нормальном состоянии газы состоят из электрически нейтральных молекул и атомов, и, следовательно, не могут проводить электрический ток. Поэтому газы являются хорошими электрическими изоляторами. Напомню, что окружающий нас воздух является хорошим и самым дешёвым диэлектриком, и его изолирующие свойства широко используются в различных устройствах высокого напряжения (ЛЭП, подстанциях, электростатических генераторах и др.).
    Проделаем опыт: разорвём цепь источника тока, т.е. создадим в ней воздушный промежуток. Если включить в такую разорванную цепь гальванометр, то он покажет отсутствие электрического тока.
    Поднесём к воздушному промежутку пламя газовой горелки. В пламени происходят интенсивные химические процессы, за счёт энергии которых отдельные атомы могут возбуждаться и ионизироваться. Образующиеся в пламени горелки ионы и электроны переходят в возбужденный промежуток, и под действием приложенной к нему разности потенциалов начинают двигаться к электродам; в цепи появляется ток.
    Процесс ионизации заключается в том, что под действием высокой температуры или некоторых лучей молекулы газа теряют электроны, и тем самым превращаются в положительные ионы.
    Таким образом, в результате происходит освобождение электронов из атомов и молекул, которые могут присоединиться к нейтральным молекулам или атомам, превращая их в отрицательные ионы. Ионы и свободные электроны делают газ проводником электричества.
    Ионизация газа может происходить под действием коротковолнового излучения – ультрафиолетовых, рентгеновских и гамма-лучей, а также альфа-, бета- и космических лучей.
    Установлено, что в нормальных условиях газы, например воздух, обладают электрической проводимостью, но очень ничтожной. Эта проводимость вызвана излучением радиоактивных веществ, имеющихся на поверхности земли, а также космическими лучами, приходящими из мировых глубин. Однако равновесная концентрация ионов в воздухе не превышает нескольких десятков пар ионов в кубическом сантиметре. Для того, чтобы воздух стал заметно проводить электрический ток, его надо подвергнуть воздействию интенсивных ионизаторов.
    Итак, при ионизации газовых молекул под действием внешнего источника из молекулы обычно вырывается один электрон, и остаётся положительный молекулярный ион с зарядом  е+, т.е. образуется пара – положительный ион и электрон. Вырвавшийся электрон обычно присоединяется к какой-либо другой молекуле и образует отрицательный молекулярный ион с зарядом  е–, опять образуется пара – положительный и отрицательный ионы. Оба типа ионов одновалентны (z=1), имеют одинаковую концентрацию n, но несколько различные подвижности μ+ и μ-. Под действием внешнего электрического поля эти ионы начинают двигаться, и возникает электрический ток.
    Электрический ток, возникающий в процессе ионизации газа – ток в газах – это встречный поток ионов и свободных электронов.
    Наряду с термином «ионизация» часто употребляют термин «генерация», характеризующий тот же самый процесс образования носителей зарядов в газе.
    Одновременно с процессом ионизации идёт обратный процесс рекомбинации (иначе – молизации).
    Рекомбинация – это нейтрализация при встрече разноименных ионов или воссоединение иона и электрона в нейтральную молекулу (атом).
    Факторы, под действием которых возникает ионизация в газе, называют внешними ионизаторами, а возникающая при этом проводимость называется несамостоятельной проводимостью.
    При данной мощности внешнего ионизатора в объёме газа устанавливается равновесное состояние, при котором число пар ионов, возникающих под действием ионизатора за одну секунду в единице объёма, равно числу пар рекомбинировавших ионов.  
    Таким образом, ионизованный газ способен проводить ток. Явление прохождения электрического тока через газ называется газовым разрядом. Газовые разряды можно разделить на два вида: несамостоятельный и самостоятельный.
    Task:
    Теория атома водорода. Уровни энергии.
    Decision:
    После открытия электрона Томсоном в 1897 г. стало ясно, что электроны входят в состав всех атомов, то есть, что атом имеет структуру и не является неделимым.
    Первая модель строения атома была предложена также Томсоном. В этой модели атом равномерно заполнен некоторой положительно заряженной субстанцией, на которую приходится основная масса атома и в которой находятся электроны, как изюминки в киселе (рис.22.1). Электроны могут колебаться под действием квазиупругих сил; при этом атом излучает электромагнитные волны с соответствующей частотой.
    Эта модель не выдержала экспериментальной проверки. В 1911 году Резерфорд исследовал рассеяние альфа-частиц при прохождении через тонкую золотую фольгу (рис.22.2).
    Использовался источник α-излучения с естественной радиоактивностью, помещённый в контейнер К. С помощью специальных экранов выделялся очень тонкий пучок α-частиц.
    Альфа-частица, налетая на фольгу Ф, отклонялась на некоторый угол φ и, попадаяна люминесцентный экран, вызывала вспышку. Вспышки можно было наблюдать. Подобные опыты ставились и до Резерфорда, но он первый решил выяснить, не отклоняются ли α-частицы на большие углы – для очистки совести, просто чтобы исключить такую возможность. Модель киселя с изюмом просто не допускала существования в атоме таких плотных и тяжелых элементов структуры, что они могли бы отклонять быстрые массивные альфа-частицы на значительные углы.
    Резерфорд попросил одного из своих студентов переоборудовать установку таким образом, чтобы можно было наблюдать рассеяние альфа-частиц под большими углами отклонения. Каково же было удивление не только студента, непосредственно проводившего эксперимент, но и самого Резерфорда, когда выяснилось, что некоторые частицы отклоняются на углы вплоть до 180°! В рамках устоявшейся модели атома Томсона полученный результат не мог быть истолкован: быстрая и тяжелая альфа-частица «прошила» бы кисель с изюмом насквозь, практически с ним не взаимодействуя (рис.22.3,а).
    Чтобы отбросить частицу назад, требуется компактное массивное очень плотное положительно заряженное ядро. Альфа-частицы, пролетающие далеко от ядра, почти не отклоняются. Таких частиц много, так как
    ядро маленькое. Частицы, пролетающие ближе к ядру, отклоняются на больший угол. И только небольшая доля частиц, летящих почти на ядро, отклоняется на углы, близкие к 180° (рис.22.3,б).
    По доле частиц, рассеянных на большие углы, можно оценить размеры ядра: rядра≈10^(-14)м. Оказалось, что радиус ядра примерно в 10000 раз меньше размеров самого атома: rатома≈10^(-10)м. Большая часть атома – это пустота, занятая очень лёгкими по сравнению с ядром электронами (рис.22.4).
    Очевидно, что электроны в атоме не могут быть неподвижными, иначе
    упадут на положительное ядро. Электроны должны вращаться вокруг ядра, подобно планетам вокруг Солнца. Поэтому ядерная модель Резерфорда получила название «планетарной».
    Но опять оказалось не всё так просто; у планетарной модели есть свои
    трудности и противоречия:
    1. Неустойчивость атомов. Электрон движется вокруг ядра, следовательно, имеет центростремительное ускорение.  Любая заряженная частица, движущаяся с ускорением, излучает электромагнитные волны. Электрон излучает, поэтому теряет энергию, теряет скорость и падает на ядро (рис.22.5).
    2. Спектр излучения атома должен быть сплошным: ничто не мешает электрону в атоме Резерфорда иметь любую энергию и терять на излучение тоже любую энергию. Однако опыт показывает, что спектры излучения невзаимодействующих атомов (паров металлов, атомарных газов) дискретные, состоят из отдельных спектральных линий.
    Для спектра атомарного водорода (рис.22.6) удалось подобрать формулу (формула Бальмера), описывающую длины волн:
        1/λ=R*(1/(2^2)-1/(m^2)), (22.1)
    где R=1.1*10^7 м^(-1) – постоянная Ридберга; m – целое число, m>2.
    При m=3 получаем красную линию (см. рис.22.6), при m=4 – сине-зелёную, при m=5 и 6 – фиолетовые; остальные линии (m=7, 8,…) лежат в ультрафиолетовой области. Более того, в инфракрасной и ультрафиолетовой областях спектра водорода были обнаружены другие спектральные серии, описываемые подобными соотношениями:
        1/λ=R*(1/(n^2)-1/(m^2)), (22.2)
    где m=n+1; m=n+2; m=n+3;… Если
        n=1, получается серия Лаймана (УФ-область);
        n=2 – серия Бальмера;
        n=3 – серия Пашена;
        n=4 – серия Брэккета; лежат в ИК-области
        n=5 – серия Пфунда и т.д.
    Для описания спектров Ритц предложил ввести понятие терма: терм
    (спектральный терм) – функция целого числа (квантового числа): T = f (n) . Для атома водорода термы выглядят наиболее просто: T(n)=R/(n^2). Тогда любую спектральную линию можно выразить через разность двух термов:
        1/λ= T(n)-T(m). (22.3)
    Для других атомов спектральные термы выглядели несколько сложнее, чем
    для водорода. Такие правильные закономерности не могли быть случайными, но из планетарной модели атома никак не вытекали. Проблему попытался решить Нильс Бор
    Постулаты Бора основаны на:
        1. экспериментальных закономерностях в атомных спектрах;
        2. квантовом характере излучения и поглощения света;
        3. ядерной модели атома
    Электрон в атоме может находиться только на стационарной орбите;  при этом он не излучает и не поглощает энергии. Условие стационарных орбит:
        me*v*r=n*ħ; n=1,2,3, ...∞ (22.4)
    Это – условие квантования: момент импульса электрона Ln на орбите с номером n может принимать только дискретные значения, кратные постоянной Планка h :
        Ln=me*v*r=p*r;
        Ln=n*h.
    Можно интерпретировать условие (22.4) по-другому: устойчивыми орбитами будут те, на длине l=2*π*rn которых укладывается целое число длин волн де Бройля λn (рис.22.7):
    Таким образом, теория Бора учитывает волновые свойства электрона.
    II. Правило частот
    Энергия излучается или поглощается атомом только при переходе электрона между стационарными орбитами; при этом энергия излучённого или поглощённого кванта равна разности энергий стационарных состояний, между которыми произошёл переход:
        h*v=Em-En. (22.5)
    Это условие – закон сохранения энергии.
        Схема уровней энергии атома водорода
    Схема уровней энергии дана на рис.22.9. Уровни энергии сбегаются кверху; расстояние между ними уменьшается. Энергия электрона в атоме отрицательна (электрон связан с ядром). При n→∞ энергия равна нулю; это – ионизированное состояние атома, когда электрон не связан с ядром. Уровень с n=1 и минимальной энергией соответствует основному состоянию. Остальные состояния (n=2, n=3,…) называются возбуждёнными.
    По второму постулату Бора можно определить частоту или длину волны фотона, излучённого или поглощённого атомом при переходе электрона между орбитами с номерами n и m (n<m):
    Это есть постоянная Ридберга:
        E0=R*h*c. (22.17)
    Таким образом, формула Бальмера-Ритца доказана для атома водорода (22.2) и для водородоподобного иона:
        1/λ=Z^2*R*(1/(n^2)-1/(m^2)). (22.2а)
    Возможна также другая запись; для частоты спектральных линий (22.2б).
        v=Z^2*R'*(1/(n^2)-1/(m^2)). (22.2б)
    Здесь постоянная Ридберга равна:
    На рис.22.9 показаны переходы между уровнями, соответствующие спектральным сериям. Пунктиром указаны переходы, соответствующие границам серий. Головная линия серии соответствует переходу с ближайшего уровня. При излучении фотона электрон переходит на уровень с меньшей энергией (стрелки вниз); при поглощении фотона электрон переходит на более высокий уровень.
    Энергия ионизации атома равна разности энергий основного состояния и ионизированного:
        Eu=R*h*c*Z^2.
    Если ионизация происходит не из основного состояния, а из возбуждённого с номером n, тогда
        Eu=(R*h*c*Z^2)/(n^2).
    Найдём потенциал ионизации атома. По определению, потенциал ионизации – это разность потенциалов, которую должен пройти электрон в электрическом поле, чтобы получить энергию, равную энергии ионизации атома: φu=Eu/e.
    Потенциал ионизации атома водорода из основного состояния равен 13.6 эВ.
    Первый потенциал возбуждения соответствует переходу из основного
    состояния в первое возбуждённое (n=1 → n=2) и равен φв1=(E2-E1)/e; второй потенциал возбуждения – переходу с основного уровня на второй возбуждённый (n=1 → n=3) и т.д. (см. рис.22.9): φв2=(E3-E1)/e
    Task:
    Спин, прницип Паули.
    Decision:
    Момент импульса микрочастиц связан с их движением как целого материального тела относительно некоторой системы отсчета. Но частицы могут некоторым образом двигаться относительно самих себя, например вращаться относительно своей оси. Физическая величина, которая характеризует такое движение, называется спином. Эта величина имеет аналогию с моментом импульса микрочастицы, но при этом является существенно квантовой величиной. Спин – это внутреннее свойство квантовой частицы, характеризующее наравне с другими величинами: массой, зарядом и т.д. При этом у спина нет классического аналога.
    Как и момент импульса спин задается модулем S и проекцией Sz на некоторую ось, например z:
        S=ħ*√(σ*(σ+1))
    где число σ является аналогом орбитального квантового числа, а
        Sz=ħ*mσ.
    В последнем выражении mσ принимает 2*σ+1 значения от -σ до +σ. Число σ принимает целые и полуцелые значения и называется спиновым числом или спином. Например, у электрона, протона и нейтрона спиновое число равно 1/2, у фотона равно 1. Существуют микрочастицы, у которых σ=0.
    Микрочастицы, у которых целочисленные спины, называются бозонами, а микрочастицы с полуцелыми спинами называются фермионами.
    Таким образом, микрочастицы определяются четырьмя квантовыми числами:
        главным квантовым числом  , которое характеризует энергию микрочастицы;
        орбитальным квантовым числом  , которое характеризует модуль момента импульса микрочастицы;
        магнитным квантовым числом  , которое характеризует направление момента импульса микрочастицы;
        спиновое число  , которое характеризует спин микрочастицы.
    Экспериментально установлено, что для фермионов действует принцип Паули: В одной и той же квантовой системе не может быть двух электронов, обладающих одинаковой совокупностью квантовых чисел.
    Данный принцип объясняет целый ряд физических закономерностей и явлений, например, существование периодической системы элементов Д.И.Менделеева.
    Task:
    Основные элементы теории возмущений
    Decision:
    Теория возмущений — метод приближенного решения задач теоретической физики, применимый в том случае, когда в задаче присутствует малый параметр, причём в пренебрежении этим параметром задача имеет точное решение.
    Физические величины, рассчитанные по теории возмущений, имеют вид ряда
        А=А^(0)+ε*А^(1)+ε^(2)*А^(2)+...
    где А^(0) — решение невозмущённой задачи, ε — малый параметр. Коэффициенты А^(n) находятся путём последовательных приближений, то есть А^(n) выражается через А^(0),...,А^(n-1).
    Теория возмущений в квантовой механике применяется в том случае, когда гамильтониан системы можно представить в виде
        H=H^(0)+V
    где H^(0) — невозмущённый гамильтониан (причём решение соответствующего уравнения Шрёдингера известно точно), а V — малая добавка (возмущение).
    Задача состоит в нахождении собственных функций гамильтониана (стационарных состояний) и соответствующих уровней энергии. Будем искать решения уравнения Шрёдингера для нашей системы
        H|ψn>=En|ψn>    (**)
    в виде разложения в ряд
        ψn=ψn^(0)+ψn^(1)+ψn^(2)+...
        En=En^(0)+En^(1)+En^(2)+...     (***)
    где ψn^(0) и En^(0) — волновые функции и энергетические уровни невозмущённой задачи
        H^(0)|ψn^(0)>=En^(0)|ψn^(0)>,
    а число n нумерует энергетические уровни.
    Подставляя (***) в (**), с точностью до членов первого порядка по возмущению получим
        (V-En^(1))(ψn^(0)>=(En^(0)-H^(0))|ψn^(1)>
    Домножая слева на ψm^(0), и учитывая, что ψm^(0) — (ортонормированные) собственные функции невозмущённого гамильтониана, получаем
    Вышеизложенная процедура работает, если невозмущённый уровень En^(0) невырожден. В противном случае для нахождения поправок первого порядка необходимо решать секулярное уравнение.
    Аналогичным образом находятся поправки следующих порядков, хотя формулы сильно усложняются.
    Task:
    Квазиклассическое приближение
    Task:
    Уравнение Шредингера. Стационарное уравнение Шредингера, его решение для одномерного движения. Туннельный эффект, надбарьерное отражение.
    Decision:
    Уравнение Шредингера — линейное дифференциальное уравнение в частных производных, описывающее изменение в пространстве (в общем случае, в конфигурационном пространстве) и во времени чистого состояния, задаваемого волновой функцией, в гамильтоновых квантовых системах.
    Играет в квантовой механике такую же важную роль, как уравнения Гамильтона или уравнение второго закона Ньютона в классической механике или уравнения Максвелла для электромагнитных волн.
    Сформулировано Эрвином Шрёдингером в 1925 году, опубликовано в 1926 году. Уравнение Шрёдингера не выводится, а постулируется методом аналогии с классической оптикой, на основе обобщения экспериментальных данных[1].
    Уравнение Шрёдингера предназначено для частиц без спина, движущихся со скоростями, много меньшими скорости света. В случае быстрых частиц и частиц со спином используются его обобщения (уравнение Клейна — Гордона, уравнение Паули, уравнение Дирака и др.).
    В квантовой физике вводится комплекснозначная функция ψ, описывающая чистое состояние объекта, которая называется волновой функцией. В наиболее распространённой копенгагенской интерпретации эта функция связана с вероятностью обнаружения объекта в одном из чистых состояний (квадрат модуля волновой функции представляет собой плотность вероятности). Поведение гамильтоновой системы в чистом состоянии полностью описывается с помощью волновой функции.
    Отказавшись от описания движения частицы с помощью траекторий, получаемых из законов динамики, и определив вместо этого волновую функцию, необходимо ввести в рассмотрение уравнение, эквивалентное законам Ньютона и дающее рецепт для нахождения ψ в частных физических задачах. Таким уравнением является уравнение Шрёдингера.
    Пусть волновая функция задана в n-мерном конфигурационном пространстве, тогда в каждой точке с координатами →r(x1,x2,x3,...,xn), в определённый момент времени t она будет иметь вид ψ(→r,t). В таком случае уравнение Шрёдингера запишется в виде:
        -ħ^2/(2*m)*Δψ(→r,t)+V(→r,t)*ψ(→r,t)=-i*ħ*∂/∂t*Δψ(→r,t),    (1)
    где ħ=ħ/(2*π), ħ — постоянная Планка; m — масса частицы, V(→r,t) — внешняя по отношению к частице потенциальная энергия в точке →r(x1,x2,...,xn) в момент времени t, Δ  — оператор Лапласа (или лапласиан), эквивалентен квадрату оператора набла и в n-мерной системе координат имеет вид:
        Δ≡∇^2=∂^2/∂x1^2+∂^2/∂x2^2+...+∂^2/∂xn^2
    Форма уравнения Шрёдингера показывает, что относительно времени его решение должно быть простым, поскольку время входит в это уравнение лишь через первую производную в правой части. Действительно, частное решение для случая, когда {\displaystyle V}V не является функцией времени, можно записать в виде:
        ψ(→r,t)=ψ(→r)*e^(-i*E*t/ħ),     (2)
    где функция ψ(→r) должна удовлетворять уравнению:
        -ħ^2/(2*m)*Δψ(→r)+V(→r)*ψ(→r)=E*ψ(→r),  (3)
    которое получается из уравнения Шрёдингера (1) при подстановке в него указанной выше формулы для {\displaystyle \Psi }\Psi  (2). Заметим, что это уравнение вообще не содержит времени; в связи с этим оно называется стационарным уравнением Шрёдингера (уравнение Шрёдингера, не содержащее времени).
    Выражение (2) является лишь частным решением зависящего от времени уравнения Шрёдингера (1), общее решение представляет собой линейную комбинацию всех частных решений вида (2). Зависимость функции ψ(→r,t) от времени проста, но зависимость её от координаты не всегда имеет элементарный вид, так как уравнение (3) при одном выборе вида потенциальной функции V(→r) совершенно отличается от того же уравнения при другом выборе этой функции. В действительности, уравнение (3) может быть решено аналитически лишь для небольшого числа частных типов функции {\displaystyle V(→r).
    Это преодоление микрочастицей потенциального барьера в случае, когда её полная энергия (остающаяся при туннелировании неизменной) меньше высоты барьера. Туннельный эффект — явление исключительно квантовой природы, невозможное в классической механике и даже полностью противоречащее ей. Аналогом туннельного эффекта в волновой оптике может служить проникновение световой волны внутрь отражающей среды (на расстояния порядка длины световой волны) в условиях, когда, с точки зрения геометрической оптики, происходит полное внутреннее отражение. Явление туннелирования лежит в основе многих важных процессов в атомной и молекулярной физике, в физике атомного ядра, твёрдого тела и т. д.
    Рассмотрим потенциал в виде прямоугольного барьера (рис. 2).
    Согласно классической механике частица с энергией E < U0, движущаяся в таком поле слева направо, дойдя до потенциальной стенки, отражается от неё, начиная двигаться в обратном направлении. В квантовой механике возникает новое явление – туннелированние  – вероятность частице пройти сквозь барьер, имея энергию E < U0. В общем случае коэффициент прохождения определяется как отношение плотности потока в прошедшей волне к плотности потока в падающей:
        D=k2/k1*|A|^2   (1.2.1)
    Коэффициент прохождения частицы через прямоугольный барьер задаётся выражением:
    Теперь рассмотрим движение частиц в поле, изображённого на рисунке 3 типа: 𝑈(𝑥) монотонно возрастает от одного постоянного предела (𝑈=0, при 𝑥→-∞) до другого (𝑈=U0, при 𝑥→+∞)
    Классическая механика утверждает что, в случае если частица с энергией E > U0 движется в таком поле слева направо, то дойдя до потенциальной стенки, она продолжает двигаться в прежнем направлении с уменьшенной скоростью. В квантовой механике частица имеет вероятность отразиться от подобной потенциальной стенки, даже имея
    энергию E > U0. Коэффициент отражения можно определить как отношение плотности отражённого потока к падающему:
    В выражениях (1.2.1) - (1.2.2) 𝑘1, k2, соответствуют волновому
    вектору падающей и прошедшей волны. Плотности потоков падающей и отражённой волнах пропорциональны соответственно: 𝑘1, 𝑘1*|𝐵|^2, а прошедшей - 𝑘2*|𝐴|^2.
    Task:
    Основные принципы квантовой механики. Принцип суперпозиции. Принцип неопределенности.
    Decision:
    Как показывает история естествознания, свойства элементарных частиц, с которыми столкнулись физики, изучая микромир, не укладываются в рамки традиционных физических теорий. Попытки объяснить микромир с помощью понятий и принципов классической физики потерпели неудачу. Поиски новых понятий и объяснений привели к возникновению новой физической теории – квантовой механики, у истоков которой стояли такие выдающиеся физики, как В.Гейзенберг, Н.Бор, М.Планк, Э.Шредингер и др.
    Изучение специфических свойств микрообъектов началось с экспериментов, в ходе которых было установлено, что микрообъекты в одних опытах обнаруживают себя как частицы (корпускулы), а в других – как волны. Однако вспомним историю изучения природы света, а точнее непримиримые разногласия между Ньютоном и Гюйгенсом. Ньютон рассматривал свет как поток корпускул, а Гюйгенс – как волнообразное движение, возникающее в особой среде – эфире.
    В 1900 году М.Планк, обнаруживший дискретные порции энергии (кванты), дополнил представление о свете как о потоке квантов или фотонов. Однако наряду с квантовым представлением о свете продолжала развиваться и волновая механика света в работах Луи де Бройля и Э.Шредингера. Луи де Бройлем было открыто подобие между колебанием струны и атомом, испускающим излучение. Атом каждого элемента состоит из элементарных частиц: тяжелого ядра и легких электронов. Эта система частиц ведет себя подобно акустическому инструменту, производящему стоячие волны. Луи де Бройль сделал смелое предположение, что движущийся равномерно и прямолинейно электрон – это волна определенной длины. До этого мы уже привыкли, что свет в некоторых случаях выступает как частица, а в некоторых как волна. В отношении электрона мы признавали его частицей (были определены его масса и заряд). И, действительно, электрон ведет себя подобно частице, когда он движется в электрическом или магнитном поле. Он же ведет себя и подобно волне, когда дифрагирует, проходя сквозь кристалл или дифракционную решетку.
    Опыт с дифракционной решеткой:
    Чтобы выявить сущность данного явления, обычно проводят мысленный эксперимент с двумя щелями. В этом эксперименте пучок электронов, излучаемых источником S, проходит через пластинку с двумя отверстиями, а затем попадает на экран.
    Если бы электроны были классическими частицами, вроде дробинок, количество попаданий в экран электронов, проходящих через первую щель, изображалось бы кривой В, а через вторую щель – кривой С. Общее же число попаданий выражалось бы суммарной кривой D.
    На самом же деле происходит совсем иное. Кривые В и С мы получим лишь в тех случаях, когда одно из отверстий будет закрыто. Если же одновременно открыты оба отверстия, на экране появится система максимумов и минимумов, подобная той, какая имеет место для световых волн (кривая А).
    Особенности возникшей гносеологической ситуации можно определить следующим образом. С одной стороны выяснилось, что физическая реальность едина, то есть нет пропасти между полем и веществом: поле подобно веществу, обладает корпускулярными свойствами, а частицы вещества, подобно полю, - волновыми. С другой стороны, оказалось, что единая физическая реальность двойственна. Естественно, возникла проблема: как разрешить антиномию корпускулярно-волновых свойств микрообъектов. Одному и тому же микрообъекту приписываются не просто различные, а противоположные характеристики.
    В 1925 году Луи де Бройль (1875-1960) выдвинул принцип, согласно которому каждой материальной частице независимо от ее природы следует поставить в соответствие волну, длина которой обратно пропорциональна импульсу частицы: l = h/ p, где l – длина волны, h – постоянная Планка, равная 6,63×10–34 Дж × сек, р – импульс частицы, равный произведению массы частицы на ее скорость (р = m×v). Таким образом, было установлено, что не только фотоны (частицы света), но и другие материальные частицы, такие как электрон, протон, нейтрон и др. обладают двойственными свойствами. Это явление получило название дуализма волны и частицы. Так, в одних экспериментах элементарная частица может себя вести как корпускула, а в других - как волна. Отсюда следует, что любое наблюдение микрообъектов невозможно без учета влияния приборов и измерительных средств. В нашем макромире мы не замечаем влияния прибора наблюдения и измерения на макротела, которые изучаем, так как это влияние чрезвычайно мало и им можно пренебречь. Макроприборы вносят возмущения в микромир и не могут не вносить изменения в микрообъекты.
    Как следствие противоречивости корпускулярных и волновых свойств частиц датский физик Н.Бор (1885-1962) выдвинул в 1925 году принцип дополнительности. Суть этого принципа состояла в следующем: чрезвычайно характерную черту атомной физики представляет новое отношение между явлениями, наблюдаемыми в разных экспериментальных условиях. Получаемые при таких условиях опытные данные надо рассматривать как дополнительные, так как они представляют одинаково существенные сведения об атомных объектах и, взятые вместе, исчерпывают их. Взаимодействие между измерительными приборами и исследуемыми физическими объектами составляет неотъемлемую часть квантовых явлений. Мы приходим к выводу, что принцип дополнительности дает нам фундаментальную характеристику рассмотрения объектов микромира.
    Следующим наиболее фундаментальным принципом квантовой механики является принцип неопределенности, сформулированный в 1927 году Вернером Гейзенбергом (1901 – 1976). Суть его состоит в следующем. Невозможно одновременно и с одинаковой точностью определить координату микрочастицы и ее импульс. Точность измерения координаты зависит от точности измерения импульса и наоборот; невозможно обе эти величины измерить с какой угодно точностью; чем больше точность измерения координаты (х), тем неопределеннее импульс (р), и наоборот. Произведение неопределенности в измерении координаты и неопределенности в измерении импульса должно быть “больше или равно” постоянной Планка (h), Δx*Δp>h.
    Границы, определяемые этим принципом, не могут быть принципиально преодолены никаким совершенствованием средств измерения и измерительных процедур. Принцип неопределенности показал, что предсказания квантовой механики носят лишь вероятностный характер и не обеспечивают точных предсказаний, к каким мы привыкли в классической механике. Именно неопределенность предсказаний квантовой механики вызывала и вызывает споры среди ученых. Речь даже шла о полном отсутствии определенности в квантовой механике, то есть о ее индетерминизме. Представители классической физики были убеждены, что по мере совершенствования науки и измерительной техники законы квантовой механики станут точными и достоверными. Эти ученые верили, что никакого предела для точности измерений и предсказаний не существует.
    Принцип неопределённости Гейзенберга (или Га́йзенберга) в квантовой механике — фундаментальное соображение (соотношение неопределённостей), устанавливающее предел точности одновременного определения пары характеризующих систему квантовых наблюдаемых, описываемых некоммутирующими операторами (например, координаты и импульса, тока и напряжения, электрического и магнитного полей). Более доступно он звучит так: чем точнее измеряется одна характеристика частицы, тем менее точно можно измерить вторую. Соотношение неопределённостей задаёт нижний предел для произведения среднеквадратичных отклонений пары квантовых наблюдаемых.
    Соотношение неопределённости возникает между любыми квантовыми наблюдаемыми, определяемыми некоммутирующими операторами.
        Неопределённость между координатой и импульсом
    Пусть Δx — среднеквадратическое отклонение координаты частицы M, движущейся вдоль оси x, и Δp — среднеквадратическое отклонение её импульса. Величины Δx и Δp связаны следующим неравенством:
        Δx*Δp=ħ/2
    где ħ — постоянная Планка, а ħ=ħ/(2*π).
    Согласно соотношению неопределённостей, невозможно абсолютно точно определить одновременно координаты и импульс частицы. С повышением точности измерения координаты, максимальная точность измерения импульса уменьшается и наоборот. Те параметры, для которых такое утверждение справедливо, называются канонически сопряжёнными.
    Это центрирование на измерении, идущее от Н.Бора, очень популярно. Однако соотношение неопределённости выводится теоретически из постулатов Шрёдингера и Борна и касается не измерения, а состояний объекта: оно утверждает, что для любого возможного состояния выполняются соответствующие соотношения неопределённости. Естественно, что оно будет выполняться и для измерений. То есть вместо «с повышением точности измерения координаты максимальная точность измерения импульса уменьшается» следует говорить: «в состояниях, где неопределённость координаты меньше, неопределённость импульса больше».
        Неопределённость между энергией и временем
    Пусть ΔE — среднеквадратическое отклонение при измерении энергии некоторого состояния квантовой системы, и Δt — время жизни этого состояния. Тогда выполняется следующее неравенство,
        ΔЕ*Δ>=ħ/2
    Иными словами, состояние, живущее короткое время, не может иметь хорошо определённую энергию.
    При этом, хотя вид этих двух соотношений неопределённости похож, но их природа (физика) совершенно различны.
    Принцип суперпозиции — фундаментальный принцип квантовой механики, согласно которому, если для некоторой квантовой системы допустимы состояния ψ1 и ψ2, то допустима и любая их линейная комбинация ψ3=С1*ψ1+С2*ψ2; она называется суперпозицией состояний ψ1 и ψ2 (принцип суперпозиции состояний).
    Если измерение какой-либо физической величины f в состоянии |ψ1|  всегда приводит к определённому результату f1, а в состоянии |ψ2|  — к результату f2, то измерение в состоянии |ψ3| приведёт к результату f1 или f2 с вероятностями {\displaystyle |C1|^2 и |C2|^2  соответственно.
    Альтернативная формулировка гласит, что если возможны несколько путей перехода из начального состояния в конечное, то полная амплитуда перехода есть сумма амплитуд перехода по каждому из этих путей (принцип суперпозиции амплитуд):
        A=∑Ai
    При этом вероятность перехода, которая пропорциональна квадрату амплитуды, не равна, в отличие от классического случая, сумме вероятностей:
        |A|^2=|∑Ai|^2!=∑|Ai|^2
    Из принципа суперпозиции следует, что все уравнения, которым подчиняются волновые функции (например, уравнение Шрёдингера) в квантовой механике должны быть линейными.
    Значение любой наблюдаемой (например, координаты, импульса или энергии частицы), полученное в результате измерения, является собственным значением оператора этой величины, соответствующим конкретному собственному состоянию этого оператора, то есть определённой волновой функции, действие оператора на которую сводится к умножению на число — собственное значение. Согласно принципу суперпозиции, линейная комбинация двух таких волновых функций также будет описывать реально существующее физическое состояние системы. Однако для такого состояния наблюдаемая величина уже не будет иметь определённого значения, и в результате измерения может быть получено одно из двух значений с вероятностями, определяемыми квадратами коэффициентов (амплитуд), с которыми обе функции входят в линейную комбинацию. Разумеется, волновая функция системы может быть линейной комбинацией и более чем двух состояний, вплоть до бесконечного их количества.
    Важными следствиями принципа суперпозиции являются различные интерференционные эффекты (см. опыт Юнга, дифракционные методы), а для составных систем — зацепленные состояния.
    Принцип суперпозиции, как и вообще квантовая механика, применим не только к микро-, но и к макрообъектам. Это может выглядеть парадоксально с точки зрения нашего повседневного жизненного опыта. Известный иллюстрацией явлается мысленный эксперимент с котом Шрёдингера, в котором возникает квантовая суперпозиция живого и мёртвого кота.
    Task:
    Представление физических величин операторами. Наблюдаемые величины.
    Decision:
    Для получения информации о физических величинах, связанных с движущейся частицей, в квантовой механике разработан специальный математический аппарат, который использует представления об операторах физических величин и результатах их действия на волновые функции.
    В работах М.Борна, П.Дирака и др. был сформулирован второй постулат квантовой механики, утверждающий, что каждой физической величине соответствует определенный оператор этой физической величины. При этом соотношения между операторами в квантовой механике имеют ту же структуру, что и соотношения между соответствующими им физическими величинами в классической механике.
    Для расшифровки этого постулата дадим некоторые пояснения. Оператор - это математическое правило, следуя которому мы можем преобразовать одну функцию в другую. Задать оператор - это означает определить рецепт такого преобразования. Такое преобразование может быть простым умножением исходной функции на число или известную функцию, дифференцированием функции, перестановкой аргументов функции и др.
    В квантовой механике в качестве символа соответствующего оператора используется классическое обозначение физической величины, ставя над буквой "шляпку" в виде значка "^". Например, x^ - это оператор координаты x,  px^ - оператор проекции импульса на ось x, U^ - оператор потенциальной энергии и т.д. Оператор предполагается действующим на написанную вслед за ним функцию. В качестве таких функций в квантовой механике выступают волновые функции. При этом равенство двух функций a^*ψ=b^*ψ в операторной форме будет записываться как равенство операторов: a^=b^.
    Определим операторы основных физических величин в квантовой механике.
    1. Оператор координаты. Действие этого оператора на волновую функцию сводится к умножению ее на соответствующую координату, то есть.
        x^*ψ=x*ψ, y^*ψ=y*ψ, z^*ψ=z*ψ.   (3.27)
    В символической операторной форме записи этих операций имеют вид
        x^=x, y^=y z^=z     (3.28)
     Объединяя эти формулы, можно ввести векторный оператор r→^, соответствующий радиусу-вектору r→ в классической механике. Такой оператор формально рассматривается как некоторый вектор, имеющий в качестве компонент в декартовой системе координат операторы x^, y^, z^. Поэтому
        r→^=i→*x^+j→*y^+k→*z^   (3.29)
    2. Оператор импульса. С помощью операций дифференцирования по координатам определим операторы проекций импульса, записав эти определения в символической операторной форме как
    Все три формулы в (3.30) можно объединить в одну, введя векторный оператор импульса p→^=i→*px^+j→*py^+k→*pz^, который с учетом (3.30) запишется как
        p→^=-i*ħ*∇      (3.31)
    Здесь
        ∇=i→(∂/∂x)+j→(∂/∂y)+k→(∂/∂z)
    Используя соотношение классической механики:
        p^2=px^2+py^2+pz^2=px*px+py*py+pz*pz
    определим оператор квадрата импульса как
        ^p^2=(^px)^2+(^py)^2+(^pz)^2=-ħ(∂^2/∂x^2+∂^2/∂y^2+∂^2/∂z^2)     (3.32)
    Используя символ оператора Лапласа, запишем (3.32) в более компактном виде
        ^p^2=*ħ^2*Δ     (3.33)
    3. Оператор момента импульса. По формуле классической механики, определяющей момент импульса частицы как вектор →L=→rx→p, запишем выражения для его проекций на координатные оси:
        Lx=y*pz-z*py, Ly=z*px-x*pz, Lz=x*py-y*px
    Эти соотношения превратим в операторные, определяющие операторы проекций момента импульса
    Оператор квадрата момента импульса можно построить по правилу
        ^L^2=^Lx*^Lx+^Ly*^Ly+^Lz*^Lz    (3.35)
     Отметим, что задачи квантовой механики, обладающие сферической симметрией, удобнее решать не в декартовой, а в сферической системе координат r, θ и φ. Переходя от декартовых координат к сферическим по обычным правилам замены переменных x=r*sin(θ)*cos(φ), y=r*sin(θ)*sin(φ), z=r*cos(θ), формулы (3.34) и (3.35) можно преобразовать к следующему виду - угловая часть оператора Лапласа в сферической системе координат.
    4. Операторы энергий. Классическая формула связи кинетической энергии частицы с квадратом ее импульса Ek=p^2/(2*m0) позволяет записать аналогичное соотношение между соответствующими операторами. Поэтому
        ^Ek=^p^2/(2*m0)=-(ħ^2/(2*m0)*Δ      (3.37)
    Если частица движется в стационарном силовом поле, и ее потенциальная энергия U=U(x,y,z) определена в любой точке пространства, то оператор потенциальной энергии ^U определяется как оператор умножения на функцию U, то есть
        ^U*ψ=U*ψ  или ^U=U      (3.38)
    Так как полная энергия частицы в классической механике есть сумма кинетической и потенциальной энергий, то в квантовой механике оператор полной энергии ^H определяется как сумма операторов кинетической и потенциальной энергий. Поэтому
        ^H=^Ek+^U=^p^2/(2*m0)+U
    Раскрывая выражение для оператора квадрата импульса по формуле (3.33), запишем оператор полной энергии как
        ^Y=-(ħ^2/(2*m0)*Δ+ U(x,y,z)     (3.39)
    В классической механике полную энергию частицы, выраженную через ее координаты и импульс, называют функцией Гамильтона. Поэтому в квантовой механике оператор полной энергии ^H называют оператором функции Гамильтона или просто гамильтонианом.
    Гамильтониан ^H является основным оператором квантовой механики, поскольку, выбирая конкретный вид гамильтониана, с учетом силового поля, действующего на частицу, мы формулируем на математическом языке все особенности квантовой системы. Поэтому и основное уравнение нерелятивистской квантовой механики - уравнение Шредингера (3.8) может быть записано в операторной форме
        i*ħ*∂ψ/∂t=^H*ψ      (3.40)
    содержащей гамильтониан ^H.
    Физическое содержание операторного метода в квантовой механике накладывает определенные ограничения на возможный вид квантовомеханических операторов. Пусть ^Ф- оператор физической величины f. Тогда для любых функций ψ1 и ψ2 и произвольных постоянных C1 и C2 должно выполняться равенство
        ^Ф*(C1*ψ1+C2*ψ2)=C1*^Ф*ψ1+C2*^Ф*ψ2      (3.41)
    Операторы, обладающие таким свойством, называются линейными операторами. Свойство линейности операторов физических величин тесно связано с принципом суперпозиции квантовых состояний. Только использование в теории линейных операторов не нарушает этого принципа.
    Оператором физической величины может быть только линейный самосопряженный (эрмитов) оператор. Только такому оператору соответствует действительная (не комплексная) физическая величина. Самосопряженным называют оператор, который совпадает со своим сопряженным оператором. В этом случае для произвольных функций ψ1 и ψ2 тождественно выполняется следующее интегральное равенство
    Таким образом, каждой физической величине в квантовой механике приводится в соответствие определенный линейный самосопряженный оператор. Непосредственной проверкой можно убедиться, что все приведенные выше квантовомеханические операторы обладают такими свойствами.
    Относящаяся к системе или телу динамическая переменная, которая в принципе может быть измерена. Так, координата, импульс и кинетическая энергия электрона — это наблюдаемые величины.
    Квантовая наблюдаемая является линейным самосопряжённым оператором, действующим на сепарабельном (комплексном) гильбертовом пространстве чистых состояний квантовой системы. В интуитивном физическом понимании норма оператора наблюдаемой представляет собой наибольшую абсолютную величину измеряемого числового значения физической величины.
    Иногда вместо термина «наблюдаемая» используют «динамическая величина», «физическая величина». Однако температура и время являются физическими величинами, но не являются наблюдаемыми в квантовой механике.
    Тот факт, что квантовым наблюдаемым сопоставляются линейные операторы, ставит проблему связи этих математических объектов с экспериментальными данными, которые являются вещественными числами. На опыте измеряются вещественные числовые значения, соответствующие наблюдаемой в заданном состоянии. Важнейшими характеристиками распределения числовых значений на вещественной прямой являются среднее значение <A> наблюдаемой и дисперсия D(A) наблюдаемой.
    Обычно постулируют, что возможные числовые значения квантовой наблюдаемой, которые могут быть измерены экспериментально, являются собственными значениями оператора этой наблюдаемой.
    Говорят, что наблюдаемая A в состоянии ρ имеет точное значение, если дисперсия A равна нулю D(A)=0.
    Другое определение квантовой наблюдаемой: наблюдаемыми квантовой системы являются самосопряжённые элементы C^*-алгебры.
    Использование структуры C^*-алгебры позволяет сформулировать классическую механику аналогично квантовой. При этом для некоммутативных C^*-алгебр, описывающих квантовые наблюдаемые, имеет место теорема Гельфанда — Наймарка: любая C^*-алгебра может быть реализована алгеброй ограниченных операторов, действующих в некотором гильбертовом пространстве. Для коммутативных {\displaystyle C^{*}}C^{*}-алгебр, описывающих классические наблюдаемые, имеем следующую теорему: всякая коммутативная C^*-алгебра M изоморфна алгебре непрерывных функций, заданных на компактном множестве максимальных идеалов алгебры M.
    В квантовой механике часто постулируется следующее утверждение. Каждой паре наблюдаемых A и B соответствует наблюдаемая C, устанавливающая нижнюю грань одновременной (для одного и того же состояния) измеримости A и B, в том смысле, что D(A)D(B)>=<C>^2, где D(A) — дисперсия наблюдаемой, равная <A^2>-<A>^2. Это утверждение, называемое принципом неопределённости, выполняется автоматически, если A и B являются самосопряжёнными элементами C^* -алгебры. При этом принцип неопределённости принимает свою обычную форму, где C=i[A,B].
    Понятия квантовой наблюдаемой и квантового состояния являются дополнительными, дуальными. Эта дуальность связана с тем, что в опыте определяются лишь средние значения наблюдаемых, а в это понятие входит и понятие наблюдаемой, и понятие состояния.
    Если эволюция квантовой системы во времени полностью характеризуется её гамильтонианом, то уравнением эволюции наблюдаемой является уравнение Гейзенберга. Уравнение Гейзенберга описывает изменение квантовой наблюдаемой гамильтоновой системы с течением времени.
    В классической механике наблюдаемой называется вещественная гладкая функция, определённая на гладком вещественном многообразии, описывающем чистые состояния классической системы.
    Между классическими и квантовыми наблюдаемыми существует взаимосвязь. Обычно полагают, что задать процедуру квантования означает установить правило, согласно которому каждой наблюдаемой классической системы, то есть функции на гладком многообразии, ставится в соответствие некоторая квантовая наблюдаемая. В квантовой механике наблюдаемыми считаются операторы в гильбертовом пространстве. В качестве гильбертова пространства обычно выбирают комплексное бесконечномерное сепарабельное гильбертово пространство. Сама функция, соответствующая данному оператору, при этом называется символом оператора.
    Source:
    http://fn.bmstu.ru/data-physics/library/physbook/tom5/ch3/texthtml/ch3_4_text.htm
    http://nuclphys.sinp.msu.ru/misc/gloss.htm#:~:text=%D0%9D%D0%B0%D0%B1%D0%BB%D1%8E%D0%B4%D0%B0%D0%B5%D0%BC%D0%B0%D1%8F%20%D0%B2%D0%B5%D0%BB%D0%B8%D1%87%D0%B8%D0%BD%D0%B0.%20%D0%9E%D1%82%D0%BD%D0%BE%D1%81%D1%8F%D1%89%D0%B0%D1%8F%D1%81%D1%8F%20%D0%BA%20%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%B5,%D1%8D%D1%82%D0%BE%20%D0%BD%D0%B0%D0%B1%D0%BB%D1%8E%D0%B4%D0%B0%D0%B5%D0%BC%D1%8B%D0%B5%20%D0%B2%D0%B5%D0%BB%D0%B8%D1%87%D0%B8%D0%BD%D1%8B.%20%D0%9D%D0%B0%D0%BD%D0%BE%D0%BC%D0%B5%D1%82%D1%80%20(%D0%BD%D0%BC)
    https://ru.wikipedia.org/wiki/%D0%9A%D0%B2%D0%B0%D0%BD%D1%82%D0%BE%D0%B2%D0%B0%D1%8F_%D0%BD%D0%B0%D0%B1%D0%BB%D1%8E%D0%B4%D0%B0%D0%B5%D0%BC%D0%B0%D1%8F
    http://eos.ibi.spb.ru/umk/1_7/5/5_R1_T4.html#5
    https://ru.wikipedia.org/wiki/%D0%9F%D1%80%D0%B8%D0%BD%D1%86%D0%B8%D0%BF_%D0%BD%D0%B5%D0%BE%D0%BF%D1%80%D0%B5%D0%B4%D0%B5%D0%BB%D1%91%D0%BD%D0%BD%D0%BE%D1%81%D1%82%D0%B8
    https://ru.wikipedia.org/wiki/%D0%9A%D0%B2%D0%B0%D0%BD%D1%82%D0%BE%D0%B2%D0%B0%D1%8F_%D0%BC%D0%B5%D1%85%D0%B0%D0%BD%D0%B8%D0%BA%D0%B0#%D0%9F%D1%80%D0%B8%D0%BD%D1%86%D0%B8%D0%BF_%D0%BD%D0%B5%D0%BE%D0%BF%D1%80%D0%B5%D0%B4%D0%B5%D0%BB%D1%91%D0%BD%D0%BD%D0%BE%D1%81%D1%82%D0%B8_%D0%93%D0%B5%D0%B9%D0%B7%D0%B5%D0%BD%D0%B1%D0%B5%D1%80%D0%B3%D0%B0
    https://ru.wikipedia.org/wiki/%D0%9F%D1%80%D0%B8%D0%BD%D1%86%D0%B8%D0%BF_%D1%81%D1%83%D0%BF%D0%B5%D1%80%D0%BF%D0%BE%D0%B7%D0%B8%D1%86%D0%B8%D0%B8_(%D0%BA%D0%B2%D0%B0%D0%BD%D1%82%D0%BE%D0%B2%D0%B0%D1%8F_%D0%BC%D0%B5%D1%85%D0%B0%D0%BD%D0%B8%D0%BA%D0%B0)
    https://ru.wikipedia.org/wiki/%D0%A3%D1%80%D0%B0%D0%B2%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5_%D0%A8%D1%80%D1%91%D0%B4%D0%B8%D0%BD%D0%B3%D0%B5%D1%80%D0%B0
    https://ru.wikipedia.org/wiki/%D0%A2%D1%83%D0%BD%D0%BD%D0%B5%D0%BB%D1%8C%D0%BD%D1%8B%D0%B9_%D1%8D%D1%84%D1%84%D0%B5%D0%BA%D1%82
    http://purple.iptm.ru/mfti/dis/VKR_Mantulnikov.pdf
    https://ru.wikipedia.org/wiki/%D0%9A%D0%B2%D0%B0%D0%B7%D0%B8%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B5_%D0%BF%D1%80%D0%B8%D0%B1%D0%BB%D0%B8%D0%B6%D0%B5%D0%BD%D0%B8%D0%B5
    https://ru.wikipedia.org/wiki/%D0%A2%D0%B5%D0%BE%D1%80%D0%B8%D1%8F_%D0%B2%D0%BE%D0%B7%D0%BC%D1%83%D1%89%D0%B5%D0%BD%D0%B8%D0%B9#%D0%92_%D0%BA%D0%B2%D0%B0%D0%BD%D1%82%D0%BE%D0%B2%D0%BE%D0%B9_%D0%BC%D0%B5%D1%85%D0%B0%D0%BD%D0%B8%D0%BA%D0%B5
    https://studopedia.su/15_66947_spin-printsip-pauli.html
    https://docs.yandex.ru/docs/view?tm=1634691932&tld=ru&lang=ru&name=%D0%B0%D1%82%D0%BE%D0%BC%D0%BD%D0%B0%D1%8F%2C%20%D1%8F%D0%B4%D0%B5%D1%80%D0%BD%D0%BD%D0%B0%D1%8F%20%D1%84%D0%B8%D0%B7%D0%B8%D0%BA%D0%B0.pdf&text=%D0%A2%D0%B5%D0%BE%D1%80%D0%B8%D1%8F%20%D0%B0%D1%82%D0%BE%D0%BC%D0%B0%20%D0%B2%D0%BE%D0%B4%D0%BE%D1%80%D0%BE%D0%B4%D0%B0&url=https%3A%2F%2Fmoodle.herzen.spb.ru%2Fpluginfile.php%2F143527%2Fmod_resource%2Fcontent%2F1%2F%25D0%25B0%25D1%2582%25D0%25BE%25D0%25BC%25D0%25BD%25D0%25B0%25D1%258F%252C%2520%25D1%258F%25D0%25B4%25D0%25B5%25D1%2580%25D0%25BD%25D0%25BD%25D0%25B0%25D1%258F%2520%25D1%2584%25D0%25B8%25D0%25B7%25D0%25B8%25D0%25BA%25D0%25B0.pdf&lr=63&mime=pdf&l10n=ru&sign=713b1b30605ea528eae35f036442bb62&keyno=0&nosw=1
    http://aes.pp.ua/RSafety/P02-05.htm
    http://ens.tpu.ru/POSOBIE_FIS_KUSN/%D0%AD%D0%BB%D0%B5%D0%BA%D1%82%D1%80%D0%BE%D1%81%D1%82%D0%B0%D1%82%D0%B8%D0%BA%D0%B0.%20%D0%9F%D0%BE%D1%81%D1%82%D0%BE%D1%8F%D0%BD%D0%BD%D1%8B%D0%B9%20%D0%A2%D0%BE%D0%BA/08-1.htm
    http://www.physbook.ru/index.php/SA._%D0%A2%D0%BE%D0%BA_%D0%B2_%D0%B3%D0%B0%D0%B7%D0%B0%D1%85
    http://hemi.nsu.ru/ucheb127b.htm
    https://kto.guru/biologia/994-jadernye-i-termojadernye-reakcii.html
    https://ru.wikipedia.org/wiki/%D0%94%D0%B5%D1%84%D0%B5%D0%BA%D1%82_%D0%BC%D0%B0%D1%81%D1%81%D1%8B 

Астрофизика
    Task:
    Закон Хаббла. Расширение Вселенной. Основы теории Большого Взрыва.
    Decision:
    Закон Хаббла (закон всеобщего разбегания галактик) — космологический закон, описывающий расширение Вселенной. В статьях и научной литературе в зависимости от её специализации и даты публикаций он формулируется по-разному.
    Классическое определение: ν=Н0*r, где ν — скорость галактики, r — расстояние до неё, а Н0 — коэффициент пропорциональности, сегодня называемый постоянной Хаббла.
    Однако в современных работах наблюдателей эта зависимость принимает вид c*z=H0*r, где с — скорость света, а z — красное смещение. Также, последнее является стандартным обозначением расстояния во всех современных космологических работах.
    Третий вид закона Хаббла можно встретить в теоретических публикациях:
        H='a(t1)/a(t1)
    где a — масштабный фактор, зависящий только от времени, 'a — его производная по времени.
    Закон Хаббла является одним из основных наблюдаемых фактов в космологии. С его помощью можно примерно оценить время расширения Вселенной (так называемый Хаббловский возраст Вселенной):
        tH=r/V=1/H0
    Эта величина с точностью до численного множителя порядка единицы соответствует возрасту Вселенной, рассчитываемому по стандартной космологической модели Фридмана.
    Расширение Вселенной — явление, состоящее в почти однородном и изотропном расширении космического пространства в масштабах всей Вселенной, выводимое через наблюдаемое с Земли космологическое красное смещение.
    Экспериментально расширение Вселенной подтверждается выполнением закона Хаббла, а также уменьшением светимости экстремально удалённых «стандартных свеч» (сверхновых типа Ia). Согласно теории Большого взрыва, Вселенная расширяется из начального сверхплотного и сверхгорячего состояния. Является ли это исходное состояние сингулярным (как предсказывает классическая теория гравитации — общая теория относительности) или нет — активно дебатируемый вопрос, разрешить который надеются разработкой квантовой теории гравитации.
    Теоретически явление было предсказано и обосновано А. Фридманом на раннем этапе разработки общей теории относительности из общефилософских соображений об однородности и изотропности Вселенной.
    «Большой взрыв» - это научная теория о том, как зародились звезды, блохи и все то, что мы видим сегодня.
    Вселенная начиналась как очень горячая, маленькая и плотная сверхсила (сочетание четырех фундаментальных сил), без звезд, атомов, формы и структуры (называемой «сингулярностью»). Около 13,8 миллиардов лет назад пространство расширилось невероятно быстро, словно произошел большой взрыв. Он и образовал галактики, звездные системы, планеты и стал точкой отсчета возникновения всего сущего. В 1927 году Жорж Леметр впервые заметил, что расширяющуюся вселенную можно проследить во времени до исходной точки. Кстати, она все еще расширяется и становится все холоднее. Ученые, изучающие космологию, согласны с тем, что теория Большого Взрыва соответствует тому, что они наблюдают сейчас.
    Название теории возникло во время радиоэфира на шоу Фреда Хойла. Он не знал как обозвать это открытие и в шутку обозначил его как "Большой Взрыв". Ученые посчитали характеристику не совсем верной, однако она показалась им забавной, и они, все-таки, решились утвердить Теорию Большого Взрыва, как официальное название.
    Правдоподобность Теории Большого Взрыва подкрепляется многочисленными наблюдениями ученых. Самое важное - красное смещение очень далеких галактик. Так называемый "Redshift" - это эффект Доплера, возникающий в свете. Когда объект удаляется от Земли, его лучи уходят в более красный, нежели сам объект, цвет. Красные волны являются самыми длинными из волн в видимом спектре, и чем больше красное смещение, тем быстрее объект удаляется. Измеряя красное смещение, ученые доказали, что Вселенная расширяется, и научились вычислять, с какой скоростью. Благодаря очень точным подсчетам, специалисты уверенны, что, еще около 13,8 миллиардов лет назад, вселенная являлась сингулярностью. Поскольку, при расширении, большинство вещей становятся холоднее, ученые полагают, что, в начале всех начал, Вселенная была невероятно малой и очень горячей.
    Другие наблюдения, которые поддерживают достоверность теории Большого взрыва, - это количество химических элементов во Вселенной. Количество очень легких элементов, таких как водород, гелий и литий, похоже, согласуется с теорией Большого Взрыва. Ученые также обнаружили фоновое космическое излучение. Это излучение - не что иное, как радиоволны, и они повсюду. Это излучение сейчас очень слабое и холодное, но давным-давно оно было весьма сильным и невообразимо горячим.
    Task:
    Строение галактики. Классификация галактик. Распределение галактик в пространстве.
    Decision:
    Галактика – это система звёздных скоплений, планет, пыли, межзвёздных газов, тёмной материи, звёзд, связанных между собой силами гравитации. Всё в ней движется относительно общего центра масс – ядра.
    Учёные до сих пор внимательно изучают строение звёздных систем. И выделяют несколько компонентов:
        Ядро.Центром галактики считается ядро (сосредоточение массы). Оно является точкой гравитационного притяжения остальных её объектов. Это небольшая частичка звездообразования и звёздного скопления. Ядром может быть чёрная дыра или скопление пыли, групп звёзд, нескольких чёрных дыр или других обитателей галактического центра. Ядром Млечного Пути является массивная чёрная дыра.
        Диск. Следующим компонентом является диск. Это тонкий, плоский галактический слой, где находится большинство космических объектов. Диск занимает большую часть площади галактической системы, разделяется он на звёздную и газопылевую составляющие. В этом слое расположены галактические рукава – неплотные спиральные ответвления с большим количеством новообразованных звёзд. Существуют галактические системы сразу с 2 дисками. Дополнительный элемент астрономы называют полярным кольцом. Он образуется при слиянии галактик. Замечено, что это происходит внезапно, когда просто появляется полярное кольцо. Последний механизм ещё практически не изучен.
        Сфероидальный компонент. Часть газа и звёзд, находящаяся за пределами диска, образуют сфероидальный компонент. Он размещается по сфере притяжения вокруг центра. Внешний сфероидальный компонент называется гало.
        Спиральный рукав. Это спиралевидное уплотнение из молодых звёзд и межзвёздных газов.
        Балдж. Объёмная сферическая оболочка галактического ядра называется балдж (в переводе с английского «выпуклость»). Состоит она из звёздных скоплений, старых светил, звёздных гигантов. Балдж является самой яркой и концентрированной частью галактик. Около него располагается перемычка или бар, представляющая собой плотное образование из межзвёздного газа и звёзд прямой и вытянутой формы.
    Галактика не имеет чётких границ, поэтому точно понять, где они заканчиваются, и начинается межгалактическое пространство невозможно. В самой космической системе имеются планеты, туманности, звёзды, звёздные скопления. Но они есть и вокруг систем. Учёные различают следующие формы космических систем:
        Эллиптическая. Эллиптический звёздный остров относятся к первому классу. Его особенностью является отсутствие рукавов, диска, центрального ядра. По большому счёту он является балджем огромного размера, состоящим из галактической сферы неправильной (вытянутой) или идеально круглой, шарообразной формы. Звёздный состав эллиптических систем включает старых красных гигантов или красных, жёлтых карликов. Массивных, активных светил в них нет или они крайне редки. В список галактик эллипсоидной формы входит М87, расположенная на расстоянии в 53,5 млн световых лет от Земли.
        Линзовидная. Является промежуточным звеном между спиральными и эллиптическими звёздными островами. У астрономов существует версия, что линзовидная галактика образовалась из спиральной, у которой слились рукава, а потенциал звездообразования закончился. У неё имеется массивное ядро, распластанные газовый и звёздный диски. Внешне напоминает двояковыпуклую линзу из-за контраста плоских дисков и объёмного, выступающего балджа. Состоит из старых звёзд, чёрных дыр, маленьких зрелых светил остатков сверхновых звёзд, галактической пыли. Одна из подобных космических систем под названием Веретено располагается от Земли на расстоянии в 45 млн световых лет.
        С перемычкой. Система округлой формы, которую посередине пересекает яркая перемычка, состоящая из звёзд и межзвёздного газа. Рукава идут от краёв этой перемычки (бара). Галактика с перемычкой очень схожа со спиральной. Основное их отличие в том, что спирали начинаются от бара, а не от ядра. Примером является NGC 1300, расположенная в 60 млн световых лет от нашей планеты.
        Спиральная. В классическом варианте спиральная галактика – это активно вращающийся звёздный остров в виде эллипса, в котором от балджа отходят рукава в виде закрученных спиралей. У большинства таких космических объектов есть перемычки. В рукавах активно образуются молодые звёзды из-за большого содержания там свободной видимой материи. Список галактик в виде спирали обширен. Такие системы составляют 55% от всего количества звёздных островов во Вселенной. Интересным фактом является то, что у них немного рукавов. Спираль закручивается не очень туго, звёзды свободно перемещаются из одной её части в другую. Почему рукава не закручиваются больше ещё не известно. Одной из версий является то, что спираль закручивается под влиянием волн плотности, сжимающие пылевые и газовые облака, попадающие в галактические рукава. В результате активируется образование звёзд, в основном массивных и ярких, жизненный срок которых составляет несколько миллионов лет. При этом они находятся практически всегда в фиксированном положении, что обеспечивает стабильность спиралей. Но эта гипотеза так и остаётся предположением без доказательств, потому что длительное изучение развития галактических систем невозможно из-за их сложной структуры. Самая известная галактика, относящаяся к этому типу – Млечный Путь.  
    Неправильная. Очень редкая разновидность звёздных островков. Состоит из газа, пыли, звёздных скоплений, но в них отсутствуют основные структурные элементы, такие как балдж, рукава. По структуре и внешнему виду неправильная галактика похожа на рваные облака. Такой формой она часто обязана воздействию гравитационных полей. Но иногда приобретает рваный вид сама по себе. Интересными, с точки зрения, астрономии является карликовая неправильная галактика. Она наполнена газом – необходимым элементом для образования новых звёзд. В ней мало металлов и они очень компактные по размеру. Всё это в совокупности создаёт оптимальные условия для зарождения ярких, огромных звёзд, которые очень быстро гаснут. К неправильной системе относится NGC 4449, располагающаяся 12 млн световых лет от Земли.
    Планета Земля входит в Млечный Путь, это спиральная галактика с перемычкой. Включает более 150 млрд звёзд, световой луч с одной стороны Млечного Пути до другого проходит за сотню тысяч лет. Солнечная система располагается на краю нашей галактики. Расстояние от Солнца до ядра Млечного Пути составляет 30 000 световых лет.
    Проведя тщательное исследование галактик, Хаббл в 1934 г. предположил, что подобных объектов на всей небесной сфере насчитывается около 5 млн. Сейчас принято считать, что галактик величиной до 30m около 100 млрд.
    Галактики очень редко бывают одиночными. Как правило, они расположены небольшими группами по несколько членов или входят в состав больших скоплений из сотен и тысяч галактик. Наша Галактика входит в состав так называемой Местной группы, которая содержит еще две большие спиральные галактики – Туманность Андромеды и галактику из созвездия Треугольника, а также более 20 карликовых и неправильных галактик, среди которых самые большие – Магеллановы облака.
    Размеры скоплений галактик составляют несколько мегапарсек. В настоящее время известно сотни и тысячи звездных систем. Со многими скоплениями связаны мощные и протяженные источники рентгеновского излучения. Между скоплениями находится горячий газ очень малой плотности. В пространстве галактики распределены неравномерно. Области с повышенной плотностью чередуются с пустотами, в которых средняя плотность галактик значительно меньше.
    В целом галактики и скопления галактик как бы располагаются на определенных поверхностях, напоминающих соты, охватывающие собой пустоты. Другими словами, распределение вещества во Вселенной имеет ячеистую структуру. А размеры пустот сравнимы с размерами сверхскоплений.
    Task:
    Солнечная активность. Солнечные вспышки, выбросы, выбросы корональной массы.
    Decision:
    Солнце обладает сильным магнитным полем, которое со временем изменяет свою напряженность и направление. Изменения магнитного поля порождают явления, которые называются солнечной активностью: солнечные пятна, солнечные вспышки, солнечный ветер.
    Солнечный ветер — поток ионизированных частиц, который распространяется на миллионы километров. За год Солнце теряет с солнечным ветром от 2*10^(-14) до 3*10^(-14) солнечных масс. За 150 млн лет оно теряет массу, равную массе Земли.
    Солнечная активность воздействует на магнитное поле нашей планеты и структуру земной атмосферы, вызывая геомагнитные бури в высоких широтах. Эти бури вредят средствам связи и пагубно сказываются на самочувствии подверженных таким явлениям людей. Считается, что солнечная активность повлияла на формирование и развитие Солнечной системы.
    Солнечная активность меняется периодически. Максимумы, когда на поверхности Солнца больше всего солнечных пятен, происходят примерно раз в 11 лет. Правда, за последние 300 лет этот период варьировался от 7 до 17 лет.
    Самая большая группа солнечных пятен за историю наблюдений появилась в апреле 1947 г. Ее максимальная длина составляла 300 000 км, максимальная ширина — 145 000 км, а максимальная площадь была примерно в 36 раз больше площади поверхности Земли. Всего в этой группе было 172 пятна.
    После появления пятна могут просуществовать от нескольких часов до нескольких месяцев. Их форма и размеры бывают различными, а температура на 1000—1500°С ниже температуры остальной поверхности нашего светила, и лишь поэтому они кажутся темными. Холодными пятна можно считать только относительно прочих участков поверхности Солнца.
    Солнечная вспышка - взрывной процесс выделения энергии (кинетической, световой и тепловой) в атмосфере Солнца. Вспышки так или иначе охватывают все слои солнечной атмосферы: фотосферу, хромосферу и корону Солнца. Солнечные вспышки часто, но не всегда, сопровождаются выбросом корональной массы. Энерговыделение мощной солнечной вспышки может достигать 6×1025 джоулей, что составляет около 1⁄6 энергии, выделяемой Солнцем за секунду, или 160 млрд мегатонн в тротиловом эквиваленте, что, для сравнения, составляет приблизительный объем мирового потребления электроэнергии за 1 миллион лет.
    Под действием магнитного поля происходит неожиданное сжатие солнечной плазмы, образуется плазменный жгут или лента (могут достигать в длину десятков или сотен тысяч километров), что приводит к взрыву. Солнечная плазма в этой области может нагреваться до температур порядка 10 млн К. Возрастает кинетическая энергия выбросов веществ, движущихся в короне и уходящих в межпланетное пространство со скоростями до 1000 км/с. Получают дополнительную энергию и значительно ускоряются потоки электронов, протонов и других заряженных частиц. Усиливается оптическое, рентгеновское, гамма- и радиоизлучение.
    Фотоны от вспышки достигают Земли примерно за 8,5 минут после её начала; далее в течение нескольких десятков минут доходят мощные потоки заряженных частиц, а облака плазмы от солнечной вспышки достигают нашей планеты только через двое-трое суток.
    Корональный выброс массы — выброс вещества из звёздной короны. Наблюдение корональных выбросов массы с поверхности Земли затруднено. По-видимому, первое наблюдение корональных выбросов в видимом диапазоне длин волн было выполнено в начале 1970-х годов с помощью коронографа, установленного на седьмой орбитальной солнечной обсерватории. Станция SMM продолжила изучение этого явления в 1980 году.
    До появления данных с этих двух станций никто не осознавал, что корональные выбросы массы являются столь важными и распространёнными.
    Так как затмевающий диск коронографа вырезает из поля зрения прибора яркий диск Солнца, то наблюдения источника коронального выброса на поверхности Солнца с помощью коронографа оказываются невозможным, и предположения о возможном его источнике делаются на основе наблюдений другими приборами в других диапазонах волн[2]. Эта принципиальная трудность приводит к тому, что по наблюдениям со спутника вблизи Земли в ряде случаев оказывается невозможным определить направление движения выброса: движется ли он к Земле или от Земли. Для преодоления этой трудности в настоящее время используется пара космических аппаратов проекта STEREO, которые разведены на большие углы по орбите Земли.
    Во время максимумов солнечной активности частота корональных выбросов массы достигает трёх за сутки, тогда как в периоды спокойного Солнца эта частота может снижаться до одного выброса в 5 суток.
    В отличие от солнечных вспышек, во время которых магнитная энергия, накопленная в активных областях на Солнце, реализуется в основном в виде электромагнитного излучения, во время корональных выбросов массы эта энергия расходуется на ускорение огромных масс вещества. Корональные выбросы массы, которые возможно наблюдать только вне солнечного диска (вне затмевающего диска коронографа), часто сопоставляют с солнечными вспышками, которые наблюдаются на солнечном диске. Так как такое сопоставление неоднозначно, то существует 2 точки зрения о связи этих явлений. Согласно более ранней точке зрения, корональные выбросы массы и солнечные вспышки являются разными проявлениями одного и того же процесса. Согласно второй точке зрения, эти явления могут иметь общий источник энергии, и если накопленной в источнике энергии достаточно на реализацию 2 явлений, они возникают в близких по времени и пространству интервалах. Однако существует ряд наблюдений, когда корональные выбросы массы регистрируются без каких-либо явлений на солнечном диске, в том числе и без солнечных вспышек.
    Выброс включает в себя плазму, состоящую в основном из электронов и протонов наряду с небольшим количеством более тяжёлых элементов — гелия, кислорода, и других. Некоторые ионы часто имеют более низкие состояния ионизации (например, однократно ионизованные атомы гелия), чем окружающая спокойная плазма короны, что указывает на то, что значительная часть массы выброса может быть ускорена из областей с более низкой температурой, то есть с уровня хромосферы. Характерной особенностью выброса является то, что общая топология выброса имеет форму гигантской петли, оба или одно основание которой закреплены за солнечную атмосферу, а магнитное поле в выбросе, как правило, выше, чем в спокойном солнечном ветре, и представляет собой скрученные в жгут магнитные силовые линии. В каждом корональном выбросе массы может содержаться до 10 миллиардов тонн вещества, которое летит в космосе с средней скоростью 400 км в секунду (быстрые выбросы — до 2000 км/с). Если выброс направлен в сторону Земли, он достигает нашей планеты в течение одного-трёх дней. Быстрые корональные выбросы, проходя сквозь более медленный регулярный солнечный ветер, создают в нём мощные ударные волны.
    Различают также корональный выброс в межпланетном пространстве. Одной из разновидностей такого выброса является магнитное облако. Когда выброс достигает Земли, он может оказать сильное влияние на её магнитосферу, вызывая различные явления космической погоды. Среди возможных эффектов — полярные сияния, магнитные бури, нарушения в работе электрооборудования, ухудшение условий распространения радиоволн.
    Task:
    Строение атмосферы Солнца; фотосфера, хромосфера, корона. Строение фотосферы; Гранулы. Солнечный ветер
    Decision:
    Все виды излучений, которые мы воспринимаем от Солнца, образуются в его самых внешних слоях, в атмосфере. Самый глубокий и плотный слой атмосферы — фотосфера — имеет толщину около 200— 300 км, плотность вещества в ней около 10-5 кг/м3, значительно меньше плотности земной атмосферы, которая у поверхности Земли равна 1 кг/м3 Несмотря на, казалось бы, малое значение толщины и плотности, фотосфера непрозрачна для всех видов излучений, образующихся в более глубоких слоях Солнца, поэтому мы не можем заглянуть в его под-фотосферные слои. Температура фотосферы растет с глубиной и в среднем составляет 6000 К. Именно эта температура принимается за температуру поверхности, а саму фотосферу принято считать поверхностью Солнца, и от нее начинаются слои атмосферы.
    Слои атмосферы Солнца Атмосфера Солнца состоит из трех слоев, между которыми нет резкой границы. Самый близкий к фотосфере и самый плотный, но очень тонкий слой называется обращающим слоем. Следующий, более обширный и более разреженный слой называется хромосферой (от греческого «хромоc», что означает «цвет»). Хромосфера Солнца имеет красноватый оттенок.
    Хромосфера видна во время полных солнечных затмений как клочковатое яркое кольцо вокруг чёрного диска Луны, только что затмившего Солнце. Хромосфера весьма неоднородна и состоит в основном из продолговатых вытянутых язычков (спикул), придающих ей вид горящей травы. Температура этих хромосферных струй в два-три раза выше, чем в фотосфере, а плотность в сотни тысяч раз меньше. Общая протяжённость хромосферы 10— 15 тыс. километров.
    Наконец, третий, самый обширный и разреженный слой атмосферы Солнца называется солнечной короной. Он представляется нам в виде лучистого сияния с перламутровым оттенком.
    Фотосфера Солнца начинается на 200—300 км глубже видимого края солнечного диска. Эти самые глубокие слои атмосферы называют фотосферой. Поскольку их толщина составляет не более одной трёхтысячной доли солнечного радиуса, фотосферу иногда условно называют поверхностью Солнца.
    В фотосфере видна зернистая структура, получившая название грануляции. Характерные угловые размеры гранул, напоминающих по виду рисовые зерна, составляют 1—2′, но линейные их размеры достигают тысячи и более километров. Наблюдения показывают, что грануляция находится в непрерывном движении и изменении: одни гранулы исчезают, а взамен им тут же появляются новые. Средняя продолжительность жизни различных гранул от 5 до 10 мин. Смещение спектральных линий в спектре центральной, более яркой и горячей части гранулы указывает на подъем горячего вещества из-под фотосферы; противоположное смещение линии в спектре более темного и холодного вещества, окаймляющего гранулу, указывает на опускание вещества под фотосферу.
    Скорость подъема и опускания газа в слоях солнечной атмосферы составляет около 1 км/с, а разница между температурой горячего и холодного вещества близка к 300 К. Картина грануляции во многом напоминает картину на поверхности кипящей воды — конвекцию. Горячая вода, как более легкая, поднимается снизу вверх, на поверхности она отдает свою энергию в окружающее пространство и, охладившись, опускается вниз. Специальные измерения показали, что поверхность кипящей воды разбивается на ячейки и в каждой горячее вещество поднимается, а по краям более холодное опускается. Таким образом, грануляция на Солнце указывает на то, что энергия в фотосферу поступает из более глубоких и горячих слоев Солнца путем конвекции.
    На ярком фоне фотосферы наблюдаются темные пятна. Такое пятно представляет собой довольно сложное образование, состоящее из центральной темной области, называемой тенью, и окаймляющей ее более светлой области с вытянутыми вдоль радиуса пятна темными и светлыми образованиями, получившей название полутени.
    Размеры солнечных пятен крайне разнообразны. В небольшие телескопы примерно с 50-кратным увеличением уже можно видеть пятна с угловым поперечником в 4—5″. Они выглядят небольшими черными точками без признаков полутени, но в действительности их линейные размеры близки к 3000—3500 км. Линейные поперечники пятен с угловыми размерами около 18″ сравнимы с диаметром нашей Земли (примерно 13 000 км). У наиболее же крупных, но редко появляющихся пятен угловые диаметры достигают 4′, т. е. 0,13 диаметра Солнца, и следовательно, их линейные размеры приближаются к 180 000 км! Такие крупные пятна хорошо видны даже невооруженным глазом (конечно, только сквозь темный светофильтр) .
    На фоне ослепительно яркой фотосферы пятно нам кажется черным. Однако измерения показали, что яркость пятен в 5—10 раз меньше яркости окружающей горячей фотосферы, а их реальный цвет — красноватый. Эти измерения позволили оценить температуру Т„ вещества в тени пятен. Поскольку поверхность пятен площадью 1 м2 излучает в 5—10 раз меньше энергии, чем такой же участок фотосферы с температурой Т = 6000 К, то, используя закон Стефана — Больцмана, можно записать: - Источник: Строение атмосферы Солнца
    На фотографиях солнечных пятен отчетливо заметна структура распределения темных и светлых областей в полутени пятна, похожая на распределение железных опилок в магнитном поле, причем темные области вытянуты вдоль магнитных линий. Наличие сильного магнитного поля в пятнах подтверждается и спектральными наблюдениями. В некоторых пятнах магнитная индукция достигает 0,5 Тл и выше, в то время как в среднем в фотосфере она составляет 10-4-10-3 Тл. В центре пятна вектор магнитной индукции направлен перпендикулярно к поверхности Солнца, а на краях, в полутени он идет вдоль поверхности и его значение меньше. Сильное магнитное поле пятен является причиной их низкой температуры. Это объясняется тем, что вещество фотосферы представляет собой плазму, состоящую из заряженных частиц.
    Сильное магнитное поле тормозит движение плазмы, замедляет ее конвенцию и тем самым ослабляет поступление энергии из внутренних слоев Солнца. В результате температура вещества в области пятен уменьшается и пятна выглядят темными на фоне яркой фотосферы.
    Обычно пятна появляются группами. В группе самое большое головное пятно расположено впереди по направлению вращения Солнца; оно имеет полярность магнитного поля, противоположную полярности следующего за ним меньшего пятна. Кроме того, головное пятно в северном полушарии Солнца имеет полярность, противоположную полярности головного пятна южного полушария.
    Наряду с пятнами на фотосфере, вблизи края солнечного диска сравнительно часто видны факелы — светлые образования довольно сложной волокнистой структуры. Некоторые факелы живут неделями. Их яркость незначительно превышает яркость фотосферы, а температура всего лишь на 200— 300 К выше ее температуры.
    На рисунке показана фотография Солнца, полученная во время полного солнечного затмения 31 июля 1981 г. Экспозиция подобрана таким образом, что заметен тонкий слой хромосферы и внутренняя часть внешней оболочки солнечной атмосферы — короны, имеющей вид лучистого жемчужного сияния, яркость которого в миллион раз меньше яркости фотосферы. На фотоснимках, полученных с большой экспозицией, солнечная корона прослеживается до расстояний в десять и более радиусов Солнца. На данном снимке видна самая яркая часть солнечной короны. Обращают на себя внимание несколько ярких образований, похожих на выбросы, которые получили название протуберанцев.
    Температура атмосферы Солнца сначала убывает от 6000 К в фотосфере до 4800 К в нижних слоях хромосферы, а затем начинает резко возрастать в ее верхних слоях и в короне. Средняя температура вещества хромосферы около 20 000 К. Именно благодаря такой высокой температуре в хромосфере возбуждается свечение атомов гелия.
    Изучение солнечной короны показало, что она состоит из сильно разреженной плазмы с температурой, близкой к двум миллионам кельвинов (2*106К). Плотность ее вещества в сотни миллиардов раз меньше плотности воздуха у поверхности Земли. В таких условиях нейтральные атомы химических элементов существовать не могут, так как их скорость настолько велика, что при взаимных столкновениях они теряют электроны и многократно ионизуются. Поэтому солнечная корона состоит в основном из протонов, ядер гелия и свободных электронов с незначительными примесями ионов других химических элементов. Этим и объясняется своеобразный спектр солнечной короны: в нем отсутствуют линии водорода, гелия, натрия (свойственные спектру хромосферы), а необычайно слабый, еле заметный непрерывный фон спектра создается электронами, рассеивающими свет фотосферы.
    Корона— внешняя разреженная и горячая оболочка Солнца, распространяющаяся от него на несколько солнечных радиусов и имеющая температуру плазмы до миллиона градусов. Яркость солнечной короны в миллион раз меньше, чем фотосферы. Поэтому наблюдать солнечную корону можно во время полных солнечных затмений или с помощью специальных телескопов-коронографов. Внешние слои атмосферы Солнца тянутся вплоть до орбиты Земли.
    С высокой температурой короны и разреженностью ее вещества связана разгадка наблюдаемых в ее спектре двух ярких линий — зеленой λ = 5303 Å и красной λ = 6374 Å. Сравнение положений этих линий со спектрами излучения известных химических элементов, полученных в лабораториях, не давало положительных результатов. Астрономы уже имели дело с аналогичной ситуацией, приведшей к открытию гелия. Поэтому сначала ученые предположили существование нового химического элемента, который назвали ко-ронием. Но потом возникло предположение о принадлежности этих линий известному химическому элементу, который, находясь в условиях сильно разреженной короны с высокой температурой, излучает волны, соответствующие наблюдаемым спектральным линиям.
    Теоретическое исследование состоянии ионизации и возбуждения атомов химических элементов в физических условиях солнечной короны, проведенное к началу 40-х годов прошлого столетия, показало, что эти две загадочные спектральные линии соответствуют длинам волн, которые излучают атомы железа, находясь в высокой степени ионизации. Зеленая линия принадлежит атому железа, у которого оторвано 13 внешних электронов, а красная линия принадлежит атому железа, у которого оторвано 9 внешних электронов. Дальнейшие исследования показали, что большинство линий излучения короны принадлежит различным элементам, находящимся в состоянии высокой степени ионизации.
    Основное число линий излучения короны находится в ультрафиолетовом и рентгеновском диапазонах спектра, а для их наблюдений используют специальные (ультрафиолетовые и рентгеновские) телескопы, установленные на космических научных станциях. Обширный материал по ультрафиолетовому излучению Солнца получен советской солнечной обсерваторией на борту космической станции «Салют».
    Как всякая разреженная горячая плазма, солнечная корона интенсивно излучает дециметровые и метровые радиоволны. Радиоизлучение короны было впервые обнаружено во время второй мировой войны. Известный астрофизик Д. Г Мензел в своей книге «Наше Солнце» так описывает это открытие: «Однажды после полудня в 1942 г. все британские радиолокационные станции кругового обзора вышли из строя. Интенсивное высокочастотное радиоизлучение заглушило обычный сигнал локатора. Вначале операторы заподозрили новую контрмеру врага. Но проверка показала, что все радиолокаторы на побережье были направлены в сторону заходящего Солнца».
    Детальные исследования радиоизлучения солнечной короны установили ее протяженность до расстояний в несколько десятков радиусов Солнца. Далее она постепенно рассеивается в межпланетном пространстве. Эти исследования подтвердили ничтожную плотность и высокую температуру короны. Каким же образом вещество солнечной короны нагревается до столь высокой температуры?
    Оказывается, к нагреванию короны имеет непосредственное отношение конвекция, наблюдаемая в фотосфере. Здесь опять полезна аналогия конвекции на Солнце с процессами, происходящими в кипящей воде. Если прислушаться к кипящей воде, то можно услышать шум — звуковые волны, которые возбуждаются в воздухе на границе с поверхностью воды ее конвективными движениями. Такие же волны, но в еще больших масштабах возбуждаются конвекцией в фотосфере. Затем эти волны распространяются наружу в хромосферу и корону, унося с собой часть механической энергии конвективных движений. Как и любой волновой процесс, эти волны по мере распространения затухают и особенно эффективно— в короне. Энергия, которую они переносят, и нагревает солнечную корону до высокой температуры в два миллиона кельвинов.
    Солнечный ветер — поток ионизированных частиц (в основном гелиево-водородной плазмы), истекающий из солнечной короны со скоростью 300—1200 км/с в окружающее космическое пространство. Является одним из основных компонентов межпланетной среды.
    Множество природных явлений связано с солнечным ветром, в том числе такие явления космической погоды, как магнитные бури и полярные сияния.
    В отношении других звёзд употребляется термин звёздный ветер, так что по отношению к солнечному ветру можно сказать «звёздный ветер Солнца».
    Не следует путать понятия «солнечный ветер» (поток ионизированных частиц, долетающий от Солнца до Земли за 2—3 суток) и «солнечный свет» (поток фотонов, долетающий от Солнца до Земли в среднем за 8 минут 17 секунд). В частности, именно эффект давления солнечного света (а не ветра) используется в проектах так называемых солнечных парусов. Двигатель для космического аппарата, использующий в качестве источника тяги импульс ионов солнечного ветра, называется электрическим парусом.
    Task:
    Основные параметры Солнца (его масса, размеры, расстояние от Солнца до Земли, химический состав, температура и методы их определения). Солнечная постоянная. Источники энергии Солнца.
    Decision:
    Таблица параметров Солнца:
        Наименование параметра - Данные
        Открытие человечеством - Неизвестно
        Средний радиус - 695 508 км
        Средняя окружность (длина экватора) - 4 370 005, 6 км
        Объем - 1 409 272 569 059 860 000 км3
        Масса - 1 989 100 000 000 000 000 000 000 000 000 кг
        Плотность - 1,409 г / см3
        Площадь поверхности - 6 078 747 774 547 км2
        Ускорение свободного падения - 274,0 м / с2
        Вторая космическая скорость    - 2223720 км / ч
        Период обращения вокруг своей оси - 25,38 земных суток
        Наклон вращения вокруг своей оси - 7,25о по отношению к эклиптике
        Температура поверхности    - 5500о С
        Спектральный тип - G2 V
        Яркость    - 3,83 х 10 33 . эрг / сек
        Возраст    - 4 600 000 000 лет
        Состав - 92,1% водород, 7,8% Гелий
        Синодический период    - 27,2753 дней
        Период вращения на экваторе    - 26,8 дней
        Период вращения на полюсах - 36 дней
        Скорость относительно ближайших звезд - 19,7 км / с
        Среднее расстояние от Земли    - 149 600 000  (1 астрономическая единица)
        Постоянная величина солнечного излучения, на среднем расстоянии до Земли - 1,365 - 1,369 кВт / м 2
    Солнце является нормальной звездой G2, одной из более  100 миллиардов звезд в нашей галактике.
    Солнце на сегодняшний день является крупнейшим объектом в Солнечной системе. Оно содержит более 99,8% от общей массы Солнечной системы (Юпитер содержит больше остальных планет).
    Мы часто говорим, что Солнце является «обычной» звездой. Это верно в том смысле, что есть много других, подобных ему звезд. Но есть еще много меньших звезд, есть и значительно крупнее. Если все звезды расставить последовательно по массе от больших к меньшим, то Солнце войдет в первые 10% всех звезд. Средний размер звезд, по массе, в нашей галактике, вероятно, менее половины массы Солнца.
    Солнце отражено во многих мифологиях: греки называли его Гелиос  и римляне называли его Сол.
    Солнце, в настоящее время состоит из около 70% водорода  и 28% гелия  по массе, все остальные элементы, в большинстве своем металлы, составляет менее 2% массы Солнца. Состав Солнца медленно изменяется с течением времени, поскольку  Солнце превращает водород в гелий в своем ядре.
    Внешние слои обладают дифференцированным вращением: на экваторе поверхность делает один оборот каждые 25,4 дней, вблизи полюсов, примерно за 36 дней. Это странное поведение связано с тем, что Солнце не является твердым телом, как на Земле. Аналогичные эффекты наблюдаются в газовых планетах Солнечной системы. Дифференцированное вращение распространяется и вниз в недра Солнца, но ядро Солнца вращается как твердое тело.
    Ядро, это, скорее всего 25% радиуса Солнца. Температура ядра 15600000 градусов Кельвина и давление 250 000 000 000 атмосфер. В центре ядра плотность Солнца в 150 раз больше, чем воды.
    Энергетическая мощность Солнца  около 386 000 000 000 млрд. МВт. Каждую секунду около 700 000 000 тонн водорода превращается в  695 000 000 тонн гелия и 5000000 тонн вещества (= 3.86e33 эрг) выделяется в виде энергии гамма-лучей.
    Поверхности Солнца, называется  фотосферой , температура на поверхности около 5800 К. Температура на солнечных пятнах только 3800 К (они выглядят темными по сравнению с окружающими областями Солнца). Размер солнечных пятен может составлять до 50000 км в диаметре. Солнечные пятна вызваны сложным, и пока, досконально не изученным взаимодействием с магнитным полем Солнца.
    Выше поверхности Солнца лежит хромосфера.
    Сильно разреженная область выше хромосферы, называемая короной, она простирается на миллионы километров в пространстве, но видна только во время полного солнечного затмения. Температура короны более 1000000 К.
    По совпадению Луна и Солнце имеют один угловой размер, если смотреть с Земли. Затмения Солнца происходят раз или два в год в конкретных областях Земли.
    Магнитное поле Солнца очень сильное и сложное по строению, магнитосфера Солнца (также известная как гелиосфера) простирается далеко за пределы орбиты Плутона.
    В дополнение к теплу и свету, Солнце испускает поток заряженных частиц (в основном протонов и электронов), известный как солнечный ветер, распространяющийся по всей Солнечной системе со скоростью в 450 км/сек.
    Последние данные с космического аппарата Ulysses , показывают, что во время минимума солнечного цикла, солнечный ветер, испускаемый из полярных полюсов, движется со скоростью 750 километров в секунду, что в два раза меньше скорости солнечного ветра, испускаемого на экваторе.
    В состав солнечного ветра, как представляется, также отличаются в полярных регионах. Во время солнечного максимума, однако, солнечный ветер движется с промежуточной скоростью.
    Солнечный ветер оказывает большое влияние на хвосты комет и даже имеет заметное воздействие на траектории космических кораблей.
    Возраст Солнца  составляет около 4,5 миллиарда лет. С момента своего рождения оно уже истратило около половины водорода в своем ядре. Он будет продолжать излучать тепло еще 5 миллиардов лет. Но, в конце концов, оно исчерпает водородное топливо.
    Солнечная постоянная - суммарная мощность солнечного излучения, проходящего через единичную площадку, ориентированную перпендикулярно потоку, на расстоянии одной астрономической единицы от Солнца вне земной атмосферы. По данным внеатмосферных измерений солнечная постоянная составляет (1365.4 +/-1.3 - оценка 1990г.) 1360.8 (+/-0.5) Вт/м², или 1,959 кал/см²·мин.   
    Солнечная постоянная не является неизменной во времени величиной. Известно, что на её величину влияют два основных фактора: расстояние между Землей и Солнцем, изменяющееся в течение года по причине эллиптичности орбиты Земли (годичная вариация 6,9 % — от 1,412 кВт/м² в начале января до 1,321 кВт/м² в начале июля) и изменения солнечной активности. Это влияние обусловлено, в основном, изменением потока излучения при изменении числа и суммарной площади солнечных пятен, при этом поток излучения меняется сильнее всего в рентгеновском и радиодиапазоне. Поскольку период прямых измерений солнечной постоянной относительно невелик, то её изменение на протяжении 11-летнего цикла солнечной активности (цикла Швабе), по-видимому, не превышает ~10^(−3), доля изменчивости в оптическом диапазоне, обусловленная вкладом солнечных пятен, оценивается ~10^(−4). Для оценки вариаций солнечной постоянной в течение более длительных солнечных циклов (циклы Хейла, Гляйсберга и пр.) данные прямых измерений отсутствуют.
    В соответствии с современными моделями развития Солнца, в долгосрочной перспективе его светимость будет возрастать примерно на 1 % за 110 миллионов лет.
    Освещённость перпендикулярной потоку площадки, расположенной за пределами атмосферы на среднем расстоянии Земли от Солнца, в видимом диапазоне спектра называется световой солнечной постоянной. По оценке В. В. Шаронова середины XX века она равна 135000 люксов. В англоязычной литературе понятию «световая солнечная постоянная» соответствует термин «solar illuminance constant».
    Солнечная энергия дает жизнь всему живому на Земле. Под ее воздействием испаряется вода с морей и океанов, превращаясь в водные капли, образуя туманы и облака. В результате, эта влага вновь выпадает на Землю, создавая постоянный круговорот. Поэтому, мы постоянно наблюдает снег, дождь, иней или росу. Создаваемая солнцем огромная система отопления, позволяет наиболее оптимально распределять тепло по поверхности Земли. Чтобы правильно понимать и использовать эти процессы, необходимо представлять себе источник энергии солнца и то, от чего зависит его влияние на нашу планету.
    Основным видом энергии, выделяемой Солнцем, по праву считается лучистая энергия, оказывающая прямое влияние на все важнейшие процессы, происходящие на Земле. Если сравнивать с ней другие земные энергетические источники, то их запасы бесконечно малы и не позволяют решить всех проблем.
    Из всех звезд, Солнце расположено к Земле ближе всего. По своей структуре оно является газовым шаром, многократно превышающим диаметр и объем нашей планеты. Поскольку размеры газового шара достаточно условны, то его границами считается видимый с Земли солнечный диск.
    Все процессы, происходящие на Солнце, можно наблюдать лишь на его поверхности. Однако, основные реакции протекают в его внутренней части. По сути, это гигантская атомная станция с давлением примерно 100 млрд. атмосфер. Здесь, в условиях сложных ядерных реакций, происходит превращение водорода в гелий. Именно эти реакции образуют основной источник энергии солнца. Внутренняя температура составляет, в среднем, приблизительно 16 млн. градусов.
    Газ, бушующий внутри Солнца, имеет не только сверхвысокую температуру, но и является чрезвычайно тяжелым, обладающим плотностью, многократно превышающей среднюю солнечную плотность. Одновременно, происходит возникновение рентгеновских лучей, которые, по мере приближения к Земле, увеличивают длину своих волн и уменьшают частоту колебаний. Таким образом, они постепенно становятся видимым и ультрафиолетовым светом.
    При отдалении от центра, характер лучистой энергии изменяется, оказывая влияние и на температуру. Происходит ее постепенное снижение сначала до 150 тыс. градусов. С Земли хорошо видна только внешняя солнечная оболочка, так называемая фотосфера. Ее толщина составляет примерно 300 км, а температура верхнего слоя снижается до 5700 градусов.
    Над фотосферой расположена солнечная атмосфера, состоящая из двух частей. Нижний слой носит название хромосферы, а верхний слой, не имеющий границ, представляет собой солнечную корону. Здесь газы разогреваются до нескольких миллионов градусов под действием ударных волн чудовищной силы.
    Task:
    Звезды, их основные характеристики, связь между ними.
    Decision:
    Звезда — массивное самосветящееся небесное тело, состоящее из газа или плазмы, в котором происходят, происходили или будут происходить термоядерные реакции. Ближайшей к Земле звездой является Солнце, другие звёзды на ночном небе выглядят как точки различной яркости, сохраняющие своё взаимное расположение. Звёзды различаются структурой и химическим составом, а такие параметры, как радиус, масса и светимость, у разных звёзд могут отличаться на порядки.
    Самая распространённая схема классификации звёзд — по спектральным классам — основывается на их температуре и светимости. Кроме того, среди звёзд выделяют переменные звёзды, которые меняют свой видимый блеск по различным причинам, с собственной системой классификации. Звёзды часто образуют гравитационно-связанные системы: двойные или кратные системы, звёздные скопления и галактики. Со временем звёзды меняют свои характеристики, так как в их недрах проходит термоядерный синтез, в результате которого меняется химический состав и масса — это явление называется эволюцией звёзд, и в зависимости от начальной массы звезды она может проходить совершенно по-разному.
    Вид звёздного неба привлекал людей с древности, с видом созвездий или отдельных светил на нём были связаны мифы и легенды разных народов, до сих пор он находит отражение в культуре. Ещё со времён первых цивилизаций астрономы составляли каталоги звёздного неба, а в XXI веке существует множество современных каталогов, содержащих различную информацию для сотен миллионов звёзд.
    Благодаря работе астрономов разных стран, за последние десятилетия мы много узнали о развитии звёзд и их эволюции. Все данные получены благодаря наблюдению множества звёзд, находящихся на разных этапах эволюции.
    Основными свойствами звёзд являются:
        светимость (полное количество энергии, излучаемое звездой в единицу времени (L),
        температура поверхности,
        масса,
        радиус.
    Между всеми этими характеристиками существует связь. Эта связь отображена на диаграмме Герцшпрунга - Рассела (Спектр – Светимость представлена на картинке)
    Из этой диаграммы видно, что звёзды создают определённую последовательность. Полоса, идущая с левого верхнего угла в правый нижний, называется "главная последовательность" В верхнем правом углу находятся холодные, но в то же время огромные звёзды, называемые красными гигантами. В левом нижнем углу –"белые карлики". Очень горячие звёзды, но и очень маленькие. Солнце имеет спектральный класс G2.
    Светимость звёзд (L) чаще выражается в единицах светимости Солнца (4x эрг/с). Светимость звезды вычисляют по энергии, достигающей Земли, при условии, если известно расстояние до звезды. По светимости звёзды различаются в очень широких пределах. Большинство звёзд составляют "карлики", их светимость ничтожна иногда даже по сравнению с Солнцем.
    Характеристикой светимости является "абсолютная величина" звезды. Есть ещё понятие "видимая звёздная величина", которая зависит от светимости звезды, цвета и расстояния до неё. В большинстве случаев используют "абсолютную величину", чтобы реально оценить размеры звёзд, независимо как далеко они находятся. Чтобы узнать истинную величину, просто нужно звёзды отнести на какое-то условное расстояние (допустим на 10ПК). Звёзды высокой светимости имеют отрицательные значения. Например, видимая величина солнца -26,8. На расстоянии в 10ПК эта величина будет уже +5 (самые слабые звёзды, видимые невооружённым глазом, имеют величину +6).
    Известные законы термодинамики позволяют нам определить температуру тела, измеряя длину волны в максимуме излучения черного цвета.
    Так, если температура поверхности 3-4 тыс. К, то её цвет красноватый, 6-7 тыс. К - жёлтый, 10-12 тыс. К - белый и голубой. В таблице ниже приведены интервалы длин волн, соответствующие различным цветам, которые можно наблюдать в оптическом диапазоне.
    Цвет и длина волны:
        Цвет - Диапазон длин волн, А
        Фиолетовый, синий    3900 - 4550
        Голубой    4550 - 4920
        Зеленый    4920 - 5570
        Желтый    5570 - 5970
        Оранжевый    5970 - 6220
        Красный    6220 - 7700
    Последовательность спектров звёзд, получающихся при непрерывном изменении их поверхностных слоёв, обозначается следующими буквами: O, B, A, F, G, K, M (от горячих к холодным). Каждый из этих классов подразделяется ещё на 10 подклассов (пример B1, B2, B3…). Четкая классификация спектрального класса звезд представлена в следующей таблице
    Также звёзды разделяются по массе, но в более узких пределах в отличие от светимости (которая может различаться и в 1000 раз). Очень мало звёзд, имеющих массу в 10 раз больше или меньше Солнечной.
    Ученые, изучая распределение звезд по массам и учитывая время жизни звезд различной массы, распределяют звезды по массам в момент их рождения. Ими установлено, что вероятность рождения звезды определенной массы, очень приближенно, обратно пропорциональна квадрату массы (функция Солпитера): F(M) ~ M-7/3.
    Это общая закономерность. Во многих областях Вселенной наблюдается дефицит массивных звезд. В тех областях, где молодых звезд много, звезд маленькой массы меньше. Исследователи полагают, что первые звезды были яркими, массивными и короткоживущими.
    Радиус звёзд может очень сильно отличаться, а также меняться… С появлением возможности проводить спектральный анализ, появились сведения о химическом составе звезды. По химическому составу звёзды представляют собой водородные и гелиевые плазмы, остальных элементов гораздо меньше. На 10тыс атомов водорода приходится 1000 атомов гелия, 5 атомов кислорода, 2 атома азота, 1 углерода и 0,5 железа. Других элементов ещё меньше….
    Делались попытки построить теоретическую эволюцию звёзд вдоль главной последовательности на основе представлений о потери масс этими звёздами, но эти попытки оказались неудачными.
    Время пребывания звёзд на главной последовательности зависит от их первоначальной массы. Чем больше излучение и масса звезды, тем скорее она израсходует свой водород.
    Любая видимая звезда представляет собой вращающийся шар раскаленного газа. От массы газа зависит сила тяготения звезды, плотность , размеры, возможные температуры и время существования.
    Образование звезд имеет следующие этапы:
    На первом этапе существования газопылевое облако, в котором частички газа и пыли начинают притягиваться друг к другу.
    В процессе этого притяжения облако начинает разогреваться.
    При достижении температуры в ядре звезды в 10млн градусов Цельсия начинается термоядерная реакция. Водород превращается в гелий, что сопровождается излучением во всех частях спектра.
    Благодаря этому излучению звезда становится звездой, т.е. видимым космическим объектом. После начала термоядерной реакции звезда проходит следующие этапы существования:
        нормальные или желтые звезды. Находятся на этапе выгорания водорода. В нормальных звездах по мере выгорания водорода формируется гелиевое ядро, которое отделено от водородной оболочки зоной конвенции и излучения. Выгорание водорода также сопровождается потерей массы звезды, а следовательно, уменьшением силы гравитации, стягивающей вещество звезды к центру. Когда сила излучения превышает силу гравитации, происходит расслоение гелиевого ядра и водородной оболочки, начинающей удаляться от ядра. Звезда переходит в состояния сверхгиганта или красного гиганта;
       в течение второго этапа (красный гигант) гелиевое ядро звезды сжимается, а размеры звезды значительно увеличиваются за счет того, что водородная оболочка удаляется от ядра. Масса красного гиганта начинает сокращаться  не только из-за горения водорода, но из-за потерь вещества на внешней оболочке звезды.  Когда внешний слой истощается, он рассеивается в космическом пространстве, и от звезды остается только горячее гелиевое ядро. Звезда переходит на этап существования в виде белого карлика;
        - гравитационное сжатие ядра продолжается на этапе белого карлика. Первоначально поверхность белого карлика имеет очень большую температуру (до десятков тысяч градусов), но затем быстро остывает. Диаметр белого карлика составляет лишь 5-10тыс. км., т.е. сравним с диаметром Земли.
       на четвертом этапе продолжается сжатие ядра и ускорение вращения вокруг своей оси приводит к его уплотнению и схлопыванию атомов. Электроны соединяются с протонами и образуют нейтроны. Белый карлик превращается в нейтронную звезду. Размер такой звезды составляет лишь несколько десятков километров, скорость вращения вокруг оси – несколько сотен оборотов в минуту. Колоссальная плотность нейтронной звезды приводит к такому искривлению пространства вокруг нее, что вещество звезды стремится к сжатию в точку. Нейтронная звезда превращается в черную дыру;
       этап черной дыры характеризуется такой концентрацией массы в пространстве,  что в одной чайной ложке оказалось бы 100 млн метрических тонн вещества. Все объекты и излучения, находящиеся в зоне гравитационного действия черной дыры, стремятся к ней. Размер черной дыры составляет 2-3 км. Конечная стадия существования черных дыр – взрыв и рассеивание вещества.  На этой стадии существования звезды можно считать окончательно завершенным.
    Скорость прохождения звездой перечисленных этапов существования зависит от ее размеров. Большие звезда проходят все перечисленные этапы быстрее.
    В настоящее время все звезды, находящиеся на первом этапе существования (нормальные звезды), разделены на семь классов по массе, температуре и цвету.
        Первый класс представляют голубые гиганты – очень большие (в 50-60 раз массивнее солнца), очень яркие и очень горячие звезды (температура поверхности около 35 тыс. градусов).
        Второй класс – бело-голубые звезды с температурой поверхности около 20 тыс. градусов.
        Третий класс – белые звезды с температурой около 10 тыс. градусов.
        Четвертый класс – желто-белые звезды с температурой около 7500 градусов.
        Пятый класс – желтые звезды (в этот класс входит солнце) с температурой около 6000 градусов.
        Шестой класс составляют оранжевые звезды с температурой 4700 градусов.
        Седьмой класс – красные карлики с температурой 3000 градусов.
    Все перечисленные классы звезд образуют Главную последовательность, т.е. распределение звезд в порядке уменьшения их температуры и яркости.
    Помимо стабильных звезд существуют звезды в нестабильном периоде развития. К ним относятся цефеиды и мириды. Яркость данного типа звезд меняется от 1 до 100 дней (цефеиды) и от нескольких месяцев до 2 лет (мириды). Колебания яркости могут быть связаны с выбросами и поглощениями газа, периодическим расширением и сжатием.
    Теория эволюции звезд пробуждает интерес в связи с отсутствием в официальных изданиях причин, вызывающих те или иные процессы в ходе эволюции К таким беспричинным процессам можно отнести сжатие в звезду газопылевого облака (первоначальный коллапс), постоянное сжатие звезды во времени до состояния белого карлика и нейтронной звезды, электронизация и нейтронизация вещества, спонтанное сжатие (гравитационный коллапс) в черную дыру, судьба черной дыры. Для поиска ответа на эти вопросы надо кратко изложить действующую теорию эволюции звезд с попутным изложением возможных причин происходящих процессов.
    1.Итак, образование звезд начинается: по одним источникам - с дифференциации газопылевого облака, то есть, с его расслоения и уплотнения его частей, на которые в дальнейшем происходит конденсация газа и пыли; при этом хочется думать, что дифференциация облака не может происходить самопроизвольно, для этого нужны какие-то внешние силы, ими могут быть гравитационные поля центра галактики, рукавов и в целом галактики.
    По другим источникам образование звезды начинается со сжатия облака (первоначальный коллапс).однако известно, что газ и пыль имеют свойство неограниченно расширяться при условии, что масса "пылинок" не больше массы планеты Марс, не способной удержать сколь либо заметную газовую среду. Следовательно сжатие облака может произойти также под воздействием внешних сил - тех же гравитационных полей галактики. При этом теорией эволюции не приводятся расчеты параметров облака - объема, массы, плотности -способных привести к сжатию облака.
    Нельзя исключить влияния на уплотнение облака и такой причины, как эффект сепарации: легкие атомы водорода в результате вращения галактики
    Устремляются к ее центру, повышая плотность облака. Кроме того водород, имея температуру плавления минус 259.1 градуса Цельсия и кипения минус 252.6 градуса Цельсия может находиться в состоянии, подобном пару. Атомы, имея в этом состоянии минимальную энергию, находясь в невесомости, могут группироваться в облака подобно тому, как группируется в облака водяной пар в атмосфере Земли. Эти облака могут служить собирателями галактической пыли
    2.Известно, что газовая среда сосредоточена вокруг центра галактики в главной ее плоскости. Надо полагать, что она и является материалом для строительства звезд, другого строительного материала в галактике нет. Если из нее создаются звезды, то почему они рассредоточены по всей галактике? Возникает мысль о том, что звезды отходят от центра галактики в результате описанного ранее взаимодействия гравитационных полей вращающихся систем. Но поскольку звезды отходят от ядра и при этом стареют, то на периферии галактики должны быть сосредоточены старые звезды - белые карлики, нейтронные звезды, виртуальные черные дыры, и чем дальше от центра, тем старее.
    Если возраст Вселенной, а следовательно и галактик, оценивается наукой в 20 миллиардов лет, а продолжительность жизни звезд в пределах 8-12 миллиардов лет, то можно подсчитать количество в галактике молодых и старых звезд. Полагая, что звезды, образовавшиеся за первые 10 миллиардов лет после "большого взрыва" уже ушли в небытие, тогда половина из здравствующих звезд, возникших а последующие 5 миллиардов лет, будут старыми, а в самые последние 5 миллиардов лет, будут молодыми.
    Получили фифти-фифти. Этот вывод не согласуется с наблюдаемыми данными о наличии в галактике всего 3-10% карликовых, то есть, старых звезд, что ставит под сомнение достоверность взрывной модели Вселенной и более согласуется с бесконечной в пространстве и во времени Вселенной.
    3. До каких пор облако сжимается или конденсируется в звезду? Указанный процесс длится до состояния, при котором достигается равновесие сил гравитации и упругости, когда начинают действовать законы Гука о линейной зависимости сил упругости и деформаций и Ньютона о равенстве действия и противодействия. Звезда переходит в равновесное состояние. Наукой оно оценивается как гидродинамическое и тепловое равновесие. Звезда достигает такой плотности и температуры, при которой в ее недрах начинается водородный цикл - образование из атомов водорода ядер и атомов гелия.
    Остается неясным вопрос: почему водородный цикл, представляющий собой спонтанную ядерную реакцию, длится многие миллиарды лет? Ответы напрашиваются такие.
    В центре масс звезды давление и температура вопреки научным представлениям не максимальны, а минимальны, поскольку все возможные силы, действующие там на единицу массы, уравновешивают друг друга. Вокруг центра масс в плоскости экватора образуется холодная и, возможно пустая дискообразная полость, поэтому ядерные реакции протекают не по всему объему звезды, а в некоторой, удаленной от центра кольцеобразной сфере внутри звезды. Это предположение подтверждает тот факт, что измеренный испускаемый солнцем поток нейтрино почти на порядок меньше расчетного. В этой сфере происходит постоянный двунаправленный процесс синтеза ядер из протонов и их распада на протоны с выделением электронов, позитронов, фотонов, нейтрино, при этом наиболее легко соединяются протоны с электронами с образованием атомов водорода.
    Звезда представляет своего рода огромный котел, порождающий и сжигающий водород, Масса звезды теряется не столько за счет горения водорода, сколько за счет электромагнитного излучения и звездного ветра, уносящего протоны, нейтроны, электроны и другие частицы.. Однако равновесие звезды сохраняется, поскольку действуют законы Гука и Ньютона. По-видимому параллельно или с какого-то этапа равновесного состояния звезды осуществляется нуклеосинтез.
    4. Когда же и почему же звезда вновь начинает сжиматься? Ведь на описанном выше этапе эволюции равновесных (нормальных) звезд не может происходить какого-то заметного их сжатия, однако реальность белых карликов, нейтронных звезд убеждают в реальности процессов сжатия, причем малое количество белых карликов и нейтронных звезд наводит на мысль об их недолговечности, они как этап относительно быстрого процесса: нормальная звезда - белый карлик - нейтронная звезда - черная дыра (?)-уход в небытие. Причины происходящему процессу надо искать. В частности в физике известно и хорошо изучено такое явление, как усталость материалов - изменение механических и физических свойств вещества под длительным воздействием. Это состояние выражается в таких явлениях, как текучесть, сыпучесть, ползучесть.
    Именно усталость звездного вещества может вызывать такие процессы, как нейтронизацию, появление электронного вырожденного газа, нейтронного вырожденного газа, релятивистского электронного газа и еще в большей степени - аннигиляцию вещества. Нельзя исключать того, что эти процессы и приводят к исчезновению звезды.
    Надо также учитывать при этом и то обстоятельство, что если в этот период эволюции изменяются механические и физико-химические свойства вещества, то будут изменяться и все физические законы, в том числе упомянутые законы Гука и Ньютона, а также продолжительность жизни атомов и всех микрочастиц.
    5.Есть ли двойные звезды? Думается, что бывают, но редко. Система из двойных звезд, как уже отмечалось ранее, возможна, если масса центральной звезды намного больше массы звезды-спутника. Редки они потому, что недолговечны, поскольку звезда-спутник всегда либо приближается к центральной звезде, либо отдаляется от нее. Если же массы обеих звезд близки, то обе они, не имея общего стабильного центра масс, разлетятся в силу своей инерции, или сольются в нежном объятии, создав красивое багряное облачко на небеси. Анализ системы Земля-Луна, единственной системы, в которой массы входящих объектов не шибко намного отличаются друг от друга, хорошо подтверждают вышесказанное.
    Можно было бы рассмотреть случай двойной звезды с центральной массивной черной дырой, и карликовой звездой-спутником, тогда было бы можно обнаружить эту двойную звезду за определенное не столь продолжительное время по характеру траектории звезды-спутника. Но пока черные дыры не обнаружены, есть лишь ненадежное косвенное доказательство по обнаруженной звезде с хвостом, который якобы является следствием втягивания в себя черной дырой части звездного вещества звезды-спутника.
    Простейшие рассуждения исключают такую возможность. Поле тяготения звезды, черная она или белая, зависит только от ее массы, а поскольку расстояния между звездами намного больше их размеров, в том числе первоначальных размеров черной дыры, постольку воровство массы звезды-спутника исключается, Гравитационного коллапса не может быть еще и потому, что спонтанное сжатие неизбежно приведет и к спонтанному ускорению вращения звезды, что привело бы к ее разрушению.
    Мы сегодня не знаем, как ведет себя на стадии усталости звездное вещество и какие законы в этот период действуют. Ясно одно: если звезда рождается, то она и умирает, исчезая из поля наших ощущений.
    Газопылевая среда в галактике не может образовываться и пополняться только из остатков взрывающихся и исчезающих звезд. Такое представление приводит к выводу о постоянной потере галактикой своей массы, а это значит, что сама галактика не находится в равновесном состоянии, а также убывает плотность Вселенной. Более вероятным является представление, что галактики и Вселенная находятся в состоянии динамического равновесия и живут по закону: "где, когда, чего и сколько убыло (прибыло), там, или в другом месте, в то же, или в другое время, столько же, того же самого или чего- либо другого, эквивалентного ему, прибыло (убыло)".Вселенная представляет собой некий насыщенный раствор, в котором идет постоянный двунаправленный процесс: часть невещественной материи выпадает в ощущаемый осадок, в основном это атомы водорода - кирпичики мироздания, часть ощущаемой материи растворяется, исчезая из сферы наших ощущений. Подобные идеи фигурируют в ученом мире, согласно которым существуют кроме ощущаемой материи такие неощущаемые ее виды, как "черная" материя, "черная" энергия.
    Task:
    Экзопланета, методы их поиска
    Decision:
    Экзопланета , или внесолнечная планета, — планета, находящаяся вне Солнечной системы. Долгое время задача обнаружения планет возле других звёзд оставалась неразрешённой, так как планеты чрезвычайно малы и тусклы по сравнению со звёздами, а сами звёзды находятся далеко от Солнца (ближайшая — на расстоянии 4,24 световых года). Первые экзопланеты были обнаружены в конце 1980-х годов.
    Сейчас такие планеты стали открывать благодаря усовершенствованным научным методам, зачастую на пределе их возможностей. По состоянию на 7 августа 2021 года достоверно подтверждено существование 4812 экзопланет в 3558 планетных системах, из которых в 791 имеется более одной планеты. Количество надёжных кандидатов в экзопланеты значительно больше. Так, по проекту «Кеплер» на март 2021 года число кандидатов — 2366, а по проекту «TESS» на конец марта 2021 года — более 2200 кандидатов, однако для получения ими статуса подтверждённых планет требуется их повторная регистрация с помощью наземных телескопов.
    Общее количество экзопланет в галактике Млечный Путь оценивается не менее чем в 100 миллиардов, из которых от 5 до 20 миллиардов, возможно, являются «землеподобными». Также, согласно текущим оценкам, около 34 % солнцеподобных звёзд имеют в обитаемой зоне планеты, сравнимые с Землёй. Общее количество планет вне Солнечной системы, напоминающих Землю и обнаруженных по состоянию на август 2016 года, составляет 216. В конце октября 2020 года ученые подсчитали общее число возможно обитаемых экзопланет в галактике Млечный путь, их число составляет около 300 миллионов.
    В 2021 году была обнаружена экзопланета в галактике М51. Размер планеты примерно равен Сатурну, радиус орбиты около 2 а.е. Открытие пока не подтверждено другими исследователями. Пока это первая из почти 5000 экзопланет, найденная вне нашей галактики Млечный Путь.
    Подавляющее большинство открытых экзопланет обнаружено с использованием различных непрямых методик детектирования, а не визуального наблюдения. Большинство известных экзопланет — газовые гиганты и более походят на Юпитер, чем на Землю. Это объясняется ограниченностью методов обнаружения (легче обнаружить короткопериодичные массивные планеты). Ближайшая к Земле экзопланета — Проксима Центавра b.
        Метод Доплера — спектрометрическое измерение радиальной скорости звезды. Самый распространённый метод. Позволяет обнаружить планеты с массой не меньше нескольких масс Земли, расположенные в непосредственной близости от звезды, и планеты-гиганты с периодами до примерно 10 лет. Планета, обращаясь вокруг звезды, как бы раскачивает её, и мы можем наблюдать доплеровское смещение спектра звезды. Метод позволяет определить амплитуду колебаний радиальной скорости для пары «звезда — одиночная планета», массу планеты, период обращения, эксцентриситет и нижнюю границу значения массы экзопланеты Мi*sin(a). Угол a между нормалью к орбитальной плоскости планеты и направлением на Землю современные методы измерить не позволяют.
        Транзитный метод — метод, основанный на наблюдении уменьшения светимости звезды при прохождении планеты на её фоне. Позволяет определить размеры планеты, а в сочетании с методом Доплера — плотность планеты. Даёт информацию о наличии атмосферы и её составе. Следует понимать, что этим методом можно обнаружить лишь те планеты, орбита которых лежит в одной плоскости с точкой наблюдения.
        Метод гравитационного микролинзирования. Между наблюдаемым объектом (звездой, галактикой) и наблюдателем на Земле должна быть другая звезда, выступающая в роли линзы и фокусирующая своим гравитационным полем свет наблюдаемой звёздной системы. Если у звезды-линзы есть планеты, то появляется асимметричная кривая блеска, и, возможно, отсутствие ахроматичности. У этого метода крайне ограниченное применение. Метод чувствителен к планетам с малой массой, вплоть до земной.
        Астрометрический метод — метод, основанный на изменении собственного движения звезды под гравитационным воздействием планеты. С помощью астрометрии были уточнены массы некоторых экзопланет, в частности, Эпсилона Эридана b. Будущее этого метода связано с орбитальными миссиями, такими, как SIM.
        Радионаблюдение пульсаров. Если вокруг пульсара вращаются планеты, то излучаемый пульсаром сигнал имеет осциллирующий характер. Мощные направленные пучки излучения пульсара образуют в пространстве конические поверхности. Если на такой поверхности окажется Земля, тогда возможно зарегистрировать данное излучение. На март 2010 года у двух пульсаров найдено пять планет (3+2).
        Метод прямого наблюдения — метод получения прямых изображений экзопланет посредством изолирования экзопланет от света их звезды. С помощью метода получено изображение четырёх планет системы HR 8799. Так как метод даёт наилучшие результаты для планет, удалённых от своей звезды на ~10—100 а.е. и горячих из-за тепла, оставшегося после их образования, метод применяется для поиска планет около молодых звёзд. Предполагается, что космический телескоп имени Джеймса Уэбба, благодаря огромному зеркалу (диаметром 6,5 м) и высокой разрешающей способности, будет способен напрямую обнаруживать экзопланеты, а также подробно изучать состав их атмосфер
    Task:
    Земля как планета Солнечной системы. Строение Земли. Нейтральная атмосфера, ионосфера, магнитосфера.
    Decision:
    Земля это планета Солнечной системы, которая является частью Вселенной, состоящей из огромного количества галактик. Галактика, к которой относится наша планета называется Млечный путь. Если посмотреть на ночное небо, то на нём можно увидеть белую полоску, которая внешне напоминает дорогу из разлитого молока. Это и есть Млечный путь.
    Земля имеет в первом приближении форму шара (экваториальный диаметр — 12 754 км, а полярный — около 12 711 км[1]) и состоит из нескольких оболочек, выделенных по химическим или реологическим свойствам. В центре расположено внутреннее ядро с радиусом около 1250 км, которое в основном состоит из железа и никеля. Далее идёт внешнее ядро (состоящее в основном из железа) с толщиной около 2200 км. Над ним лежат 2900 км вязкой мантии, состоящей из силикатов и оксидов, а ещё выше — довольно тонкая твёрдая кора. Она тоже состоит из силикатов и оксидов, но обогащена элементами, которые не встречаются в мантийных породах. Представления о внутреннем строении Земли основываются на топографических, батиметрических и гравиметрических данных, наблюдениях горных пород в обнажениях, образцах, поднятых на поверхность с больших глубин в результате вулканической активности, анализе сейсмических волн, которые проходят сквозь Землю, и экспериментах с кристаллическими твёрдыми телами при давлениях и температурах, характерных для глубоких недр Земли.
    Недра Земли можно делить на слои по их механическим (в частности реологическим) или химическим свойствам. По механическим свойствам выделяют литосферу, астеносферу, мезосферу, внешнее ядро и внутреннее ядро. По химическим свойствам Землю можно разделить на земную кору, верхнюю мантию, нижнюю мантию, внешнее ядро и внутреннее ядро.
    Геологические слои Земли находятся на следующих глубинах под поверхностью
    Слои Земли были определены косвенно с помощью измерения времени распространения преломлённых и отражённых сейсмических волн, созданных землетрясениями. Ядро не пропускает поперечные волны, а скорость распространения волн отличается в разных слоях. Изменения в скорости сейсмических волн между различными слоями вызывает их преломление благодаря закону Снелла.
    Средняя плотность Земли 5515 кг/м^3. Поскольку средняя плотность вещества поверхности составляет всего лишь около 3000 кг/м^3, мы должны заключить, что плотные вещества существуют в ядре Земли. Ещё одно доказательство высокой плотности ядра основано на сейсмологических данных. Следует учитывать и уплотнение вещества давлением. Имеются данные лабораторных исследований с выводом об изменениях плотности веществ более плотной упаковкой атомов, например, железо уже при 1 млн атмосфер уплотняется примерно на 30%. "...Плотность верхней мантии начиная от значения 3,2 г/см^3 на поверхности постепенно возрастает с глубиной вследствие сжатия её вещества... ...В нижней мантии существенных перестроек в кристаллическом строении вещества больше не происходит, поскольку все окислы в этой геосфере уже находятся в состоянии предельно плотной упаковки атомов и сжатие мантийного вещества происходит только благодаря сжатию самих атомов."
    Сейсмические измерения показывают, что ядро делится на две части — твёрдое внутреннее ядро радиусом ~1220 км и жидкое внешнее ядро радиусом ~3400 км
    Мантия Земли простирается до глубины 2890 км, что делает её самым толстым слоем Земли. Давление в нижней мантии составляет около 140 ГПа (1,4·10^6 атм). Мантия состоит из силикатных пород, богатых железом и магнием по отношению к вышележащей коре. Высокие температуры в мантии делают силикатный материал достаточно пластичным, чтобы могла существовать конвекция вещества в мантии, выходящего на поверхность через разломы в тектонических плитах. Плавление и вязкость вещества зависят от давления и химических изменений в мантии. Вязкость мантии разнится от 10^21 до 10^24 Па·с в зависимости от глубины. Для сравнения, вязкость воды составляет около 10^(−3) Па·с, а песка — 10^7 Па·с.
    Толщина земной коры разнится от 5 до 70 км в глубину от поверхности. Самые тонкие части океанической коры, которые лежат в основе океанических бассейнов (5—10 км), состоят из плотной железо-магниевой силикатной породы, такой как базальт.
    Ниже коры находится мантия, которая отличается составом и физическими свойствами — она более плотная, содержит в основном тугоплавкие элементы.
    Нейтросфера, или нейтральная атмосфера, — нижняя часть атмосферы Земли, в которой незаряженные (электрически нейтральные) частицы воздуха преобладают над ионами (электрически заряженными частицами).
    Нейтросфера занимает наиболее плотный слой атмосферы Земли и переходит в ионосферу, по разным оценкам, на высоте около 50 км, 70-90 км и до 100 км, при этом граница зависит от места.
    Нейтросфера состоит из тропосферы, стратосферы и частично мезосферы. Нейтральные молекулы атмосферных газов в ней практически не рассеивают излучение частотой до 15 ГГц.
    Ионосфера, в общем значении — слой атмосферы планеты, сильно ионизированный вследствие облучения космическими лучами. У планеты Земля это верхняя часть атмосферы, состоящая из мезосферы, мезопаузы и термосферы, ионизированная главным образом облучением Солнца.
    Ионосфера Земли (здесь и далее речь будет идти об Ионосфере нашей планеты) состоит из смеси газа нейтральных атомов и молекул (в основном азота N2 и кислорода О2) и квазинейтральной плазмы (число отрицательно заряженных частиц лишь примерно равно числу положительно заряженных). Степень ионизации становится существенной уже на высоте 60 километров.
    Магнитосфера (от «магнитная сфера») — область пространства вокруг небесного тела, в которой поведение окружающей тело плазмы определяется магнитным полем этого тела.
    Иное определение: магнитосфе́ра — область пространства вокруг планеты или другого намагниченного небесного тела, которая образуется, когда поток заряженных частиц, например, солнечного ветра, отклоняется от своей первоначальной траектории под воздействием внутреннего магнитного поля этого тела.
    Форма и размеры магнитосферы определяются силой внутреннего магнитного поля этого небесного тела и давлением окружающей плазмы (солнечного ветра). Все планеты, имеющие собственное магнитное поле, обладают магнитосферой: Земля, Юпитер, Сатурн, Уран и Нептун. Меркурий и Марс обладают очень слабыми магнитосферами, а также Ганимед, один из спутников Юпитера (но его магнитосфера целиком находится в пределах магнитосферы Юпитера, что приводит к их сложным внутренним взаимодействиям). Ионосферы слабо намагниченных планет, как например Венера, частично отклоняют поток солнечного ветра, но они не имеют магнитосферы как таковой.
    Термин магнитосфера также используется для описания регионов, где доминирует магнитное поле других небесных тел, например звёзд, пульсаров и пр. 
    Task:
    Строение солнечной системы. Виды объектов, составляющих солнечную систему. Происхождение солнечной системы.
    Decision:
    Солнечная система — планетная система, включает в себя центральную звезду — Солнце — и все естественные космические объекты, вращающиеся вокруг Солнца. Она сформировалась путём гравитационного сжатия газопылевого облака примерно 4,57 млрд лет назад
    Центральным объектом Солнечной системы является Солнце — звезда главной последовательности спектрального класса G2V, жёлтый карлик. В Солнце сосредоточена подавляющая часть всей массы системы (около 99,866 %), оно удерживает своим тяготением планеты и прочие тела, принадлежащие к Солнечной системе[22]. Четыре крупнейших объекта — газовые гиганты — составляют 99 % оставшейся массы (при этом большая часть приходится на Юпитер и Сатурн — около 90 %).
    Большинство крупных объектов, обращающихся вокруг Солнца, движутся практически в одной плоскости, называемой плоскостью эклиптики. В то же время кометы и объекты пояса Койпера часто обладают большими углами наклона к этой плоскости.
    Все планеты и большинство других объектов обращаются вокруг Солнца в одном направлении с вращением Солнца (против часовой стрелки, если смотреть со стороны северного полюса Солнца). Есть исключения, такие как комета Галлея. Самой большой угловой скоростью обладает Меркурий — он успевает совершить полный оборот вокруг Солнца всего за 88 земных суток. А для самой удалённой планеты — Нептуна — период обращения составляет 165 земных лет.
    Бо́льшая часть планет вращается вокруг своей оси в ту же сторону, что и обращается вокруг Солнца. Исключения составляют Венера и Уран, причём Уран вращается практически «лёжа на боку» (наклон оси около 90°). Для наглядной демонстрации вращения используется специальный прибор — теллурий.
    Многие модели Солнечной системы условно показывают орбиты планет через равные промежутки, однако в действительности, за малым исключением, чем дальше планета или пояс от Солнца, тем больше расстояние между её орбитой и орбитой предыдущего объекта. Например, Венера приблизительно на 0,33 а.е. дальше от Солнца, чем Меркурий, в то время как Сатурн на 4,3 а.е. дальше Юпитера, а Нептун на 10,5 а.е. дальше Урана. Были попытки вывести корреляции между орбитальными расстояниями (например, правило Тициуса — Боде), но ни одна из теорий не стала общепринятой.
    Орбиты объектов вокруг Солнца описываются законами Кеплера. Согласно им, каждый объект обращается по эллипсу, в одном из фокусов которого находится Солнце. У более близких к Солнцу объектов (с меньшей большой полуосью) больше угловая скорость вращения, поэтому короче период обращения (год). На эллиптической орбите расстояние объекта от Солнца изменяется в течение его года. Ближайшая к Солнцу точка орбиты объекта называется перигелий, наиболее удалённая — афелий. Каждый объект движется быстрее всего в своём перигелии и медленнее всего в афелии. Орбиты планет близки к кругу, но многие кометы, астероиды и объекты пояса Койпера имеют сильно вытянутые эллиптические орбиты.
    Большинство планет Солнечной системы обладают собственными подчинёнными системами. Многие окружены спутниками, некоторые из спутников по размеру превосходят Меркурий. Большинство крупных спутников находятся в синхронном вращении, одна их сторона постоянно обращена к планете. Четыре крупнейшие планеты — газовые гиганты — обладают также кольцами, тонкими полосами крошечных частиц, обращающимися по очень близким орбитам практически в унисон.
    Солнце - звезда Солнечной системы и её главный компонент. Его масса (332 900 масс Земли) достаточно велика для поддержания термоядерной реакции в его недрах, при которой высвобождается большое количество энергии, излучаемой в пространство в основном в виде электромагнитного излучения, максимум которого приходится на диапазон длин волн 400—700 нм, соответствующий видимому свету.
    Межпланетная среда - Наряду со светом, Солнце излучает непрерывный поток заряженных частиц (плазмы), известный как солнечный ветер. Этот поток частиц распространяется со скоростью примерно 1,5 млн км в час, наполняя околосолнечную область и создавая у Солнца некий аналог планетарной атмосферы (гелиосферу), которая имеется на расстоянии по крайней мере 100 а.е. от Солнца. Она известна как межпланетная среда. Проявления активности на поверхности Солнца, такие как солнечные вспышки и корональные выбросы массы, возмущают гелиосферу, порождая космическую погоду. Крупнейшая структура в пределах гелиосферы — гелиосферный токовый слой; спиральная поверхность, созданная воздействием вращающегося магнитного поля Солнца на межпланетную среду.
    Внутренняя область Солнечной системы - Внутренняя часть включает планеты земной группы и астероиды. Состоящие главным образом из силикатов и металлов, объекты внутренней области относительно близки к Солнцу, это самая малая часть системы — её радиус меньше, чем расстояние между орбитами Юпитера и Сатурна
    Планеты земной группы - Меркурий, Венера, Земля (Луна), Марс (Фобос и Деймос) Четыре ближайшие к Солнцу планеты, называемые планетами земной группы, состоят преимущественно из тяжёлых элементов, имеют малое количество (0—2) спутников, у них отсутствуют кольца. В значительной степени они состоят из тугоплавких минералов, таких как силикаты, которые формируют их мантию и кору, и металлов, таких как железо и никель, которые формируют их ядро. У трёх из этих планет — Венеры, Земли и Марса — имеется атмосфера; у всех есть ударные кратеры и тектонические детали рельефа, такие как рифтовые впадины и вулканы.
    Пояс астероидов - занимает орбиту между Марсом и Юпитером, между 2,3 и 3,3 а.е. от Солнца. Выдвигались, но в итоге не были подтверждены гипотезы о существовании планеты между Марсом и Юпитером (например, гипотетической планеты Фаэтон), которая на ранних этапах формирования Солнечной системы разрушилась так, что её осколки стали астероидами, сформировавшими пояс астероидов. Согласно современным воззрениям, астероиды — это остатки формирования Солнечной системы (планетозималей), которые были не в состоянии объединиться в крупное тело из-за гравитационных возмущений Юпитера.
    Церера (2,77 а.е.) — карликовая планета и крупнейшее тело пояса астероидов. Церера имеет диаметр немногим менее 1000 км и достаточную массу, чтобы под действием собственной гравитации поддерживать сферическую форму. После открытия Цереру классифицировали как планету, однако поскольку дальнейшие наблюдения привели к обнаружению поблизости от Цереры ряда астероидов, в 1850-х её отнесли к астероидам. Повторно она была классифицирована как карликовая планета в 2006 году.
    Внешняя область Солнечной системы - является местом нахождения газовых гигантов и их спутников, а также транснептуновых объектов, астероидно-кометно-газовых пояса Койпера, Рассеянного диска и облака Оорта. Орбиты многих короткопериодических комет, а также астероидов-кентавров, также проходят в этой области. Твёрдые объекты этой области из-за их большего расстояния от Солнца, а значит, гораздо более низкой температуры, содержат льды воды, аммиака и метана. Есть гипотезы о существовании во внешней области планеты Тюхе и, возможно, каких-либо других «Планет X», а также звезды-спутника Солнца Немезиды.
    Планеты-гиганты - Юпитер (спутники, кольца), Сатурн (спутники, кольца), Уран (спутники, кольца), Нептун (спутники, кольца) - Четыре планеты-гиганта, также называемые газовыми гигантами, все вместе содержат 99 % массы вещества, обращающегося на орбитах вокруг Солнца. Юпитер и Сатурн преимущественно состоят из водорода и гелия; Уран и Нептун обладают бо́льшим содержанием льда в их составе. Некоторые астрономы из-за этого классифицируют их в собственной категории — «ледяные гиганты». У всех четырёх планет-гигантов имеются кольца, хотя только кольцевая система Сатурна легко наблюдается с Земли.
    Кометы - малые тела Солнечной системы, обычно размером всего в несколько километров, состоящие главным образом из летучих веществ (льдов). Их орбиты имеют большой эксцентриситет, как правило, с перигелием в пределах орбит внутренних планет и афелием далеко за Плутоном. Когда комета входит во внутреннюю область Солнечной системы и приближается к Солнцу, её ледяная поверхность начинает испаряться и ионизироваться, создавая кому — длинное облако из газа и пыли, часто видимое с Земли невооружённым глазом.
    Кентавры - ледяные кометоподобные объекты с большой полуосью орбиты, большей, чем у Юпитера (5,5 а.е.), и меньшей, чем у Нептуна (30 а.е.). У крупнейшего из известных кентавров, Харикло, диаметр приблизительно равен 250 км. Первый обнаруженный кентавр, Хирон, также классифицирован как комета (95P), из-за того что по мере приближения к Солнцу у него возникает кома, как и у комет.
    Транснептуновые объекты - Пространство за Нептуном, или «регион транснептуновых объектов», всё ещё в значительной степени не исследовано. Предположительно, оно содержит только малые тела, состоящие главным образом из камней и льда. Этот регион иногда также включают во «внешнюю Солнечную систему», хотя чаще этот термин используют, чтобы обозначать пространство за поясом астероидов и до орбиты Нептуна.
    Пояс Койпера -  область реликтов времён образования Солнечной системы, является большим поясом осколков, подобным поясу астероидов, но состоит в основном изо льда. Простирается между 30 и 55 а.е. от Солнца. Составлен главным образом малыми телами Солнечной системы, но многие из крупнейших объектов пояса Койпера, такие как Квавар, Варуна и Орк, могут быть переклассифицированы в карликовые планеты после уточнения их параметров. По оценкам, более 100 000 объектов пояса Койпера имеют диаметр больше 50 км, но полная масса пояса равна только одной десятой или даже одной сотой массы Земли. Многие объекты пояса обладают множественными спутниками, и у большинства объектов орбиты располагаются вне плоскости эклиптики.
    Плутон - карликовая планета, крупнейший известный объект пояса Койпера. После обнаружения в 1930 году считался девятой планетой; положение изменилось в 2006 году с принятием формального определения планеты. У Плутона умеренный эксцентриситет орбиты с наклонением в 17 градусов к плоскости эклиптики, и он то приближается к Солнцу на расстояние 29,6 а.е., оказываясь к нему ближе Нептуна, то удаляется на 49,3 а.е.
    Хаумеа - карликовая планета. Имеет сильно вытянутую форму и период вращения вокруг своей оси около 4 часов. Два спутника и ещё по крайней мере восемь транснептуновых объектов являются частью семейства Хаумеа, которое сформировалась миллиарды лет назад из ледяных осколков, после того как большое столкновение разрушило ледяную мантию Хаумеа. Орбита карликовой планеты обладает большим наклонением - 28°.
    Макемаке - первоначально обозначался как 2005 FY9, в 2008 году получил имя и был объявлен карликовой планетой. В настоящее время является вторым по видимой яркости в поясе Койпера после Плутона. Крупнейший из известных классических объектов пояса Койпера (не находящихся в подтверждённом резонансе с Нептуном). Имеет диаметр от 50 до 75 % диаметра Плутона, орбита наклонена на 29°, эксцентриситет около 0,16. У Макемаке открыт один спутник: S/2015 (136472) 1.
    Рассеянный диск - частично перекрывается с поясом Койпера, но простирается намного далее за его пределы и, как предполагают, является источником короткопериодических комет. Предполагают, что объекты рассеянного диска были выброшены на беспорядочные орбиты гравитационным влиянием Нептуна в период его миграции на ранней стадии формирования Солнечной системы: одна из концепций базируется на предположении о том, что Нептун и Уран сформировались ближе к Солнцу, чем они есть сейчас, а затем переместились на свои современные орбиты. Многие объекты рассеянного диска (SDO) имеют перигелий в пределах пояса Койпера, но их афелий может простираться до 150 а.е. от Солнца. Орбиты объектов также весьма наклонены к плоскости эклиптики и часто почти перпендикулярны ей. Некоторые астрономы полагают, что рассеянный диск — это область пояса Койпера, и описывают объекты рассеянного диска как «рассеянные объекты пояса Койпера». Некоторые же астрономы также классифицируют кентавры как рассеянные внутрь объекты пояса Койпера, наряду с рассеянными наружу объектами рассеянного диска.
    Эрида (68 а.е. в среднем) — крупнейший известный объект рассеянного диска. Так как её диаметр первоначально был оценён в 2400 км, то есть по крайней мере на 5 % больше, чем у Плутона, то её открытие породило споры о том, что именно следует называть планетой. Она является одной из крупнейших известных карликовых планет. У Эриды имеется один спутник — Дисномия. Как и у Плутона, её орбита является чрезвычайно вытянутой, с перигелием 38,2 а.е. (примерное расстояние Плутона от Солнца) и афелием 97,6 а.е.; и орбита сильно (44,177°) наклонена к плоскости эклиптики.
    Согласно общепринятой в настоящее время гипотезе, формирование Солнечной системы началось около 4,6 млрд лет назад с гравитационного сжатия небольшой части гигантского межзвёздного газопылевого облака. Это начальное облако было, вероятно, размером в несколько световых лет и являлось прародителем для нескольких звёзд.
    В процессе сжатия размеры газопылевого облака уменьшались и, в силу закона сохранения углового момента, росла скорость вращения облака. Центр, где собралась большая часть массы, становился всё более и более горячим, чем окружающий диск. Из-за вращения скорости сжатия облака параллельно и перпендикулярно оси вращения различались, что привело к уплощению облака и формированию характерного протопланетного диска диаметром примерно 200 а.е. и горячей, плотной протозвездой в центре. Полагается, что на этой стадии эволюции Солнце было звездой типа T Тельца. Изучение звёзд типа T Тельца показывают, что они часто окружены протопланетными дисками с массами 0,001—0,1 солнечной массы, с подавляющим процентом массы туманности, сосредоточенным непосредственно в звезде. Планеты сформировались путём аккреции из этого диска.
    В течение 50 млн лет давление и плотность водорода в центре протозвезды стали достаточно высокими для начала термоядерной реакции. Температура, скорость реакции, давление и плотность увеличивались, пока не было достигнуто гидростатическое равновесие с тепловой энергией, противостоящей силе гравитационного сжатия. На этом этапе Солнце стало полноценной звездой главной последовательности.
    Солнечная система, насколько известно сегодня, просуществует, пока Солнце не начнёт развиваться вне главной последовательности диаграммы Герцшпрунга — Рассела. Поскольку Солнце сжигает запасы водородного топлива, выделяющаяся энергия, поддерживающая ядро, имеет тенденцию к исчерпанию, заставляя Солнце сжиматься. Это увеличивает давление в его недрах и нагревает ядро, таким образом ускоряя сжигание топлива. В результате Солнце становится ярче примерно на десять процентов каждые 1,1 млрд лет, и станет ещё на 40 % ярче в течение следующих 3,5 млрд лет.
    Приблизительно через 7 млрд лет с настоящего времени водород в солнечном ядре будет полностью преобразован в гелий, что завершит фазу главной последовательности; Солнце станет субгигантом. Ещё через 600 млн лет внешние слои Солнца расширятся примерно в 260 раз по сравнению с нынешними размерами — Солнце перейдёт на стадию красного гиганта. Из-за чрезвычайно увеличившейся площади поверхности она будет гораздо более прохладной, чем при нахождении на главной последовательности (2600 К). Резко увеличившись, Солнце, как ожидается, поглотит ближайшие планеты Меркурий и Венеру. Земля, возможно, избежит поглощения внешними солнечными оболочками, но станет совершенно безжизненной, поскольку обитаемая зона сместится к внешним краям Солнечной системы.
    В конечном итоге, в результате развития термических неустойчивостей, внешние слои Солнца будут выброшены в окружающее пространство, образовав планетарную туманность, в центре которой останется лишь небольшое звёздное ядро — белый карлик, необычно плотный объект в половину первоначальной массы Солнца, но размером только с Землю. Эта туманность возвратит часть материала, который сформировал Солнце, в межзвёздную среду.
    Task:
    Методы измерения расстояний до небесных объектов. Суточный и годичный параллаксы.
    Task:
    Фазы Луны. Солнечные и лунные затмения.
    Decision:
    Фазы Луны - периодическое изменение вида освещённой Солнцем части Луны на земном небе. Фазы Луны постепенно и циклически меняются в течение периода синодического месяца (около 29,5306 средних солнечных суток), как и орбитальное положение Луны при движении вокруг Земли и движении Земли вокруг Солнца.
    Вращение Луны захвачено приливными силами Земли, поэтому бо́льшая часть одной и той же стороны Луны всегда обращена к Земле. Эта видимая сторона освещается Солнцем по-разному, в зависимости от положения Луны на орбите. Таким образом, освещённость этой лицевой стороны может варьироваться от 0 % (при новолунии) до 100 % (при полнолунии). Лунный терминатор — граница между освещённым и затенённым полушариями.
    Каждая из четырёх «промежуточных» фаз Луны насчитывает около 7,4 дня, но их продолжительность слегка меняется из-за эллиптической формы орбиты Луны. Кроме некоторых кратеров у лунных полюсов, наподобие Шумейкера, все части Луны получают около 14,77 земных суток дневного света, а затем 14,77 суток «ночи». Обратную от Земли сторону Луны иногда называют «тёмной стороной Луны», пусть это и неверное название, но означает оно скорее неизведанная, невидимая, а не неосвещённая.
    В западной культуре четырьмя основными фазами Луны являются новолуние, первая четверть, полнолуние и третья четверть (также называемая последней). В данных фазах долготы эклиптик Луны и Солнца отличаются на 0°, 90°, 180° и 270° соответственно Каждая из этих фаз происходит в несколько разное время при наблюдении из разных точек Земли. Во время промежутков между основными фазами освещённая часть Луны — либо в форме «серпа», либо «горба». Эти формы и периоды называются промежуточными фазами и длятся четверть синодического месяца, или, в среднем, 7,38 земных суток. Впрочем, их длительность несколько меняется, так как орбита Луны довольно эллиптична, почему орбитальная скорость спутника не постоянна. Описательное растущая используется для промежуточной фазы, во время которой видимая форма Луны увеличивается от новолуния до полнолуния, а убывающая— наоборот, когда её форма истончается.
    В незападных культурах может использоваться другое количество лунных фаз; например, в традиционной гавайской культуре насчитывается в общей сложности тридцать фаз (по одной на день).
    Когда Солнце и Луна располагаются на одной и той же стороне Земли, Луна находится в фазе новолуния, а её обращённая к Земле сторона не освещена Солнцем. По мере того, как Луна «растёт» (доля освещённой поверхности, видимой с Земли, увеличивается), она проходит через фазы новолуния, молодой луны, первой четверти, прибывающей луны и полнолуния. Затем, когда Луна «убывает», она проходит через фазы убывающей луны, последней четверти, старой луны и возвращается к фазе новолуния. Понятия «старая луна» и «новолуние» не взаимозаменяемы. «Старая луна» — это убывающий полумесяц (в конечном итоге становящийся не видным невооружённым глазом) до времени, когда Луна выравнивается с Солнцем и начинает расти, и тогда же снова становится новой. Термин «полулуние» изредка используется для обозначения первой и последней четвертей, тогда как «четверть» относится к степени круговорота Луны вокруг Земли, а не к её форме.
    Если освещённое полушарие наблюдать под определённым углом, видимая часть освещённой области будет иметь двумерную форму как определённое пересечение эллипса и круга (где большая полуось эллипса совпадает с диаметром окружности). Если полуэллипс выгнут относительно полукруга, месяц будет иметь форму горба, тогда как если полуэллипс будет вогнут относительно полукруг, то месяц будет в форме серпа. Когда возникает полумесяц, феномен пепельного света может быть очевиден, когда ночная сторона Луны смутно отражает отражённый от Земли косвенный солнечный свет.
    В русской фольклорной традиции сохранились архаичные названия отдельных временных промежутков между фазами (связанные с качеством самого месяца): «нов»/«млад»/«молод» — для молодого «серпа» (обстоятельство времени «на нове/молоде месяце» обозначает первые несколько дней после новолуния); «ветх» — для старого «серпа» (обстоятельство времени «на ветхе месяце»/«на ветху месяцу» обозначает несколько дней перед новолунием); «перекрой» и «перекройные дни» — для «горба» в первые несколько дней после полнолуния (обстоятельство времени «на перекрое»). В то же время встречается использование понятия «перекрой» в расширенном смысле — как всякое изменение фазы луны. Временной промежуток около самого полнолуния описывается архаичным обстоятельством времени «в месяце полне».
    Фазы (Новолуние, Первая четверть, Полнолуние, Последняя четверть) Пепельный свет, Солнечное затмение, Лунное затмение, Солнечное затмение на Луне, Прилив и отлив
    Солнечное затмение - астрономическое явление, которое заключается в том, что Луна закрывает (затмевает) полностью или частично Солнце от наблюдателя на Земле. Солнечное затмение возможно только в новолуние, когда сторона Луны, обращённая к Земле, не освещена, и сама Луна не видна. Затмения возможны, только если новолуние происходит вблизи одного из двух лунных узлов (точки пересечения видимых орбит Луны и Солнца), не далее, чем примерно в 12 градусах от одного из них.
    Ширина тени Луны на земной поверхности не превышает 270 км, поэтому солнечное затмение наблюдается только в узкой полосе на пути тени. Поскольку Луна обращается по эллиптической орбите, расстояние между Землёй и Луной в момент затмения может быть различным, соответственно, диаметр пятна лунной тени на поверхности Земли может варьироваться в широких пределах от максимального до нуля (когда вершина конуса лунной тени не достигает поверхности Земли). Если наблюдатель находится в полосе тени, он видит полное солнечное затмение, при котором Луна полностью скрывает Солнце, небо темнеет, и на нём могут появиться планеты и яркие звёзды. Вокруг скрытого Луной солнечного диска можно наблюдать солнечную корону, которая при обычном ярком свете Солнца не видна. Поскольку температура короны гораздо выше чем у фотосферы, она имеет блёкло-голубоватый цвет, неожиданный для тех, кто видит её первый раз, и сильно отличается от ожидаемого цвета Солнца. При наблюдении затмения неподвижным наземным наблюдателем полная фаза длится не более нескольких минут. Минимальная скорость движения лунной тени по земной поверхности составляет чуть более 1 км/с. Во время полного солнечного затмения космонавты, находящиеся на орбите, могут наблюдать на поверхности Земли бегущую тень от Луны.
    Наблюдатели, находящиеся вблизи полосы полного затмения, могут видеть его как частное солнечное затмение. При частном затмении Луна проходит по диску Солнца не точно по центру, скрывая только его часть. При этом небо темнеет гораздо слабее, чем при полном затмении, звёзды не появляются. Частное затмение может наблюдаться на расстоянии порядка двух тысяч километров от зоны полного затмения.
    Полнота солнечного затмения также выражается фазой Ф. Максимальная фаза частного затмения обычно выражается в сотых долях от единицы, где 1 — полная фаза затмения. Полная фаза может быть и больше единицы, например 1,01, если диаметр видимого лунного диска больше диаметра видимого солнечного диска. Частные фазы имеют значение меньше 1. На краю лунной полутени фаза равна 0.
    Момент, когда передний/задний край диска Луны касается края Солнца, называется касанием. Первое касание — момент, когда Луна вступает на диск Солнца (начало затмения, его частной фазы). Последнее касание (четвёртое в случае полного затмения) — это последний момент затмения, когда Луна сходит с диска Солнца. В случае полного затмения, второе касание — момент, когда передняя часть Луны, пройдя по всему Солнцу, начинает выходить с диска. Полное солнечное затмение происходит между вторым и третьим касаниями. Через 600 миллионов лет приливное ускорение отдалит Луну от Земли настолько, что полное солнечное затмение станет невозможно.
    Лунное затмение - затмение, которое наступает, когда Луна входит в конус тени от Земли. Диаметр пятна тени Земли на расстоянии 363 000 км (минимальное расстояние Луны от Земли) составляет около 2,6 диаметра Луны, поэтому Луна может быть затенена целиком. В каждый момент затмения степень покрытия диска Луны земной тенью выражается фазой затмения. Величина фазы Φ определяется расстоянием θ от центра Луны до центра тени. В астрономических календарях приводятся величины Φ и θ для разных моментов затмения.
    Когда Луна во время затмения полностью входит в тень Земли, говорят о полном лунном затмении, когда частично — о частном затмении. Когда Луна входит только в полутень Земли, говорят о частном полутеневом затмении. Необходимыми условиями наступления лунного затмения являются полнолуние и близость Луны к узлу её орбиты (то есть к точке, где орбита Луны пересекает плоскость эклиптики); лунное затмение происходит, когда выполняются одновременно оба эти условия.
    Схема лунного затмения:
    Task:
    Движение Солнца по небу. Эклиптика. Смена времен года.
    Source:
    https://videouroki.net/video/07-godichnoe-dvizhenie-solnca-po-nebu-ehkliptika.html
    https://spacegid.com/put-solntsa.html
    https://ru.wikipedia.org/wiki/%D0%A4%D0%B0%D0%B7%D1%8B_%D0%9B%D1%83%D0%BD%D1%8B
    https://ru.wikipedia.org/wiki/%D0%9B%D1%83%D0%BD%D0%BD%D0%BE%D0%B5_%D0%B7%D0%B0%D1%82%D0%BC%D0%B5%D0%BD%D0%B8%D0%B5
    https://pandia.ru/text/77/132/887.php
    https://azbukametalla.ru/entsiklopediya/p/841-parallaks.html
    https://ru.wikipedia.org/wiki/%D0%A1%D0%BE%D0%BB%D0%BD%D0%B5%D1%87%D0%BD%D0%B0%D1%8F_%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%B0
    https://geografiyazemli.ru/planeta-zemlya.html
    https://ru.wikipedia.org/wiki/%D0%A1%D1%82%D1%80%D0%BE%D0%B5%D0%BD%D0%B8%D0%B5_%D0%97%D0%B5%D0%BC%D0%BB%D0%B8
    https://ru.wikipedia.org/wiki/%D0%9D%D0%B5%D0%B9%D1%82%D1%80%D0%BE%D1%81%D1%84%D0%B5%D1%80%D0%B0
    https://ru.wikipedia.org/wiki/%D0%98%D0%BE%D0%BD%D0%BE%D1%81%D1%84%D0%B5%D1%80%D0%B0
    https://ru.wikipedia.org/wiki/%D0%9C%D0%B0%D0%B3%D0%BD%D0%B8%D1%82%D0%BE%D1%81%D1%84%D0%B5%D1%80%D0%B0
    https://ru.wikipedia.org/wiki/%D0%AD%D0%BA%D0%B7%D0%BE%D0%BF%D0%BB%D0%B0%D0%BD%D0%B5%D1%82%D0%B0
    https://ru.wikipedia.org/wiki/%D0%97%D0%B2%D0%B5%D0%B7%D0%B4%D0%B0
    http://www.astrotime.ru/charact.html
    https://student.zoomru.ru/kse/proishozhdenie-zvezd/140583.1078493.s1.html
    https://mostinfo.su/55-solnce-opisanie-interesnye-fakty-harakteristiki.html
    https://ru.wikipedia.org/wiki/%D0%A1%D0%BE%D0%BB%D0%BD%D0%B5%D1%87%D0%BD%D0%B0%D1%8F_%D0%BF%D0%BE%D1%81%D1%82%D0%BE%D1%8F%D0%BD%D0%BD%D0%B0%D1%8F
    https://www.polnaja-jenciklopedija.ru/vselennaja/stroenie-atmosfery-solntsa.html
    https://ru.wikipedia.org/wiki/%D0%A1%D0%BE%D0%BB%D0%BD%D0%B5%D1%87%D0%BD%D1%8B%D0%B9_%D0%B2%D0%B5%D1%82%D0%B5%D1%80
    https://sitekid.ru/astronomiya/solnce_mdash_centr_solnechnoj_sistemy.html
    https://ru.wikipedia.org/wiki/%D0%A1%D0%BE%D0%BB%D0%BD%D0%B5%D1%87%D0%BD%D0%B0%D1%8F_%D0%B2%D1%81%D0%BF%D1%8B%D1%88%D0%BA%D0%B0
    https://ru.wikipedia.org/wiki/%D0%9A%D0%BE%D1%80%D0%BE%D0%BD%D0%B0%D0%BB%D1%8C%D0%BD%D1%8B%D0%B5_%D0%B2%D1%8B%D0%B1%D1%80%D0%BE%D1%81%D1%8B_%D0%BC%D0%B0%D1%81%D1%81%D1%8B
    https://cosmosplanet.ru/galaktiki/galaktika.html
    https://studopedia.ru/27_52459_raspredelenie-galaktik-v-prostranstve.html
    https://ru.wikipedia.org/wiki/%D0%97%D0%B0%D0%BA%D0%BE%D0%BD_%D0%A5%D0%B0%D0%B1%D0%B1%D0%BB%D0%B0
    https://ru.wikipedia.org/wiki/%D0%A0%D0%B0%D1%81%D1%88%D0%B8%D1%80%D0%B5%D0%BD%D0%B8%D0%B5_%D0%92%D1%81%D0%B5%D0%BB%D0%B5%D0%BD%D0%BD%D0%BE%D0%B9

Docker
  Task:
  Building your own Apache image
  Decision:
  $ mkdir Apache
  $ cd Apache/
  $ vim Dockerfile
  $ cat Dockerfile
  FROM ubuntu:20.04
  MAINTAINER YOUR-USERNAME <YOUR-MAIL>
  ENV TZ=Asia/Irkutsk
  RUN apt-get -y update
  RUN apt-get install -y apache2 && apt-get clean
  COPY ./test.html /var/www/html
  EXPOSE 80
  CMD apache2ctl -D FOREGROUND
  $ docker build -t dd/apache:v1 .
  ...
  Configuring tzdata
  ------------------
  Please select the geographic area in which you live. Subsequent configuration
  questions will narrow this down by presenting a list of cities, representing
  the time zones in which they are located.
    1. Africa      4. Australia  7. Atlantic  10. Pacific  13. Etc
    2. America     5. Arctic     8. Europe    11. SystemV
    3. Antarctica  6. Asia       9. Indian    12. US
  Geographic area:
  $ vim Dockerfile
  $ cat Dockerfile
  FROM ubuntu:20.04
  MAINTAINER YOUR-USERNAME <YOUR-MAIL>
  ENV TZ=Asia/Irkutsk
  RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone
  RUN apt-get -y update
  RUN apt-get install -y apache2 && apt-get clean
  COPY ./test.html /var/www/html
  EXPOSE 80
  CMD apache2ctl -D FOREGROUND
  $ docker build -t dd/apache:v1 .
  ...
  Step 7/9 : COPY ./test.html /var/www/html
  COPY failed: file not found in build context or excluded by .dockerignore: stat test.html: file does not exist
  $ vim Dockerfile
  $ cat Dockerfile
  FROM ubuntu:20.04
  MAINTAINER YOUR-USERNAME <YOUR-MAIL>
  ENV TZ=Asia/Irkutsk
  RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone
  RUN apt-get -y update
  RUN apt-get install -y apache2 && apt-get clean
  #COPY ./test.html /var/www/html
  RUN echo 'Hey! This apache v1.' > /var/www/html/index.html
  EXPOSE 80
  CMD apache2ctl -D FOREGROUND
  $ docker build -t dt/apache:v1 .
  $ docker images
  REPOSITORY          TAG       IMAGE ID       CREATED          SIZE
  dt/apache   v1        YOUR-ID1   56 seconds ago   223MB
  $ docker run -d -p 8080:80 dt/apache:v1
  YOUR-ID3cdee5962fd52ca4be262696c9d1567e4c677cd409e77b39bcb4
    $ firefox http://localhost:8080 &
    $ firefox https://hub.docker.com &
    Registration - Add new Repository - webservers
  $ docker ps
  CONTAINER ID   IMAGE                  COMMAND                  CREATED              STATUS              PORTS                                   NAMES
  YOUR-ID   dt/apache:v1   "/bin/sh -c 'apache2…"   About a minute ago   Up About a minute   0.0.0.0:8080->80/tcp, :::8080->80/tcp   ecstatic_tesla
  $ docker stop YOUR-ID
  $ docker login --username dt
  $ docker ps -a
  CONTAINER ID   IMAGE                  COMMAND                  CREATED         STATUS                            PORTS     NAMES
  YOUR-ID   dt/apache:v1   "/bin/sh -c 'apache2…"   3 minutes ago   Exited (137) About a minute ago             ecstatic_tesla
  $ docker tag dt/apache:v1 dt/webapps:apache
  $ docker push dt/webapps:apache
  $ docker ps -a
  CONTAINER ID   IMAGE                  COMMAND                  CREATED          STATUS                        PORTS     NAMES
  YOUR-ID   dt/apache:v1   "/bin/sh -c 'apache2…"   12 minutes ago   Exited (137) 10 minutes ago             ecstatic_tesla
  $ docker images -a
  REPOSITORY           TAG       IMAGE ID       CREATED          SIZE
  dt/webapps   apache    YOUR-ID1   15 minutes ago   223MB
  dt/apache    v1        YOUR-ID1   15 minutes ago   223MB
  <none>               <none>    YOUR-ID2   15 minutes ago   223MB
    ...
  <none>               <none>    YOUR-ID3   22 minutes ago   72.8MB
  Task:
  Set up a LAMP server in Docker
  Here I am using Docker Compose to create a LAMP server for PHP web development.
  Decision:
  $ mkdir Lamp
  $ cd Lamp/
  $ mkdir html
  $ vim Dockerfile
  $ cat Dockerfile
  FROM php:7.4.3-apache
  RUN docker-php-ext-install mysqli pdo pdo_mysql
  $ vim docker-compose.yaml
  $ cat docker-compose.yaml
  version: "3.7"
  services:
    web-server:
      build:
        dockerfile: Dockerfile
        context: .
      restart: always
      volumes:
        - "./html/:/var/www/html/"
      ports:
        - "8080:80"
    YOUR-HOST:
      image: mysql:8.0.19
      restart: always
      environment:
        MYSQL_ROOT_PASSWORD: YOUR-PASSWORD
        TZ: "Asia/Irkutsk"
      volumes:
        - mysql-data:/var/lib/mysql
    phpmyadmin:
      image: phpmyadmin/phpmyadmin:5.0.2
      restart: always
      environment:
        PMA_HOST: YOUR-HOST
        PMA_USER: YOUR-USERNAME
        PMA_PASSWORD: YOUR-PASSWORD
      ports:
        - "5000:80"
  volumes:
    mysql-data:
  $ vim html/index.php
  $ cat html/index.php
  <?php
  $host = "YOUR-HOST";
  $user = "YOUR-USERNAME";
  $pass = "YOUR-PASSWORD";
  $db = "tdb";
  try {
      $conn = new PDO("mysql:host=$host;dbname=$db", $user, $pass);
      $conn->setAttribute(PDO::ATTR_ERr-tODE, PDO::ERr-tODE_EXCEPTION);
      echo "Connected successfully";
  } catch(PDOException $e) {
      echo "Connection failed: " . $e->getMessage();
  $ docker-compose up -d
  $ docker-compose ps
         Name                      Command               State                  Ports
  ---------------------------------------------------------------------------------------------------
  lamp_YOUR-HOST_1   docker-entrypoint.sh mysqld      Up      3306/tcp, 33060/tcp
  lamp_phpmyadmin_1     /docker-entrypoint.sh apac ...   Up      0.0.0.0:5000->80/tcp,:::5000->80/tcp
  lamp_web-server_1     docker-php-entrypoint apac ...   Up      0.0.0.0:8080->80/tcp,:::8080->80/tcp
    $ firefox http://localhost:5000 &
  Соединение невозможно! Неверные настройки
  $ docker-compose down -v
  ...
  ERROR: error while removing network: network lamp_default id YOUR-ID4 has active endpoints
  $ docker network r-t lamp_default
  Error response from daemon: error while removing network: network lamp_default id YOUR-ID4 has active endpoints
  $ docker-compose down --remove-orphans
  $ docker-compose up -d
  $ docker ps
  CONTAINER ID   IMAGE                         COMMAND                  CREATED          STATUS          PORTS                                   NAMES
  YOUR-ID5   phpmyadmin/phpmyadmin:5.0.2   "/docker-entrypoint.…"   19 seconds ago   Up 14 seconds   0.0.0.0:5000->80/tcp, :::5000->80/tcp   lamp_phpmyadmin_1
  YOUR-ID6   mysql:8.0.19                  "docker-entrypoint.s…"   19 seconds ago   Up 14 seconds   3306/tcp, 33060/tcp                     lamp_YOUR-HOST_1
  YOUR-ID7   lamp_web-server               "docker-php-entrypoi…"   19 seconds ago   Up 15 seconds   0.0.0.0:8080->80/tcp, :::8080->80/tcp   lamp_web-server_1
    $ firefox http://localhost:5000 &
  new - tdb - create - http://localhost:8080
  $ docker-compose down
  $ docker ps -a
  Task:
  Docker-compose.yml For PgAdmin And PostgreSQL
  Here I am using Docker Compose to create a PostgreSQL container and access it using pgAdmin 4, the PostgreSQL admin web interface. You also need to access the PostgreSQL database server running in a Docker container from the Datagrid IDE.
  Decision:
  $ mkdir PostgreslPgadmin
  $ cd PostgreslPgadmin/
  $ vim docker-compose.yml
  $ cat docker-compose.yml
  version: "2.3"
  services:
    demo-container-db:
      image: postgres:12
      mem_limit: 1536MB
      mem_reservation: 1G
      environment:
        POSTGRES_USER: YOUR-USERNAME
        POSTGRES_PASSWORD: YOUR-PASSWORD
      ports:
      - "5442:5432"
      networks:
      - TestNetwork
      volumes:
      - db-data:/var/lib/postgresql/data
    demo-pgadmin4:
      image: dpage/pgadmin4
      environment:
        PGADMIN_DEFAULT_EMAIL: YOUR-MAIL
        PGADMIN_DEFAULT_PASSWORD: YOUR-PASSWORD
      ports:
      - "8889:80"
      networks:
      - TestNetwork
  networks:
    TestNetwork:
      driver: bridge
  volumes:
    db-data:
  $ docker-compose up -d
  $ sudo netstat -tlpn
  Active Internet connections (only servers)
  Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
  tcp        0      0 0.0.0.0:5442            0.0.0.0:*               LISTEN      732/docker-proxy
  tcp        0      0 0.0.0.0:8889            0.0.0.0:*               LISTEN      752/docker-proxy
  tcp6       0      0 :::5442                 :::*                    LISTEN      739/docker-proxy
  tcp6       0      0 :::8889                 :::*                    LISTEN      759/docker-proxy
  $ docker images
  REPOSITORY              TAG            IMAGE ID       CREATED         SIZE
    ...
  dpage/pgadmin4          latest         YOUR-ID8   4 days ago      382MB
  postgres                12             YOUR-ID9   2 weeks ago     373MB
  $ docker container ls
  CONTAINER ID   IMAGE            COMMAND                  CREATED         STATUS         PORTS                                            NAMES
  YOUR-ID10   dpage/pgadmin4   "/entrypoint.sh"         3 minutes ago   Up 3 minutes   443/tcp, 0.0.0.0:8889->80/tcp, :::8889->80/tcp   postgreslpgadmin_demo-pgadmin4_1
  YOUR-ID11   postgres:12      "docker-entrypoint.s…"   3 minutes ago   Up 3 minutes   0.0.0.0:5442->5432/tcp, :::5442->5432/tcp        postgreslpgadmin_demo-container-db_1
  $ docker inspect YOUR-ID10
  ...
                      "NetworkID": "YOUR-ID12",
                      "EndpointID": "YOUR-ID13",
                      "Gateway": "YOUR-IP",
                      "IPAddress": "YOUR-IP1",
                      "IPPrefixLen": 16,
                      "IPv6Gateway": "",
                      "GlobalIPv6Address": "",
                      "GlobalIPv6PrefixLen": 0,
                      "MacAddress": "YOUR-MACIP1",
                      "DriverOpts": null
                  }
              }
          }
      }
  ]
    $ firefox http://localhost:8889 &
    Mail logins - Servers - register - server - name - TestServer - port - 5432 - username - YOUR-USERNAME - password - YOUR-PASSWORD - save password - hostname - YOUR-IP1 - save
  $ docker-compose down
  $ docker ps -a
  CONTAINER ID   IMAGE                    COMMAND                  CREATED             STATUS                           PORTS     NAMES
  YOUR-ID   dt/apache:v1     "/bin/sh -c 'apache2…"   About an hour ago   Exited (137) About an hour ago             ecstatic_tesla
  $ docker images -a
  REPOSITORY              TAG            IMAGE ID       CREATED             SIZE
    ...
  dpage/pgadmin4          latest         YOUR-ID8   4 days ago          382MB
  postgres                12             YOUR-ID9   2 weeks ago         373MB
  ubuntu                  20.04          20fffa419e3a   7 weeks ago         72.8MB
  Source:
    https://linuxhint.com/lamp_server_docker/
    https://www.youtube.com/playlist?list=PLTd7y0vdxhK643dY-Th-fQvyNP46eW7CU    
  https://linuxhint.com/postgresql_docker/
    https://www.youtube.com/playlist?list=PL7-fzhJ95xrPJUSzziEsymILf0bKusiLZ
  Task:
  Delete an image, container, and volume
  Decision:
  $ docker images
  $ docker system prune
  $ docker images
  REPOSITORY              TAG            IMAGE ID       CREATED         SIZE
  php                     latest         dc8b9808febc   13 hours ago    414MB
  dt/webservers   lamp           dc8b9808febc   13 hours ago    414MB
  lamp_web-server         latest         dc8b9808febc   13 hours ago    414MB
  dpage/pgadmin4          latest         YOUR-ID8   4 days ago      382MB
  postgres                12             YOUR-ID9   2 weeks ago     373MB
  ubuntu                  20.04          20fffa419e3a   7 weeks ago     72.8MB
  phpmyadmin/phpmyadmin   5.0.2          125749bd47bf   22 months ago   469MB
  mysql                   8.0.19         0c27e8e5fcfa   2 years ago     546MB
  php                     7.4.3-apache   d753d5b380a1   2 years ago     414MB
  $ docker system prune -a
  $ docker images
  $ docker ps -a
  $ docker volume ls
  DRIVER    VOLUME NAME
  local     YOUR-ID13
  local     YOUR-ID14
  local     YOUR-ID15
  local     YOUR-ID16
  local     YOUR-ID17
  local     docker-mysqlphpmyadmin_dbdata
  local     docker-postresqlpgadmin_db-data
  local     docker_db-data
  local     lamp_mysql-data
  local     postgreslpgadmin_db-data
  $ docker volume r-t YOUR-ID13 YOUR-ID14 YOUR-ID15 YOUR-ID16 YOUR-ID17 docker-mysqlphpmyadmin_dbdata docker-postresqlpgadmin_db-data docker_db-data lamp_mysql-data postgreslpgadmin_db-data
  $ docker volume ls
  Task:
  Создадим новый проект. Для этого создаем файл docker-compose.yml. В ссылке https://hub.docker.com/_/mariadb есть инструкция для compose - копируем и вставлем по этой инструкции. после в директории, где расположен этот файл запустим ее. Потом надо будет в браузере локальной машины запустить 127.0.0.1:6080
  Decision:
  $ ls
    docker-compose.yml  Dockerfile
  $ cat Dockerfile
  FROM ubuntu
  RUN apt-get update && apt-get install -y cowsay && ln -s /usr/games/cowsay /usr/bin/cowsay
  ENTRYPOINT ["cowsay"]
  $ cat docker-compose.yml
  version: '3.1'
  services:
    db:
      image: mariadb
      restart: always
      environment:
        MYSQL_ROOT_PASSWORD: YOUR-PASSWORD
    adminer:
      image: adminer
      restart: always
      ports:
        - 6080:8080
  $ docker -v
  $ docker-compose -v
  $ docker-compose up
  $ docker-compose up -d
    $ docker-compose ps
          Name                Command          State           Ports        
    ------------------------------------------------------------------------
    docker_adminer_1   entrypoint.sh docker-   Up      0.0.0.0:6080->8080/tc
                       php-e ...                       p,:::6080->8080/tcp  
    docker_db_1        docker-entrypoint.sh    Up      3306/tcp             
                       mysqld
    Decision:
  В винде тот же самый файл и те же команды запуска. Единственное, чтоб узнать ip адрес машины, для запуска в браузере напишем команду - docker-machine ip default. и в браузере уже по этому адресу запускаем проект



Добавил виртуальные машины, настроил виртуальные сети, распределил нагрузку между компонентами своей облачной системы и настроил автоматическое масштабирование веб-сервиса при неравномерной нагрузке
  Task:
  Set up SSH connection and file transfer using SCP.
  Decision:
  $ ls .ssh
  $ ssh-keygen -t rsa
  Generating publi-c/private rsa key pair.
  Enter file in whi-ch to save the key (/home/u/.ssh/id_rsa): ubalt
  Enter passphrase (empty for no passphrase):
  Enter same passphrase again:
  Your identifi-cation has been saved in ubalt
  Your publi-c key has been saved in ubalt.pub
  The key fingerprint is:
  SHA256:H tuser@thost1
  The key's randomart image is:
  +---[RSA 3072]----+
  |  .==..+.=*++ .o |
  ...
  |   .o            |
  +----[SHA256]-----+
  $ ls
   snap       'VirtualBox VMs'   Загрузки      Общедоступные
   ubalt       Видео             Изображения  'Рабочий стол'
   ubalt.pub   Документы         Музыка        Шаблоны
  $ ssh-copy-id -i ubalt.pub tuser@taddress
  /usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: "ubalt.pub"
  The authenti-city of host '1.-.9 (1.-.9)' can't be established.
  ED25519 key fingerprint is SHA256:v.
  This key is not known by any other names
  Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
  /usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed
  /usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys
  tuser@taddress's password:
  Number of key(s) added: 1
  Now try logging into the machine, with:   "ssh 'tuser@taddress'"
  and check to make sure that only the key(s) you wanted were added.
  $ cat ubalt.pub
  ssh-rsa A0/l/E/l/J= tuser@thost1
  $ ssh-agent bash
  $ ssh-add ubalt
  Enter passphrase for ubalt:
  Identity added: ubalt (tuser@thost1)
  $ ssh tuser@taddress
  $ cat .ssh/authorized_keys
  # OpenSSH authorized_keys file for-tat is described in sshd(8) manual page.
  ssh-rsa A0/l/E/l/J= tuser@thost1
  Decision:
  $ sudo ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key
  Generating publi-c/private dsa key pair.
  Enter passphrase (empty for no passphrase):
  Enter same passphrase again:
  Your identifi-cation has been saved in /etc/ssh/ssh_host_dsa_key
  Your publi-c key has been saved in /etc/ssh/ssh_host_dsa_key.pub
  The key fingerprint is:
  SHA256:lu4Mlc9dcmKNPriYzDMyGQsaG0/+c5+iyN9aEPL+/RQ root@i
  The key's randomart image is:
  +---[DSA 1024]----+
  |                 |
  ...
  |    oo=BX==..    |
  +----[SHA256]-----+
  $ ls -l /etc/ssh/ssh_host_dsa*
  -rw------- 1 root root 1434 авг  9 13:14 /etc/ssh/ssh_host_dsa_key
  -rw-r--r-- 1 root root  607 авг  9 13:14 /etc/ssh/ssh_host_dsa_key.pub
  $ ssh tuser@taddress
  $ exit
  Decision:
  $ ssh -X tuser@taddress
  $ nautilus
  -bash: nautilus: команда не найдена
  $ firefox
  Decision:
  $ touch test.txt
  $ scp test.txt tuser@taddress:/home/u
  test.txt                                      100%    0     0.0KB/s   00:00    
  $ ssh tuser@taddress
  $ ls -l te*
  -rw-r--r-- 1 user user 0 авг  9 13:26 test.txt
  $ exit
  Decision:
  $ ping ya.ru
  PING ya.ru (87.250.250.242) 56(84) bytes of data.
  64 bytes from ya.ru (87.250.250.242): i-cmp_seq=1 ttl=245 time=61.6 ms
  64 bytes from ya.ru (87.250.250.242): i-cmp_seq=2 ttl=245 time=61.5 ms
  64 bytes from ya.ru (87.250.250.242): i-cmp_seq=3 ttl=245 time=61.3 ms
  ^C
  --- ya.ru ping statisti-cs ---
  3 packets transmitted, 3 received, 0% packet loss, time 2002ms
  rtt min/avg/max/mdev = 61.325/61.461/61.602/0.113 ms
  $ ssh tuser@taddress -N -L 12345:87.250.250.242:80

  web - http://localhost:12345/
  Source:
  1.https://www.youtube.com/playlist?list=PLmxB7JSpraieH3aScuPs7h77cSEQvPi2A

Решение проблемы с резким переполнением базы в Firebird
  Task:
  Резкое переполнение базы в Firebird
  Ошибка после ввода пароля в ПИ СДП у всех пользователей - "Не отвечает программа"
     ВНЕШНЯЯБАЗА2.exe не работает
  На одном из объектов автоматизации второй раз за месяц происходит процесс переполнения внешней базы документооборота C:\ПУТЬКБАЗЕ\ВНЕШНЯЯБАЗА1.GDB. База данных увеличивается в размерах с 1.8 Гб до 115Гб за три дня. После проведения инженером филиала процедуры Бэкап/Рестор внешняя база возвращается к прежнему размеру. Данная проблема наблюдается второй раз за месяц с периодичностью в две недели.
  Task:
  Отключить службы Firebird, Сделать backup/restore базы ВНЕШНЯЯБАЗА1.GDB, запустив скрипты 
  1. backup.bat 
  2. restore.bat
  после чего сохранится файл ВНЕШНЯЯБАЗА1.GDB в КУДАСОХРАНЯТЬИЗМЕНЕНИЯ. Файл заменить на файл в сервере, который занимал 120 гб. Посмотреть лог файлы:
  1. retranslator.log
  2. retranslator_2022-01-11_15-23-40-694.log
  3. retranslator_2022-01-24_16-36-09-627.log
  4. retranslator_2022-01-24_16-36-16-806.log
  Decision:
  $ cat backup.bat
  @ echo on
  SET ISC_USER=ИМЯПОЛЬЗОВАТЕЛЯБАЗЫ
  SET ISC_PASSWORD=ПАРОЛЬКБАЗЕ
  SET dbpath=localhost:C:\ПУТЬКБАЗЕ\ВНЕШНЯЯБАЗА1.GDB
  SET fbpath=C:\ПУТЬFIREBIRD\Firebird_1_5\bin\
  SET bbpath=C:\КУДАСОХРАНЯТЬИЗМЕНЕНИЯ\
  "%fbpath%gfix" -shut -force 5 "%dbpath%"
  "%fbpath%gbak" -b -v -g -y "%bbpath%%date%.log" "%dbpath%" "%bbpath%ВНЕШНЯЯБАЗА1_%date%.gbk"
  @ pause
  $ cat restore.bat
  @ echo on
  SET ISC_USER=ИМЯПОЛЬЗОВАТЕЛЯБАЗЫ
  SET ISC_PASSWORD=ПАРОЛЬКБАЗЕ
  SET fbpath=C:\ПУТЬFIREBIRD\Firebird_1_5\bin\
  SET bbpath=localhost:C:\КУДАСОХРАНЯТЬИЗМЕНЕНИЯ\
  "%fbpath%gbak.exe" -c -v -r -y "c:\КУДАСОХРАНЯТЬИЗМЕНЕНИЯ\%date%_fix.log" "c:\КУДАСОХРАНЯТЬИЗМЕНЕНИЯ\ВНЕШНЯЯБАЗА1_backup.gbk" "%bbpath%ВНЕШНЯЯБАЗА1_fix.GDB" 
  @ pause
  $ cat retranslator.log
  ...
  INF|09.12.2022 16:27:36 Сообщения в очереди "viv.client.КОДОА.1" отсутствуют
  INF|09.12.2022 16:32:39 Отправка запроса id="ИДЕНТИФИКАТОРПРОЦЕССА1", type_id=ИДЕНТИФИКАТОРТИП ...
  ERR|09.12.2022 16:33:37 Out of memory.
      E.ClassName=EOutOfMemory
      Sender.ClassName=TWorkThread
  ...
  INF|11.12.2022 22:28:27 Отправка запроса id="ИДЕНТИФИКАТОРПРОЦЕССА2", type_id=ИДЕНТИФИКАТОРТИП ...
  ERR|11.12.2022 22:28:53 При отправке запроса id="ИДЕНТИФИКАТОРПРОЦЕССА2" произошла неустранимая ошибка чтения из БД, запрос отклонён. Текст ошибки:
      Unsuccessful execution caused by a system error that precludes
      successful execution of subsequent statements.
      I/O error for file "C:\ПУТЬКБАЗЕ\ВНЕШНЯЯБАЗА1.GDB".
      Error while trying to write to file.
      Недостаточно места на диске.
  ...
  Task:
  при обработке одного запроса id="ИДЕНТИФИКАТОРПРОЦЕССА1", type_id=ИДЕНТИФИКАТОРТИП происходит нехватка памяти, что далее приводит к сбою функционирования. Вероятно в запросе большое вложение. Для дальнейшего анализа смотрим БД ВНЕШНЯЯБАЗА2.gdb, в которой покажет технические ошибки состояния базы ВНЕШНЯЯБАЗА2.gdb.
  Для их устранения также сделать бэкап/ресторе БД ВНЕШНЯЯБАЗА2.gdb. Далее понаблюдать за ситуацией с размером БД ВНЕШНЯЯБАЗА2.GDB, чтобы он весил не больше 19 Гб.

